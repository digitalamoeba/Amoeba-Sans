{
.appVersion = "3134";
.formatVersion = 3;
DisplayStrings = (
"Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm Nn Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz
0123456789

AMOEBA
SANS
DIGITAL"
);
customParameters = (
{
name = vendorID;
value = ITFO;
},
{
name = panose;
value = (
0,
0,
10,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
15
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1254",
"1257",
"bit 29"
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
.null,
CR,
space,
dvR,
dvKx,
dvGx,
dvJx,
uni20A8,
uni20B9,
uni200C,
uni200D,
uni25CC,
dvEyelash,
dvRashtrasign,
dvKx_RA,
dvGx_RA,
dvJx_RA,
dvKx_R,
dvGx_R,
dvJx_R,
dvKx_KxA,
dvKx_TA,
dvKx_PHA,
dvKx_PHxA,
dvKx_BA,
dvKx_MA,
dvJx_JxA,
dvJx_YA,
dvEyelash_YA,
dvEyelash_HA,
dvmII.aLong,
dvmII_Anusvara,
dvmII_Reph,
dvmII_Reph_Anusvara,
dvmII_Anusvara.aLong,
dvmII_Reph.aLong,
dvmII_Reph_Anusvara.aLong,
dvmE_Anusvara,
dvmE_Reph,
dvmE_Reph_Anusvara,
dvmAI_Anusvara,
dvmAI_Reph,
dvmAI_Reph_Anusvara,
dvmO_Anusvara,
dvmO_Reph,
dvmO_Reph_Anusvara,
dvmAU_Anusvara,
dvmAU_Reph,
dvmAU_Reph_Anusvara,
dvmEcandra_Anusvara,
dvmOcandra_Anusvara,
dvRA_mU,
dvRA_mUU,
dvmI.a01,
dvmI.a02,
dvmI.a03,
dvmI.a04,
dvmI.a05,
dvmI.a06,
dvmI.a07,
dvmI.a08,
dvmI.a09,
dvmI.a10,
dvmI.a11,
dvmI.a12,
dvmI.a13,
dvmI.a14,
dvmI.a15,
dvmI.a16,
dvmI.a17,
dvmI.a18,
dvmI.a19,
dvmI.a20,
dvmI.a21,
dvmI.a22,
dvmI.a23,
dvmI.a24,
exclam,
quotedbl,
numbersign,
dollar,
percent,
ampersand,
quotesingle,
parenleft,
parenright,
asterisk,
plus,
comma,
hyphen,
period,
slash,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
colon,
semicolon,
less,
equal,
greater,
question,
at,
A,
B,
C,
D,
E,
F,
G,
H,
I,
J,
K,
L,
M,
N,
O,
P,
Q,
R,
S,
T,
U,
V,
W,
X,
Y,
Z,
bracketleft,
backslash,
bracketright,
asciicircum,
underscore,
grave,
a,
b,
c,
d,
e,
f,
g,
h,
i,
j,
k,
l,
m,
n,
o,
p,
q,
r,
s,
t,
u,
v,
w,
x,
y,
z,
braceleft,
bar,
braceright,
asciitilde,
uni00A0,
exclamdown,
cent,
sterling,
currency,
yen,
brokenbar,
section,
dieresis,
copyright,
ordfeminine,
guillemotleft,
logicalnot,
uni00AD,
registered,
macron,
degree,
plusminus,
uni00B2,
uni00B3,
acute,
uni00B5,
paragraph,
periodcentered,
cedilla,
uni00B9,
ordmasculine,
guillemotright,
onequarter,
onehalf,
threequarters,
questiondown,
Agrave,
Aacute,
Acircumflex,
Atilde,
Adieresis,
Aring,
AE,
Ccedilla,
Egrave,
Eacute,
Ecircumflex,
Edieresis,
Igrave,
Iacute,
Icircumflex,
Idieresis,
Eth,
Ntilde,
Ograve,
Oacute,
Ocircumflex,
Otilde,
Odieresis,
multiply,
Oslash,
Ugrave,
Uacute,
Ucircumflex,
Udieresis,
Yacute,
Thorn,
germandbls,
agrave,
aacute,
acircumflex,
atilde,
adieresis,
aring,
ae,
ccedilla,
egrave,
eacute,
ecircumflex,
edieresis,
igrave,
iacute,
icircumflex,
idieresis,
eth,
ntilde,
ograve,
oacute,
ocircumflex,
otilde,
odieresis,
divide,
oslash,
ugrave,
uacute,
ucircumflex,
udieresis,
yacute,
thorn,
ydieresis,
Amacron,
amacron,
Abreve,
abreve,
Aogonek,
aogonek,
Cacute,
cacute,
Cdotaccent,
cdotaccent,
Ccaron,
ccaron,
Dcaron,
dcaron,
Dcroat,
dcroat,
Emacron,
emacron,
Ebreve,
ebreve,
Edotaccent,
edotaccent,
Eogonek,
eogonek,
Ecaron,
ecaron,
Gbreve,
gbreve,
Gdotaccent,
gdotaccent,
uni0122,
uni0123,
Itilde,
itilde,
Imacron,
imacron,
uni012C,
uni012D,
Iogonek,
iogonek,
Idotaccent,
dotlessi,
uni0136,
uni0137,
Lacute,
lacute,
uni013B,
uni013C,
Lcaron,
lcaron,
Ldot,
ldot,
Lslash,
lslash,
Nacute,
nacute,
uni0145,
uni0146,
Ncaron,
ncaron,
Omacron,
omacron,
uni014E,
uni014F,
Ohungarumlaut,
ohungarumlaut,
OE,
oe,
Racute,
racute,
uni0156,
uni0157,
Rcaron,
rcaron,
Sacute,
sacute,
uni015E,
uni015F,
Scaron,
scaron,
uni0162,
uni0163,
Tcaron,
tcaron,
Utilde,
utilde,
Umacron,
umacron,
Ubreve,
ubreve,
Uring,
uring,
Uhungarumlaut,
uhungarumlaut,
Uogonek,
uogonek,
Wcircumflex,
wcircumflex,
Ycircumflex,
ycircumflex,
Ydieresis,
Zacute,
zacute,
Zdotaccent,
zdotaccent,
Zcaron,
zcaron,
uni018F,
florin,
uni01FC,
uni01FD,
uni0218,
uni0219,
uni021A,
uni021B,
uni0259,
uni02BC,
circumflex,
caron,
uni02C9,
breve,
dotaccent,
ring,
ogonek,
tilde,
hungarumlaut,
Wgrave,
wgrave,
Wacute,
wacute,
Wdieresis,
wdieresis,
uni1EBC,
uni1EBD,
Ygrave,
ygrave,
uni1EF8,
uni1EF9,
endash,
emdash,
quoteleft,
quoteright,
quotesinglbase,
quotedblleft,
quotedblright,
quotedblbase,
dagger,
daggerdbl,
bullet,
ellipsis,
perthousand,
guilsinglleft,
guilsinglright,
fraction,
Euro,
uni20BA,
uni20BD,
uni2113,
trademark,
uni2126,
estimated,
partialdiff,
uni2206,
product,
summation,
minus,
uni2215,
uni2219,
radical,
infinity,
integral,
approxequal,
notequal,
lessequal,
greaterequal,
lozenge,
fi,
fl,
exclam.ss01,
comma.ss01,
period.ss01,
colon.ss01,
semicolon.ss01,
question.ss01,
exclamdown.ss01,
periodcentered.ss01,
questiondown.ss01,
divide.ss01,
uni02BC.ss01,
quoteleft.ss01,
quoteright.ss01,
quotedblleft.ss01,
quotedblright.ss01,
ellipsis.ss01,
a.ss02,
aacute.ss02,
abreve.ss02,
acircumflex.ss02,
adieresis.ss02,
agrave.ss02,
amacron.ss02,
aogonek.ss02,
aring.ss02,
atilde.ss02,
ampersand.ss03,
two.ss04,
three.ss04,
six.ss04,
nine.ss04
);
}
);
date = "2017-12-22 01:47:54 +0000";
familyName = "Amoeba Sans";
featurePrefixes = (
{
code = "lookup SUB_0 {
	sub L periodcentered by Ldot;
	sub l periodcentered by ldot;
} SUB_0;
lookup SUB_1 {
	sub A by ordfeminine;
	sub O by ordmasculine;
	sub a by ordfeminine;
	sub o by ordmasculine;
} SUB_1;
";
name = Prefix;
}
);
features = (
{
code = "script DFLT;
language dflt;
lookup SUB_2 {
	sub exclam by exclam.ss01;
	sub comma by comma.ss01;
	sub period by period.ss01;
	sub colon by colon.ss01;
	sub semicolon by semicolon.ss01;
	sub question by question.ss01;
	sub exclamdown by exclamdown.ss01;
	sub periodcentered by periodcentered.ss01;
	sub questiondown by questiondown.ss01;
	sub divide by divide.ss01;
	sub quoteleft by quoteleft.ss01;
	sub quoteright by quoteright.ss01;
	sub quotedblleft by quotedblleft.ss01;
	sub quotedblright by quotedblright.ss01;
	sub ellipsis by ellipsis.ss01;
} SUB_2;
script dev2;
language dflt;
lookup SUB_2;
script deva;
language dflt;
lookup SUB_2;
";
tag = ss01;
},
{
code = "script DFLT;
language dflt;
lookup SUB_3 {
	sub a by a.ss02;
	sub agrave by agrave.ss02;
	sub aacute by aacute.ss02;
	sub acircumflex by acircumflex.ss02;
	sub atilde by atilde.ss02;
	sub adieresis by adieresis.ss02;
	sub aring by aring.ss02;
	sub amacron by amacron.ss02;
	sub abreve by abreve.ss02;
	sub aogonek by aogonek.ss02;
} SUB_3;
script dev2;
language dflt;
lookup SUB_3;
script deva;
language dflt;
lookup SUB_3;
";
tag = ss02;
},
{
code = "script DFLT;
language dflt;
lookup SUB_4 {
	sub ampersand by ampersand.ss03;
} SUB_4;
script dev2;
language dflt;
lookup SUB_4;
script deva;
language dflt;
lookup SUB_4;
";
tag = ss03;
},
{
code = "script DFLT;
language dflt;
lookup SUB_5 {
	sub two by two.ss04;
	sub three by three.ss04;
	sub six by six.ss04;
	sub nine by nine.ss04;
} SUB_5;
script dev2;
language dflt;
lookup SUB_5;
script deva;
language dflt;
lookup SUB_5;
";
tag = ss04;
},
{
code = "script DFLT;
language dflt;
lookup SUB_6 {
	sub fi by f i;
	sub fl by f l;
} SUB_6;
script dev2;
language dflt;
lookup SUB_6;
script deva;
language dflt;
lookup SUB_6;
script latn;
language dflt;
lookup SUB_6;
language CAT;
lookup SUB_6;
";
tag = ccmp;
},
{
code = "script latn;
language CAT;
lookup SUB_7 {
	sub L' lookup SUB_0 periodcentered' L;
	sub l' lookup SUB_0 periodcentered' l;
} SUB_7;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_8 {
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
} SUB_8;
script dev2;
language dflt;
lookup SUB_8;
script deva;
language dflt;
lookup SUB_8;
script latn;
language dflt;
lookup SUB_8;
language CAT;
lookup SUB_8;
";
tag = sups;
},
{
code = "script DFLT;
language dflt;
lookup SUB_9 {
	sub one slash two by onehalf;
	sub one slash four by onequarter;
	sub three slash four by threequarters;
} SUB_9;
script dev2;
language dflt;
lookup SUB_9;
script deva;
language dflt;
lookup SUB_9;
script latn;
language dflt;
lookup SUB_9;
language CAT;
lookup SUB_9;
";
tag = frac;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	@SUB_10_0_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_10_0_BT_0 [A a]' lookup SUB_1;
	@SUB_10_1_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_10_1_BT_0 [O o]' lookup SUB_1;
} SUB_10;
script dev2;
language dflt;
lookup SUB_10;
script deva;
language dflt;
lookup SUB_10;
script latn;
language dflt;
lookup SUB_10;
language CAT;
lookup SUB_10;
";
tag = ordn;
},
{
code = "script DFLT;
language dflt;
lookup SUB_11 {
	sub f i by fi;
	sub f l by fl;
} SUB_11;
script dev2;
language dflt;
lookup SUB_11;
script deva;
language dflt;
lookup SUB_11;
script latn;
language dflt;
lookup SUB_11;
language CAT;
lookup SUB_11;
";
tag = liga;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 1050;
},
{
name = typoDescender;
value = -350;
},
{
name = typoLineGap;
value = 100;
},
{
name = winAscent;
value = 1135;
},
{
name = winDescent;
value = 627;
},
{
name = hheaAscender;
value = 1050;
},
{
name = hheaDescender;
value = -350;
},
{
name = strikeoutPosition;
value = 338;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 5 values pushed */\0120 37 0 3 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01242 4 26 8 18 4 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01246 2 34 6 22 2 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 10 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\0122752 1728 1216 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 13 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\01264 64 64 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01244 2 28 6 20 2 3 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    24,\012    24,\012    24,\012    24,\012    540,\012    \"-9\",\012    540,\012    \"-9\",\012    225,\012    225,\012    192,\012    192,\012    708,\012    0,\012    740,\012    564,\012    0,\012    \"-270\",\012    720,\012    \"-7\",\012    829,\012    571,\012    \"-7\",\012    \"-277\",\012    24,\012    24,\012    24,\012    24,\012    717,\012    352,\012    717,\012    349\012)";
}
);
id = m01;
metricValues = (
{
pos = 1050;
},
{
pos = 713;
},
{
pos = 564;
},
{
},
{
pos = -350;
},
{
}
);
name = Black;
userData = {
GSCornerRadius = 15;
GSOffsetHorizontal = 5;
GSOffsetKeepCompatible = 1;
GSOffsetVertical = 0;
};
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,0,l),
(500,0,l),
(500,700,l),
(0,700,l)
);
},
{
closed = 1;
nodes = (
(50,605,l),
(220,350,l),
(50,95,l)
);
},
{
closed = 1;
nodes = (
(250,305,l),
(420,50,l),
(80,50,l)
);
},
{
closed = 1;
nodes = (
(420,650,l),
(250,395,l),
(80,650,l)
);
},
{
closed = 1;
nodes = (
(450,605,l),
(450,95,l),
(280,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
15 14 13 8 6 5 6 2 3 1 76 4 1 1 0 3 2 1 3 103 5 1 2 0 0 2 87 5 1 2 2 0 95 0 0 2 0 79 7 7 0 0 12 11 7 9 7 9 0 3 0 3 17 6 6 23 
CALL[ ]	/* CallFunction */";
};
width = 500;
}
);
note = ".notdef";
},
{
glyphname = .null;
layers = (
{
layerId = m01;
width = 0;
}
);
note = ".null";
unicode = 0;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 170;
}
);
note = CR;
unicode = 13;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 170;
}
);
note = space;
unicode = 32;
},
{
glyphname = dvR;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(299,-291,l),
(506,-291,l),
(367,-53,l),
(165,-53,l)
);
},
{
closed = 1;
nodes = (
(-11,571,l),
(272,571,l),
(272,545,ls),
(272,493,o),
(220,438,o),
(148,438,qs),
(50,438,l),
(50,209,ls),
(50,147,o),
(104,48,o),
(209,-9,o),
(283,-9,qs),
(386,-9,o),
(501,107,o),
(501,206,qs),
(500,232,l),
(305,232,l),
(305,199,ls),
(305,184,o),
(292,164,o),
(279,164,qs),
(252,164,o),
(252,199,qs),
(252,276,l),
(377,283,o),
(476,427,o),
(476,545,qs),
(476,571,l),
(539,571,l),
(539,740,l),
(-11,740,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 7 2 3 2 7 3 128 0 3 5 2 3 5 126 0 5 4 4 5 112 11 1 9 8 1 2 7 9 2 103 0 4 0 6 1 4 6 106 10 1 1 0 0 1 87 10 1 1 1 0 95 0 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 7 2 3 2 7 3 128 0 3 5 2 3 5 126 0 5 4 2 5 4 126 11 1 9 8 1 2 7 9 2 103 0 4 0 6 1 4 6 106 10 1 1 0 0 1 87 10 1 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
4 4 0 0 4 34 4 34 33 32 29 27 23 21 18 17 14 12 10 9 6 5 0 3 0 3 17 12 6 23 
CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
note = dvR;
},
{
glyphname = dvKx;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(580,0,l),
(580,267,ls),
(580,302,o),
(611,340,o),
(639,340,qs),
(668,340,o),
(697,304,o),
(697,278,q),
(904,278,l),
(904,344,o),
(859,450,o),
(770,513,o),
(706,513,qs),
(624,513,o),
(580,461,q),
(580,571,l),
(904,571,l),
(904,740,l),
(-11,740,l),
(-11,571,l),
(384,571,l),
(384,461,l),
(340,513,o),
(252,513,qs),
(152,513,o),
(42,384,o),
(42,278,qs),
(42,210,o),
(90,104,o),
(181,43,o),
(244,43,qs),
(337,43,o),
(384,100,q),
(384,0,l)
);
},
{
closed = 1;
nodes = (
(265,-227,o),
(331,-162,o),
(331,-115,qs),
(331,-67,o),
(265,0,o),
(217,0,qs),
(170,0,o),
(104,-67,o),
(104,-115,qs),
(104,-162,o),
(170,-227,o),
(217,-227,qs)
);
},
{
closed = 1;
nodes = (
(285,214,o),
(249,249,o),
(249,277,qs),
(249,305,o),
(287,341,o),
(317,341,qs),
(347,341,o),
(383,307,o),
(384,279,qs),
(384,251,o),
(345,214,o),
(316,214,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
18 11 2 7 1 0 1 0 12 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 6 7 12 7 6 114 0 8 0 9 0 8 9 128 0 3 4 1 2 1 3 2 103 5 1 1 11 1 7 6 1 7 105 14 1 12 0 0 8 12 0 105 0 9 10 10 9 89 0 9 9 10 97 13 1 10 9 10 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
0 6 7 12 7 6 12 128 0 8 0 9 0 8 9 128 0 3 4 1 2 1 3 2 103 5 1 1 11 1 7 6 1 7 105 14 1 12 0 0 8 12 0 105 0 9 10 10 9 89 0 9 9 10 97 13 1 10 9 10 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
46 46 34 34 46 57 46 56 52 50 34 45 34 44 40 38 19 34 19 34 17 17 18 37 33 15 6 31 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = dvKx;
},
{
glyphname = dvGx;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-11,571,l),
(292,571,l),
(292,364,ls),
(292,339,o),
(279,308,o),
(260,308,qs),
(241,308,o),
(226,337,o),
(226,364,qs),
(226,396,l),
(29,396,l),
(28,385,o),
(28,363,qs),
(28,250,o),
(153,135,o),
(266,135,qs),
(381,135,o),
(496,265,o),
(496,373,qs),
(496,571,l),
(599,571,l),
(599,740,l),
(-11,740,l)
);
},
{
closed = 1;
nodes = (
(313,-135,o),
(379,-70,o),
(379,-23,qs),
(379,25,o),
(313,92,o),
(265,92,qs),
(218,92,o),
(152,25,o),
(152,-23,qs),
(152,-70,o),
(218,-135,o),
(265,-135,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
0 2 0 3 0 2 3 128 8 1 5 4 1 0 2 5 0 103 0 3 0 1 6 3 1 105 0 6 7 7 6 89 0 6 6 7 97 9 1 7 6 7 81 23 23 0 0 23 34 23 33 29 27 0 22 0 22 19 35 20 35 17 10 6 27 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = dvGx;
},
{
glyphname = dvJx;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,80,o),
(472,138,o),
(532,241,o),
(535,308,q),
(712,308,l),
(712,481,l),
(336,481,l),
(336,325,ls),
(336,258,o),
(290,258,qs),
(242,258,o),
(242,325,qs),
(242,481,l),
(37,481,l),
(37,319,ls),
(37,210,o),
(167,80,o),
(290,80,qs)
);
},
{
closed = 1;
nodes = (
(-11,571,l),
(712,571,l),
(712,740,l),
(-11,740,l)
);
},
{
closed = 1;
nodes = (
(337,-189,o),
(403,-124,o),
(403,-77,qs),
(403,-29,o),
(337,38,o),
(289,38,qs),
(242,38,o),
(176,-29,o),
(176,-77,qs),
(176,-124,o),
(242,-189,o),
(289,-189,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
10 1 6 0 5 0 6 5 103 2 1 0 0 3 1 0 3 103 0 1 9 1 4 7 1 4 105 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81 22 22 18 18 0 0 22 33 22 32 28 26 18 21 18 21 20 19 0 17 0 16 17 18 34 19 12 6 26 
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = dvJx;
},
{
glyphname = uni20A8;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(424,431,o),
(392,402,o),
(360,402,qs),
(272,402,l),
(272,522,l),
(360,522,ls),
(391,522,o),
(424,490,o),
(424,462,qs)
);
},
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,254,l),
(406,0,l),
(650,0,l),
(496,271,l),
(570,295,o),
(649,405,o),
(649,476,qs),
(649,542,o),
(588,647,o),
(466,708,o),
(380,708,qs),
(50,708,l)
);
},
{
closed = 1;
nodes = (
(674,331,o),
(745,260,o),
(840,230,o),
(909,219,qs),
(963,209,o),
(1008,194,o),
(1008,178,qs),
(1008,156,o),
(969,156,qs),
(902,156,o),
(897,195,q),
(680,195,l),
(696,97,o),
(848,-7,o),
(972,-7,qs),
(1046,-7,o),
(1153,40,o),
(1208,122,o),
(1208,173,qs),
(1208,233,o),
(1135,304,o),
(1037,334,o),
(967,346,qs),
(914,356,o),
(870,370,o),
(870,385,qs),
(870,407,o),
(914,407,qs),
(975,407,o),
(985,369,q),
(1202,369,l),
(1184,460,o),
(1040,571,o),
(917,571,qs),
(840,571,o),
(730,523,o),
(674,442,o),
(674,393,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 16 2 9 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 1 7 6 7 1 6 128 0 6 9 7 6 112 0 9 10 10 9 112 0 0 0 2 95 11 1 2 2 28 77 0 7 7 5 97 0 5 5 37 77 0 10 10 3 96 8 4 2 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 1 7 6 7 1 6 128 0 6 9 7 6 9 126 0 9 10 7 9 10 126 0 0 0 2 95 11 1 2 2 28 77 0 7 7 5 97 0 5 5 37 77 0 10 10 3 96 8 4 2 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
0 1 7 6 7 1 6 128 0 6 9 7 6 9 126 0 9 10 7 9 10 126 0 0 0 2 95 11 1 2 2 28 77 0 7 7 5 97 0 5 5 37 77 4 1 3 3 29 77 0 10 10 8 98 0 8 8 35 8 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
10 9 52 50 49 48 46 44 33 31 30 29 27 25 21 20 18 17 9 22 10 22 33 33 12 8 24 
CALL[ ]	/* CallFunction */";
};
width = 1229;
}
);
note = uni20A8;
unicode = 8360;
},
{
glyphname = uni20B9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,563,l),
(282,563,l),
(282,530,l),
(30,530,l),
(30,406,l),
(276,406,l),
(268,387,o),
(220,370,o),
(127,365,o),
(30,365,q),
(30,242,ls),
(30,111,o),
(159,-10,o),
(281,-10,qs),
(389,-10,o),
(503,110,o),
(509,211,q),
(304,211,l),
(304,180,o),
(290,155,o),
(271,155,qs),
(252,155,o),
(237,180,o),
(237,204,qs),
(237,223,l),
(344,223,o),
(468,325,o),
(484,406,q),
(547,406,l),
(547,530,l),
(489,530,l),
(489,563,l),
(547,563,l),
(547,708,l),
(30,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 5 4 3 4 5 117 0 3 7 4 3 7 129 0 7 2 4 7 2 129 10 1 0 12 1 11 0 11 99 0 4 4 6 97 0 6 6 21 77 8 1 2 2 1 95 9 1 1 1 20 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 5 4 3 4 5 3 131 0 3 7 4 3 7 129 0 7 2 4 7 2 129 10 1 0 12 1 11 0 11 99 0 4 4 6 97 0 6 6 21 77 8 1 2 2 1 95 9 1 1 1 20 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 5 4 3 4 5 3 131 0 3 7 4 3 7 129 0 7 2 4 7 2 129 8 1 2 9 1 1 0 2 1 107 10 1 0 12 1 11 0 11 99 0 4 4 6 97 0 6 6 21 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 34 0 34 33 32 31 30 18 35 34 18 35 18 17 17 17 13 7 31 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = uni20B9;
unicode = 8377;
},
{
glyphname = uni200C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(24,-230,l),
(24,811,l),
(-23,811,l),
(-23,-230,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni200C;
unicode = 8204;
},
{
glyphname = uni200D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,593,l),
(32,688,l),
(128,784,l),
(96,816,l),
(0,721,l),
(-95,816,l),
(-128,783,l),
(-33,688,l),
(-126,595,l),
(-93,562,l),
(-24,635,l),
(-24,-230,l),
(23,-230,l),
(23,635,l),
(95,560,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
14 13 12 11 10 9 8 7 6 5 4 3 0 13 0 74 0 0 0 118 17 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni200D;
unicode = 8205;
},
{
glyphname = uni25CC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,428,o),
(533,451,o),
(514,451,qs),
(495,451,o),
(471,428,o),
(471,409,qs),
(471,390,o),
(495,367,o),
(514,367,qs),
(533,367,o),
(557,390,o),
(557,409,qs)
);
},
{
closed = 1;
nodes = (
(181,142,o),
(157,165,o),
(138,165,qs),
(119,165,o),
(95,142,o),
(95,123,qs),
(95,104,o),
(119,81,o),
(138,81,qs),
(157,81,o),
(181,104,o),
(181,123,qs)
);
},
{
closed = 1;
nodes = (
(279,66,o),
(255,89,o),
(236,89,qs),
(217,89,o),
(193,66,o),
(193,47,qs),
(193,28,o),
(217,5,o),
(236,5,qs),
(255,5,o),
(279,28,o),
(279,47,qs)
);
},
{
closed = 1;
nodes = (
(136,255,o),
(112,278,o),
(93,278,qs),
(74,278,o),
(50,255,o),
(50,236,qs),
(50,217,o),
(74,194,o),
(93,194,qs),
(112,194,o),
(136,217,o),
(136,236,qs)
);
},
{
closed = 1;
nodes = (
(403,52,o),
(379,75,o),
(360,75,qs),
(341,75,o),
(317,52,o),
(317,33,qs),
(317,14,o),
(341,-9,o),
(360,-9,qs),
(379,-9,o),
(403,14,o),
(403,33,qs)
);
},
{
closed = 1;
nodes = (
(151,376,o),
(127,399,o),
(108,399,qs),
(89,399,o),
(65,376,o),
(65,357,qs),
(65,338,o),
(89,315,o),
(108,315,qs),
(127,315,o),
(151,338,o),
(151,357,qs)
);
},
{
closed = 1;
nodes = (
(518,98,o),
(494,121,o),
(475,121,qs),
(456,121,o),
(432,98,o),
(432,79,qs),
(432,60,o),
(456,37,o),
(475,37,qs),
(494,37,o),
(518,60,o),
(518,79,qs)
);
},
{
closed = 1;
nodes = (
(227,475,o),
(203,498,o),
(184,498,qs),
(165,498,o),
(141,475,o),
(141,456,qs),
(141,437,o),
(165,414,o),
(184,414,qs),
(203,414,o),
(227,437,o),
(227,456,qs)
);
},
{
closed = 1;
nodes = (
(591,194,o),
(567,217,o),
(548,217,qs),
(529,217,o),
(505,194,o),
(505,175,qs),
(505,156,o),
(529,133,o),
(548,133,qs),
(567,133,o),
(591,156,o),
(591,175,qs)
);
},
{
closed = 1;
nodes = (
(344,517,o),
(320,540,o),
(301,540,qs),
(282,540,o),
(258,517,o),
(258,498,qs),
(258,479,o),
(282,456,o),
(301,456,qs),
(320,456,o),
(344,479,o),
(344,498,qs)
);
},
{
closed = 1;
nodes = (
(601,314,o),
(577,337,o),
(558,337,qs),
(539,337,o),
(515,314,o),
(515,295,qs),
(515,276,o),
(539,253,o),
(558,253,qs),
(577,253,o),
(601,276,o),
(601,295,qs)
);
},
{
closed = 1;
nodes = (
(465,502,o),
(441,525,o),
(422,525,qs),
(403,525,o),
(379,502,o),
(379,483,qs),
(379,464,o),
(403,441,o),
(422,441,qs),
(441,441,o),
(465,464,o),
(465,483,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 146 values pushed */
0 19 0 18 1 19 18 105 0 23 0 22 14 23 22 105 0 15 0 14 11 15 14 105 0 1 0 0 21 1 0 105 0 11 0 10 7 11 10 105 0 21 0 20 17 21 20 105 0 7 0 6 3 7 6 105 0 17 0 16 13 17 16 105 0 3 0 2 9 3 2 105 0 9 12 8 9 89 0 13 0 12 4 13 12 105 0 5 0 4 8 5 4 105 0 9 9 8 97 0 8 9 8 81 141 139 135 133 129 127 123 121 117 115 111 109 105 103 99 97 93 91 87 85 81 79 75 73 69 67 63 61 57 55 36 36 36 36 36 36 36 36 33 24 6 31 
CALL[ ]	/* CallFunction */";
};
width = 651;
}
);
note = uni25CC;
unicode = 9676;
},
{
glyphname = dvEyelash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(366,403,o),
(317,403,qs),
(277,403,o),
(227,444,o),
(223,488,q),
(29,488,l),
(34,369,o),
(179,258,o),
(288,258,qs),
(344,258,o),
(451,291,o),
(490,319,q),
(410,428,l)
);
},
{
closed = 1;
nodes = (
(-11,571,l),
(491,571,l),
(491,740,l),
(-11,740,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
12 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 1 3 2 2 1 114 5 1 4 0 3 1 4 3 103 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 3 2 3 1 2 128 5 1 4 0 3 1 4 3 103 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
13 13 13 16 13 16 19 34 18 34 6 6 26 
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = dvEyelash;
},
{
glyphname = dvRashtrasign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-626,-97,l),
(-422,-97,l),
(-358,1,l),
(-293,-97,l),
(-88,-97,l),
(-222,82,l),
(-493,82,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
3 1 0 2 1 76 3 1 2 0 0 2 87 3 1 2 2 0 95 1 1 0 2 0 79 0 0 0 6 0 6 18 17 4 6 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvRashtrasign;
},
{
glyphname = dvKx_RA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(481,0,l),
(676,0,l),
(676,267,l),
(679,301,o),
(709,340,o),
(736,340,qs),
(765,340,o),
(794,304,o),
(794,278,qs),
(794,252,o),
(764,221,o),
(740,221,qs),
(732,221,o),
(724,223,q),
(724,65,l),
(760,56,o),
(796,56,qs),
(856,56,o),
(949,110,o),
(1001,213,o),
(1001,283,qs),
(1001,346,o),
(956,451,o),
(866,513,o),
(802,513,qs),
(720,513,o),
(676,461,q),
(676,571,l),
(1054,571,l),
(1054,740,l),
(-11,740,l),
(-11,571,l),
(481,571,l),
(481,461,l),
(437,513,o),
(349,513,qs),
(249,513,o),
(139,384,o),
(139,278,qs),
(139,210,o),
(200,105,o),
(254,80,q),
(150,-46,l),
(368,-46,l),
(481,111,l)
);
},
{
closed = 1;
nodes = (
(108,-25,o),
(162,29,o),
(162,67,qs),
(162,106,o),
(108,161,o),
(68,161,qs),
(29,161,o),
(-25,106,o),
(-25,67,qs),
(-25,29,o),
(29,-25,o),
(68,-25,qs)
);
},
{
closed = 1;
nodes = (
(382,214,o),
(346,249,o),
(346,277,qs),
(346,305,o),
(383,341,o),
(414,341,qs),
(444,341,o),
(480,307,o),
(481,279,qs),
(481,251,o),
(442,214,o),
(413,214,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 114 values pushed */
17 10 2 8 1 41 30 2 7 8 44 29 2 3 6 10 3 76 15 1 13 7 10 7 13 10 128 0 9 6 11 6 9 11 128 0 0 11 0 134 0 3 4 1 2 1 3 2 103 5 1 1 12 1 8 7 1 8 105 0 10 6 11 10 89 0 7 0 6 9 7 6 105 0 10 10 11 97 14 1 11 10 11 81 57 57 45 45 57 68 57 67 63 61 45 56 45 55 51 49 43 42 36 35 38 34 17 17 18 38 16 16 6 31 
CALL[ ]	/* CallFunction */";
};
width = 1043;
}
);
note = dvKx_RA;
},
{
glyphname = dvGx_RA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,0,l),
(793,0,l),
(793,571,l),
(869,571,l),
(869,740,l),
(-11,740,l),
(-11,571,l),
(292,571,l),
(292,442,ls),
(292,418,o),
(279,387,o),
(260,387,qs),
(241,387,o),
(226,415,o),
(226,442,qs),
(226,474,l),
(29,474,l),
(28,463,o),
(28,441,qs),
(28,328,o),
(153,213,o),
(266,213,qs),
(381,213,o),
(496,344,o),
(496,451,qs),
(496,571,l),
(589,571,l),
(589,346,l),
(200,-20,l),
(434,-20,l),
(594,141,l)
);
},
{
closed = 1;
nodes = (
(141,-1,o),
(195,53,o),
(195,91,qs),
(195,130,o),
(141,185,o),
(101,185,qs),
(62,185,o),
(8,130,o),
(8,91,qs),
(8,53,o),
(62,-1,o),
(101,-1,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
2 1 2 4 30 1 8 9 2 76 0 3 1 4 1 3 4 128 0 0 8 0 134 0 6 7 5 2 1 3 6 1 103 0 4 0 2 9 4 2 105 0 9 8 8 9 89 0 9 9 8 97 11 10 2 8 9 8 81 31 31 31 42 31 41 37 35 17 17 17 19 35 20 35 18 16 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 858;
}
);
note = dvGx_RA;
},
{
glyphname = dvJx_RA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-11,571,l),
(612,571,l),
(612,488,l),
(336,488,l),
(336,394,ls),
(336,327,o),
(289,327,qs),
(242,327,o),
(242,394,qs),
(242,488,l),
(37,488,l),
(37,388,ls),
(37,279,o),
(167,149,o),
(290,149,qs),
(384,149,o),
(502,243,o),
(520,324,q),
(612,324,l),
(612,316,l),
(258,-58,l),
(480,-58,l),
(617,106,l),
(617,0,l),
(807,0,l),
(807,571,l),
(883,571,l),
(883,740,l),
(-11,740,l)
);
},
{
closed = 1;
nodes = (
(181,-56,o),
(235,-2,o),
(235,36,qs),
(235,75,o),
(181,130,o),
(141,130,qs),
(102,130,o),
(48,75,o),
(48,36,qs),
(48,-2,o),
(102,-56,o),
(141,-56,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 88 values pushed */
8 1 3 5 5 1 1 9 2 76 6 1 4 0 5 0 4 5 128 0 1 9 2 9 1 2 128 11 1 8 7 1 0 4 8 0 103 0 5 0 3 9 5 3 105 0 9 1 2 9 89 0 9 9 2 97 12 10 2 2 9 2 81 29 29 0 0 29 40 29 39 35 33 0 28 0 28 17 18 34 19 37 18 17 17 13 6 30 
CALL[ ]	/* CallFunction */";
};
width = 872;
}
);
note = dvJx_RA;
},
{
glyphname = dvKx_R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(481,0,l),
(676,0,l),
(676,267,l),
(679,301,o),
(709,340,o),
(736,340,qs),
(765,340,o),
(794,304,o),
(794,278,q),
(1001,278,l),
(1001,344,o),
(956,450,o),
(866,513,o),
(802,513,qs),
(720,513,o),
(676,461,q),
(676,571,l),
(1001,571,l),
(1001,740,l),
(-11,740,l),
(-11,571,l),
(481,571,l),
(481,461,l),
(437,513,o),
(349,513,qs),
(249,513,o),
(139,384,o),
(139,278,qs),
(139,210,o),
(200,105,o),
(254,80,q),
(150,-46,l),
(368,-46,l),
(481,111,l)
);
},
{
closed = 1;
nodes = (
(108,-25,o),
(162,29,o),
(162,67,qs),
(162,106,o),
(108,161,o),
(68,161,qs),
(29,161,o),
(-25,106,o),
(-25,67,qs),
(-25,29,o),
(29,-25,o),
(68,-25,qs)
);
},
{
closed = 1;
nodes = (
(382,214,o),
(346,249,o),
(346,277,qs),
(346,305,o),
(383,341,o),
(414,341,qs),
(444,341,o),
(480,307,o),
(481,279,qs),
(481,251,o),
(442,214,o),
(413,214,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
17 10 2 7 1 30 1 12 6 33 2 2 8 9 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 6 7 12 7 6 114 14 1 12 9 7 12 9 126 0 8 9 10 9 8 10 128 0 0 10 0 134 0 3 4 1 2 1 3 2 103 5 1 1 11 1 7 6 1 7 105 0 9 8 10 9 89 0 9 9 10 97 13 1 10 9 10 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 6 7 12 7 6 12 128 14 1 12 9 7 12 9 126 0 8 9 10 9 8 10 128 0 0 10 0 134 0 3 4 1 2 1 3 2 103 5 1 1 11 1 7 6 1 7 105 0 9 8 10 9 89 0 9 9 10 97 13 1 10 9 10 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
46 46 34 34 46 57 46 56 52 50 34 45 34 44 40 38 19 34 19 34 17 17 18 38 16 15 6 31 
CALL[ ]	/* CallFunction */";
};
width = 774;
}
);
note = dvKx_R;
},
{
glyphname = dvGx_R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(633,180,l),
(633,387,l),
(200,-20,l),
(434,-20,l)
);
},
{
closed = 1;
nodes = (
(-11,571,l),
(292,571,l),
(292,442,ls),
(292,418,o),
(279,387,o),
(260,387,qs),
(241,387,o),
(226,415,o),
(226,442,qs),
(226,474,l),
(29,474,l),
(28,463,o),
(28,441,qs),
(28,328,o),
(153,213,o),
(266,213,qs),
(381,213,o),
(496,344,o),
(496,451,qs),
(496,571,l),
(633,571,l),
(633,740,l),
(-11,740,l)
);
},
{
closed = 1;
nodes = (
(141,-1,o),
(195,53,o),
(195,91,qs),
(195,130,o),
(141,185,o),
(101,185,qs),
(62,185,o),
(8,130,o),
(8,91,qs),
(8,53,o),
(62,-1,o),
(101,-1,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 93 values pushed */
2 1 8 7 1 76 1 1 4 1 75 0 3 1 4 1 3 4 128 9 1 0 8 0 134 10 1 6 5 1 1 3 6 1 103 0 4 0 2 7 4 2 105 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81 27 27 4 4 0 0 27 38 27 37 33 31 4 26 4 26 25 24 21 19 16 15 11 9 6 5 0 3 0 3 12 6 22 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = dvGx_R;
},
{
glyphname = dvJx_R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-11,571,l),
(712,571,l),
(712,740,l),
(-11,740,l)
);
},
{
closed = 1;
nodes = (
(480,-58,l),
(712,219,l),
(712,488,l),
(336,488,l),
(336,394,ls),
(336,327,o),
(289,327,qs),
(242,327,o),
(242,394,qs),
(242,488,l),
(37,488,l),
(37,388,ls),
(37,279,o),
(167,149,o),
(290,149,qs),
(381,149,o),
(498,237,o),
(517,314,q),
(611,314,l),
(258,-58,l)
);
},
{
closed = 1;
nodes = (
(181,-56,o),
(235,-2,o),
(235,36,qs),
(235,75,o),
(181,130,o),
(141,130,qs),
(102,130,o),
(48,75,o),
(48,36,qs),
(48,-2,o),
(102,-56,o),
(141,-56,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
21 1 3 2 1 76 10 1 1 0 0 4 1 0 103 6 1 4 0 2 3 4 2 103 0 5 0 3 8 5 3 105 0 8 7 7 8 89 0 8 8 7 97 11 9 2 7 8 7 81 24 24 0 0 24 35 24 34 30 28 23 22 20 19 17 15 13 12 9 7 5 4 0 3 0 3 17 12 6 23 
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = dvJx_R;
},
{
glyphname = dvKx_KxA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1039,571,l),
(1039,461,l),
(995,513,o),
(907,513,qs),
(843,513,o),
(796,485,q),
(759,513,o),
(705,513,qs),
(624,513,o),
(580,461,q),
(580,571,l)
);
},
{
closed = 1;
nodes = (
(265,-227,o),
(331,-162,o),
(331,-115,qs),
(331,-67,o),
(265,0,o),
(217,0,qs),
(170,0,o),
(104,-67,o),
(104,-115,qs),
(104,-162,o),
(170,-227,o),
(217,-227,qs)
);
},
{
closed = 1;
nodes = (
(920,-227,o),
(986,-162,o),
(986,-115,qs),
(986,-67,o),
(920,0,o),
(872,0,qs),
(825,0,o),
(759,-67,o),
(759,-115,qs),
(759,-162,o),
(825,-227,o),
(872,-227,qs)
);
},
{
closed = 1;
nodes = (
(285,214,o),
(249,249,o),
(249,277,qs),
(249,305,o),
(287,341,o),
(317,341,qs),
(347,341,o),
(383,307,o),
(384,279,qs),
(384,251,o),
(345,214,o),
(316,214,qs)
);
},
{
closed = 1;
nodes = (
(940,214,o),
(904,249,o),
(904,277,qs),
(904,305,o),
(942,341,o),
(972,341,qs),
(1002,341,o),
(1038,307,o),
(1039,279,qs),
(1039,251,o),
(1000,214,o),
(971,214,qs)
);
},
{
closed = 1;
nodes = (
(1235,0,l),
(1235,267,ls),
(1235,302,o),
(1266,340,o),
(1294,340,qs),
(1323,340,o),
(1352,304,o),
(1352,278,qs),
(1352,252,o),
(1322,221,o),
(1298,221,qs),
(1289,221,o),
(1283,223,q),
(1283,65,l),
(1318,56,o),
(1354,56,qs),
(1414,56,o),
(1507,110,o),
(1559,213,o),
(1559,283,qs),
(1559,346,o),
(1514,451,o),
(1425,513,o),
(1361,513,qs),
(1279,513,o),
(1235,461,q),
(1235,571,l),
(1612,571,l),
(1612,740,l),
(-11,740,l),
(-11,571,l),
(384,571,l),
(384,461,l),
(340,513,o),
(252,513,qs),
(152,513,o),
(42,384,o),
(42,278,qs),
(42,210,o),
(90,104,o),
(181,43,o),
(244,43,qs),
(337,43,o),
(384,100,q),
(384,0,l),
(580,0,l),
(580,267,ls),
(580,302,o),
(611,340,o),
(639,340,qs),
(668,340,o),
(696,304,o),
(696,278,q),
(697,278,l),
(697,210,o),
(745,104,o),
(836,43,o),
(899,43,qs),
(992,43,o),
(1039,100,q),
(1039,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 157 values pushed */
93 86 8 4 0 5 7 0 106 1 21 7 105 75 59 3 20 8 3 76 23 1 13 11 3 11 13 3 128 0 17 18 16 2 2 0 17 2 103 19 15 1 3 0 22 12 9 3 7 21 0 7 105 0 21 0 20 11 21 20 105 27 10 26 3 8 14 1 11 13 8 11 105 5 1 3 4 4 3 89 5 1 3 3 4 97 25 6 24 3 4 3 4 81 47 47 35 35 23 23 11 11 119 118 115 113 109 108 104 102 96 94 92 91 90 89 88 87 85 83 78 76 74 73 70 68 62 60 47 58 47 57 53 51 35 46 35 45 41 39 23 34 23 33 29 27 11 22 11 21 37 18 34 33 28 6 26 
CALL[ ]	/* CallFunction */";
};
width = 1601;
}
);
note = dvKx_KxA;
},
{
glyphname = dvKx_TA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1096,571,l),
(1096,488,l),
(975,488,ls),
(890,488,o),
(825,459,q),
(776,503,o),
(700,503,qs),
(622,503,o),
(580,458,q),
(580,571,l)
);
},
{
closed = 1;
nodes = (
(265,-227,o),
(331,-162,o),
(331,-115,qs),
(331,-67,o),
(265,0,o),
(217,0,qs),
(170,0,o),
(104,-67,o),
(104,-115,qs),
(104,-162,o),
(170,-227,o),
(217,-227,qs)
);
},
{
closed = 1;
nodes = (
(285,214,o),
(249,249,o),
(249,277,qs),
(249,305,o),
(287,341,o),
(317,341,qs),
(347,341,o),
(383,307,o),
(384,279,qs),
(384,251,o),
(345,214,o),
(316,214,qs)
);
},
{
closed = 1;
nodes = (
(580,267,ls),
(580,302,o),
(611,339,o),
(639,339,qs),
(662,339,o),
(691,300,o),
(692,267,q),
(691,259,o),
(691,243,qs),
(691,119,o),
(839,1,o),
(951,1,qs),
(1000,1,l),
(1000,160,l),
(984,160,ls),
(940,160,o),
(897,203,o),
(897,238,qs),
(897,272,o),
(946,314,o),
(985,314,qs),
(1096,314,l),
(1096,0,l),
(1300,0,l),
(1300,571,l),
(1377,571,l),
(1377,740,l),
(-11,740,l),
(-11,571,l),
(384,571,l),
(384,461,l),
(340,513,o),
(252,513,qs),
(152,513,o),
(42,384,o),
(42,278,qs),
(42,210,o),
(90,104,o),
(181,43,o),
(244,43,qs),
(337,43,o),
(384,100,q),
(384,0,l),
(580,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 133 values pushed */
46 4 0 3 5 1 70 1 6 13 35 1 7 14 3 76 0 10 11 9 2 2 8 10 2 103 0 8 0 5 8 89 0 0 16 1 5 13 0 5 105 0 1 0 13 6 1 13 103 19 1 6 0 7 12 6 7 105 0 14 20 17 15 3 12 3 14 12 103 0 3 4 4 3 89 0 3 3 4 97 18 1 4 3 4 81 34 34 22 22 10 10 34 77 34 77 74 72 66 64 63 61 57 55 54 53 52 51 50 49 48 47 45 43 38 36 22 33 22 32 28 26 10 21 10 20 37 17 34 33 21 6 26 
CALL[ ]	/* CallFunction */";
};
width = 1366;
}
);
note = dvKx_TA;
},
{
glyphname = dvKx_PHA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(681,571,l),
(681,502,l),
(618,496,o),
(580,457,q),
(580,571,l)
);
},
{
closed = 1;
nodes = (
(921,307,o),
(885,353,o),
(885,390,qs),
(885,571,l),
(1030,571,l),
(1030,390,ls),
(1030,354,o),
(992,307,o),
(956,307,qs)
);
},
{
closed = 1;
nodes = (
(580,267,ls),
(580,302,o),
(611,340,o),
(639,340,qs),
(660,340,o),
(686,320,o),
(691,304,qs),
(711,227,o),
(819,136,o),
(902,136,qs),
(982,136,o),
(1030,179,q),
(1030,0,l),
(1234,0,l),
(1234,245,ls),
(1234,291,o),
(1270,340,o),
(1303,340,qs),
(1332,340,o),
(1361,304,o),
(1361,278,qs),
(1361,253,o),
(1333,220,o),
(1307,220,qs),
(1296,220,o),
(1284,223,q),
(1284,68,l),
(1320,56,o),
(1363,56,qs),
(1423,56,o),
(1516,111,o),
(1568,216,o),
(1568,288,qs),
(1568,350,o),
(1522,452,o),
(1433,513,o),
(1370,513,qs),
(1283,513,o),
(1234,462,q),
(1234,571,l),
(1619,571,l),
(1619,740,l),
(-11,740,l),
(-11,571,l),
(384,571,l),
(384,461,l),
(340,513,o),
(252,513,qs),
(152,513,o),
(42,384,o),
(42,278,qs),
(42,210,o),
(90,104,o),
(181,43,o),
(244,43,qs),
(337,43,o),
(384,100,q),
(384,0,l),
(580,0,l)
);
},
{
closed = 1;
nodes = (
(265,-227,o),
(331,-162,o),
(331,-115,qs),
(331,-67,o),
(265,0,o),
(217,0,qs),
(170,0,o),
(104,-67,o),
(104,-115,qs),
(104,-162,o),
(170,-227,o),
(217,-227,qs)
);
},
{
closed = 1;
nodes = (
(285,214,o),
(249,249,o),
(249,277,qs),
(249,305,o),
(287,341,o),
(317,341,qs),
(347,341,o),
(383,307,o),
(384,279,qs),
(384,251,o),
(345,214,o),
(316,214,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 154 values pushed */
33 26 2 0 4 11 4 46 1 10 2 60 1 13 19 45 15 2 9 13 4 76 21 15 2 12 3 16 3 12 16 128 0 6 7 5 1 3 0 4 6 0 103 8 1 4 18 14 2 11 2 4 11 105 20 1 2 0 13 9 2 13 105 0 10 0 9 3 10 9 105 23 1 19 0 3 12 19 3 105 0 16 17 17 16 89 0 16 16 17 97 22 1 17 16 17 81 85 85 73 73 14 14 5 5 85 96 85 95 91 89 73 84 73 83 79 77 14 72 14 72 69 67 63 61 59 58 55 53 49 47 44 42 36 34 32 31 30 29 28 27 25 23 18 16 5 13 5 12 20 19 24 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1608;
}
);
note = dvKx_PHA;
},
{
glyphname = dvKx_PHxA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(682,571,l),
(682,502,l),
(616,496,o),
(580,457,q),
(580,571,l)
);
},
{
closed = 1;
nodes = (
(265,-227,o),
(331,-162,o),
(331,-115,qs),
(331,-67,o),
(265,0,o),
(217,0,qs),
(170,0,o),
(104,-67,o),
(104,-115,qs),
(104,-162,o),
(170,-227,o),
(217,-227,qs)
);
},
{
closed = 1;
nodes = (
(879,-127,o),
(945,-62,o),
(945,-15,qs),
(945,33,o),
(879,100,o),
(831,100,qs),
(784,100,o),
(718,33,o),
(718,-15,qs),
(718,-62,o),
(784,-127,o),
(831,-127,qs)
);
},
{
closed = 1;
nodes = (
(285,214,o),
(249,249,o),
(249,277,qs),
(249,305,o),
(287,341,o),
(317,341,qs),
(347,341,o),
(383,307,o),
(384,279,qs),
(384,251,o),
(345,214,o),
(316,214,qs)
);
},
{
closed = 1;
nodes = (
(922,307,o),
(886,353,o),
(886,390,qs),
(886,571,l),
(1031,571,l),
(1031,390,ls),
(1031,354,o),
(993,307,o),
(957,307,qs)
);
},
{
closed = 1;
nodes = (
(580,267,ls),
(580,302,o),
(611,340,o),
(639,340,qs),
(660,340,o),
(687,319,o),
(692,302,q),
(693,302,l),
(712,226,o),
(821,136,o),
(903,136,qs),
(983,136,o),
(1031,179,q),
(1031,0,l),
(1235,0,l),
(1235,245,ls),
(1235,291,o),
(1271,340,o),
(1304,340,qs),
(1333,340,o),
(1362,304,o),
(1362,278,qs),
(1362,253,o),
(1334,220,o),
(1308,220,qs),
(1297,220,o),
(1285,223,q),
(1285,68,l),
(1321,56,o),
(1364,56,qs),
(1424,56,o),
(1517,111,o),
(1569,216,o),
(1569,288,qs),
(1569,350,o),
(1523,452,o),
(1434,513,o),
(1371,513,qs),
(1284,513,o),
(1235,462,q),
(1235,571,l),
(1620,571,l),
(1620,740,l),
(-11,740,l),
(-11,571,l),
(384,571,l),
(384,461,l),
(340,513,o),
(252,513,qs),
(152,513,o),
(42,384,o),
(42,278,qs),
(42,210,o),
(90,104,o),
(181,43,o),
(244,43,qs),
(337,43,o),
(384,100,q),
(384,0,l),
(580,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 175 values pushed */
69 62 2 0 4 5 10 82 1 16 8 96 1 19 6 81 1 15 3 4 76 51 1 3 1 75 26 21 2 18 9 1 9 18 1 128 0 12 13 11 7 3 0 10 12 0 103 14 1 10 20 17 2 5 8 10 5 105 25 1 8 0 19 3 8 19 105 0 16 0 15 9 16 15 105 24 1 6 0 9 18 6 9 105 0 1 4 2 1 89 0 3 23 1 4 2 3 4 105 0 1 1 2 97 22 1 2 1 2 81 50 50 41 41 29 29 17 17 5 5 50 109 50 109 106 104 99 97 95 94 91 89 85 83 80 78 72 70 68 67 66 65 64 63 61 59 54 52 41 49 41 48 45 44 29 40 29 39 35 33 17 28 17 27 23 21 5 16 5 15 37 19 27 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1609;
}
);
note = dvKx_PHxA;
},
{
glyphname = dvKx_BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1080,571,l),
(1080,489,l),
(1023,524,o),
(940,524,qs),
(861,524,o),
(797,484,q),
(758,513,o),
(705,513,qs),
(624,513,o),
(580,461,q),
(580,571,l)
);
},
{
closed = 1;
nodes = (
(1276,0,l),
(1276,571,l),
(1352,571,l),
(1352,740,l),
(-11,740,l),
(-11,571,l),
(384,571,l),
(384,461,l),
(340,513,o),
(252,513,qs),
(152,513,o),
(42,384,o),
(42,278,qs),
(42,210,o),
(90,104,o),
(181,43,o),
(244,43,qs),
(337,43,o),
(384,100,q),
(384,0,l),
(580,0,l),
(580,267,ls),
(580,302,o),
(611,340,o),
(639,340,qs),
(668,340,o),
(696,304,o),
(696,278,qs),
(698,209,o),
(762,100,o),
(871,39,o),
(940,39,qs),
(1033,39,o),
(1080,85,q),
(1080,0,l)
);
},
{
closed = 1;
nodes = (
(265,-227,o),
(331,-162,o),
(331,-115,qs),
(331,-67,o),
(265,0,o),
(217,0,qs),
(170,0,o),
(104,-67,o),
(104,-115,qs),
(104,-162,o),
(170,-227,o),
(217,-227,qs)
);
},
{
closed = 1;
nodes = (
(285,214,o),
(249,249,o),
(249,277,qs),
(249,305,o),
(287,341,o),
(317,341,qs),
(347,341,o),
(383,307,o),
(384,279,qs),
(384,251,o),
(345,214,o),
(316,214,qs)
);
},
{
closed = 1;
nodes = (
(1031,395,o),
(1092,335,o),
(1092,288,qs),
(1092,279,o),
(1090,265,q),
(923,378,l),
(951,395,o),
(984,395,qs)
);
},
{
closed = 1;
nodes = (
(938,182,o),
(873,241,o),
(873,288,qs),
(873,300,o),
(876,312,q),
(1044,198,l),
(1017,182,o),
(984,182,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
37 8 4 0 4 16 0 71 1 4 16 80 72 2 15 4 79 1 17 15 26 11 2 6 17 5 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
37 8 4 0 4 16 0 71 1 4 16 80 72 2 15 4 79 1 17 15 26 11 2 3 17 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
37 8 4 0 4 16 0 71 1 4 16 80 72 2 15 4 79 1 17 15 26 11 2 6 17 5 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
11 1 5 3 12 3 5 12 128 0 9 10 8 2 2 1 9 2 103 0 1 20 1 16 4 1 16 105 7 1 0 14 1 4 15 0 4 105 19 1 15 0 6 3 15 6 105 21 1 17 0 3 5 17 3 105 0 12 13 13 12 89 0 12 12 13 97 18 1 13 12 13 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
11 1 5 3 12 3 5 12 128 0 9 10 8 2 2 1 9 2 103 0 1 20 1 16 4 1 16 105 7 1 0 14 1 4 15 0 4 105 19 1 15 17 3 15 89 21 1 17 6 1 3 5 17 3 105 0 12 13 13 12 89 0 12 12 13 97 18 1 13 12 13 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
11 1 5 3 12 3 5 12 128 0 9 10 8 2 2 1 9 2 103 0 1 20 1 16 4 1 16 105 7 1 0 14 1 4 15 0 4 105 19 1 15 0 6 3 15 6 105 21 1 17 0 3 5 17 3 105 0 12 13 13 12 89 0 12 12 13 97 18 1 13 12 13 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 46 values pushed */
78 78 70 70 58 58 46 46 78 85 78 84 70 77 70 76 58 69 58 68 64 62 46 57 46 56 52 50 45 44 43 42 41 40 18 37 34 19 37 34 18 34 33 22 6 31 
CALL[ ]	/* CallFunction */";
};
width = 1341;
}
);
note = dvKx_BA;
},
{
glyphname = dvKx_MA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(623,503,o),
(580,455,q),
(580,571,l),
(984,571,l),
(984,471,l),
(940,471,ls),
(881,471,o),
(831,453,q),
(786,503,o),
(705,503,qs)
);
},
{
closed = 1;
nodes = (
(265,-227,o),
(331,-162,o),
(331,-115,qs),
(331,-67,o),
(265,0,o),
(217,0,qs),
(170,0,o),
(104,-67,o),
(104,-115,qs),
(104,-162,o),
(170,-227,o),
(217,-227,qs)
);
},
{
closed = 1;
nodes = (
(285,214,o),
(249,249,o),
(249,277,qs),
(249,305,o),
(287,341,o),
(317,341,qs),
(347,341,o),
(383,307,o),
(384,279,qs),
(384,251,o),
(345,214,o),
(316,214,qs)
);
},
{
closed = 1;
nodes = (
(911,208,o),
(884,232,o),
(884,256,qs),
(884,280,o),
(918,305,o),
(946,305,qs),
(984,305,l),
(984,266,ls),
(984,240,o),
(958,208,o),
(932,208,qs)
);
},
{
closed = 1;
nodes = (
(1268,471,l),
(1174,471,l),
(1174,571,l),
(1268,571,l)
);
},
{
closed = 1;
nodes = (
(580,267,ls),
(580,302,o),
(611,340,o),
(639,340,qs),
(667,340,o),
(695,305,o),
(696,279,q),
(695,271,o),
(695,255,qs),
(695,189,o),
(755,90,o),
(864,36,o),
(936,36,qs),
(1052,36,o),
(1174,165,o),
(1174,277,qs),
(1174,305,l),
(1268,305,l),
(1268,0,l),
(1473,0,l),
(1473,571,l),
(1550,571,l),
(1550,740,l),
(-11,740,l),
(-11,571,l),
(384,571,l),
(384,461,l),
(340,513,o),
(252,513,qs),
(152,513,o),
(42,384,o),
(42,278,qs),
(42,210,o),
(90,104,o),
(181,43,o),
(244,43,qs),
(337,43,o),
(384,100,q),
(384,0,l),
(580,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 166 values pushed */
61 7 1 3 5 0 81 1 6 7 50 1 11 8 3 76 26 20 2 16 18 3 18 16 3 128 0 14 15 13 25 10 4 1 12 14 1 103 0 12 2 5 12 89 21 1 2 19 1 5 7 2 5 105 9 1 0 17 1 7 6 0 7 105 23 1 6 0 11 18 6 11 105 24 1 8 0 18 16 8 18 105 0 3 4 4 3 89 0 3 3 4 97 22 1 4 3 4 81 49 49 45 45 34 34 22 22 10 10 0 0 49 88 49 88 85 83 76 74 71 70 69 68 67 66 65 64 63 62 60 58 53 51 45 48 45 48 47 46 34 44 34 43 39 37 22 33 22 32 28 26 10 21 10 20 16 14 0 9 0 8 17 34 27 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1525;
}
);
note = dvKx_MA;
},
{
glyphname = dvJx_JxA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,-189,o),
(403,-124,o),
(403,-77,qs),
(403,-29,o),
(337,38,o),
(289,38,qs),
(242,38,o),
(176,-29,o),
(176,-77,qs),
(176,-124,o),
(242,-189,o),
(289,-189,qs)
);
},
{
closed = 1;
nodes = (
(901,-189,o),
(967,-124,o),
(967,-77,qs),
(967,-29,o),
(901,38,o),
(853,38,qs),
(806,38,o),
(740,-29,o),
(740,-77,qs),
(740,-124,o),
(806,-189,o),
(853,-189,qs)
);
},
{
closed = 1;
nodes = (
(1371,0,l),
(1371,571,l),
(1447,571,l),
(1447,740,l),
(-11,740,l),
(-11,571,l),
(1167,571,l),
(1167,481,l),
(900,481,l),
(900,325,ls),
(900,258,o),
(854,258,qs),
(806,258,o),
(806,325,qs),
(806,481,l),
(336,481,l),
(336,325,ls),
(336,258,o),
(290,258,qs),
(242,258,o),
(242,325,qs),
(242,481,l),
(37,481,l),
(37,319,ls),
(37,210,o),
(167,80,o),
(290,80,qs),
(363,80,o),
(472,138,o),
(532,241,o),
(535,308,q),
(601,308,l),
(605,204,o),
(734,80,o),
(854,80,qs),
(927,80,o),
(1036,138,o),
(1096,241,o),
(1099,308,q),
(1167,308,l),
(1167,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
0 16 0 1 0 16 1 128 0 14 15 1 13 8 14 13 103 12 10 2 8 6 1 4 9 8 4 103 11 1 9 7 1 5 0 9 5 105 2 1 0 16 1 0 89 2 1 0 0 1 97 18 3 17 3 1 0 1 81 12 12 0 0 64 63 62 61 60 59 58 57 56 55 53 51 49 48 46 44 42 41 38 36 33 32 30 28 25 24 12 23 12 22 18 16 0 11 0 10 36 19 6 23 
CALL[ ]	/* CallFunction */";
};
width = 1436;
}
);
note = dvJx_JxA;
},
{
glyphname = dvJx_YA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1260,0,l),
(1260,571,l),
(1336,571,l),
(1336,740,l),
(-11,740,l),
(-11,571,l),
(743,571,l),
(743,540,ls),
(743,493,o),
(692,441,o),
(615,441,qs),
(336,441,l),
(336,325,ls),
(336,258,o),
(290,258,qs),
(242,258,o),
(242,325,qs),
(242,441,l),
(37,441,l),
(37,319,ls),
(37,210,o),
(167,80,o),
(290,80,qs),
(389,80,o),
(517,184,o),
(531,272,q),
(589,272,o),
(612,273,q),
(634,174,o),
(771,63,o),
(877,63,qs),
(989,63,o),
(1055,121,q),
(1055,0,l)
);
},
{
closed = 1;
nodes = (
(337,-189,o),
(403,-124,o),
(403,-77,qs),
(403,-29,o),
(337,38,o),
(289,38,qs),
(242,38,o),
(176,-29,o),
(176,-77,qs),
(176,-124,o),
(242,-189,o),
(289,-189,qs)
);
},
{
closed = 1;
nodes = (
(872,232,o),
(812,277,o),
(806,311,q),
(875,330,o),
(945,434,o),
(945,502,qs),
(945,571,l),
(1055,571,l),
(1055,375,ls),
(1055,312,o),
(987,232,o),
(922,232,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 101 values pushed */
54 1 1 3 0 1 2 13 2 76 0 9 10 11 10 9 11 128 0 7 12 8 2 6 3 7 6 103 5 1 3 0 1 4 3 1 103 0 4 0 2 0 4 2 105 15 1 13 0 0 10 13 0 105 0 10 9 11 10 89 0 10 10 11 97 14 1 11 10 11 81 46 46 34 34 46 57 46 56 50 49 34 45 34 44 40 38 33 32 17 17 19 34 34 19 34 34 33 16 6 31 
CALL[ ]	/* CallFunction */";
};
width = 1325;
}
);
note = dvJx_YA;
},
{
glyphname = dvEyelash_YA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(580,232,o),
(519,279,o),
(515,314,q),
(590,328,o),
(653,429,o),
(653,502,qs),
(653,571,l),
(764,571,l),
(764,375,ls),
(764,312,o),
(696,232,o),
(631,232,qs)
);
},
{
closed = 1;
nodes = (
(968,0,l),
(968,571,l),
(1045,571,l),
(1045,740,l),
(-11,740,l),
(-11,571,l),
(452,571,l),
(452,540,ls),
(452,484,o),
(409,419,o),
(344,415,qs),
(320,413,o),
(269,430,o),
(235,469,o),
(235,498,q),
(42,498,l),
(47,377,o),
(203,261,o),
(320,259,q),
(342,167,o),
(480,63,o),
(586,63,qs),
(698,63,o),
(764,121,q),
(764,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
8 1 3 5 12 1 2 1 2 76 0 5 4 3 4 5 3 128 0 9 2 9 134 0 7 8 6 2 0 4 7 0 103 0 4 0 3 1 4 3 105 10 1 1 2 2 1 89 10 1 1 1 2 97 0 2 1 2 81 0 0 36 35 34 33 32 31 30 29 26 25 21 20 18 17 15 13 0 11 0 10 19 11 6 23 
CALL[ ]	/* CallFunction */";
};
width = 1034;
}
);
note = dvEyelash_YA;
},
{
glyphname = dvEyelash_HA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(616,70,o),
(587,50,o),
(568,50,qs),
(546,50,o),
(512,84,o),
(512,118,qs),
(512,150,o),
(546,184,o),
(568,184,qs),
(589,184,o),
(617,162,o),
(620,144,q),
(815,144,l),
(806,237,o),
(685,344,o),
(573,344,qs),
(554,344,o),
(544,343,q),
(538,351,o),
(538,360,qs),
(538,374,o),
(557,388,o),
(572,388,qs),
(739,388,l),
(739,571,l),
(859,571,l),
(859,740,l),
(-11,740,l),
(-11,571,l),
(545,571,l),
(545,531,l),
(497,531,ls),
(429,531,o),
(347,473,o),
(338,425,q),
(328,422,o),
(311,422,qs),
(277,422,o),
(235,461,o),
(235,492,q),
(42,492,l),
(44,422,o),
(110,318,o),
(215,263,o),
(275,263,qs),
(347,263,o),
(390,288,q),
(353,260,o),
(313,175,o),
(313,121,qs),
(313,48,o),
(377,-60,o),
(493,-117,o),
(568,-117,qs),
(673,-117,o),
(809,-9,o),
(815,86,q),
(620,86,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
39 10 2 1 9 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 77 values pushed */
0 4 5 2 5 4 2 128 0 2 3 3 2 112 0 8 3 9 3 8 9 128 0 10 11 13 11 10 114 14 1 13 12 12 13 112 0 6 7 1 5 4 6 5 103 0 3 0 1 11 3 1 106 0 9 0 11 10 9 11 105 0 12 0 0 12 89 0 12 12 0 98 0 0 12 0 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 8 3 9 3 8 9 128 0 10 11 13 11 10 114 14 1 13 12 12 13 112 0 6 7 1 5 4 6 5 103 0 3 0 1 11 3 1 106 0 9 0 11 10 9 11 105 0 12 0 0 12 89 0 12 12 0 98 0 0 12 0 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 79 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 8 3 9 3 8 9 128 0 10 11 13 11 10 13 128 14 1 13 12 12 13 112 0 6 7 1 5 4 6 5 103 0 3 0 1 11 3 1 106 0 9 0 11 10 9 11 105 0 12 0 0 12 89 0 12 12 0 98 0 0 12 0 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 80 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 8 3 9 3 8 9 128 0 10 11 13 11 10 13 128 14 1 13 12 11 13 12 126 0 6 7 1 5 4 6 5 103 0 3 0 1 11 3 1 106 0 9 0 11 10 9 11 105 0 12 0 0 12 89 0 12 12 0 98 0 0 12 0 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 57 0 57 55 53 49 47 45 44 42 40 33 17 17 17 35 34 19 39 34 15 6 31 
CALL[ ]	/* CallFunction */";
};
width = 849;
}
);
note = dvEyelash_HA;
},
{
glyphname = dvmII.aLong;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-366,696,l),
(-366,748,ls),
(-366,806,o),
(-279,883,o),
(-149,883,qs),
(-16,883,o),
(72,806,o),
(72,748,qs),
(72,740,l),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l),
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(270,763,ls),
(270,897,o),
(71,1054,o),
(-149,1054,qs),
(-362,1054,o),
(-562,899,o),
(-562,763,qs),
(-562,696,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 7 1 2 1 7 2 128 0 3 2 3 134 0 0 0 6 1 0 6 105 5 1 1 7 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 19 35 17 17 17 17 19 34 8 6 30 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmII.aLong;
},
{
glyphname = dvmII_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-72,696,l),
(-72,775,ls),
(-72,819,o),
(-44,882,o),
(2,882,qs),
(45,882,o),
(72,819,o),
(72,775,qs),
(72,740,l),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l),
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(270,765,ls),
(270,1053,o),
(2,1053,qs),
(-141,1053,o),
(-270,900,o),
(-270,765,qs),
(-270,696,l)
);
},
{
closed = 1;
nodes = (
(463,782,o),
(530,848,o),
(530,895,qs),
(530,943,o),
(463,1009,o),
(415,1009,qs),
(368,1009,o),
(302,943,o),
(302,895,qs),
(302,848,o),
(368,782,o),
(415,782,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
0 7 1 2 1 7 2 128 0 3 2 3 134 0 0 0 6 9 0 6 105 0 8 10 1 9 1 8 9 105 5 1 1 7 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 25 25 25 36 25 35 37 19 35 17 17 17 17 18 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmII_Anusvara;
},
{
glyphname = dvmII_Reph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-72,696,l),
(-72,775,ls),
(-72,819,o),
(-44,882,o),
(2,882,qs),
(45,882,o),
(72,819,o),
(72,775,qs),
(72,740,l),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l),
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(270,822,ls),
(270,845,o),
(286,877,o),
(312,877,qs),
(335,877,o),
(354,845,o),
(352,812,q),
(533,812,l),
(541,921,o),
(447,1038,o),
(364,1038,qs),
(260,1038,o),
(218,964,q),
(152,1053,o),
(2,1053,qs),
(-141,1053,o),
(-270,900,o),
(-270,765,qs),
(-270,696,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
5 1 9 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 2 3 4 3 2 114 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 2 3 4 3 2 4 128 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
36 35 32 30 17 17 17 17 19 34 18 34 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmII_Reph;
},
{
glyphname = dvmII_Reph_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,740,l),
(270,812,ls),
(270,852,o),
(313,901,o),
(350,901,qs),
(385,901,o),
(424,865,o),
(427,841,q),
(590,841,l),
(597,902,o),
(552,1001,o),
(458,1058,o),
(394,1058,qs),
(329,1058,o),
(241,1007,o),
(217,965,q),
(150,1053,o),
(2,1053,qs),
(-141,1053,o),
(-270,900,o),
(-270,765,qs),
(-270,696,l),
(-72,696,l),
(-72,775,ls),
(-72,819,o),
(-44,882,o),
(2,882,qs),
(45,882,o),
(72,819,o),
(72,775,qs),
(72,740,l),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l),
(270,571,l),
(346,571,l),
(346,740,l)
);
},
{
closed = 1;
nodes = (
(370,768,o),
(400,797,o),
(400,817,qs),
(400,838,o),
(370,867,o),
(349,867,qs),
(329,867,o),
(300,838,o),
(300,817,qs),
(300,797,o),
(329,768,o),
(349,768,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
22 1 9 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 8 11 12 9 8 114 0 5 3 0 3 5 0 128 0 1 0 1 134 0 7 0 9 4 7 9 105 0 6 0 4 11 6 4 105 0 11 13 1 12 3 11 12 105 10 1 3 5 0 3 87 10 1 3 3 0 95 2 1 0 3 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 8 11 12 11 8 12 128 0 5 3 0 3 5 0 128 0 1 0 1 134 0 7 0 9 4 7 9 105 0 6 0 4 11 6 4 105 0 11 13 1 12 3 11 12 105 10 1 3 5 0 3 87 10 1 3 3 0 95 2 1 0 3 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
39 39 39 50 39 49 45 43 38 37 34 32 19 35 35 19 35 17 17 17 16 14 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmII_Reph_Anusvara;
},
{
glyphname = dvmII_Anusvara.aLong;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-366,696,l),
(-366,748,ls),
(-366,806,o),
(-279,883,o),
(-149,883,qs),
(-16,883,o),
(72,806,o),
(72,748,qs),
(72,740,l),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l),
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(270,763,ls),
(270,897,o),
(71,1054,o),
(-149,1054,qs),
(-362,1054,o),
(-562,899,o),
(-562,763,qs),
(-562,696,l)
);
},
{
closed = 1;
nodes = (
(463,782,o),
(530,848,o),
(530,895,qs),
(530,943,o),
(463,1009,o),
(415,1009,qs),
(368,1009,o),
(302,943,o),
(302,895,qs),
(302,848,o),
(368,782,o),
(415,782,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
0 7 1 2 1 7 2 128 0 3 2 3 134 0 0 0 6 9 0 6 105 0 8 10 1 9 1 8 9 105 5 1 1 7 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 26 26 26 37 26 36 37 19 35 17 17 17 17 19 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmII_Anusvara.aLong;
},
{
glyphname = dvmII_Reph.aLong;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-366,696,l),
(-366,748,ls),
(-366,806,o),
(-279,883,o),
(-149,883,qs),
(-16,883,o),
(72,806,o),
(72,748,qs),
(72,740,l),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l),
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(270,822,ls),
(270,845,o),
(286,877,o),
(312,877,qs),
(335,877,o),
(354,845,o),
(352,812,q),
(533,812,l),
(541,921,o),
(447,1038,o),
(364,1038,qs),
(301,1038,o),
(224,985,o),
(207,942,q),
(106,1054,o),
(-149,1054,qs),
(-362,1054,o),
(-562,899,o),
(-562,763,qs),
(-562,696,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
5 1 9 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 2 3 4 3 2 114 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 2 3 4 3 2 4 128 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
37 36 33 31 17 17 17 17 19 34 18 35 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmII_Reph.aLong;
},
{
glyphname = dvmII_Reph_Anusvara.aLong;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,740,l),
(270,812,ls),
(270,852,o),
(313,901,o),
(350,901,qs),
(385,901,o),
(424,865,o),
(427,841,q),
(590,841,l),
(597,902,o),
(552,1001,o),
(458,1058,o),
(394,1058,qs),
(320,1058,o),
(227,994,o),
(207,943,q),
(104,1054,o),
(-149,1054,qs),
(-362,1054,o),
(-562,899,o),
(-562,763,qs),
(-562,696,l),
(-366,696,l),
(-366,748,ls),
(-366,806,o),
(-279,883,o),
(-149,883,qs),
(-16,883,o),
(72,806,o),
(72,748,qs),
(72,740,l),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l),
(270,571,l),
(346,571,l),
(346,740,l)
);
},
{
closed = 1;
nodes = (
(370,768,o),
(400,797,o),
(400,817,qs),
(400,838,o),
(370,867,o),
(349,867,qs),
(329,867,o),
(300,838,o),
(300,817,qs),
(300,797,o),
(329,768,o),
(349,768,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
22 1 9 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 8 11 12 9 8 114 0 5 3 0 3 5 0 128 0 1 0 1 134 0 7 0 9 4 7 9 105 0 6 0 4 11 6 4 105 0 11 13 1 12 3 11 12 105 10 1 3 5 0 3 87 10 1 3 3 0 95 2 1 0 3 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 63 values pushed */
0 8 11 12 9 8 114 0 5 3 0 3 5 0 128 0 1 0 1 134 0 9 4 6 9 89 7 1 6 0 4 11 6 4 105 0 11 13 1 12 3 11 12 105 10 1 3 5 0 3 87 10 1 3 3 0 95 2 1 0 3 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 8 11 12 9 8 114 0 5 3 0 3 5 0 128 0 1 0 1 134 0 7 0 9 4 7 9 105 0 6 0 4 11 6 4 105 0 11 13 1 12 3 11 12 105 10 1 3 5 0 3 87 10 1 3 3 0 95 2 1 0 3 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 8 11 12 11 8 12 128 0 5 3 0 3 5 0 128 0 1 0 1 134 0 7 0 9 4 7 9 105 0 6 0 4 11 6 4 105 0 11 13 1 12 3 11 12 105 10 1 3 5 0 3 87 10 1 3 3 0 95 2 1 0 3 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
39 39 39 50 39 49 45 43 38 37 34 32 19 35 35 19 35 17 17 17 16 14 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmII_Reph_Anusvara.aLong;
},
{
glyphname = dvmE_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-134,859,o),
(-229,973,o),
(-334,1011,o),
(-425,1012,qs),
(-481,1012,l),
(-481,849,l),
(-422,849,ls),
(-380,849,o),
(-332,832,o),
(-292,787,o),
(-258,735,q),
(-68,735,l)
);
},
{
closed = 1;
nodes = (
(69,787,o),
(136,853,o),
(136,900,qs),
(136,948,o),
(69,1014,o),
(21,1014,qs),
(-26,1014,o),
(-92,948,o),
(-92,900,qs),
(-92,853,o),
(-26,787,o),
(21,787,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 2 4 2 134 3 1 1 0 0 4 1 0 105 3 1 1 1 4 97 6 1 4 1 4 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
5 1 2 4 2 134 0 3 1 4 3 89 0 1 0 0 4 1 0 105 0 3 3 4 97 6 1 4 3 4 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
5 1 2 4 2 134 3 1 1 0 0 4 1 0 105 3 1 1 1 4 97 6 1 4 1 4 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
12 12 0 0 12 23 12 22 18 16 0 11 0 11 33 35 7 6 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmE_Anusvara;
},
{
glyphname = dvmE_Reph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-72,742,ls),
(-90,776,o),
(-90,808,qs),
(-90,831,o),
(-68,859,o),
(-46,859,qs),
(-24,859,o),
(-4,827,o),
(-6,805,q),
(166,805,l),
(172,863,o),
(137,958,o),
(57,1014,o),
(-2,1014,qs),
(-73,1014,o),
(-150,943,o),
(-160,888,q),
(-198,940,o),
(-271,993,o),
(-358,1011,o),
(-425,1012,qs),
(-481,1012,l),
(-481,849,l),
(-422,849,ls),
(-380,849,o),
(-332,832,o),
(-292,787,o),
(-258,735,q),
(-68,735,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
11 1 4 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 3 0 5 4 3 114 6 1 5 5 132 2 1 1 0 4 0 1 4 105 2 1 1 1 0 97 0 0 1 0 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 3 0 5 4 3 114 6 1 5 5 132 0 1 4 0 1 89 0 2 0 4 0 2 4 105 0 1 1 0 97 0 0 1 0 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 3 0 5 4 3 114 6 1 5 5 132 2 1 1 0 4 0 1 4 105 2 1 1 1 0 97 0 0 1 0 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 3 0 5 0 3 5 128 6 1 5 5 132 2 1 1 0 4 0 1 4 105 2 1 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 28 0 28 34 19 37 33 35 7 6 27 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmE_Reph;
},
{
glyphname = dvmE_Reph_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-74,747,ls),
(-95,787,o),
(-95,822,qs),
(-95,856,o),
(-52,902,o),
(-18,902,qs),
(24,902,o),
(67,849,o),
(65,814,q),
(201,814,l),
(207,879,o),
(164,976,o),
(73,1029,o),
(10,1029,qs),
(-66,1029,o),
(-155,957,o),
(-170,901,q),
(-205,947,o),
(-276,994,o),
(-361,1011,o),
(-425,1012,qs),
(-481,1012,l),
(-481,849,l),
(-422,849,ls),
(-380,849,o),
(-332,832,o),
(-292,787,o),
(-258,735,q),
(-68,735,l)
);
},
{
closed = 1;
nodes = (
(3,770,o),
(33,799,o),
(33,819,qs),
(33,840,o),
(3,869,o),
(-18,869,qs),
(-38,869,o),
(-67,840,o),
(-67,819,qs),
(-67,799,o),
(-38,770,o),
(-18,770,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
11 1 6 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 3 0 7 4 3 114 8 1 5 7 5 134 0 2 0 4 6 2 4 105 0 6 0 7 6 89 0 1 0 0 3 1 0 105 0 6 6 7 97 9 1 7 6 7 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 3 0 7 0 3 7 128 8 1 5 7 5 134 0 2 0 4 6 2 4 105 0 6 0 7 6 89 0 1 0 0 3 1 0 105 0 6 6 7 97 9 1 7 6 7 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
29 29 0 0 29 40 29 39 35 33 0 28 0 28 34 19 37 33 35 10 6 27 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmE_Reph_Anusvara;
},
{
glyphname = dvmAI_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-69,737,l),
(-162,915,o),
(-256,1053,o),
(-346,1091,o),
(-437,1091,qs),
(-497,1091,l),
(-497,965,l),
(-432,965,ls),
(-395,965,o),
(-351,956,o),
(-302,919,o),
(-275,877,q),
(-302,896,o),
(-344,912,o),
(-390,916,o),
(-441,916,qs),
(-497,916,l),
(-497,791,l),
(-436,791,ls),
(-385,791,o),
(-348,788,o),
(-318,777,o),
(-284,759,qs),
(-243,737,l)
);
},
{
closed = 1;
nodes = (
(74,783,o),
(141,849,o),
(141,896,qs),
(141,944,o),
(74,1010,o),
(26,1010,qs),
(-21,1010,o),
(-87,944,o),
(-87,896,qs),
(-87,849,o),
(-21,783,o),
(26,783,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
11 1 0 1 1 76 0 4 6 4 134 0 5 2 6 5 89 0 3 0 2 1 3 2 105 0 1 0 0 6 1 0 105 0 5 5 6 97 7 1 6 5 6 81 24 24 24 35 24 34 37 19 33 38 33 35 8 6 28 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmAI_Anusvara;
},
{
glyphname = dvmAI_Reph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-69,737,l),
(-75,748,ls),
(-90,781,o),
(-90,808,qs),
(-90,831,o),
(-68,859,o),
(-46,859,qs),
(-24,859,o),
(-4,827,o),
(-6,805,q),
(147,805,l),
(153,863,o),
(121,958,o),
(48,1014,o),
(-5,1014,qs),
(-71,1014,o),
(-144,951,o),
(-157,901,q),
(-208,991,o),
(-283,1070,o),
(-362,1091,o),
(-437,1091,qs),
(-497,1091,l),
(-497,965,l),
(-432,965,ls),
(-395,965,o),
(-351,956,o),
(-302,919,o),
(-275,877,q),
(-302,896,o),
(-344,912,o),
(-390,916,o),
(-441,916,qs),
(-497,916,l),
(-497,791,l),
(-436,791,ls),
(-385,791,o),
(-348,788,o),
(-318,777,o),
(-284,759,qs),
(-243,737,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
22 11 2 6 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 5 6 0 6 5 114 0 7 0 7 134 0 3 0 2 1 3 2 105 0 1 6 0 1 89 0 4 0 6 5 4 6 105 0 1 1 0 97 0 0 1 0 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 5 6 0 6 5 0 128 0 7 0 7 134 0 3 0 2 1 3 2 105 0 1 6 0 1 89 0 4 0 6 5 4 6 105 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
21 34 19 37 33 38 33 35 8 6 30 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmAI_Reph;
},
{
glyphname = dvmAI_Reph_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-69,737,l),
(-71,741,o),
(-71,742,q),
(-84,768,o),
(-95,799,o),
(-95,818,qs),
(-95,855,o),
(-53,902,o),
(-18,902,qs),
(24,902,o),
(67,849,o),
(65,814,q),
(201,814,l),
(207,876,o),
(165,974,o),
(74,1029,o),
(10,1029,qs),
(-60,1029,o),
(-147,963,o),
(-163,912,q),
(-212,996,o),
(-285,1071,o),
(-363,1091,o),
(-437,1091,qs),
(-497,1091,l),
(-497,965,l),
(-432,965,ls),
(-395,965,o),
(-351,956,o),
(-302,919,o),
(-275,877,q),
(-302,896,o),
(-344,912,o),
(-390,916,o),
(-441,916,qs),
(-497,916,l),
(-497,791,l),
(-436,791,ls),
(-385,791,o),
(-348,788,o),
(-318,777,o),
(-284,759,qs),
(-243,737,l)
);
},
{
closed = 1;
nodes = (
(3,770,o),
(33,799,o),
(33,819,qs),
(33,840,o),
(3,869,o),
(-18,869,qs),
(-38,869,o),
(-67,840,o),
(-67,819,qs),
(-67,799,o),
(-38,770,o),
(-18,770,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
22 1 6 1 11 1 8 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 5 8 0 6 5 114 0 7 9 7 134 0 3 0 2 1 3 2 105 0 4 0 6 8 4 6 105 0 8 5 9 8 89 0 1 0 0 9 1 0 105 0 8 8 9 97 10 1 9 8 9 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 5 8 0 8 5 0 128 0 7 9 7 134 0 3 0 2 1 3 2 105 0 4 0 6 8 4 6 105 0 8 5 9 8 89 0 1 0 0 9 1 0 105 0 8 8 9 97 10 1 9 8 9 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
43 43 43 54 43 53 37 53 34 19 37 33 38 33 35 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmAI_Reph_Anusvara;
},
{
glyphname = dvmO_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,0,l),
(270,571,l),
(346,571,l),
(346,740,l),
(265,740,l),
(200,861,o),
(107,974,o),
(2,1011,o),
(-89,1012,qs),
(-145,1012,l),
(-145,849,l),
(-86,849,ls),
(-44,849,o),
(3,832,o),
(42,789,o),
(75,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l)
);
},
{
closed = 1;
nodes = (
(405,787,o),
(472,853,o),
(472,900,qs),
(472,948,o),
(405,1014,o),
(357,1014,qs),
(310,1014,o),
(244,948,o),
(244,900,qs),
(244,853,o),
(310,787,o),
(357,787,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 6 0 6 134 0 2 8 3 2 89 7 1 3 9 1 8 1 3 8 105 4 1 1 0 0 1 87 4 1 1 1 0 95 5 1 0 1 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 0 6 134 0 3 0 2 8 3 2 105 0 7 9 1 8 1 7 8 105 4 1 1 0 0 1 87 4 1 1 1 0 95 5 1 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 6 0 6 134 0 2 8 3 2 89 7 1 3 9 1 8 1 3 8 105 4 1 1 0 0 1 87 4 1 1 1 0 95 5 1 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
20 20 20 31 20 30 37 17 17 19 33 35 17 16 10 6 30 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmO_Anusvara;
},
{
glyphname = dvmO_Reph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,0,l),
(270,571,l),
(346,571,l),
(346,740,l),
(265,740,l),
(264,742,ls),
(246,776,o),
(246,808,qs),
(246,831,o),
(268,859,o),
(290,859,qs),
(312,859,o),
(332,827,o),
(330,805,q),
(502,805,l),
(508,863,o),
(473,958,o),
(393,1014,o),
(334,1014,qs),
(263,1014,o),
(186,943,o),
(176,888,q),
(138,940,o),
(65,993,o),
(-22,1011,o),
(-89,1012,qs),
(-145,1012,l),
(-145,849,l),
(-86,849,ls),
(-44,849,o),
(3,832,o),
(42,789,o),
(75,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 6 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 5 2 1 6 5 114 0 9 0 9 134 0 6 2 3 6 89 4 1 3 0 2 5 3 2 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 5 2 1 6 5 114 0 9 0 9 134 0 4 0 6 2 4 6 105 0 3 0 2 5 3 2 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 5 2 1 6 5 114 0 9 0 9 134 0 6 2 3 6 89 4 1 3 0 2 5 3 2 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 5 2 1 2 5 1 128 0 9 0 9 134 0 6 2 3 6 89 4 1 3 0 2 5 3 2 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
36 35 17 36 34 19 37 33 35 17 16 10 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmO_Reph;
},
{
glyphname = dvmO_Reph_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(265,740,l),
(262,747,ls),
(241,787,o),
(241,822,qs),
(241,856,o),
(284,902,o),
(318,902,qs),
(360,902,o),
(403,849,o),
(401,814,q),
(537,814,l),
(543,879,o),
(500,976,o),
(409,1029,o),
(346,1029,qs),
(270,1029,o),
(181,957,o),
(166,901,q),
(131,947,o),
(60,994,o),
(-25,1011,o),
(-89,1012,qs),
(-145,1012,l),
(-145,849,l),
(-86,849,ls),
(-44,849,o),
(3,832,o),
(42,789,o),
(75,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
},
{
closed = 1;
nodes = (
(339,770,o),
(369,799,o),
(369,819,qs),
(369,840,o),
(339,869,o),
(318,869,qs),
(298,869,o),
(269,840,o),
(269,819,qs),
(269,799,o),
(298,770,o),
(318,770,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 10 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 5 2 11 6 5 114 12 1 9 0 9 134 0 4 0 6 10 4 6 105 0 3 0 2 5 3 2 105 0 10 13 1 11 1 10 11 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 5 2 11 2 5 11 128 12 1 9 0 9 134 0 4 0 6 10 4 6 105 0 3 0 2 5 3 2 105 0 10 13 1 11 1 10 11 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
37 37 0 0 37 48 37 47 43 41 0 36 0 36 17 21 34 19 37 33 35 17 17 14 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmO_Reph_Anusvara;
},
{
glyphname = dvmAU_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,0,l),
(270,571,l),
(346,571,l),
(346,740,l),
(258,740,l),
(166,917,o),
(73,1053,o),
(-17,1091,o),
(-108,1091,qs),
(-168,1091,l),
(-168,965,l),
(-103,965,ls),
(-66,965,o),
(-22,956,o),
(27,919,o),
(54,877,q),
(27,896,o),
(-15,912,o),
(-61,916,o),
(-112,916,qs),
(-168,916,l),
(-168,791,l),
(-107,791,ls),
(-56,791,o),
(-19,788,o),
(11,776,o),
(45,758,qs),
(80,740,l),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l)
);
},
{
closed = 1;
nodes = (
(403,783,o),
(470,849,o),
(470,896,qs),
(470,944,o),
(403,1010,o),
(355,1010,qs),
(308,1010,o),
(242,944,o),
(242,896,qs),
(242,849,o),
(308,783,o),
(355,783,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
15 1 2 3 1 76 0 8 0 8 134 0 5 0 4 3 5 4 105 0 3 0 2 10 3 2 105 0 9 11 1 10 1 9 10 105 6 1 1 0 0 1 87 6 1 1 1 0 95 7 1 0 1 0 79 32 32 32 43 32 42 38 36 17 17 19 33 38 33 36 17 16 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmAU_Anusvara;
},
{
glyphname = dvmAU_Reph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,0,l),
(270,571,l),
(346,571,l),
(346,740,l),
(258,740,l),
(254,748,ls),
(239,781,o),
(239,808,qs),
(239,831,o),
(261,859,o),
(283,859,qs),
(305,859,o),
(325,827,o),
(323,805,q),
(476,805,l),
(482,863,o),
(450,958,o),
(377,1014,o),
(324,1014,qs),
(258,1014,o),
(185,951,o),
(172,901,q),
(121,991,o),
(46,1070,o),
(-33,1091,o),
(-108,1091,qs),
(-168,1091,l),
(-168,965,l),
(-103,965,ls),
(-66,965,o),
(-22,956,o),
(27,919,o),
(54,877,q),
(27,896,o),
(-15,912,o),
(-61,916,o),
(-112,916,qs),
(-168,916,l),
(-168,791,l),
(-107,791,ls),
(-56,791,o),
(-19,788,o),
(11,776,o),
(45,758,qs),
(80,740,l),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
26 15 2 8 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 7 8 2 8 7 114 0 11 0 11 134 0 5 0 4 3 5 4 105 0 6 0 8 7 6 8 105 0 3 0 2 1 3 2 105 9 1 1 0 0 1 87 9 1 1 1 0 95 10 1 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 7 8 2 8 7 2 128 0 11 0 11 134 0 5 0 4 3 5 4 105 0 6 0 8 7 6 8 105 0 3 0 2 1 3 2 105 9 1 1 0 0 1 87 9 1 1 1 0 95 10 1 0 1 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
48 47 46 45 44 43 34 19 37 33 38 33 36 17 16 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmAU_Reph;
},
{
glyphname = dvmAU_Reph_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,0,l),
(270,571,l),
(346,571,l),
(346,740,l),
(258,740,l),
(255,746,ls),
(244,768,o),
(234,799,o),
(234,818,qs),
(234,855,o),
(276,902,o),
(311,902,qs),
(353,902,o),
(396,849,o),
(394,814,q),
(530,814,l),
(536,876,o),
(494,974,o),
(403,1029,o),
(339,1029,qs),
(269,1029,o),
(182,963,o),
(166,912,q),
(117,996,o),
(44,1071,o),
(-34,1091,o),
(-108,1091,qs),
(-168,1091,l),
(-168,965,l),
(-103,965,ls),
(-66,965,o),
(-22,956,o),
(27,919,o),
(54,877,q),
(27,896,o),
(-15,912,o),
(-61,916,o),
(-112,916,qs),
(-168,916,l),
(-168,791,l),
(-107,791,ls),
(-56,791,o),
(-19,788,o),
(11,776,o),
(45,758,qs),
(80,740,l),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l)
);
},
{
closed = 1;
nodes = (
(332,770,o),
(362,799,o),
(362,819,qs),
(362,840,o),
(332,869,o),
(311,869,qs),
(291,869,o),
(262,840,o),
(262,819,qs),
(262,799,o),
(291,770,o),
(311,770,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
26 1 8 3 15 1 12 8 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 7 12 2 8 7 114 0 11 0 11 134 0 5 0 4 3 5 4 105 0 6 0 8 12 6 8 105 0 3 0 2 13 3 2 105 0 12 14 1 13 1 12 13 105 9 1 1 0 0 1 87 9 1 1 1 0 95 10 1 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 7 12 2 12 7 2 128 0 11 0 11 134 0 5 0 4 3 5 4 105 0 6 0 8 12 6 8 105 0 3 0 2 13 3 2 105 0 12 14 1 13 1 12 13 105 9 1 1 0 0 1 87 9 1 1 1 0 95 10 1 0 1 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
50 50 50 61 50 60 56 54 49 48 47 46 45 44 34 19 37 33 38 33 36 17 16 15 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmAU_Reph_Anusvara;
},
{
glyphname = dvmEcandra_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-40,807,o),
(95,926,o),
(95,1040,q),
(-68,1040,l),
(-68,1000,o),
(-121,950,o),
(-167,950,qs),
(-213,950,o),
(-268,1000,o),
(-268,1040,q),
(-429,1040,l),
(-429,926,o),
(-294,807,o),
(-167,807,qs)
);
},
{
closed = 1;
nodes = (
(-137,989,o),
(-95,1031,o),
(-95,1062,qs),
(-95,1092,o),
(-137,1135,o),
(-169,1135,qs),
(-198,1135,o),
(-241,1092,o),
(-241,1062,qs),
(-241,1032,o),
(-199,989,o),
(-169,989,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
2 1 0 4 5 1 0 114 0 4 7 1 5 1 4 5 105 0 1 3 3 1 89 0 1 1 3 98 6 1 3 1 3 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
2 1 0 4 5 4 0 5 128 0 4 7 1 5 1 4 5 105 0 1 3 3 1 89 0 1 1 3 98 6 1 3 1 3 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
14 14 0 0 14 25 14 24 20 18 0 13 0 12 18 34 18 8 6 25 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmEcandra_Anusvara;
},
{
glyphname = dvmOcandra_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(66,0,l),
(270,0,l),
(270,571,l),
(346,571,l),
(346,740,l),
(-11,740,l),
(-11,571,l),
(66,571,l)
);
},
{
closed = 1;
nodes = (
(295,807,o),
(430,926,o),
(430,1040,q),
(267,1040,l),
(267,1000,o),
(214,950,o),
(168,950,qs),
(122,950,o),
(67,1000,o),
(67,1040,q),
(-94,1040,l),
(-94,926,o),
(41,807,o),
(168,807,qs)
);
},
{
closed = 1;
nodes = (
(198,989,o),
(240,1031,o),
(240,1062,qs),
(240,1092,o),
(198,1135,o),
(166,1135,qs),
(137,1135,o),
(94,1092,o),
(94,1062,qs),
(94,1032,o),
(137,989,o),
(166,989,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
6 1 4 8 9 5 4 114 0 2 1 2 134 0 8 12 1 9 5 8 9 105 0 5 11 1 7 0 5 7 106 0 0 1 1 0 87 0 0 0 1 95 10 3 2 1 0 1 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
6 1 4 8 9 8 4 9 128 0 2 1 2 134 0 8 12 1 9 5 8 9 105 0 5 11 1 7 0 5 7 106 0 0 1 1 0 87 0 0 0 1 95 10 3 2 1 0 1 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
22 22 8 8 0 0 22 33 22 32 28 26 8 21 8 20 18 17 15 13 11 10 0 7 0 7 17 17 17 13 6 25 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmOcandra_Anusvara;
},
{
glyphname = dvRA_mU;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-11,571,l),
(272,571,l),
(272,545,ls),
(272,493,o),
(220,438,o),
(148,438,qs),
(50,438,l),
(50,209,ls),
(50,147,o),
(104,48,o),
(209,-9,o),
(283,-9,qs),
(386,-9,o),
(501,106,o),
(501,203,qs),
(500,221,l),
(305,221,l),
(305,196,ls),
(305,182,o),
(292,164,o),
(279,164,qs),
(252,164,o),
(252,199,qs),
(252,276,l),
(583,276,ls),
(601,276,o),
(620,260,o),
(620,247,qs),
(620,217,o),
(580,217,qs),
(569,217,o),
(551,219,q),
(551,58,l),
(573,54,o),
(599,54,qs),
(691,54,o),
(800,156,o),
(800,240,qs),
(800,438,o),
(566,438,qs),
(455,438,l),
(476,489,o),
(476,545,qs),
(476,571,l),
(833,571,l),
(833,740,l),
(-11,740,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
14 1 3 6 13 1 2 5 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
14 1 3 4 13 1 2 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
14 1 3 6 13 1 2 5 2 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 6 4 3 5 6 114 11 1 10 9 1 0 1 10 0 103 8 1 1 0 4 6 1 4 103 0 5 2 7 5 89 0 3 0 2 7 3 2 105 0 5 5 7 98 0 7 5 7 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
11 1 10 9 1 0 1 10 0 103 8 1 1 0 4 3 1 4 103 0 5 2 7 5 89 6 1 3 0 2 7 3 2 105 0 5 5 7 98 0 7 5 7 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 6 4 3 5 6 114 11 1 10 9 1 0 1 10 0 103 8 1 1 0 4 6 1 4 103 0 5 2 7 5 89 0 3 0 2 7 3 2 105 0 5 5 7 98 0 7 5 7 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 6 4 3 4 6 3 128 11 1 10 9 1 0 1 10 0 103 8 1 1 0 4 6 1 4 103 0 5 2 7 5 89 0 3 0 2 7 3 2 105 0 5 5 7 98 0 7 5 7 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 46 0 46 45 44 36 35 19 34 35 35 35 35 17 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 821;
}
);
note = dvRA_mU;
},
{
glyphname = dvRA_mUU;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-11,571,l),
(272,571,l),
(272,545,ls),
(272,493,o),
(220,438,o),
(148,438,qs),
(50,438,l),
(50,209,ls),
(50,147,o),
(104,48,o),
(209,-9,o),
(283,-9,qs),
(386,-9,o),
(501,106,o),
(501,203,qs),
(500,221,l),
(305,221,l),
(305,196,ls),
(305,182,o),
(292,164,o),
(279,164,qs),
(252,164,o),
(252,199,qs),
(252,276,l),
(481,276,ls),
(521,276,o),
(563,233,o),
(563,198,qs),
(563,116,l),
(752,116,l),
(752,203,ls),
(752,312,o),
(626,438,o),
(503,438,qs),
(455,438,l),
(476,489,o),
(476,545,qs),
(476,571,l),
(788,571,l),
(788,740,l),
(-11,740,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 5 3 4 4 5 114 0 2 4 6 4 2 6 128 10 1 9 8 1 0 1 9 0 103 7 1 1 0 3 5 1 3 103 0 4 2 6 4 89 0 4 4 6 98 0 6 4 6 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 5 3 4 3 5 4 128 0 2 4 6 4 2 6 128 10 1 9 8 1 0 1 9 0 103 7 1 1 0 3 5 1 3 103 0 4 2 6 4 89 0 4 4 6 98 0 6 4 6 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 40 0 40 19 36 35 19 34 35 19 35 17 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 777;
}
);
note = dvRA_mUU;
},
{
glyphname = dvmI.a01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(269,740,l),
(276,809,o),
(369,888,o),
(439,888,qs),
(488,888,o),
(567,845,o),
(613,765,o),
(613,710,qs),
(613,696,l),
(811,696,l),
(811,714,ls),
(811,808,o),
(725,962,o),
(557,1053,o),
(439,1053,qs),
(324,1053,o),
(160,971,o),
(72,829,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 26 0 26 17 18 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a01;
},
{
glyphname = dvmI.a02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(269,740,l),
(276,811,o),
(380,889,o),
(467,889,qs),
(561,889,o),
(671,793,o),
(671,708,qs),
(671,694,l),
(870,694,l),
(870,713,ls),
(870,809,o),
(780,964,o),
(598,1054,o),
(467,1054,qs),
(341,1054,o),
(165,973,o),
(72,831,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 25 0 25 17 18 35 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a02;
},
{
glyphname = dvmI.a03;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(269,740,l),
(277,813,o),
(391,890,o),
(494,890,qs),
(607,890,o),
(729,794,o),
(729,705,qs),
(729,692,l),
(929,692,l),
(929,710,ls),
(929,809,o),
(835,965,o),
(640,1055,o),
(496,1055,qs),
(358,1055,o),
(169,974,o),
(72,832,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 25 0 25 17 18 35 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a03;
},
{
glyphname = dvmI.a04;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(269,740,l),
(285,891,o),
(521,891,qs),
(654,891,o),
(788,795,o),
(788,703,qs),
(788,691,l),
(987,691,l),
(987,708,ls),
(987,809,o),
(889,966,o),
(681,1056,o),
(523,1056,qs),
(301,1056,o),
(76,885,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 23 0 23 17 17 35 20 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a04;
},
{
glyphname = dvmI.a05;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(269,740,l),
(277,815,o),
(412,892,o),
(549,892,qs),
(847,892,o),
(847,701,qs),
(847,689,l),
(1046,689,l),
(1046,706,ls),
(1046,809,o),
(943,967,o),
(722,1057,o),
(552,1057,qs),
(312,1057,o),
(76,887,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 23 0 23 17 18 34 20 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a05;
},
{
glyphname = dvmI.a06;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(269,740,l),
(278,816,o),
(422,893,o),
(576,893,qs),
(747,893,o),
(904,796,o),
(904,699,qs),
(904,687,l),
(1104,687,l),
(1104,704,ls),
(1104,867,o),
(852,1058,o),
(580,1058,qs),
(323,1058,o),
(76,889,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 23 0 23 17 18 35 19 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a06;
},
{
glyphname = dvmI.a07;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(269,740,l),
(278,818,o),
(433,893,o),
(604,893,qs),
(795,893,o),
(963,797,o),
(963,697,qs),
(963,685,l),
(1162,685,l),
(1162,702,ls),
(1162,868,o),
(899,1058,o),
(609,1058,qs),
(334,1058,o),
(77,892,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 23 0 23 17 18 35 19 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a07;
},
{
glyphname = dvmI.a08;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(269,740,l),
(275,792,o),
(348,860,o),
(504,894,o),
(632,894,qs),
(773,894,o),
(945,851,o),
(1022,763,o),
(1022,695,qs),
(1022,684,l),
(1221,684,l),
(1221,700,ls),
(1221,1059,o),
(638,1059,qs),
(344,1059,o),
(77,894,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 24 0 24 17 19 36 18 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a08;
},
{
glyphname = dvmI.a09;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(269,740,l),
(275,793,o),
(352,861,o),
(518,895,o),
(658,895,qs),
(813,895,o),
(997,851,o),
(1078,763,o),
(1078,692,qs),
(1078,682,l),
(1279,682,l),
(1279,697,ls),
(1279,870,o),
(993,1060,o),
(665,1060,qs),
(354,1060,o),
(77,896,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 25 0 25 17 19 36 19 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a09;
},
{
glyphname = dvmI.a10;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(269,740,l),
(275,794,o),
(356,862,o),
(534,896,o),
(686,896,qs),
(854,896,o),
(1051,852,o),
(1137,762,o),
(1137,690,qs),
(1137,680,l),
(1337,680,l),
(1337,695,ls),
(1337,871,o),
(1041,1061,o),
(693,1061,qs),
(470,1061,o),
(197,985,o),
(73,844,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 26 0 26 17 19 36 19 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a10;
},
{
glyphname = dvmI.a11;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(269,740,l),
(276,794,o),
(360,863,o),
(550,897,o),
(714,897,qs),
(895,897,o),
(1105,853,o),
(1196,762,o),
(1196,688,qs),
(1196,678,l),
(1396,678,l),
(1396,693,ls),
(1396,810,o),
(1270,973,o),
(971,1062,o),
(721,1062,qs),
(486,1062,o),
(202,987,o),
(74,845,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a11;
},
{
glyphname = dvmI.a12;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(269,740,l),
(276,795,o),
(364,863,o),
(566,898,o),
(741,898,qs),
(936,898,o),
(1160,853,o),
(1255,761,o),
(1255,686,qs),
(1255,677,l),
(1455,677,l),
(1455,691,ls),
(1455,810,o),
(1324,974,o),
(1013,1063,o),
(750,1063,qs),
(502,1063,o),
(206,988,o),
(74,847,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a12;
},
{
glyphname = dvmI.a13;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(269,740,l),
(276,795,o),
(368,864,o),
(581,899,o),
(768,899,qs),
(976,899,o),
(1213,854,o),
(1312,762,o),
(1312,685,qs),
(1312,675,l),
(1514,675,l),
(1514,689,ls),
(1514,810,o),
(1379,975,o),
(1055,1064,o),
(778,1064,qs),
(518,1064,o),
(210,990,o),
(74,848,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a13;
},
{
glyphname = dvmI.a14;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(277,796,o),
(373,865,o),
(598,900,o),
(796,900,qs),
(1017,900,o),
(1267,855,o),
(1371,761,o),
(1371,682,qs),
(1371,674,l),
(1572,673,l),
(1572,686,ls),
(1572,810,o),
(1433,976,o),
(1097,1065,o),
(807,1065,qs),
(534,1065,o),
(215,992,o),
(74,850,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a14;
},
{
glyphname = dvmI.a15;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(277,797,o),
(376,866,o),
(613,901,o),
(824,901,qs),
(1059,901,o),
(1321,856,o),
(1430,761,o),
(1430,680,qs),
(1430,672,l),
(1631,672,l),
(1631,685,ls),
(1631,810,o),
(1488,977,o),
(1138,1066,o),
(835,1066,qs),
(550,1066,o),
(218,993,o),
(74,851,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a15;
},
{
glyphname = dvmI.a16;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(277,798,o),
(381,868,o),
(629,902,o),
(851,902,qs),
(1100,902,o),
(1375,857,o),
(1487,761,o),
(1487,678,qs),
(1487,671,l),
(1690,671,l),
(1690,683,ls),
(1690,811,o),
(1543,978,o),
(1180,1067,o),
(863,1067,qs),
(566,1067,o),
(222,995,o),
(74,853,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a16;
},
{
glyphname = dvmI.a17;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(277,799,o),
(385,868,o),
(644,903,o),
(879,903,qs),
(1140,903,o),
(1429,857,o),
(1546,760,o),
(1546,676,qs),
(1546,669,l),
(1748,669,l),
(1748,681,ls),
(1748,811,o),
(1597,979,o),
(1221,1068,o),
(891,1068,qs),
(581,1068,o),
(226,996,o),
(74,854,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a17;
},
{
glyphname = dvmI.a18;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(278,799,o),
(389,869,o),
(660,904,o),
(907,904,qs),
(1182,904,o),
(1483,858,o),
(1605,759,o),
(1605,674,qs),
(1605,667,l),
(1806,667,l),
(1806,679,ls),
(1806,811,o),
(1652,980,o),
(1264,1069,o),
(920,1069,qs),
(598,1069,o),
(231,998,o),
(75,856,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a18;
},
{
glyphname = dvmI.a19;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(278,800,o),
(393,870,o),
(675,905,o),
(933,905,qs),
(1221,905,o),
(1536,859,o),
(1662,759,o),
(1662,672,qs),
(1662,665,l),
(1864,665,l),
(1864,677,ls),
(1864,811,o),
(1705,981,o),
(1304,1070,o),
(947,1070,qs),
(613,1070,o),
(235,999,o),
(75,857,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a19;
},
{
glyphname = dvmI.a20;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(279,800,o),
(398,871,o),
(691,906,o),
(960,906,qs),
(1263,906,o),
(1590,859,o),
(1720,758,o),
(1720,669,qs),
(1720,664,l),
(1923,664,l),
(1923,674,ls),
(1923,811,o),
(1760,982,o),
(1347,1071,o),
(976,1071,qs),
(629,1071,o),
(239,1001,o),
(75,858,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a20;
},
{
glyphname = dvmI.a21;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(279,801,o),
(401,871,o),
(706,906,o),
(988,906,qs),
(1304,906,o),
(1644,859,o),
(1779,758,o),
(1779,667,qs),
(1779,662,l),
(1981,662,l),
(1981,672,ls),
(1981,811,o),
(1814,983,o),
(1388,1072,o),
(1004,1072,qs),
(643,1072,o),
(242,1003,o),
(75,860,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a21;
},
{
glyphname = dvmI.a22;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(279,801,o),
(405,872,o),
(722,907,o),
(1016,907,qs),
(1345,907,o),
(1698,860,o),
(1838,757,o),
(1838,665,qs),
(1838,660,l),
(2040,660,l),
(2040,670,ls),
(2040,811,o),
(1869,984,o),
(1430,1073,o),
(1032,1073,qs),
(659,1073,o),
(246,1004,o),
(75,861,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a22;
},
{
glyphname = dvmI.a23;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(279,802,o),
(409,873,o),
(737,908,o),
(1043,908,qs),
(1387,908,o),
(1752,861,o),
(1895,757,o),
(1895,663,qs),
(1895,658,l),
(2099,658,l),
(2099,668,ls),
(2099,811,o),
(1924,985,o),
(1472,1074,o),
(1060,1074,qs),
(675,1074,o),
(251,1005,o),
(75,863,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a23;
},
{
glyphname = dvmI.a24;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,571,l),
(346,571,l),
(346,740,l),
(270,740,l),
(279,803,o),
(413,874,o),
(752,909,o),
(1071,909,qs),
(1428,909,o),
(1806,862,o),
(1954,756,o),
(1954,661,qs),
(1954,657,l),
(2157,657,l),
(2157,666,ls),
(2157,811,o),
(1978,986,o),
(1514,1075,o),
(1089,1075,qs),
(690,1075,o),
(254,1007,o),
(75,864,o),
(67,740,q),
(-11,740,l),
(-11,571,l),
(66,571,l),
(66,0,l),
(270,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a24;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,281,o),
(143,281,qs),
(313,281,ls),
(324,281,o),
(324,291,qs),
(348,745,ls),
(348,755,o),
(339,755,qs),
(117,755,ls),
(108,755,o),
(108,745,qs),
(132,291,ls)
);
},
{
closed = 1;
nodes = (
(355,149,o),
(285,212,o),
(228,212,qs),
(170,212,o),
(100,149,o),
(100,101,qs),
(100,54,o),
(170,-8,o),
(228,-8,qs),
(285,-8,o),
(355,54,o),
(355,101,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 0 0 1 3 0 1 103 0 3 3 2 97 0 2 2 35 2 78 36 35 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 455;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = quotedbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(48,568,o),
(59,568,qs),
(187,568,ls),
(198,568,o),
(198,578,qs),
(209,793,ls),
(209,803,o),
(200,803,qs),
(45,803,ls),
(36,803,o),
(36,793,qs),
(48,578,ls)
);
},
{
closed = 1;
nodes = (
(293,568,o),
(304,568,qs),
(432,568,ls),
(443,568,o),
(443,578,qs),
(454,793,ls),
(454,803,o),
(445,803,qs),
(290,803,ls),
(281,803,o),
(281,793,qs),
(293,578,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 51 51 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 490;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(540,326,o),
(507,326,qs),
(439,326,ls),
(421,326,o),
(404,346,o),
(408,364,qs),
(413,390,ls),
(419,421,o),
(452,421,qs),
(520,421,ls),
(538,421,o),
(555,401,o),
(551,383,qs),
(546,357,ls)
);
},
{
closed = 1;
nodes = (
(469,0,o),
(480,0,qs),
(666,0,ls),
(676,0,o),
(677,9,qs),
(694,93,ls),
(700,124,o),
(733,124,qs),
(845,124,ls),
(855,124,o),
(855,134,qs),
(855,316,ls),
(855,326,o),
(845,326,qs),
(784,326,ls),
(766,326,o),
(749,346,o),
(753,364,qs),
(758,390,ls),
(764,421,o),
(797,421,qs),
(913,421,ls),
(923,421,o),
(923,431,qs),
(923,613,ls),
(923,623,o),
(913,623,qs),
(847,623,ls),
(829,623,o),
(812,643,o),
(816,661,qs),
(831,729,ls),
(833,740,o),
(822,740,qs),
(636,740,ls),
(627,740,o),
(625,731,qs),
(609,654,ls),
(603,623,o),
(570,623,qs),
(502,623,ls),
(484,623,o),
(467,643,o),
(471,661,qs),
(486,729,ls),
(488,740,o),
(477,740,qs),
(292,740,ls),
(283,740,o),
(281,731,qs),
(265,654,ls),
(259,623,o),
(226,623,qs),
(78,623,l),
(78,421,l),
(176,421,ls),
(194,421,o),
(211,401,o),
(207,383,qs),
(202,357,ls),
(196,326,o),
(163,326,qs),
(20,326,ls),
(10,326,o),
(10,316,qs),
(10,134,ls),
(10,124,o),
(20,124,qs),
(112,124,ls),
(130,124,o),
(147,104,o),
(143,86,qs),
(127,11,ls),
(125,0,o),
(136,0,qs),
(321,0,ls),
(331,0,o),
(332,9,qs),
(349,93,ls),
(355,124,o),
(388,124,qs),
(456,124,ls),
(474,124,o),
(491,104,o),
(487,86,qs),
(471,11,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
10 1 8 7 7 8 112 11 9 2 7 12 6 2 0 1 7 0 104 13 5 2 1 14 4 2 2 3 1 2 103 15 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
10 1 8 7 8 133 11 9 2 7 12 6 2 0 1 7 0 104 13 5 2 1 14 4 2 2 3 1 2 103 15 1 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
98 95 92 89 86 83 79 76 73 70 66 63 60 57 51 33 36 51 52 51 52 52 50 16 8 31 
CALL[ ]	/* CallFunction */";
};
width = 933;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = dollar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(361,-87,l),
(361,-7,l),
(448,-5,o),
(572,53,o),
(637,149,o),
(637,209,qs),
(637,279,o),
(566,367,o),
(469,412,o),
(394,435,qs),
(361,445,l),
(361,542,l),
(382,529,o),
(386,491,q),
(625,491,l),
(618,594,o),
(480,711,o),
(361,719,q),
(361,800,l),
(299,800,l),
(299,719,l),
(224,716,o),
(102,664,o),
(30,569,o),
(30,504,qs),
(30,429,o),
(105,338,o),
(205,294,o),
(283,273,qs),
(299,269,l),
(299,171,l),
(271,186,o),
(268,227,q),
(32,227,l),
(39,124,o),
(183,6,o),
(299,-5,q),
(299,-87,l)
);
},
{
closed = 1;
nodes = (
(400,170,o),
(361,162,q),
(361,248,l),
(400,230,o),
(400,204,qs)
);
},
{
closed = 1;
nodes = (
(268,544,o),
(299,550,q),
(299,470,l),
(268,488,o),
(268,514,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
45 25 2 4 1 44 39 26 7 4 0 4 40 6 0 3 5 0 3 76 0 0 4 5 4 0 5 128 0 2 0 6 2 6 99 0 4 4 1 97 3 1 1 1 34 77 0 5 5 35 5 78 17 27 18 17 17 27 19 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(21,452,o),
(121,360,o),
(202,360,qs),
(282,360,o),
(381,452,o),
(381,540,qs),
(381,628,o),
(282,721,o),
(202,721,qs),
(121,721,o),
(21,628,o),
(21,540,qs)
);
},
{
closed = 1;
nodes = (
(218,592,o),
(237,566,o),
(237,540,qs),
(237,515,o),
(218,489,o),
(200,489,qs),
(166,489,o),
(166,540,qs),
(166,592,o),
(200,592,qs)
);
},
{
closed = 1;
nodes = (
(177,0,l),
(389,0,l),
(762,711,l),
(550,711,l)
);
},
{
closed = 1;
nodes = (
(558,83,o),
(658,-10,o),
(738,-10,qs),
(819,-10,o),
(917,83,o),
(917,171,qs),
(917,259,o),
(819,352,o),
(738,352,qs),
(658,352,o),
(558,259,o),
(558,171,qs)
);
},
{
closed = 1;
nodes = (
(754,223,o),
(773,196,o),
(773,171,qs),
(773,145,o),
(754,119,o),
(737,119,qs),
(702,119,o),
(702,171,qs),
(702,223,o),
(737,223,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 0 1 6 2 1 105 0 6 12 1 9 8 6 9 106 10 1 3 3 0 97 11 5 2 0 0 34 77 0 8 8 4 97 7 1 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 2 0 1 6 2 1 105 0 6 12 1 9 8 6 9 106 11 1 5 5 28 77 10 1 3 3 0 97 0 0 0 34 77 0 4 4 29 77 0 8 8 7 97 0 7 7 35 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
38 38 22 22 12 12 38 47 38 46 42 40 35 33 29 27 22 25 22 25 24 23 12 21 12 20 37 36 33 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 938;
}
);
note = percent;
unicode = 37;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(598,524,o),
(598,534,qs),
(595,584,o),
(540,669,o),
(434,721,o),
(359,721,qs),
(283,721,o),
(173,668,o),
(116,578,o),
(116,524,qs),
(116,461,o),
(162,404,q),
(100,370,o),
(36,268,o),
(36,207,qs),
(36,143,o),
(104,44,o),
(231,-10,o),
(317,-10,qs),
(444,-10,o),
(538,46,q),
(582,5,ls),
(587,0,o),
(594,0,qs),
(813,0,ls),
(820,0,o),
(823,7,o),
(818,12,qs),
(664,162,l),
(720,240,o),
(758,340,qs),
(764,354,ls),
(766,359,o),
(761,366,o),
(756,366,qs),
(562,366,ls),
(553,366,o),
(550,358,q),
(550,357,l),
(539,323,o),
(525,296,q),
(364,452,ls),
(320,494,o),
(320,526,qs),
(320,543,o),
(343,562,o),
(359,562,qs),
(372,562,o),
(392,548,o),
(395,534,qs),
(396,524,o),
(406,524,qs),
(588,524,ls)
);
},
{
closed = 1;
nodes = (
(293,165,o),
(248,201,o),
(248,227,qs),
(248,243,o),
(265,274,o),
(282,286,q),
(400,176,l),
(369,165,o),
(333,165,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
40 1 2 0 55 54 11 3 6 2 31 23 2 3 6 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 1 5 0 0 1 114 7 1 0 0 5 98 0 5 5 34 77 0 2 2 3 97 4 1 3 3 29 77 8 1 6 6 3 97 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 1 5 0 0 1 114 7 1 0 0 5 98 0 5 5 34 77 0 2 2 3 95 0 3 3 29 77 8 1 6 6 4 97 0 4 4 35 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 1 5 0 5 1 0 128 7 1 0 0 5 98 0 5 5 34 77 0 2 2 3 95 0 3 3 29 77 8 1 6 6 4 97 0 4 4 35 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
53 53 1 0 53 61 53 60 47 45 34 32 28 26 17 15 6 4 0 52 1 51 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 831;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = quotesingle;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(58,568,o),
(69,568,qs),
(197,568,ls),
(208,568,o),
(208,578,qs),
(219,793,ls),
(219,803,o),
(210,803,qs),
(55,803,ls),
(46,803,o),
(46,793,qs),
(58,578,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 51 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 265;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(425,-209,l),
(328,-107,o),
(216,180,o),
(216,333,qs),
(216,485,o),
(328,772,o),
(425,874,q),
(425,895,l),
(211,895,l),
(115,804,o),
(4,506,o),
(4,333,qs),
(4,160,o),
(115,-138,o),
(211,-229,q),
(425,-229,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
14 8 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 15 0 15 22 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 463;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(38,-209,l),
(135,-107,o),
(247,180,o),
(247,333,qs),
(247,485,o),
(135,772,o),
(38,874,q),
(38,895,l),
(252,895,l),
(348,804,o),
(459,506,o),
(459,333,qs),
(459,160,o),
(348,-138,o),
(252,-229,q),
(38,-229,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
14 8 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 15 0 15 22 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 463;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,744,o),
(345,744,qs),
(226,744,ls),
(221,744,o),
(216,738,o),
(217,733,qs),
(234,668,ls),
(238,654,o),
(223,645,o),
(212,655,qs),
(161,700,ls),
(157,704,o),
(149,703,o),
(147,698,q),
(91,597,ls),
(89,593,o),
(92,586,o),
(97,584,qs),
(154,567,ls),
(168,563,o),
(168,547,o),
(154,542,qs),
(95,522,ls),
(85,519,o),
(90,509,qs),
(153,400,l),
(155,395,o),
(163,394,o),
(167,398,qs),
(211,443,ls),
(222,454,o),
(237,446,o),
(233,431,qs),
(219,371,ls),
(216,360,o),
(227,360,qs),
(344,360,ls),
(349,360,o),
(354,366,o),
(352,371,q),
(338,432,ls),
(335,446,o),
(350,455,o),
(360,445,qs),
(406,399,ls),
(410,395,o),
(418,396,o),
(420,401,q),
(481,508,ls),
(486,518,o),
(476,521,qs),
(417,540,ls),
(404,545,o),
(404,561,o),
(417,565,qs),
(476,585,ls),
(481,587,o),
(484,594,o),
(482,598,qs),
(425,699,ls),
(420,709,o),
(412,701,qs),
(359,654,ls),
(348,644,o),
(333,653,o),
(337,667,qs),
(353,733,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
60 26 7 3 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 65 62 31 28 2 8 22 
CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,595,o),
(169,585,qs),
(169,466,ls),
(169,441,o),
(144,441,qs),
(30,441,ls),
(20,441,o),
(20,431,qs),
(20,248,ls),
(20,238,o),
(30,238,qs),
(144,238,ls),
(169,238,o),
(169,213,qs),
(169,95,ls),
(169,85,o),
(179,85,qs),
(372,85,ls),
(382,85,o),
(382,95,qs),
(382,213,ls),
(382,238,o),
(407,238,qs),
(521,238,ls),
(531,238,o),
(531,248,qs),
(531,431,ls),
(531,441,o),
(521,441,qs),
(407,441,ls),
(382,441,o),
(382,466,qs),
(382,585,ls),
(382,595,o),
(372,595,qs),
(179,595,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
6 1 0 1 3 0 87 5 1 1 4 1 2 3 1 2 103 6 1 0 0 3 95 0 3 0 3 79 1 0 31 28 25 22 19 16 13 10 7 4 0 35 1 34 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = plus;
unicode = 43;
},
{
glyphname = comma;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(33,-155,o),
(39,-161,o),
(43,-161,qs),
(169,-161,ls),
(178,-161,o),
(181,-153,qs),
(306,194,l),
(309,205,o),
(298,205,qs),
(99,205,ls),
(91,205,o),
(89,196,qs),
(34,-150,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 35 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 348;
}
);
note = comma;
unicode = 44;
},
{
glyphname = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,270,o),
(56,270,qs),
(450,270,ls),
(460,270,o),
(460,280,qs),
(460,403,ls),
(460,413,o),
(450,413,qs),
(56,413,ls),
(46,413,o),
(46,403,qs),
(46,280,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 51 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,149,o),
(217,212,o),
(160,212,qs),
(102,212,o),
(32,149,o),
(32,101,qs),
(32,54,o),
(102,-8,o),
(160,-8,qs),
(217,-8,o),
(287,54,o),
(287,101,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 97 0 0 0 35 0 78 36 33 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 319;
}
);
note = period;
unicode = 46;
},
{
glyphname = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-35,-198,o),
(-25,-198,qs),
(168,-198,ls),
(177,-198,o),
(179,-189,qs),
(439,944,ls),
(441,955,o),
(431,955,qs),
(239,955,ls),
(230,955,o),
(228,946,qs),
(-33,-187,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 51 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 399;
}
);
note = slash;
unicode = 47;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,203,o),
(179,4,o),
(332,4,qs),
(484,4,o),
(632,203,o),
(632,376,qs),
(632,548,o),
(484,747,o),
(332,747,qs),
(179,747,o),
(32,549,o),
(32,376,qs)
);
},
{
closed = 1;
nodes = (
(413,295,o),
(381,214,o),
(332,214,qs),
(282,214,o),
(250,295,o),
(250,376,qs),
(250,456,o),
(282,537,o),
(332,537,qs),
(381,537,o),
(413,456,o),
(413,376,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 0 0 2 3 0 2 105 0 3 3 1 97 0 1 1 29 1 78 36 36 36 33 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 662;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(349,0,l),
(349,686,ls),
(349,708,o),
(326,731,o),
(304,731,qs),
(58,731,l),
(10,523,l),
(71,523,ls),
(93,523,o),
(116,500,o),
(116,478,qs),
(116,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 28 77 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 1 0 0 2 1 0 105 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
19 33 34 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 399;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(535,10,ls),
(545,10,o),
(545,20,qs),
(545,144,ls),
(545,166,o),
(522,189,o),
(500,189,qs),
(316,189,l),
(413,250,o),
(542,427,o),
(542,528,qs),
(542,624,o),
(423,747,o),
(295,747,qs),
(184,747,o),
(33,620,o),
(25,488,qs),
(25,478,o),
(35,478,qs),
(197,478,ls),
(217,478,o),
(237,500,o),
(243,523,qs),
(251,561,o),
(280,561,qs),
(297,561,o),
(318,535,o),
(318,511,qs),
(318,440,o),
(162,277,o),
(28,177,q),
(28,10,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 4 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 3 0 1 114 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 29 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 4 4 3 87 0 3 3 4 95 0 4 3 4 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 37 35 51 37 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(239,502,o),
(258,521,o),
(267,543,qs),
(276,564,o),
(298,564,qs),
(314,564,o),
(335,540,o),
(335,515,qs),
(335,457,o),
(267,461,qs),
(256,461,ls),
(231,461,o),
(231,436,qs),
(231,307,ls),
(231,282,o),
(256,282,qs),
(268,282,ls),
(312,282,o),
(349,253,o),
(349,225,qs),
(349,203,o),
(325,176,o),
(307,176,qs),
(268,176,o),
(257,207,qs),
(250,229,o),
(231,249,o),
(211,249,qs),
(47,249,ls),
(37,249,o),
(37,239,qs),
(42,112,o),
(190,-7,o),
(317,-7,qs),
(393,-7,o),
(504,47,o),
(564,145,o),
(564,209,qs),
(564,322,o),
(462,368,qs),
(451,373,o),
(451,382,o),
(462,387,qs),
(499,405,o),
(551,482,o),
(551,543,qs),
(551,601,o),
(494,693,o),
(382,747,o),
(303,747,qs),
(184,747,o),
(51,627,o),
(45,512,qs),
(45,502,o),
(55,502,qs),
(220,502,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
8 1 0 7 6 7 0 114 0 3 5 4 4 3 114 0 1 0 7 0 1 7 105 0 6 0 5 3 6 5 105 0 4 4 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
8 1 0 7 6 7 0 114 0 3 5 4 5 3 4 128 0 1 0 7 0 1 7 105 0 6 0 5 3 6 5 105 0 4 4 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
8 1 0 7 6 7 0 6 128 0 3 5 4 5 3 4 128 0 1 0 7 0 1 7 105 0 6 0 5 3 6 5 105 0 4 4 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 51 49 46 43 40 37 33 31 28 25 22 20 6 4 0 55 1 54 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,10,ls),
(365,0,o),
(375,0,qs),
(579,0,ls),
(589,0,o),
(589,10,qs),
(589,110,l),
(651,110,ls),
(661,110,o),
(661,120,qs),
(661,292,ls),
(661,302,o),
(651,302,qs),
(634,302,ls),
(612,302,o),
(589,325,o),
(589,347,qs),
(589,710,ls),
(589,720,o),
(579,720,qs),
(350,720,l),
(52,295,l),
(52,110,l),
(365,110,l)
);
},
{
closed = 1;
nodes = (
(275,302,l),
(383,467,l),
(383,302,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
24 1 1 0 1 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
5 1 1 6 4 2 2 3 1 2 106 0 0 0 28 77 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 1 0 133 5 1 1 6 4 2 2 3 1 2 106 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 26 25 0 23 0 23 50 35 52 34 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(94,731,o),
(94,721,qs),
(94,283,l),
(310,283,l),
(310,296,o),
(332,316,o),
(353,316,qs),
(378,316,o),
(405,286,o),
(405,257,qs),
(405,226,o),
(381,190,o),
(356,190,qs),
(335,190,o),
(313,211,o),
(310,225,qs),
(309,234,o),
(300,234,qs),
(103,234,ls),
(93,234,o),
(93,224,qs),
(94,158,o),
(160,57,o),
(283,0,o),
(367,0,qs),
(485,0,o),
(620,133,o),
(620,253,qs),
(620,318,o),
(574,425,o),
(480,489,o),
(412,489,qs),
(374,489,o),
(313,469,o),
(294,452,q),
(294,526,ls),
(294,536,o),
(304,536,qs),
(539,536,ls),
(561,536,o),
(584,559,o),
(584,581,qs),
(584,721,ls),
(584,731,o),
(574,731,qs),
(104,731,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
10 1 6 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 1 6 1 2 6 128 0 6 7 1 6 7 126 0 7 4 1 7 4 126 0 4 5 5 4 112 0 1 1 0 95 8 1 0 0 28 77 0 5 5 3 98 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 2 1 6 1 2 6 128 0 6 7 1 6 7 126 0 7 4 1 7 4 126 0 4 5 5 4 112 8 1 0 0 1 2 0 1 103 0 5 5 3 98 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 1 6 1 2 6 128 0 6 7 1 6 7 126 0 7 4 1 7 4 126 0 4 5 1 4 5 126 8 1 0 0 1 2 0 1 103 0 5 5 3 98 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 42 41 39 37 33 31 28 25 21 19 14 12 8 5 0 45 1 44 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(567,509,o),
(572,515,o),
(571,519,q),
(563,615,o),
(442,744,o),
(326,744,qs),
(229,744,o),
(108,664,o),
(52,496,o),
(52,360,qs),
(52,186,o),
(174,-7,o),
(331,-7,qs),
(410,-7,o),
(526,53,o),
(589,164,o),
(589,239,qs),
(589,351,o),
(474,469,o),
(378,469,qs),
(335,469,o),
(267,437,o),
(249,409,q),
(249,490,o),
(274,567,o),
(312,567,qs),
(340,567,o),
(353,546,qs),
(365,526,o),
(386,509,o),
(404,509,qs),
(562,509,ls)
);
},
{
closed = 1;
nodes = (
(350,299,o),
(382,269,o),
(382,242,qs),
(382,212,o),
(351,183,o),
(323,183,qs),
(295,183,o),
(264,212,o),
(264,242,qs),
(264,269,o),
(296,299,o),
(323,299,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 6 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 0 1 2 1 0 114 0 2 8 1 6 5 2 6 105 0 1 1 4 97 0 4 4 34 77 0 5 5 3 97 0 3 3 35 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
7 1 0 1 2 1 0 114 0 4 0 1 0 4 1 105 0 2 8 1 6 5 2 6 105 0 5 5 3 97 0 3 3 35 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 0 1 2 1 0 114 0 2 8 1 6 5 2 6 105 0 1 1 4 97 0 4 4 34 77 0 5 5 3 97 0 3 3 35 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
7 1 0 1 2 1 0 114 0 4 0 1 0 4 1 105 0 2 8 1 6 5 2 6 105 0 5 5 3 97 0 3 3 35 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
7 1 0 1 2 1 0 2 128 0 4 0 1 0 4 1 105 0 2 8 1 6 5 2 6 105 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
32 32 1 0 32 43 32 42 38 36 26 24 19 17 12 10 6 4 0 31 1 30 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(18,731,o),
(18,721,qs),
(18,586,ls),
(18,564,o),
(41,541,o),
(63,541,qs),
(219,541,ls),
(245,541,o),
(264,513,o),
(254,489,qs),
(51,12,ls),
(49,7,o),
(54,0,o),
(59,0,qs),
(266,0,ls),
(274,0,o),
(277,8,qs),
(502,568,l),
(502,686,ls),
(502,708,o),
(479,731,o),
(457,731,qs),
(28,731,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 2 2 0 95 3 1 0 0 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
3 1 0 0 2 1 0 2 103 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
1 0 17 14 8 6 0 22 1 21 4 8 22 
CALL[ ]	/* CallFunction */";
};
width = 512;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(48,343,o),
(48,225,qs),
(48,149,o),
(124,43,o),
(252,-11,o),
(328,-11,qs),
(404,-11,o),
(532,43,o),
(608,149,o),
(608,225,qs),
(608,343,o),
(507,402,q),
(547,425,o),
(592,500,o),
(592,552,qs),
(592,606,o),
(534,694,o),
(415,747,o),
(328,747,qs),
(241,747,o),
(122,694,o),
(64,606,o),
(64,552,qs),
(64,500,o),
(109,425,o),
(149,402,q)
);
},
{
closed = 1;
nodes = (
(308,456,o),
(282,486,o),
(282,515,qs),
(282,543,o),
(308,576,o),
(328,576,qs),
(348,576,o),
(374,543,o),
(374,515,qs),
(374,486,o),
(348,456,o),
(328,456,qs)
);
},
{
closed = 1;
nodes = (
(358,307,o),
(393,268,o),
(393,238,qs),
(393,208,o),
(359,170,o),
(328,170,qs),
(297,170,o),
(263,208,o),
(263,238,qs),
(263,268,o),
(298,307,o),
(328,307,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
25 13 2 5 3 1 76 0 0 0 2 3 0 2 105 6 1 3 7 1 5 4 3 5 105 0 4 4 1 97 0 1 1 35 1 78 38 38 26 26 38 49 38 48 44 42 26 37 26 36 42 43 37 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(52,228,o),
(47,222,o),
(48,218,q),
(54,158,o),
(116,56,o),
(228,-7,o),
(305,-7,qs),
(448,-7,o),
(569,191,o),
(569,389,qs),
(569,561,o),
(446,747,o),
(288,747,qs),
(210,747,o),
(93,687,o),
(30,576,o),
(30,501,qs),
(30,388,o),
(146,268,o),
(241,268,qs),
(284,268,o),
(352,300,o),
(370,328,q),
(370,245,o),
(347,170,o),
(310,170,qs),
(280,170,o),
(267,192,qs),
(254,212,o),
(233,228,o),
(215,228,qs),
(57,228,ls)
);
},
{
closed = 1;
nodes = (
(269,438,o),
(237,468,o),
(237,495,qs),
(237,525,o),
(268,554,o),
(296,554,qs),
(324,554,o),
(355,525,o),
(355,495,qs),
(355,468,o),
(323,438,o),
(296,438,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
7 1 0 2 1 1 0 114 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 98 0 4 4 35 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
7 1 0 2 1 2 0 1 128 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 98 0 4 4 35 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
32 32 1 0 32 43 32 42 38 36 25 23 19 17 12 10 6 4 0 31 1 30 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = nine;
unicode = 57;
},
{
glyphname = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,149,o),
(217,212,o),
(160,212,qs),
(102,212,o),
(32,149,o),
(32,101,qs),
(32,54,o),
(102,-8,o),
(160,-8,qs),
(217,-8,o),
(287,54,o),
(287,101,qs)
);
},
{
closed = 1;
nodes = (
(287,545,o),
(217,608,o),
(160,608,qs),
(102,608,o),
(32,545,o),
(32,497,qs),
(32,450,o),
(102,388,o),
(160,388,qs),
(217,388,o),
(287,450,o),
(287,497,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 3 0 2 1 3 2 105 0 1 1 0 97 0 0 0 35 0 78 36 36 36 33 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 319;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,530,o),
(253,593,o),
(196,593,qs),
(138,593,o),
(68,530,o),
(68,482,qs),
(68,435,o),
(138,373,o),
(196,373,qs),
(253,373,o),
(323,435,o),
(323,482,qs)
);
},
{
closed = 1;
nodes = (
(54,-161,l),
(200,-161,l),
(332,205,l),
(112,205,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
4 1 3 0 2 3 2 99 0 0 0 1 97 0 1 1 37 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 0 3 1 0 105 4 1 3 2 2 3 87 4 1 3 3 2 95 0 2 3 2 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
12 12 12 15 12 15 20 36 33 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 385;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(305,330,o),
(305,350,o),
(312,358,qs),
(467,544,ls),
(471,549,o),
(467,556,o),
(461,556,qs),
(207,556,ls),
(200,556,o),
(195,550,qs),
(35,358,ls),
(28,350,o),
(28,330,o),
(35,322,qs),
(195,131,ls),
(200,125,o),
(207,125,qs),
(461,125,ls),
(467,125,o),
(471,133,o),
(467,137,qs),
(312,322,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 1 0 1 1 76 0 0 0 1 95 0 1 1 31 0 78 40 34 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 497;
}
);
note = less;
unicode = 60;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,99,o),
(30,99,qs),
(596,99,ls),
(606,99,o),
(606,109,qs),
(606,290,ls),
(606,300,o),
(596,300,qs),
(30,300,ls),
(20,300,o),
(20,290,qs),
(20,109,ls)
);
},
{
closed = 1;
nodes = (
(20,379,o),
(30,379,qs),
(596,379,ls),
(606,379,o),
(606,389,qs),
(606,570,ls),
(606,580,o),
(596,580,qs),
(30,580,ls),
(20,580,o),
(20,570,qs),
(20,389,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 1 0 1 99 0 3 3 2 95 0 2 2 31 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 103 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
51 51 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 626;
}
);
note = equal;
unicode = 61;
},
{
glyphname = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(26,133,o),
(30,125,o),
(36,125,qs),
(290,125,ls),
(298,125,o),
(302,131,q),
(462,322,l),
(470,330,o),
(470,350,o),
(462,358,q),
(302,550,l),
(298,556,o),
(290,556,qs),
(36,556,ls),
(30,556,o),
(26,549,o),
(30,544,qs),
(185,358,l),
(193,350,o),
(193,330,o),
(185,322,q),
(30,137,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 31 1 78 40 38 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 497;
}
);
note = greater;
unicode = 62;
},
{
glyphname = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(227,548,o),
(228,558,qs),
(230,574,o),
(248,593,o),
(266,593,qs),
(281,593,o),
(300,573,o),
(301,556,qs),
(302,525,o),
(240,498,o),
(179,498,qs),
(95,498,l),
(101,296,ls),
(101,286,o),
(111,286,qs),
(287,286,ls),
(292,286,o),
(298,292,o),
(298,296,qs),
(303,357,l),
(399,359,o),
(518,467,o),
(518,555,qs),
(518,662,o),
(383,773,o),
(272,773,qs),
(188,773,o),
(74,715,o),
(17,617,o),
(18,558,qs),
(18,548,o),
(28,548,qs),
(217,548,ls)
);
},
{
closed = 1;
nodes = (
(329,149,o),
(259,212,o),
(202,212,qs),
(144,212,o),
(74,149,o),
(74,101,qs),
(74,54,o),
(144,-8,o),
(202,-8,qs),
(259,-8,o),
(329,54,o),
(329,101,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 5 1 0 0 5 114 0 2 4 3 4 2 3 128 0 1 8 1 0 4 1 0 103 0 4 0 3 7 4 3 103 0 7 7 6 97 0 6 6 35 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 5 1 0 1 5 0 128 0 2 4 3 4 2 3 128 0 1 8 1 0 4 1 0 103 0 4 0 3 7 4 3 103 0 7 7 6 97 0 6 6 35 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 42 40 36 34 28 26 22 20 18 15 12 11 7 5 0 32 1 31 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 538;
}
);
note = question;
unicode = 63;
},
{
glyphname = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(865,-4,o),
(989,80,o),
(1053,225,o),
(1053,315,qs),
(1053,424,o),
(952,593,o),
(766,687,o),
(645,687,qs),
(486,687,o),
(226,546,o),
(76,295,o),
(76,136,qs),
(76,22,o),
(174,-151,o),
(354,-245,o),
(473,-245,qs),
(595,-245,o),
(698,-203,qs),
(708,-198,o),
(705,-190,qs),
(681,-105,ls),
(669,-62,o),
(625,-76,qs),
(557,-96,o),
(483,-96,qs),
(368,-96,o),
(236,38,o),
(236,152,qs),
(236,257,o),
(339,436,o),
(518,541,o),
(626,541,qs),
(706,541,o),
(825,483,o),
(890,378,o),
(890,309,qs),
(890,235,o),
(849,138,o),
(809,138,qs),
(768,138,o),
(780,201,qs),
(810,373,ls),
(814,396,o),
(793,422,o),
(770,422,qs),
(656,422,ls),
(647,422,o),
(645,413,qs),
(637,364,l),
(627,393,o),
(572,427,o),
(531,427,qs),
(469,427,o),
(369,350,o),
(313,224,o),
(313,153,qs),
(313,77,o),
(395,-7,o),
(468,-7,qs),
(521,-7,o),
(604,34,o),
(629,73,q),
(646,36,o),
(723,-4,o),
(778,-4,qs)
);
},
{
closed = 1;
nodes = (
(607,191,o),
(566,147,o),
(541,147,qs),
(521,147,o),
(498,173,o),
(498,195,qs),
(498,229,o),
(538,274,o),
(564,274,qs),
(583,274,o),
(607,247,o),
(607,224,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
15 1 9 1 2 1 0 3 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
15 1 9 2 2 1 0 3 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
2 1 1 0 9 3 1 9 105 0 5 0 6 5 6 102 0 4 4 7 97 0 7 7 28 77 10 1 3 3 0 98 11 8 2 0 0 35 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 7 0 4 1 7 4 105 2 1 1 0 9 3 1 9 105 0 5 0 6 5 6 102 10 1 3 3 0 98 11 8 2 0 0 35 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 10 9 3 9 10 3 128 0 7 0 4 1 7 4 105 2 1 1 0 9 10 1 9 105 0 5 0 6 5 6 102 0 3 3 0 98 11 8 2 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 9 1 2 9 128 0 10 9 3 9 10 3 128 0 7 0 4 1 7 4 105 0 1 0 9 10 1 9 105 0 5 0 6 5 6 102 0 3 3 0 98 11 8 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
0 0 74 72 68 66 0 64 0 63 38 39 37 37 36 52 37 36 12 8 30 
CALL[ ]	/* CallFunction */";
};
width = 1129;
}
);
note = at;
unicode = 64;
},
{
glyphname = A;
lastChange = "2022-10-21 05:12:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(530,29,ls),
(536,12,o),
(551,0,o),
(569,0,cs),
(761,0,ls),
(768,0,o),
(771,4,o),
(769,11,cs),
(525,681,ls),
(519,698,o),
(504,708,o),
(486,708,cs),
(288,708,ls),
(270,708,o),
(255,698,o),
(249,681,cs),
(4,11,ls),
(2,4,o),
(5,0,o),
(12,0,cs),
(203,0,ls),
(221,0,o),
(236,12,o),
(242,29,cs),
(265,99,ls),
(267,104,o),
(272,107,o),
(277,107,cs),
(495,107,ls),
(500,107,o),
(505,104,o),
(507,99,cs)
);
},
{
closed = 1;
nodes = (
(446,285,ls),
(448,278,o),
(445,274,o),
(438,274,cs),
(334,274,ls),
(327,274,o),
(324,278,o),
(326,285,cs),
(380,451,ls),
(383,461,o),
(389,461,o),
(392,451,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
7 1 5 0 2 1 5 2 103 0 4 4 0 97 0 0 0 34 77 6 3 2 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
6 3 2 1 2 1 134 7 1 5 0 2 1 5 2 103 0 4 4 0 97 0 0 0 34 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
33 33 0 0 33 44 33 43 39 38 0 32 0 31 53 53 54 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 795;
}
);
note = A;
unicode = 65;
},
{
glyphname = B;
lastChange = "2022-10-20 17:42:28 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(52,9,o),
(61,0,o),
(67,0,qs),
(384,0,ls),
(459,0,o),
(585,52,o),
(659,144,o),
(659,200,qs),
(659,258,o),
(573,337,o),
(512,362,q),
(564,389,o),
(638,467,o),
(638,517,qs),
(638,570,o),
(565,659,o),
(441,710,o),
(367,710,qs),
(67,710,ls),
(61,710,o),
(52,701,o),
(52,695,qs),
(52,15,ls)
);
},
{
closed = 1;
nodes = (
(256,530,ls),
(256,544,o),
(277,565,o),
(292,565,qs),
(344,565,ls),
(378,565,o),
(421,529,o),
(421,497,qs),
(421,464,o),
(377,424,o),
(344,424,qs),
(256,424,l)
);
},
{
closed = 1;
nodes = (
(256,252,ls),
(256,267,o),
(277,288,o),
(292,288,qs),
(349,288,ls),
(385,288,o),
(443,249,o),
(443,218,qs),
(443,185,o),
(396,144,o),
(363,144,qs),
(256,144,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 1 3 0 11 1 5 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
6 1 2 0 5 4 2 5 105 0 3 3 0 95 0 0 0 28 77 7 1 4 4 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
6 1 2 0 5 4 2 5 105 7 1 4 0 1 4 1 99 0 3 3 0 95 0 0 0 28 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
36 35 24 23 43 40 35 46 36 46 31 28 23 34 24 34 44 50 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 684;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,250,o),
(115,86,o),
(273,-5,o),
(380,-5,qs),
(507,-5,o),
(683,124,o),
(714,235,qs),
(719,253,o),
(701,274,o),
(683,274,qs),
(517,274,ls),
(503,274,o),
(484,262,o),
(475,250,qs),
(458,226,o),
(407,200,o),
(376,200,qs),
(320,200,o),
(255,284,o),
(255,355,qs),
(255,426,o),
(320,510,o),
(376,510,qs),
(407,510,o),
(458,484,o),
(475,460,qs),
(484,448,o),
(503,436,o),
(517,436,qs),
(683,436,ls),
(701,436,o),
(719,457,o),
(714,475,qs),
(683,586,o),
(507,715,o),
(380,715,qs),
(273,715,o),
(115,624,o),
(30,460,o),
(30,355,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 114 0 4 3 3 4 112 0 2 2 0 97 0 0 0 34 77 0 3 3 5 98 0 5 5 35 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 34 77 0 3 3 5 98 0 5 5 35 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 52 36 36 52 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = C;
unicode = 67;
},
{
glyphname = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(71,7,o),
(91,-10,o),
(104,-10,qs),
(348,-10,ls),
(447,-10,o),
(615,88,o),
(714,254,o),
(714,351,qs),
(714,448,o),
(615,613,o),
(447,710,o),
(348,710,qs),
(104,710,ls),
(91,710,o),
(71,693,o),
(71,681,qs),
(71,19,ls)
);
},
{
closed = 1;
nodes = (
(257,508,ls),
(257,525,o),
(276,543,o),
(292,543,qs),
(338,543,ls),
(390,543,o),
(472,493,o),
(518,406,o),
(518,351,qs),
(518,296,o),
(472,208,o),
(390,158,o),
(338,158,qs),
(257,158,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 0 95 0 0 0 28 77 4 1 2 2 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
4 1 2 0 1 2 1 99 0 3 3 0 95 0 0 0 28 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
18 17 27 24 17 30 18 30 54 50 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 743;
}
);
note = D;
unicode = 68;
},
{
glyphname = E;
lastChange = "2022-10-20 17:42:17 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(515,0,ls),
(525,0,o),
(525,10,qs),
(525,130,ls),
(525,147,o),
(507,165,o),
(490,165,qs),
(249,165,ls),
(238,165,o),
(229,176,o),
(229,189,qs),
(229,278,ls),
(229,279,o),
(227,279,o),
(226,279,q),
(226,278,o),
(224,278,qs),
(442,278,ls),
(462,278,o),
(476,288,o),
(476,307,qs),
(476,414,ls),
(476,433,o),
(462,443,o),
(442,443,qs),
(224,443,ls),
(226,443,o),
(226,442,q),
(227,442,o),
(229,442,o),
(229,443,qs),
(229,521,ls),
(229,534,o),
(238,545,o),
(249,545,qs),
(490,545,ls),
(507,545,o),
(525,564,o),
(525,580,qs),
(525,700,ls),
(525,710,o),
(515,710,qs),
(53,710,ls),
(47,710,o),
(43,706,o),
(43,700,cs),
(43,10,ls),
(43,4,o),
(47,0,o),
(53,0,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 28 77 0 4 4 5 95 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 2 0 3 4 2 3 103 0 4 0 5 4 5 99 0 1 1 0 95 0 0 0 28 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
52 56 37 115 52 49 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = E;
unicode = 69;
},
{
glyphname = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,0,o),
(60,0,qs),
(262,0,ls),
(272,0,o),
(272,10,qs),
(272,257,ls),
(272,267,o),
(282,267,qs),
(462,267,ls),
(472,267,o),
(472,277,qs),
(472,424,ls),
(472,434,o),
(462,434,qs),
(282,434,ls),
(272,434,o),
(272,444,qs),
(272,497,ls),
(272,514,o),
(291,532,o),
(307,532,qs),
(515,532,ls),
(532,532,o),
(550,551,o),
(550,567,qs),
(550,698,ls),
(550,708,o),
(540,708,qs),
(85,708,ls),
(69,708,o),
(50,690,o),
(50,673,qs),
(50,10,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 28 77 0 4 4 29 4 78 51 51 52 52 50 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
lastChange = "2022-10-20 09:09:54 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,715,o),
(30,566,o),
(30,355,cs),
(30,144,o),
(167,-5,o),
(390,-5,cs),
(573,-5,o),
(673,102,o),
(722,187,c),
(722,399,ls),
(722,405,o),
(718,409,o),
(712,409,cs),
(406,409,ls),
(377,409,o),
(361,393,o),
(361,364,cs),
(361,262,ls),
(361,256,o),
(365,252,o),
(371,252,cs),
(538,252,l),
(505,208,o),
(464,190,o),
(414,190,cs),
(305,190,o),
(255,245,o),
(255,355,cs),
(255,449,o),
(303,510,o),
(389,510,cs),
(419,510,o),
(443,503,o),
(461,490,cs),
(480,476,o),
(494,466,o),
(517,466,cs),
(707,466,ls),
(713,466,o),
(717,470,o),
(716,477,cs),
(691,622,o),
(572,715,o),
(388,715,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
28 1 3 4 1 76 0 1 2 5 2 1 5 128 0 3 4 3 134 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 34 2 78 52 34 38 36 24 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = G;
unicode = 71;
},
{
glyphname = H;
lastChange = "2022-10-20 17:21:54 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,51,ls),
(488,21,o),
(511,0,o),
(553,0,cs),
(689,0,ls),
(702,0,o),
(709,7,o),
(709,15,cs),
(709,708,ls),
(709,716,o),
(702,723,o),
(689,723,cs),
(508,723,ls),
(495,723,o),
(488,716,o),
(488,708,cs),
(488,470,ls),
(488,445,o),
(482,439,o),
(463,439,cs),
(263,439,l),
(263,443,l),
(263,672,ls),
(263,702,o),
(240,723,o),
(198,723,cs),
(62,723,ls),
(49,723,o),
(42,716,o),
(42,708,cs),
(42,15,ls),
(42,7,o),
(49,0,o),
(62,0,cs),
(228,0,ls),
(244,0,o),
(263,9,o),
(263,24,cs),
(263,261,ls),
(263,286,o),
(270,293,o),
(288,293,cs),
(488,293,l),
(488,289,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 3 0 0 1 3 0 103 4 1 2 2 28 77 5 1 1 1 29 1 78 51 52 52 51 52 49 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = H;
unicode = 72;
},
{
glyphname = I;
lastChange = "2022-10-20 09:12:23 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(234,-10,ls),
(244,-10,o),
(259,1,o),
(259,10,qs),
(259,665,ls),
(259,685,o),
(232,710,o),
(209,710,qs),
(83,710,ls),
(73,710,o),
(58,699,o),
(58,690,qs),
(58,-10,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 95 0 0 0 28 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
53 50 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = I;
unicode = 73;
},
{
glyphname = J;
lastChange = "2022-10-20 08:17:06 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(339,251,ls),
(339,205,o),
(321,193,o),
(297,193,cs),
(276,193,o),
(259,201,o),
(250,228,cs),
(242,256,o),
(231,271,o),
(203,271,cs),
(41,271,ls),
(32,271,o),
(26,266,o),
(26,256,cs),
(32,80,o),
(146,-7,o),
(307,-7,cs),
(463,-7,o),
(560,78,o),
(560,251,cs),
(560,693,ls),
(560,702,o),
(554,708,o),
(545,708,cs),
(384,708,ls),
(355,708,o),
(339,692,o),
(339,663,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 2 0 2 102 0 1 1 28 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
21 53 37 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = J;
unicode = 74;
},
{
glyphname = K;
lastChange = "2022-10-20 08:18:04 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(472,10,ls),
(476,4,o),
(482,0,o),
(490,0,cs),
(720,0,ls),
(732,0,o),
(736,8,o),
(729,18,cs),
(494,351,ls),
(486,363,o),
(487,374,o),
(495,386,cs),
(713,690,ls),
(720,700,o),
(716,708,o),
(704,708,cs),
(487,708,ls),
(479,708,o),
(472,704,o),
(468,698,cs),
(302,455,ls),
(289,435,o),
(272,440,o),
(272,464,cs),
(272,663,ls),
(272,692,o),
(256,708,o),
(227,708,cs),
(65,708,ls),
(56,708,o),
(50,702,o),
(50,693,cs),
(50,45,ls),
(50,16,o),
(66,0,o),
(95,0,cs),
(257,0,ls),
(266,0,o),
(272,6,o),
(272,15,cs),
(272,252,ls),
(272,276,o),
(289,282,o),
(302,262,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
32 18 2 0 1 1 76 2 1 1 1 28 77 3 1 0 0 29 0 78 41 40 52 53 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = K;
unicode = 75;
},
{
glyphname = L;
lastChange = "2022-10-20 08:22:19 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(33,0,o),
(43,0,qs),
(445,0,ls),
(467,0,o),
(480,13,o),
(480,35,cs),
(480,150,ls),
(480,159,o),
(474,165,o),
(465,165,cs),
(248,165,ls),
(235,165,o),
(223,177,o),
(223,189,qs),
(223,666,ls),
(223,687,o),
(200,710,o),
(178,710,qs),
(43,710,ls),
(33,710,o),
(33,700,qs),
(33,10,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 28 77 0 1 1 2 96 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
0 1 0 2 1 2 100 0 0 0 28 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
52 53 49 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = L;
unicode = 76;
},
{
glyphname = M;
lastChange = "2022-10-21 05:11:25 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,15,ls),
(50,6,o),
(56,0,o),
(65,0,cs),
(227,0,ls),
(256,0,o),
(272,16,o),
(272,45,cs),
(272,296,ls),
(272,309,o),
(285,311,o),
(289,299,cs),
(369,37,ls),
(377,11,o),
(394,0,o),
(420,0,cs),
(532,0,ls),
(558,0,o),
(575,11,o),
(583,37,cs),
(663,299,ls),
(667,311,o),
(680,309,o),
(680,296,cs),
(680,45,ls),
(680,16,o),
(696,0,o),
(725,0,cs),
(886,0,ls),
(895,0,o),
(901,6,o),
(901,15,cs),
(901,693,ls),
(901,702,o),
(895,708,o),
(886,708,cs),
(668,708,ls),
(642,708,o),
(626,696,o),
(617,672,cs),
(488,310,ls),
(483,296,o),
(473,296,o),
(468,310,cs),
(335,672,ls),
(326,697,o),
(310,708,o),
(284,708,cs),
(65,708,ls),
(56,708,o),
(50,702,o),
(50,693,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
2 1 0 0 34 77 0 1 1 3 95 5 4 2 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 34 77 5 1 3 3 29 77 0 1 1 4 97 0 4 4 35 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 1 0 4 1 4 101 2 1 0 0 34 77 5 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 1 0 4 1 4 101 5 1 3 3 0 97 2 1 0 0 34 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
56 57 52 52 20 49 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 951;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
lastChange = "2022-10-21 05:13:38 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,708,ls),
(513,708,o),
(507,702,o),
(507,693,cs),
(507,346,l),
(278,698,ls),
(274,705,o),
(268,708,o),
(260,708,cs),
(65,708,ls),
(56,708,o),
(50,702,o),
(50,693,cs),
(50,45,ls),
(50,16,o),
(66,0,o),
(95,0,cs),
(257,0,ls),
(266,0,o),
(272,6,o),
(272,15,cs),
(272,356,l),
(501,10,ls),
(505,3,o),
(511,0,o),
(519,0,cs),
(714,0,ls),
(723,0,o),
(729,6,o),
(729,15,cs),
(729,663,ls),
(729,692,o),
(713,708,o),
(684,708,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
23 9 2 1 0 1 76 3 4 2 0 0 28 77 2 1 1 1 29 1 78 1 0 20 18 15 12 6 4 0 27 1 26 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 779;
}
);
note = N;
unicode = 78;
},
{
glyphname = O;
lastChange = "2022-10-20 17:42:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(758,463,o),
(661,628,o),
(495,720,o),
(395,720,qs),
(295,720,o),
(128,628,o),
(30,463,o),
(30,360,qs),
(30,257,o),
(128,93,o),
(295,0,o),
(395,0,qs),
(494,0,o),
(661,93,o),
(758,257,o),
(758,360,qs)
);
},
{
closed = 1;
nodes = (
(256,433,o),
(328,517,o),
(395,517,qs),
(461,517,o),
(533,433,o),
(533,360,qs),
(533,289,o),
(461,205,o),
(395,205,qs),
(328,205,o),
(256,289,o),
(256,360,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = O;
unicode = 79;
},
{
glyphname = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,485,ls),
(272,507,o),
(295,530,o),
(317,530,qs),
(335,530,ls),
(404,530,o),
(404,465,qs),
(404,400,o),
(335,400,qs),
(272,400,l)
);
},
{
closed = 1;
nodes = (
(629,576,o),
(490,708,o),
(360,708,qs),
(60,708,ls),
(50,708,o),
(50,698,qs),
(50,10,ls),
(50,0,o),
(60,0,qs),
(227,0,ls),
(249,0,o),
(272,23,o),
(272,45,qs),
(272,215,ls),
(272,225,o),
(282,225,qs),
(360,225,ls),
(446,225,o),
(567,289,o),
(629,398,o),
(629,465,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 0 0 2 3 0 2 103 0 1 1 4 95 0 4 4 28 77 0 3 3 29 3 78 1 0 28 25 22 19 15 12 6 3 0 9 1 9 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 649;
}
);
note = P;
unicode = 80;
},
{
glyphname = Q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(256,430,o),
(328,515,o),
(395,515,qs),
(461,515,o),
(533,430,o),
(533,357,qs),
(533,285,o),
(461,200,o),
(395,200,qs),
(328,200,o),
(256,285,o),
(256,357,qs)
);
},
{
closed = 1;
nodes = (
(758,461,o),
(661,627,o),
(495,720,o),
(395,720,qs),
(295,720,o),
(128,627,o),
(30,461,o),
(30,357,qs),
(30,253,o),
(128,87,o),
(295,-7,o),
(395,-7,qs),
(413,-7,o),
(422,-6,qs),
(449,-4,o),
(463,-28,qs),
(502,-91,ls),
(516,-115,o),
(544,-115,qs),
(763,-115,ls),
(769,-115,o),
(773,-108,o),
(769,-103,qs),
(654,52,ls),
(635,77,o),
(658,102,qs),
(706,151,o),
(758,281,o),
(758,357,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 3 2 134 0 1 1 4 97 0 4 4 34 77 0 0 0 3 97 0 3 3 35 3 78 38 37 58 36 33 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(424,431,o),
(392,402,o),
(360,402,qs),
(272,402,l),
(272,487,ls),
(272,504,o),
(291,522,o),
(307,522,qs),
(360,522,ls),
(391,522,o),
(424,490,o),
(424,462,qs)
);
},
{
closed = 1;
nodes = (
(87,708,o),
(64,685,o),
(64,663,qs),
(64,10,ls),
(64,0,o),
(74,0,qs),
(262,0,ls),
(272,0,o),
(272,10,qs),
(272,254,l),
(273,254,l),
(314,175,l),
(389,32,ls),
(405,0,o),
(442,0,qs),
(636,0,ls),
(642,0,o),
(646,7,o),
(643,12,qs),
(501,261,ls),
(496,270,o),
(506,275,q),
(576,301,o),
(649,407,o),
(649,476,qs),
(649,542,o),
(588,647,o),
(466,708,o),
(380,708,qs),
(109,708,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
30 1 3 1 1 76 0 1 0 3 0 1 3 128 0 0 0 2 95 5 1 2 2 28 77 4 1 3 3 29 3 78 13 12 36 33 27 24 12 41 13 40 35 49 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = R;
unicode = 82;
},
{
glyphname = S;
lastChange = "2022-10-21 02:16:23 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,285,o),
(533,366,o),
(446,412,o),
(379,437,qs),
(321,459,o),
(268,489,o),
(268,513,qs),
(268,530,o),
(286,549,o),
(300,549,qs),
(330,549,o),
(342,524,qs),
(349,507,o),
(365,493,o),
(380,493,qs),
(578,493,ls),
(583,493,o),
(588,499,o),
(587,503,q),
(580,607,o),
(428,720,o),
(301,720,qs),
(224,720,o),
(101,670,o),
(30,574,o),
(30,506,qs),
(29,438,o),
(93,351,o),
(182,305,o),
(250,281,qs),
(307,261,o),
(361,231,o),
(361,206,qs),
(361,188,o),
(336,171,o),
(318,171,qs),
(284,171,o),
(271,200,qs),
(264,217,o),
(248,232,o),
(233,232,qs),
(38,232,ls),
(33,232,o),
(28,226,o),
(29,222,q),
(40,113,o),
(203,0,o),
(327,0,qs),
(411,0,o),
(533,57,o),
(597,159,o),
(597,224,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
32 1 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 3 4 4 5 114 0 1 4 2 2 1 114 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 3 4 4 5 114 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 5 3 4 3 5 4 128 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
35 52 44 35 52 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 617;
}
);
note = S;
unicode = 83;
},
{
glyphname = T;
lastChange = "2022-10-21 05:11:57 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(10,532,o),
(20,532,qs),
(161,532,ls),
(178,532,o),
(196,514,o),
(196,497,qs),
(196,10,ls),
(196,0,o),
(206,0,qs),
(408,0,ls),
(418,0,o),
(418,10,qs),
(418,497,ls),
(418,514,o),
(437,532,o),
(453,532,qs),
(596,532,ls),
(606,532,o),
(606,542,qs),
(606,698,ls),
(606,708,o),
(596,708,qs),
(20,708,ls),
(10,708,o),
(10,698,qs),
(10,542,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 1 1 0 95 0 0 0 28 77 0 2 2 29 2 78 52 52 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 611;
}
);
note = T;
unicode = 84;
},
{
glyphname = U;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,207,o),
(124,65,o),
(263,-7,o),
(353,-7,qs),
(443,-7,o),
(589,65,o),
(673,208,o),
(673,309,qs),
(673,698,ls),
(673,708,o),
(663,708,qs),
(497,708,ls),
(475,708,o),
(452,685,o),
(452,663,qs),
(452,309,ls),
(452,260,o),
(406,203,o),
(358,203,qs),
(310,203,o),
(267,260,o),
(267,309,qs),
(267,663,ls),
(267,685,o),
(244,708,o),
(222,708,qs),
(56,708,ls),
(46,708,o),
(46,698,qs),
(46,309,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 28 77 0 1 1 3 97 0 3 3 35 3 78 37 53 37 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = U;
unicode = 85;
},
{
glyphname = V;
lastChange = "2022-10-21 02:12:06 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,40,ls),
(287,14,o),
(309,0,o),
(342,0,cs),
(440,0,ls),
(473,0,o),
(495,14,o),
(505,40,cs),
(774,698,ls),
(778,707,o),
(774,713,o),
(763,713,cs),
(613,713,ls),
(580,713,o),
(558,698,o),
(548,673,cs),
(406,316,ls),
(394,286,o),
(388,286,o),
(376,316,cs),
(234,673,ls),
(224,698,o),
(202,713,o),
(169,713,cs),
(18,713,ls),
(7,713,o),
(3,707,o),
(7,698,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
2 1 0 0 28 77 0 1 1 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 1 0 3 1 3 101 2 1 0 0 28 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
53 51 19 50 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 777;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
lastChange = "2022-10-20 08:21:27 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,40,ls),
(220,15,o),
(239,0,o),
(269,0,cs),
(351,0,ls),
(381,0,o),
(401,15,o),
(408,40,c),
(565,494,l),
(537,494,l),
(694,39,ls),
(702,15,o),
(721,0,o),
(751,0,cs),
(833,0,ls),
(863,0,o),
(882,15,o),
(890,39,cs),
(1116,698,ls),
(1119,707,o),
(1114,713,o),
(1103,713,cs),
(978,713,ls),
(947,713,o),
(929,698,o),
(921,672,cs),
(802,315,ls),
(792,286,o),
(791,286,o),
(782,315,cs),
(662,672,l),
(656,696,o),
(638,710,o),
(611,713,c),
(490,713,l),
(462,710,o),
(447,696,o),
(440,673,cs),
(321,316,ls),
(311,288,o),
(311,288,o),
(300,316,cs),
(181,673,ls),
(173,698,o),
(155,713,o),
(124,713,cs),
(-3,713,ls),
(-14,713,o),
(-19,707,o),
(-16,698,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 2 0 0 28 77 4 1 3 3 29 3 78 55 51 56 56 49 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 1100;
}
);
note = W;
unicode = 87;
},
{
glyphname = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,0,o),
(528,0,qs),
(749,0,ls),
(755,0,o),
(759,8,o),
(755,12,q),
(538,319,ls),
(515,351,o),
(536,382,qs),
(737,696,ls),
(740,701,o),
(737,708,o),
(731,708,qs),
(520,708,ls),
(493,708,o),
(478,684,qs),
(418,581,ls),
(405,559,o),
(370,557,o),
(355,578,qs),
(279,686,ls),
(264,708,o),
(236,708,qs),
(15,708,ls),
(9,708,o),
(5,701,o),
(9,696,qs),
(221,396,ls),
(244,364,o),
(223,333,qs),
(18,12,ls),
(15,7,o),
(18,0,o),
(24,0,qs),
(235,0,ls),
(262,0,o),
(277,24,qs),
(341,134,ls),
(354,156,o),
(389,158,o),
(404,137,qs),
(485,22,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
35 1 1 0 1 76 4 1 2 2 28 77 0 0 0 3 97 0 3 3 31 77 5 1 1 1 29 1 78 57 35 19 57 35 17 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 764;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
lastChange = "2022-10-20 09:34:46 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,10,ls),
(254,0,o),
(264,0,qs),
(466,0,ls),
(476,0,o),
(476,10,qs),
(476,215,l),
(724,696,ls),
(726,701,o),
(722,708,o),
(717,708,qs),
(517,708,ls),
(492,708,o),
(475,697,o),
(465,674,cs),
(377,479,ls),
(373,470,o),
(361,470,o),
(357,479,qs),
(268,674,ls),
(258,697,o),
(241,708,o),
(216,708,cs),
(13,708,ls),
(8,708,o),
(4,701,o),
(6,696,qs),
(254,215,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
25 18 2 3 1 1 76 2 1 0 0 28 77 0 1 1 3 95 0 3 3 29 3 78 54 35 20 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(580,708,o),
(570,708,qs),
(60,708,ls),
(50,708,o),
(50,698,qs),
(50,577,ls),
(50,555,o),
(73,532,o),
(95,532,qs),
(315,532,ls),
(321,532,o),
(325,525,o),
(321,520,qs),
(54,172,ls),
(50,167,o),
(50,160,qs),
(50,10,ls),
(50,0,o),
(60,0,qs),
(570,0,ls),
(580,0,o),
(580,10,qs),
(580,132,ls),
(580,154,o),
(557,177,o),
(535,177,qs),
(311,177,ls),
(305,177,o),
(302,184,o),
(306,189,qs),
(576,536,ls),
(580,541,o),
(580,548,qs),
(580,698,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 17 1 1 0 2 76 0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 52 55 52 53 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = Z;
unicode = 90;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,-229,o),
(105,-229,qs),
(467,-229,ls),
(477,-229,o),
(477,-219,qs),
(477,-61,ls),
(477,-51,o),
(467,-51,qs),
(348,-51,ls),
(326,-51,o),
(303,-28,o),
(303,-6,qs),
(303,672,ls),
(303,694,o),
(326,717,o),
(348,717,qs),
(467,717,ls),
(477,717,o),
(477,727,qs),
(477,885,ls),
(477,895,o),
(467,895,qs),
(105,895,ls),
(95,895,o),
(95,885,qs),
(95,-219,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 51 53 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 533;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,955,l),
(200,955,l),
(440,-198,l),
(652,-198,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 878;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(458,895,o),
(448,895,qs),
(86,895,ls),
(76,895,o),
(76,885,qs),
(76,727,ls),
(76,717,o),
(86,717,qs),
(205,717,ls),
(227,717,o),
(250,694,o),
(250,672,qs),
(250,-6,ls),
(250,-28,o),
(227,-51,o),
(205,-51,qs),
(86,-51,ls),
(76,-51,o),
(76,-61,qs),
(76,-219,ls),
(76,-229,o),
(86,-229,qs),
(448,-229,ls),
(458,-229,o),
(458,-219,qs),
(458,885,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 3 0 2 1 3 2 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 51 53 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 533;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(513,162,o),
(521,162,qs),
(720,162,ls),
(725,162,o),
(730,169,o),
(728,174,qs),
(504,677,ls),
(489,711,o),
(452,711,qs),
(308,711,ls),
(271,711,o),
(256,677,qs),
(30,174,ls),
(28,169,o),
(33,162,o),
(38,162,qs),
(237,162,ls),
(245,162,o),
(248,170,qs),
(350,393,ls),
(362,419,o),
(398,420,o),
(410,393,qs),
(510,170,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 0 1 134 0 2 0 0 2 87 0 2 2 0 97 0 0 2 0 81 36 53 35 17 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 758;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(49,-258,o),
(59,-258,qs),
(714,-258,ls),
(724,-258,o),
(724,-248,qs),
(724,-52,ls),
(724,-42,o),
(714,-42,qs),
(59,-42,ls),
(49,-42,o),
(49,-52,qs),
(49,-248,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 51 49 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 764;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(10,696,o),
(18,693,qs),
(258,606,l),
(269,603,o),
(269,614,qs),
(269,742,ls),
(269,750,o),
(261,753,qs),
(22,855,ls),
(17,857,o),
(10,852,o),
(10,847,qs),
(10,705,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
8 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = grave;
unicode = 96;
},
{
glyphname = a;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,46,ls),
(409,27,o),
(436,0,o),
(455,0,qs),
(620,0,ls),
(630,0,o),
(630,10,qs),
(630,518,ls),
(630,538,o),
(604,564,o),
(584,564,qs),
(419,564,ls),
(409,564,o),
(409,554,qs),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 0 21 1 2 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 1 21 1 2 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 37 37 52 52 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = a;
unicode = 97;
},
{
glyphname = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,740,o),
(262,740,qs),
(95,740,ls),
(73,740,o),
(50,717,o),
(50,695,qs),
(50,10,ls),
(50,0,o),
(60,0,qs),
(227,0,ls),
(249,0,o),
(272,23,o),
(272,45,qs),
(272,77,l),
(293,38,o),
(372,-7,o),
(427,-7,qs),
(493,-7,o),
(599,62,o),
(660,193,o),
(660,282,qs),
(660,371,o),
(599,502,o),
(493,571,o),
(427,571,qs),
(372,571,o),
(293,526,o),
(272,487,q),
(272,730,ls)
);
},
{
closed = 1;
nodes = (
(435,237,o),
(389,187,o),
(353,187,qs),
(317,187,o),
(271,237,o),
(271,282,qs),
(271,327,o),
(317,377,o),
(353,377,qs),
(389,377,o),
(435,327,o),
(435,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
0 1 4 0 14 1 1 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 1 4 0 14 1 2 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 3 3 1 97 2 1 1 1 35 77 0 4 4 0 97 0 0 0 37 77 0 5 5 1 97 2 1 1 1 35 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 0 97 0 0 0 37 77 0 3 3 2 95 0 2 2 29 77 0 5 5 1 97 0 1 1 35 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 35 52 53 38 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,194,o),
(93,63,o),
(224,-7,o),
(308,-7,qs),
(408,-7,o),
(552,95,o),
(580,188,qs),
(585,206,o),
(567,227,o),
(549,227,qs),
(383,227,ls),
(370,227,o),
(352,215,o),
(342,201,qs),
(327,183,o),
(303,183,qs),
(276,183,o),
(245,233,o),
(245,282,qs),
(245,331,o),
(276,381,o),
(303,381,qs),
(327,381,o),
(342,363,qs),
(352,349,o),
(370,337,o),
(383,337,qs),
(549,337,ls),
(567,337,o),
(585,358,o),
(580,376,qs),
(552,469,o),
(408,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 114 0 4 3 3 4 112 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 51 36 35 52 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = c;
unicode = 99;
},
{
glyphname = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(387,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs),
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(387,38,o),
(408,77,q),
(408,35,ls),
(408,19,o),
(427,0,o),
(443,0,qs),
(620,0,ls),
(630,0,o),
(630,10,qs),
(630,705,ls),
(630,722,o),
(612,740,o),
(595,740,qs),
(418,740,ls),
(408,740,o),
(408,730,qs),
(408,487,l)
);
},
{
closed = 1;
nodes = (
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs),
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
28 1 5 3 14 1 1 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 0 0 1 97 2 1 1 1 29 77 0 5 5 3 97 0 3 3 37 77 0 4 4 1 97 2 1 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 5 5 3 97 0 3 3 37 77 0 0 0 1 95 0 1 1 29 77 0 4 4 2 97 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 36 38 37 52 49 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = d;
unicode = 100;
},
{
glyphname = e;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(333,397,o),
(369,371,o),
(371,346,qs),
(371,340,o),
(366,340,qs),
(245,340,ls),
(243,340,o),
(239,343,o),
(240,346,qs),
(252,397,o),
(308,397,qs)
);
},
{
closed = 1;
nodes = (
(333,170,o),
(297,170,qs),
(241,170,o),
(237,243,q),
(560,243,ls),
(595,243,o),
(596,276,qs),
(596,287,ls),
(596,374,o),
(523,502,o),
(392,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(93,63,o),
(224,-7,o),
(308,-7,qs),
(401,-7,o),
(544,88,o),
(573,164,qs),
(580,181,o),
(562,203,o),
(543,203,qs),
(349,203,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 1 2 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
8 1 2 5 6 6 2 114 0 0 0 5 2 0 5 103 7 1 1 1 4 97 0 4 4 37 77 0 6 6 3 98 0 3 3 35 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
8 1 2 5 6 5 2 6 128 0 0 0 5 2 0 5 103 7 1 1 1 4 97 0 4 4 37 77 0 6 6 3 98 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
12 11 0 0 36 34 33 31 26 24 18 16 11 37 12 37 0 10 0 9 35 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = e;
unicode = 101;
},
{
glyphname = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(70,0,o),
(80,0,qs),
(282,0,ls),
(292,0,o),
(292,10,qs),
(292,362,ls),
(292,372,o),
(302,372,qs),
(365,372,ls),
(375,372,o),
(375,382,qs),
(375,547,ls),
(375,557,o),
(365,557,qs),
(294,557,l),
(302,601,o),
(339,605,qs),
(375,608,o),
(375,639,qs),
(375,793,l),
(283,801,o),
(148,752,o),
(74,644,o),
(70,567,qs),
(70,557,o),
(60,557,qs),
(20,557,ls),
(10,557,o),
(10,547,qs),
(10,382,ls),
(10,372,o),
(20,372,qs),
(35,372,ls),
(52,372,o),
(70,354,o),
(70,337,qs),
(70,10,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
16 1 1 74 3 1 0 0 1 97 2 1 1 1 31 77 0 4 4 29 4 78 51 51 42 51 50 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 385;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,10,ls),
(409,-45,o),
(365,-85,o),
(326,-85,qs),
(286,-85,o),
(267,-66,qs),
(264,-63,ls),
(253,-51,o),
(238,-41,o),
(226,-41,qs),
(36,-41,l),
(47,-150,o),
(206,-277,o),
(342,-277,qs),
(443,-277,o),
(572,-199,o),
(630,-69,o),
(630,10,qs),
(630,554,ls),
(630,564,o),
(620,564,qs),
(444,564,ls),
(428,564,o),
(409,546,o),
(409,529,qs),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 6 0 32 1 5 7 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 6 1 32 1 5 7 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 5 4 4 3 114 0 6 6 0 97 1 1 0 0 37 77 0 7 7 5 97 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 3 5 4 5 3 4 128 0 6 6 0 97 1 1 0 0 37 77 0 7 7 5 97 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 3 5 4 5 3 4 128 0 1 1 31 77 0 6 6 0 97 0 0 0 37 77 0 7 7 5 97 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 37 37 36 34 37 53 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = g;
unicode = 103;
},
{
glyphname = h;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,0,o),
(60,0,qs),
(262,0,ls),
(272,0,o),
(272,10,qs),
(272,299,ls),
(272,339,o),
(314,386,o),
(351,386,qs),
(387,386,o),
(430,339,o),
(430,299,qs),
(430,45,ls),
(430,23,o),
(453,0,o),
(475,0,qs),
(641,0,ls),
(651,0,o),
(651,10,qs),
(651,327,ls),
(651,438,o),
(542,568,o),
(445,568,qs),
(385,568,o),
(298,518,o),
(272,478,q),
(272,695,ls),
(272,717,o),
(249,740,o),
(227,740,qs),
(60,740,ls),
(50,740,o),
(50,730,qs),
(50,10,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 3 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 1 2 1 3 2 128 0 0 0 2 95 4 1 2 2 29 77 0 1 1 31 77 4 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 3 1 2 1 3 2 128 0 0 0 2 95 4 1 2 2 29 77 0 1 1 37 77 4 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
52 37 52 37 49 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = h;
unicode = 104;
},
{
glyphname = i;
lastChange = "2022-10-20 09:12:44 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(262,0,ls),
(272,0,o),
(272,10,qs),
(272,529,ls),
(272,546,o),
(254,564,o),
(237,564,qs),
(60,564,ls),
(50,564,o),
(50,554,qs),
(50,35,ls),
(50,13,o),
(63,0,o),
(85,0,cs)
);
},
{
closed = 1;
nodes = (
(219,609,o),
(283,671,o),
(283,718,qs),
(283,766,o),
(219,829,o),
(162,829,qs),
(105,829,o),
(44,767,o),
(44,718,qs),
(44,670,o),
(105,609,o),
(162,609,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 4 1 3 0 2 3 105 0 0 0 31 77 0 1 1 29 1 78 13 13 13 24 13 23 38 52 49 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = i;
unicode = 105;
},
{
glyphname = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,564,o),
(50,554,qs),
(50,-43,ls),
(50,-63,o),
(31,-81,o),
(9,-81,qs),
(1,-81,ls),
(-16,-81,o),
(-34,-100,o),
(-34,-116,qs),
(-34,-270,l),
(40,-270,ls),
(272,-270,o),
(272,-39,qs),
(272,529,ls),
(272,546,o),
(254,564,o),
(237,564,qs),
(60,564,ls)
);
},
{
closed = 1;
nodes = (
(219,609,o),
(283,671,o),
(283,718,qs),
(283,766,o),
(219,829,o),
(162,829,qs),
(105,829,o),
(44,767,o),
(44,718,qs),
(44,670,o),
(105,609,o),
(162,609,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 3 6 1 4 0 3 4 105 5 1 0 0 31 77 0 2 2 1 96 0 1 1 33 1 78 19 19 1 0 19 30 19 29 25 23 13 10 7 5 0 18 1 17 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = j;
unicode = 106;
},
{
glyphname = k;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,19,o),
(69,0,o),
(85,0,qs),
(262,0,ls),
(272,0,o),
(272,10,qs),
(272,225,l),
(407,7,ls),
(412,0,o),
(419,0,qs),
(661,0,ls),
(667,0,o),
(671,8,o),
(667,12,q),
(471,266,ls),
(460,281,o),
(470,294,qs),
(662,552,ls),
(666,557,o),
(662,564,o),
(656,564,qs),
(440,564,ls),
(413,564,o),
(398,541,qs),
(272,353,l),
(272,705,ls),
(272,722,o),
(254,740,o),
(237,740,qs),
(60,740,ls),
(50,740,o),
(50,730,qs),
(50,35,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
25 18 7 3 2 1 1 76 0 0 0 2 95 3 1 2 2 29 77 0 1 1 31 77 3 1 2 2 29 2 78 53 41 37 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = k;
unicode = 107;
},
{
glyphname = l;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,11,o),
(69,-8,o),
(85,-8,qs),
(262,-8,ls),
(272,-8,o),
(272,2,qs),
(272,727,ls),
(272,744,o),
(254,762,o),
(237,762,qs),
(60,762,ls),
(50,762,o),
(50,752,qs),
(50,27,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 29 1 78 52 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = l;
unicode = 108;
},
{
glyphname = m;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(809,23,o),
(832,0,o),
(854,0,qs),
(1020,0,ls),
(1030,0,o),
(1030,10,qs),
(1030,327,ls),
(1030,438,o),
(911,568,o),
(803,568,qs),
(738,568,o),
(632,528,o),
(604,488,q),
(577,534,o),
(500,568,o),
(435,568,qs),
(379,568,o),
(296,524,o),
(272,488,q),
(272,519,ls),
(272,541,o),
(249,564,o),
(227,564,qs),
(60,564,ls),
(50,564,o),
(50,554,qs),
(50,10,ls),
(50,0,o),
(60,0,qs),
(262,0,ls),
(272,0,o),
(272,10,qs),
(272,299,ls),
(272,335,o),
(314,376,o),
(351,376,qs),
(387,376,o),
(430,335,o),
(430,299,qs),
(430,45,ls),
(430,23,o),
(453,0,o),
(475,0,qs),
(641,0,ls),
(651,0,o),
(651,10,qs),
(651,299,ls),
(651,335,o),
(693,376,o),
(730,376,qs),
(766,376,o),
(809,335,o),
(809,299,qs),
(809,45,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
40 34 2 0 4 1 76 2 1 0 0 4 97 6 5 2 4 4 31 77 7 3 2 1 1 29 1 78 52 36 37 51 52 37 52 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 1076;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(430,23,o),
(453,0,o),
(475,0,qs),
(641,0,ls),
(651,0,o),
(651,10,qs),
(651,327,ls),
(651,438,o),
(542,568,o),
(445,568,qs),
(385,568,o),
(298,518,o),
(272,478,q),
(272,519,ls),
(272,541,o),
(249,564,o),
(227,564,qs),
(60,564,ls),
(50,564,o),
(50,554,qs),
(50,35,ls),
(50,19,o),
(69,0,o),
(85,0,qs),
(262,0,ls),
(272,0,o),
(272,10,qs),
(272,299,ls),
(272,339,o),
(314,386,o),
(351,386,qs),
(387,386,o),
(430,339,o),
(430,299,qs),
(430,45,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
21 1 0 2 1 76 0 0 2 1 2 0 1 128 3 1 2 2 31 77 4 1 1 1 29 1 78 52 37 52 52 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = n;
unicode = 110;
},
{
glyphname = o;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(616,370,o),
(539,501,o),
(403,571,o),
(318,571,qs),
(233,571,o),
(97,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(97,63,o),
(233,-7,o),
(318,-7,qs),
(403,-7,o),
(539,63,o),
(616,194,o),
(616,282,qs)
);
},
{
closed = 1;
nodes = (
(245,330,o),
(287,379,o),
(318,379,qs),
(349,379,o),
(391,330,o),
(391,282,qs),
(391,234,o),
(349,185,o),
(318,185,qs),
(286,185,o),
(245,234,o),
(245,282,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = o;
unicode = 111;
},
{
glyphname = p;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(293,39,o),
(372,-6,o),
(427,-6,qs),
(493,-6,o),
(599,63,o),
(660,194,o),
(660,283,qs),
(660,372,o),
(599,503,o),
(493,572,o),
(427,572,qs),
(372,572,o),
(293,527,o),
(272,488,q),
(272,520,ls),
(272,542,o),
(249,565,o),
(227,565,qs),
(60,565,ls),
(50,565,o),
(50,555,qs),
(50,-235,ls),
(50,-257,o),
(73,-280,o),
(95,-280,qs),
(262,-280,ls),
(272,-280,o),
(272,-270,qs),
(272,78,l)
);
},
{
closed = 1;
nodes = (
(435,238,o),
(389,188,o),
(353,188,qs),
(317,188,o),
(271,238,o),
(271,283,qs),
(271,328,o),
(317,378,o),
(353,378,qs),
(389,378,o),
(435,328,o),
(435,283,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
14 1 4 1 28 1 3 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 4 1 97 2 1 1 1 31 77 0 5 5 3 97 0 3 3 35 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 1 1 31 77 0 4 4 2 97 0 2 2 37 77 0 5 5 3 97 0 3 3 35 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 2 97 0 2 2 37 77 0 5 5 3 97 0 3 3 35 77 0 0 0 1 95 0 1 1 31 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 36 38 37 52 49 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = p;
unicode = 112;
},
{
glyphname = q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(438,-280,o),
(448,-280,qs),
(615,-280,ls),
(637,-280,o),
(660,-257,o),
(660,-235,qs),
(660,555,ls),
(660,565,o),
(650,565,qs),
(483,565,ls),
(461,565,o),
(438,542,o),
(438,520,qs),
(438,488,l),
(417,527,o),
(338,572,o),
(283,572,qs),
(217,572,o),
(111,503,o),
(50,372,o),
(50,283,qs),
(50,194,o),
(111,63,o),
(217,-6,o),
(283,-6,qs),
(338,-6,o),
(417,39,o),
(438,78,q),
(438,-270,ls)
);
},
{
closed = 1;
nodes = (
(275,328,o),
(321,378,o),
(357,378,qs),
(393,378,o),
(439,328,o),
(439,283,qs),
(439,238,o),
(393,188,o),
(357,188,qs),
(321,188,o),
(275,238,o),
(275,283,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
14 1 5 1 0 1 0 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
14 1 5 2 0 1 0 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 5 5 1 97 2 1 1 1 37 77 0 4 4 0 97 0 0 0 35 77 0 3 3 33 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 2 31 77 0 5 5 1 97 0 1 1 37 77 0 4 4 0 97 0 0 0 35 77 0 3 3 33 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 5 5 1 97 0 1 1 37 77 0 4 4 0 97 0 0 0 35 77 0 3 3 2 95 0 2 2 31 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 35 52 53 38 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,287,o),
(331,331,o),
(394,331,qs),
(422,331,ls),
(439,331,o),
(457,350,o),
(457,366,qs),
(457,568,l),
(404,568,o),
(306,509,o),
(272,460,q),
(272,529,ls),
(272,546,o),
(254,564,o),
(237,564,qs),
(60,564,ls),
(50,564,o),
(50,554,qs),
(50,10,ls),
(50,0,o),
(60,0,qs),
(262,0,ls),
(272,0,o),
(272,10,qs),
(272,231,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
13 1 3 1 1 76 0 3 3 1 97 2 1 1 1 31 77 0 0 0 29 0 78 51 21 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 467;
}
);
note = r;
unicode = 114;
},
{
glyphname = s;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(541,233,o),
(479,306,o),
(395,336,o),
(334,348,qs),
(288,357,o),
(246,374,o),
(246,391,qs),
(246,404,o),
(264,417,o),
(281,417,qs),
(316,417,o),
(333,395,q),
(333,395,l),
(345,380,o),
(360,369,o),
(374,369,qs),
(503,369,ls),
(521,369,o),
(539,390,o),
(534,407,qs),
(512,481,o),
(387,571,o),
(286,571,qs),
(209,571,o),
(101,522,o),
(46,437,o),
(46,385,qs),
(46,325,o),
(105,257,o),
(184,229,o),
(245,217,qs),
(295,207,o),
(337,191,o),
(337,172,qs),
(337,161,o),
(317,146,o),
(300,146,qs),
(263,146,o),
(245,168,q),
(235,183,o),
(219,195,o),
(205,195,qs),
(60,195,ls),
(41,195,o),
(23,175,o),
(28,157,qs),
(50,84,o),
(195,-7,o),
(301,-7,qs),
(374,-7,o),
(483,39,o),
(541,119,o),
(541,169,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 5 1 5 4 114 0 1 2 2 1 112 0 5 5 3 97 0 3 3 37 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 37 77 0 2 2 0 98 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 52 44 35 52 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = s;
unicode = 115;
},
{
glyphname = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(85,231,ls),
(85,0,o),
(317,0,qs),
(391,0,ls),
(401,0,o),
(401,10,qs),
(401,154,ls),
(401,171,o),
(383,189,o),
(366,189,qs),
(348,189,ls),
(326,189,o),
(307,207,o),
(307,227,qs),
(307,379,l),
(389,379,ls),
(399,379,o),
(399,389,qs),
(399,554,ls),
(399,564,o),
(389,564,qs),
(307,564,l),
(307,690,ls),
(307,700,o),
(297,700,qs),
(95,700,ls),
(85,700,o),
(85,690,qs),
(85,609,ls),
(85,587,o),
(62,564,o),
(40,564,qs),
(25,564,ls),
(15,564,o),
(15,554,qs),
(15,389,ls),
(15,379,o),
(25,379,qs),
(85,379,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
0 2 2 28 77 4 7 2 0 0 1 97 3 1 1 1 31 77 0 5 5 6 96 0 6 6 29 6 78 1 0 36 33 29 26 23 21 18 16 14 11 7 4 0 38 1 38 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 436;
}
);
note = t;
unicode = 116;
},
{
glyphname = u;
lastChange = "2023-01-11 15:49:06 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(271,546,o),
(248,569,o),
(226,569,qs),
(60,569,ls),
(50,569,o),
(50,559,qs),
(50,242,ls),
(50,131,o),
(159,1,o),
(256,1,qs),
(316,1,o),
(403,51,o),
(429,91,q),
(429,45,ls),
(429,23,o),
(452,0,o),
(474,0,qs),
(641,0,ls),
(651,0,o),
(651,10,qs),
(651,559,ls),
(651,569,o),
(641,569,qs),
(439,569,ls),
(429,569,o),
(429,559,qs),
(429,270,ls),
(429,230,o),
(387,183,o),
(350,183,qs),
(314,183,o),
(271,230,o),
(271,270,qs),
(271,524,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
20 1 2 0 1 76 0 0 1 2 1 0 2 128 4 1 1 1 31 77 3 1 2 2 29 2 78 52 37 51 52 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = u;
unicode = 117;
},
{
glyphname = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,564,o),
(16,543,o),
(22,524,qs),
(183,41,ls),
(197,0,o),
(240,0,qs),
(431,0,ls),
(474,0,o),
(488,41,qs),
(649,524,ls),
(655,543,o),
(639,564,o),
(620,564,qs),
(457,564,ls),
(425,564,o),
(418,534,qs),
(348,259,ls),
(344,244,o),
(328,244,o),
(324,259,qs),
(253,534,ls),
(246,564,o),
(214,564,qs),
(51,564,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
2 4 2 0 0 31 77 0 1 1 3 96 0 3 3 29 3 78 1 0 18 15 11 8 5 4 0 23 1 22 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(17,564,o),
(12,558,o),
(13,553,qs),
(156,41,ls),
(167,0,o),
(204,0,qs),
(364,0,ls),
(401,0,o),
(412,41,qs),
(444,155,ls),
(447,166,o),
(460,166,o),
(463,155,qs),
(495,41,ls),
(507,0,o),
(543,0,qs),
(704,0,ls),
(740,0,o),
(751,41,qs),
(895,553,ls),
(896,558,o),
(891,564,o),
(886,564,qs),
(740,564,ls),
(700,564,o),
(691,524,qs),
(634,259,ls),
(631,244,o),
(617,244,o),
(614,259,qs),
(554,534,ls),
(551,549,o),
(543,557,qs),
(534,564,o),
(523,564,qs),
(384,564,ls),
(373,564,o),
(364,557,qs),
(356,549,o),
(353,534,qs),
(295,259,ls),
(291,244,o),
(278,244,o),
(274,259,qs),
(217,524,ls),
(208,564,o),
(168,564,qs),
(22,564,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
0 6 6 0 95 4 2 8 3 0 0 31 77 3 1 1 1 5 96 7 1 5 5 29 5 78 1 0 42 39 36 35 32 29 24 22 19 18 13 10 5 4 0 47 1 46 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 903;
}
);
note = w;
unicode = 119;
},
{
glyphname = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(419,0,o),
(447,0,qs),
(653,0,ls),
(659,0,o),
(663,8,o),
(659,12,q),
(469,267,ls),
(464,275,o),
(469,281,q),
(651,552,ls),
(654,557,o),
(650,564,o),
(644,564,qs),
(423,564,ls),
(416,564,o),
(411,557,q),
(349,447,ls),
(346,442,o),
(338,442,o),
(335,446,qs),
(264,543,ls),
(249,564,o),
(221,564,qs),
(15,564,ls),
(9,564,o),
(5,557,o),
(9,552,qs),
(194,304,l),
(198,297,o),
(194,290,qs),
(18,12,ls),
(15,7,o),
(18,0,o),
(24,0,qs),
(246,0,ls),
(253,0,o),
(258,7,q),
(319,116,ls),
(322,121,o),
(330,121,o),
(333,117,qs),
(404,21,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
35 1 0 1 1 76 2 1 1 1 31 77 3 1 0 0 29 0 78 57 39 57 37 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,302,o),
(334,301,o),
(330,314,qs),
(240,556,ls),
(237,564,o),
(229,564,qs),
(3,564,ls),
(-2,564,o),
(-7,557,o),
(-5,552,qs),
(225,28,l),
(89,-258,ls),
(87,-263,o),
(91,-270,o),
(96,-270,qs),
(297,-270,ls),
(327,-270,o),
(338,-243,qs),
(682,552,ls),
(684,557,o),
(679,564,o),
(674,564,qs),
(472,564,ls),
(442,564,o),
(432,536,qs),
(356,315,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
14 1 1 3 1 76 0 3 0 1 0 3 1 128 2 1 0 0 31 77 0 1 1 33 1 78 20 39 37 33 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = y;
unicode = 121;
},
{
glyphname = z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,564,o),
(478,564,qs),
(33,564,ls),
(23,564,o),
(23,554,qs),
(23,425,ls),
(23,403,o),
(46,380,o),
(68,380,qs),
(217,380,ls),
(224,380,o),
(227,373,o),
(222,368,qs),
(31,184,ls),
(20,173,o),
(20,159,qs),
(20,10,ls),
(20,0,o),
(30,0,qs),
(488,0,ls),
(498,0,o),
(498,10,qs),
(498,139,ls),
(498,161,o),
(475,184,o),
(453,184,qs),
(281,184,ls),
(274,184,o),
(271,191,o),
(276,196,qs),
(477,380,ls),
(488,391,o),
(488,405,qs),
(488,554,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 52 55 52 53 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = z;
unicode = 122;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,153,o),
(141,94,qs),
(127,18,o),
(127,-24,qs),
(127,-123,o),
(249,-231,o),
(354,-231,qs),
(430,-231,l),
(430,-54,l),
(396,-54,ls),
(364,-54,o),
(337,-26,o),
(337,0,qs),
(337,16,o),
(345,80,qs),
(355,154,o),
(355,187,qs),
(355,246,o),
(301,321,o),
(247,331,q),
(247,333,l),
(301,343,o),
(355,418,o),
(355,477,qs),
(355,510,o),
(345,584,qs),
(337,648,o),
(337,664,qs),
(337,690,o),
(364,718,o),
(396,718,qs),
(430,718,l),
(430,895,l),
(354,895,ls),
(249,895,o),
(127,787,o),
(127,688,qs),
(127,646,o),
(141,570,qs),
(152,511,o),
(152,486,qs),
(152,453,o),
(111,423,o),
(60,423,q),
(60,242,l),
(110,242,o),
(152,209,o),
(152,178,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
26 1 0 1 1 76 0 2 0 3 1 2 3 105 0 1 0 0 4 1 0 105 0 4 5 5 4 89 0 4 4 5 95 0 5 4 5 79 41 39 38 36 33 40 17 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 484;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,828,l),
(20,-144,l),
(242,-144,l),
(242,828,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 262;
}
);
note = bar;
unicode = 124;
},
{
glyphname = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,153,o),
(343,94,qs),
(357,18,o),
(357,-24,qs),
(357,-123,o),
(235,-231,o),
(130,-231,qs),
(54,-231,l),
(54,-54,l),
(88,-54,ls),
(120,-54,o),
(147,-26,o),
(147,0,qs),
(147,16,o),
(139,80,qs),
(129,154,o),
(129,187,qs),
(129,246,o),
(183,321,o),
(237,331,q),
(237,333,l),
(183,343,o),
(129,418,o),
(129,477,qs),
(129,510,o),
(139,584,qs),
(147,648,o),
(147,664,qs),
(147,690,o),
(120,718,o),
(88,718,qs),
(54,718,l),
(54,895,l),
(130,895,ls),
(235,895,o),
(357,787,o),
(357,688,qs),
(357,646,o),
(343,570,qs),
(332,511,o),
(332,486,qs),
(332,453,o),
(373,423,o),
(424,423,q),
(424,242,l),
(374,242,o),
(332,209,o),
(332,178,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
26 1 0 1 1 76 0 2 0 3 1 2 3 105 0 1 0 0 4 1 0 105 0 4 5 5 4 89 0 4 4 5 95 0 5 4 5 79 41 39 38 36 33 40 17 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 484;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,181,o),
(186,190,q),
(192,222,o),
(219,250,o),
(244,250,qs),
(261,250,o),
(294,238,o),
(324,223,qs),
(360,204,o),
(419,183,o),
(455,183,qs),
(545,183,o),
(667,306,o),
(689,436,qs),
(690,441,o),
(685,447,o),
(680,447,qs),
(534,447,ls),
(526,447,o),
(524,438,qs),
(518,406,o),
(491,378,o),
(466,378,qs),
(449,378,o),
(415,391,o),
(387,405,qs),
(351,424,o),
(291,445,o),
(255,445,qs),
(166,445,o),
(45,322,o),
(22,192,qs),
(20,181,o),
(31,181,qs),
(175,181,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
0 2 5 0 2 89 3 1 1 0 5 0 1 5 105 0 2 2 0 98 4 6 2 0 2 0 82 1 0 30 28 24 22 17 15 12 10 6 4 0 34 1 33 7 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 711;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 170;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(133,287,l),
(323,287,l),
(349,-187,l),
(107,-187,l)
);
},
{
closed = 1;
nodes = (
(355,419,o),
(285,356,o),
(228,356,qs),
(170,356,o),
(100,419,o),
(100,467,qs),
(100,514,o),
(170,576,o),
(228,576,qs),
(285,576,o),
(355,514,o),
(355,467,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
0 0 4 1 1 0 1 99 0 3 3 2 97 0 2 2 37 3 78 0 0 13 11 7 5 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 455;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = cent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(352,188,o),
(319,170,o),
(301,170,qs),
(267,170,o),
(232,213,o),
(232,253,qs),
(232,293,o),
(267,337,o),
(301,337,qs),
(319,337,o),
(349,321,o),
(356,302,q),
(559,302,l),
(553,396,o),
(421,506,o),
(326,513,q),
(326,589,l),
(264,589,l),
(264,513,l),
(150,503,o),
(20,370,o),
(20,254,qs),
(20,137,o),
(150,3,o),
(264,-7,q),
(264,-83,l),
(326,-83,l),
(326,-7,l),
(387,-2,o),
(490,49,o),
(555,142,o),
(559,205,q),
(356,205,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
16 13 2 3 1 7 4 2 0 4 2 76 0 2 3 5 3 2 5 128 6 1 5 4 3 5 4 126 0 1 0 3 2 1 3 105 0 4 0 0 4 89 0 4 4 0 95 0 0 4 0 79 0 0 0 32 0 32 36 34 20 24 21 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = cent;
unicode = 162;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(91,493,o),
(108,421,q),
(31,421,l),
(31,274,l),
(134,274,l),
(129,216,o),
(82,133,o),
(36,98,q),
(63,-6,l),
(615,-6,l),
(615,165,l),
(280,165,l),
(327,203,o),
(342,274,q),
(492,274,l),
(492,421,l),
(324,421,l),
(321,432,ls),
(314,457,o),
(302,506,o),
(302,522,qs),
(302,591,o),
(354,591,qs),
(402,591,o),
(409,531,q),
(613,531,l),
(606,639,o),
(470,771,o),
(346,771,qs),
(271,771,o),
(156,718,o),
(91,618,o),
(91,548,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
24 1 6 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 3 2 1 114 0 0 0 2 1 0 2 105 8 1 3 7 1 4 5 3 4 103 0 5 5 6 95 0 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 1 2 3 2 1 3 128 0 0 0 2 1 0 2 105 8 1 3 7 1 4 5 3 4 103 0 5 5 6 95 0 6 6 29 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
17 20 17 18 17 21 33 18 34 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = currency;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(362,348,o),
(329,320,o),
(304,320,qs),
(279,320,o),
(246,348,o),
(246,377,qs),
(246,408,o),
(279,436,o),
(304,436,qs),
(329,436,o),
(362,408,o),
(362,377,qs)
);
},
{
closed = 1;
nodes = (
(543,219,l),
(494,268,l),
(532,316,o),
(532,379,qs),
(532,446,o),
(492,491,q),
(543,541,l),
(463,622,l),
(391,550,l),
(350,561,o),
(304,561,qs),
(254,561,o),
(213,549,q),
(140,622,l),
(60,541,l),
(113,488,l),
(76,443,o),
(76,379,qs),
(76,316,o),
(112,271,q),
(60,219,l),
(140,138,l),
(209,207,l),
(253,193,o),
(304,193,qs),
(356,193,o),
(395,206,q),
(463,138,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
33 32 30 26 24 23 6 0 3 38 37 19 18 16 5 2 1 2 76 31 25 2 3 74 39 17 2 2 73 0 1 0 2 1 2 101 0 0 0 3 97 0 3 3 31 0 78 44 36 36 33 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = currency;
unicode = 164;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(675,128,l),
(675,272,l),
(505,272,l),
(524,308,l),
(675,308,l),
(675,452,l),
(598,452,l),
(730,708,l),
(480,708,l),
(367,424,l),
(254,708,l),
(0,708,l),
(132,452,l),
(53,452,l),
(53,308,l),
(206,308,l),
(225,272,l),
(53,272,l),
(53,128,l),
(254,128,l),
(254,0,l),
(476,0,l),
(476,128,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
12 1 3 4 1 76 7 1 4 8 1 3 2 4 3 104 9 1 2 10 1 1 0 2 1 103 6 1 5 5 28 77 0 0 0 29 0 78 22 21 20 19 17 17 18 17 17 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = yen;
unicode = 165;
},
{
glyphname = brokenbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(105,287,l),
(105,-144,l),
(327,-144,l),
(327,287,l)
);
},
{
closed = 1;
nodes = (
(327,398,l),
(327,828,l),
(105,828,l),
(105,398,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 3 1 2 3 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(59,494,o),
(87,420,o),
(116,388,q),
(21,348,o),
(21,244,qs),
(21,189,o),
(95,97,o),
(163,62,qs),
(225,30,o),
(284,-5,o),
(312,-36,o),
(312,-55,qs),
(312,-79,o),
(296,-79,qs),
(274,-79,o),
(272,-25,q),
(53,-25,l),
(61,-119,o),
(183,-235,o),
(291,-235,qs),
(407,-235,o),
(536,-130,o),
(536,-44,qs),
(536,37,o),
(478,101,q),
(531,127,o),
(575,197,o),
(575,244,qs),
(575,349,o),
(432,427,qs),
(370,458,o),
(310,493,o),
(283,524,o),
(283,543,qs),
(283,567,o),
(299,567,qs),
(321,567,o),
(323,513,q),
(542,513,l),
(534,607,o),
(412,723,o),
(304,723,qs),
(188,723,o),
(59,618,o),
(59,532,qs)
);
},
{
closed = 1;
nodes = (
(339,220,o),
(316,189,o),
(297,189,qs),
(279,189,o),
(258,220,o),
(258,244,qs),
(258,268,o),
(281,299,o),
(300,299,qs),
(319,299,o),
(339,268,o),
(339,244,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
41 1 6 1 19 1 4 7 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 2 0 1 1 2 114 0 6 1 7 1 6 7 128 0 7 4 1 7 4 126 0 5 4 3 4 5 114 0 4 0 3 4 3 102 0 1 1 0 98 0 0 0 34 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 0 1 0 2 1 128 0 6 1 7 1 6 7 128 0 7 4 1 7 4 126 0 5 4 3 4 5 3 128 0 4 0 3 4 3 102 0 1 1 0 98 0 0 0 34 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 47 33 18 46 33 18 33 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = section;
unicode = 167;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,620,o),
(182,669,o),
(182,705,qs),
(182,743,o),
(133,792,o),
(95,792,qs),
(59,792,o),
(10,742,o),
(10,705,qs),
(10,669,o),
(59,620,o),
(95,620,qs)
);
},
{
closed = 1;
nodes = (
(357,620,o),
(407,669,o),
(407,705,qs),
(407,743,o),
(358,792,o),
(320,792,qs),
(284,792,o),
(235,742,o),
(235,705,qs),
(235,669,o),
(284,620,o),
(320,620,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 417;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,253,o),
(120,87,o),
(282,-6,o),
(386,-6,qs),
(490,-6,o),
(651,87,o),
(741,252,o),
(741,358,qs),
(741,463,o),
(652,628,o),
(490,720,o),
(386,720,qs),
(282,720,o),
(120,628,o),
(30,463,o),
(30,358,qs)
);
},
{
closed = 1;
nodes = (
(672,269,o),
(602,133,o),
(473,59,o),
(386,59,qs),
(299,59,o),
(169,133,o),
(100,268,o),
(100,358,qs),
(100,448,o),
(169,582,o),
(298,655,o),
(386,655,qs),
(473,655,o),
(602,582,o),
(672,448,o),
(672,358,qs)
);
},
{
closed = 1;
nodes = (
(408,433,o),
(380,433,qs),
(358,433,o),
(335,395,o),
(335,357,qs),
(335,319,o),
(358,281,o),
(380,281,qs),
(408,281,o),
(418,316,q),
(602,316,l),
(590,234,o),
(472,136,o),
(390,136,qs),
(323,136,o),
(220,190,o),
(164,290,o),
(164,357,qs),
(164,424,o),
(220,524,o),
(323,578,o),
(390,578,qs),
(472,578,o),
(590,480,o),
(602,398,q),
(418,398,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 4 2 8 2 4 114 0 5 7 3 3 5 114 0 0 0 2 4 0 2 105 10 1 9 0 6 7 9 6 103 0 8 0 7 5 8 7 105 0 3 1 1 3 89 0 3 3 1 98 0 1 3 1 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 4 2 8 2 4 8 128 0 5 7 3 7 5 3 128 0 0 0 2 4 0 2 105 10 1 9 0 6 7 9 6 103 0 8 0 7 5 8 7 105 0 3 1 1 3 89 0 3 3 1 98 0 1 3 1 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
32 32 32 57 32 57 36 33 18 38 38 38 38 38 34 11 8 31 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 771;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,350,o),
(278,371,o),
(297,394,q),
(297,355,l),
(461,355,l),
(461,708,l),
(297,708,l),
(297,669,l),
(278,691,o),
(225,712,o),
(184,712,qs),
(112,712,o),
(20,616,o),
(20,530,qs),
(20,444,o),
(113,350,o),
(186,350,qs)
);
},
{
closed = 1;
nodes = (
(266,582,o),
(297,556,o),
(297,532,qs),
(297,508,o),
(266,481,o),
(243,481,qs),
(219,481,o),
(189,505,o),
(189,529,qs),
(189,554,o),
(220,582,o),
(243,582,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
8 1 5 1 13 1 2 4 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
8 1 5 0 13 1 2 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
8 1 5 1 13 1 2 4 2 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 44 77 7 1 5 5 0 97 0 0 0 44 77 0 2 2 45 77 0 4 4 3 97 6 1 3 3 45 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
7 1 5 5 0 97 1 1 0 0 44 77 0 2 2 45 77 0 4 4 3 97 6 1 3 3 45 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 44 77 7 1 5 5 0 97 0 0 0 44 77 0 2 2 45 77 0 4 4 3 97 6 1 3 3 45 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 44 77 7 1 5 5 0 97 0 0 0 44 77 0 2 2 45 77 0 4 4 3 97 6 1 3 3 47 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
17 17 0 0 17 28 17 27 23 21 0 16 0 15 17 19 36 8 9 25 
CALL[ ]	/* CallFunction */";
};
width = 481;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(244,295,l),
(323,470,l),
(122,470,l),
(45,295,l),
(122,120,l),
(323,120,l)
);
},
{
closed = 1;
nodes = (
(377,120,l),
(578,120,l),
(499,295,l),
(578,470,l),
(377,470,l),
(300,295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 8 4 1 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 4 2 1 0 1 79 0 0 10 9 7 6 0 5 0 5 18 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = logicalnot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,282,l),
(491,282,l),
(491,155,l),
(713,155,l),
(713,448,l),
(55,448,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 1 1 0 113 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 1 0 134 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 5 0 5 17 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = uni00AD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,250,l),
(486,250,l),
(486,433,l),
(20,433,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = uni00AD;
unicode = 173;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,656,o),
(412,569,o),
(412,498,qs),
(412,428,o),
(327,340,o),
(256,340,qs),
(185,340,o),
(99,428,o),
(99,498,qs),
(99,570,o),
(184,656,o),
(256,656,qs)
);
},
{
closed = 1;
nodes = (
(321,275,o),
(424,332,o),
(481,434,o),
(481,498,qs),
(481,563,o),
(424,664,o),
(321,721,o),
(256,721,qs),
(191,721,o),
(88,664,o),
(30,563,o),
(30,498,qs),
(30,434,o),
(88,332,o),
(191,275,o),
(256,275,qs)
);
},
{
closed = 1;
nodes = (
(357,569,o),
(315,606,o),
(280,606,qs),
(160,606,l),
(160,396,l),
(240,396,l),
(240,469,l),
(245,469,l),
(282,396,l),
(368,396,l),
(321,478,l),
(338,487,o),
(357,518,o),
(357,538,qs)
);
},
{
closed = 1;
nodes = (
(261,543,ls),
(274,543,o),
(274,530,qs),
(274,517,o),
(261,517,qs),
(237,517,l),
(237,543,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 7 values pushed */
33 30 2 4 7 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 8 6 7 1 8 114 0 7 4 6 7 4 126 0 2 9 1 1 6 2 1 105 0 6 5 1 4 0 6 4 103 0 0 3 3 0 89 0 0 0 3 98 10 1 3 0 3 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 8 6 7 6 8 7 128 0 7 4 6 7 4 126 0 2 9 1 1 6 2 1 105 0 6 5 1 4 0 6 4 103 0 0 3 3 0 89 0 0 0 3 98 10 1 3 0 3 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
12 12 0 0 48 46 44 42 39 37 36 35 32 31 12 27 12 26 20 18 0 11 0 10 36 11 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 511;
}
);
note = registered;
unicode = 174;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(10,622,l),
(441,622,l),
(441,769,l),
(10,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 451;
}
);
note = macron;
unicode = 175;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(23,477,o),
(81,393,o),
(186,347,o),
(253,347,qs),
(354,347,o),
(473,447,o),
(473,533,qs),
(473,618,o),
(351,715,o),
(249,715,qs),
(146,715,o),
(23,618,o),
(23,533,qs)
);
},
{
closed = 1;
nodes = (
(304,497,o),
(274,464,o),
(253,464,qs),
(230,464,o),
(192,497,o),
(192,531,qs),
(192,566,o),
(227,600,o),
(250,600,qs),
(271,600,o),
(304,566,o),
(304,531,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 31 values pushed */
0 0 0 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 36 37 36 33 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 496;
}
);
note = degree;
unicode = 176;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,630,l),
(169,545,l),
(20,545,l),
(20,344,l),
(169,344,l),
(169,297,l),
(20,297,l),
(20,96,l),
(531,96,l),
(531,297,l),
(382,297,l),
(382,344,l),
(531,344,l),
(531,545,l),
(382,545,l),
(382,630,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 7 0 7 133 4 1 2 0 3 2 3 100 5 1 1 1 0 95 6 1 0 0 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 7 0 7 133 6 1 0 5 1 1 2 0 1 103 4 1 2 3 3 2 87 4 1 2 2 3 96 0 3 2 3 80 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = uni00B2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(204,603,o),
(221,603,qs),
(230,603,o),
(230,595,qs),
(230,568,o),
(183,544,qs),
(48,474,l),
(48,352,l),
(393,352,l),
(393,477,l),
(223,477,l),
(263,492,ls),
(338,520,o),
(403,573,o),
(403,609,qs),
(403,652,o),
(325,717,o),
(243,717,qs),
(153,717,o),
(45,635,o),
(40,569,q),
(203,569,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
17 1 4 3 14 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
37 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
5 1 4 3 1 3 4 114 0 3 3 0 97 0 0 0 44 77 0 1 1 2 95 0 2 2 45 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
5 1 4 3 1 3 4 1 128 0 3 3 0 97 0 0 0 44 77 0 1 1 2 95 0 2 2 45 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 21 0 21 22 17 22 34 6 9 26 
CALL[ ]	/* CallFunction */";
};
width = 422;
}
);
note = uni00B2;
unicode = 178;
},
{
glyphname = uni00B3;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,592,o),
(183,605,o),
(190,605,qs),
(202,605,o),
(202,588,qs),
(202,574,o),
(190,562,o),
(176,562,qs),
(155,562,l),
(155,508,l),
(185,508,ls),
(199,508,o),
(212,497,o),
(212,483,qs),
(212,462,o),
(199,462,qs),
(192,462,o),
(185,471,o),
(185,482,q),
(13,482,l),
(19,417,o),
(108,349,o),
(213,349,qs),
(293,349,o),
(385,402,o),
(385,452,qs),
(385,484,o),
(346,523,o),
(301,533,q),
(301,537,l),
(376,549,o),
(376,611,qs),
(376,659,o),
(288,717,o),
(209,717,qs),
(109,717,o),
(20,636,o),
(20,577,q),
(176,577,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
8 1 7 6 5 6 7 114 0 2 4 3 3 2 114 0 5 0 4 2 5 4 105 0 6 6 0 97 0 0 0 44 77 0 3 3 1 98 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
8 1 7 6 5 6 7 5 128 0 2 4 3 3 2 114 0 5 0 4 2 5 4 105 0 6 6 0 97 0 0 0 44 77 0 3 3 1 98 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 38 0 38 19 33 35 34 18 42 34 9 9 29 
CALL[ ]	/* CallFunction */";
};
width = 403;
}
);
note = uni00B3;
unicode = 179;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(10,750,l),
(10,602,l),
(269,696,l),
(269,860,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 279;
}
);
note = acute;
unicode = 180;
},
{
glyphname = uni00B5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(676,0,l),
(676,564,l),
(454,564,l),
(454,266,ls),
(454,230,o),
(412,188,o),
(375,188,qs),
(339,188,o),
(296,230,o),
(296,266,qs),
(296,564,l),
(75,564,l),
(75,-270,l),
(296,-270,l),
(296,-4,l),
(348,-4,o),
(430,41,o),
(454,77,q),
(454,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 0 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 2 2 31 77 0 3 3 0 97 5 1 0 0 29 77 0 1 1 33 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
4 1 2 2 31 77 0 3 3 0 97 5 1 0 0 35 77 0 1 1 33 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 19 35 17 17 18 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = uni00B5;
unicode = 181;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,708,ls),
(179,708,o),
(72,645,o),
(22,544,o),
(22,486,qs),
(22,428,o),
(72,328,o),
(179,265,o),
(261,265,qs),
(292,265,l),
(292,0,l),
(468,0,l),
(468,542,l),
(526,542,l),
(526,0,l),
(703,0,l),
(703,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
0 3 1 0 1 3 0 128 0 1 1 4 95 0 4 4 28 77 2 1 0 0 29 0 78 38 33 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(302,344,o),
(232,407,o),
(175,407,qs),
(117,407,o),
(47,344,o),
(47,296,qs),
(47,249,o),
(117,187,o),
(175,187,qs),
(232,187,o),
(302,249,o),
(302,296,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 36 33 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 349;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,7,l),
(75,-127,l),
(160,-127,ls),
(186,-127,o),
(186,-142,qs),
(186,-149,o),
(172,-158,o),
(160,-158,qs),
(10,-158,l),
(10,-271,l),
(183,-271,ls),
(243,-271,o),
(333,-214,o),
(333,-149,qs),
(333,-105,o),
(291,-50,o),
(231,-27,o),
(203,-27,q),
(203,7,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 4 3 2 0 114 0 4 0 3 2 4 3 103 0 2 1 1 2 87 0 2 2 1 96 0 1 2 1 80 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 4 3 4 0 3 128 0 4 0 3 2 4 3 103 0 2 1 1 2 87 0 2 2 1 96 0 1 2 1 80 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 35 33 37 16 5 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 343;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = uni00B9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(86,352,l),
(250,352,l),
(250,704,l),
(20,704,l),
(20,577,l),
(86,577,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 2 2 0 95 0 0 0 44 77 0 1 1 45 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
0 0 3 1 2 1 0 2 103 0 1 1 45 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 5 0 5 17 17 4 9 24 
CALL[ ]	/* CallFunction */";
};
width = 285;
}
);
note = uni00B9;
unicode = 185;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,478,o),
(72,395,o),
(170,347,o),
(235,347,qs),
(300,347,o),
(398,395,o),
(450,478,o),
(450,529,qs),
(450,581,o),
(398,662,o),
(301,709,o),
(235,709,qs),
(169,709,o),
(72,662,o),
(20,581,o),
(20,529,qs)
);
},
{
closed = 1;
nodes = (
(283,502,o),
(256,473,o),
(235,473,qs),
(214,473,o),
(187,502,o),
(187,529,qs),
(187,556,o),
(214,584,o),
(235,584,qs),
(256,584,o),
(283,556,o),
(283,529,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 2 2 0 97 0 0 0 44 77 0 3 3 1 97 0 1 1 47 1 78 36 37 38 34 4 9 26 
CALL[ ]	/* CallFunction */";
};
width = 470;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(507,120,l),
(583,295,l),
(507,470,l),
(305,470,l),
(385,295,l),
(305,120,l)
);
},
{
closed = 1;
nodes = (
(252,120,l),
(328,295,l),
(252,470,l),
(50,470,l),
(130,295,l),
(50,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = onequarter;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,0,l),
(327,0,l),
(714,708,l),
(498,708,l)
);
},
{
closed = 1;
nodes = (
(111,577,l),
(111,352,l),
(275,352,l),
(275,704,l),
(45,704,l),
(45,577,l)
);
},
{
closed = 1;
nodes = (
(657,58,l),
(657,0,l),
(822,0,l),
(822,58,l),
(857,58,l),
(857,146,l),
(822,146,l),
(822,351,l),
(595,351,l),
(454,142,l),
(454,58,l)
);
},
{
closed = 1;
nodes = (
(666,250,l),
(666,151,l),
(607,151,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
22 1 6 5 10 1 7 6 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
22 1 10 5 10 1 7 6 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 3 4 5 4 3 5 128 0 5 6 4 5 6 126 8 1 0 7 0 134 2 11 2 1 0 4 3 1 4 103 12 10 2 6 7 7 6 87 12 10 2 6 6 7 96 9 1 7 6 7 80 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 3 4 5 4 3 5 128 0 5 10 4 5 10 126 8 1 0 7 0 134 2 11 2 1 0 4 3 1 4 103 12 1 10 6 7 10 87 0 6 7 7 6 87 0 6 6 7 95 9 1 7 6 7 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
21 21 0 0 21 23 21 23 20 19 18 17 16 15 14 13 12 11 9 8 7 6 5 4 0 3 0 3 17 13 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 879;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = onehalf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,0,l),
(327,0,l),
(724,711,l),
(508,711,l)
);
},
{
closed = 1;
nodes = (
(111,352,l),
(275,352,l),
(275,704,l),
(45,704,l),
(45,577,l),
(111,577,l)
);
},
{
closed = 1;
nodes = (
(658,250,o),
(675,250,qs),
(684,250,o),
(684,242,qs),
(684,215,o),
(637,191,qs),
(502,121,l),
(502,-1,l),
(847,-1,l),
(847,124,l),
(677,124,l),
(717,139,ls),
(792,167,o),
(857,220,o),
(857,256,qs),
(857,299,o),
(779,364,o),
(697,364,qs),
(607,364,o),
(499,282,o),
(494,216,q),
(657,216,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 10 values pushed */
27 1 9 8 24 1 0 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 3 5 8 5 3 8 128 0 8 9 9 8 112 2 10 2 1 11 1 4 5 1 4 103 0 5 12 1 9 6 5 9 104 0 6 0 0 6 87 0 6 6 0 95 7 1 0 6 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
10 1 1 2 1 133 0 3 5 8 5 3 8 128 0 8 9 9 8 112 0 2 11 1 4 5 2 4 103 0 5 12 1 9 6 5 9 104 0 6 0 0 6 87 0 6 6 0 95 7 1 0 6 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
10 1 1 2 1 133 0 3 5 8 5 3 8 128 0 8 9 5 8 9 126 0 2 11 1 4 5 2 4 103 0 5 12 1 9 6 5 9 104 0 6 0 0 6 87 0 6 6 0 95 7 1 0 6 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
10 10 4 4 0 0 10 31 10 31 30 29 23 22 21 20 14 12 4 9 4 9 8 7 6 5 0 3 0 3 17 13 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 928;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = threequarters;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,0,l),
(477,0,l),
(847,711,l),
(630,711,l)
);
},
{
closed = 1;
nodes = (
(974,146,l),
(974,351,l),
(727,351,l),
(606,142,l),
(606,58,l),
(810,58,l),
(810,0,l),
(974,0,l),
(974,58,l),
(1009,58,l),
(1009,146,l)
);
},
{
closed = 1;
nodes = (
(760,146,l),
(819,270,l),
(819,146,l)
);
},
{
closed = 1;
nodes = (
(229,592,o),
(236,605,o),
(243,605,qs),
(255,605,o),
(255,588,qs),
(255,574,o),
(243,562,o),
(229,562,qs),
(208,562,l),
(208,508,l),
(238,508,ls),
(252,508,o),
(265,497,o),
(265,483,qs),
(265,462,o),
(252,462,qs),
(245,462,o),
(238,471,o),
(238,482,q),
(66,482,l),
(72,417,o),
(161,349,o),
(266,349,qs),
(346,349,o),
(438,402,o),
(438,452,qs),
(438,484,o),
(399,523,o),
(354,533,q),
(354,537,l),
(429,549,o),
(429,611,qs),
(429,659,o),
(341,717,o),
(262,717,qs),
(162,717,o),
(73,636,o),
(73,577,q),
(229,577,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 14 values pushed */
26 1 12 13 15 1 6 9 10 1 2 6 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
0 13 14 12 14 13 12 128 0 12 10 14 12 112 0 5 10 9 10 5 9 128 3 1 0 2 2 0 113 8 16 2 1 17 15 2 14 13 1 14 105 11 1 10 0 9 6 10 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
0 14 1 15 15 14 114 0 13 15 12 15 13 12 128 0 12 10 15 12 112 0 5 10 9 10 5 9 128 3 1 0 2 2 0 113 8 16 2 1 17 1 15 13 1 15 103 11 1 10 0 9 6 10 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 80 values pushed */
0 14 1 15 15 14 114 0 13 15 12 15 13 12 128 0 12 10 15 12 112 0 11 10 5 10 11 114 0 5 9 10 5 9 126 3 1 0 2 2 0 113 8 16 2 1 17 1 15 13 1 15 103 0 10 0 9 6 10 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
0 14 1 15 15 14 114 0 13 15 12 15 13 12 128 0 12 10 15 12 10 126 0 11 10 5 10 11 114 0 5 9 10 5 9 126 3 1 0 2 2 0 113 8 16 2 1 17 1 15 13 1 15 103 0 10 0 9 6 10 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 80 values pushed */
0 14 1 15 15 14 114 0 13 15 12 15 13 12 128 0 12 10 15 12 10 126 0 11 10 5 10 11 114 0 5 9 10 5 9 126 3 1 0 2 0 134 8 16 2 1 17 1 15 13 1 15 103 0 10 0 9 6 10 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 86 values pushed */
16 1 1 8 14 8 1 14 128 0 14 15 15 14 112 0 13 15 12 15 13 12 128 0 12 10 15 12 10 126 0 11 10 5 10 11 114 0 5 9 10 5 9 126 3 1 0 2 0 134 0 8 17 1 15 13 8 15 103 0 10 0 9 6 10 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 87 values pushed */
16 1 1 8 14 8 1 14 128 0 14 15 8 14 15 126 0 13 15 12 15 13 12 128 0 12 10 15 12 10 126 0 11 10 5 10 11 114 0 5 9 10 5 9 126 3 1 0 2 0 134 0 8 17 1 15 13 8 15 103 0 10 0 9 6 10 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
18 18 0 0 18 56 18 56 53 52 49 47 46 44 41 39 37 36 34 32 22 20 17 16 14 13 12 11 9 8 7 6 5 4 0 3 0 3 17 18 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 1024;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(309,5,o),
(290,-20,o),
(270,-20,qs),
(255,-20,o),
(236,0,o),
(235,17,qs),
(234,48,o),
(296,75,o),
(357,75,qs),
(441,75,l),
(435,287,l),
(239,287,l),
(233,216,l),
(137,214,o),
(18,106,o),
(18,18,qs),
(18,-89,o),
(153,-200,o),
(264,-200,qs),
(350,-200,o),
(466,-139,o),
(521,-37,o),
(518,25,q),
(309,25,l)
);
},
{
closed = 1;
nodes = (
(207,424,o),
(277,361,o),
(334,361,qs),
(392,361,o),
(462,424,o),
(462,472,qs),
(462,519,o),
(392,581,o),
(334,581,qs),
(277,581,o),
(207,519,o),
(207,472,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 1 2 3 2 1 3 128 0 4 5 0 5 4 114 0 2 0 3 5 2 3 103 8 1 5 0 0 5 0 102 0 7 7 6 97 0 6 6 37 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 3 2 1 3 128 0 4 5 0 5 4 0 128 0 2 0 3 5 2 3 103 8 1 5 0 0 5 0 102 0 7 7 6 97 0 6 6 37 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 1 2 3 2 1 3 128 0 4 5 0 5 4 0 128 0 6 0 7 2 6 7 105 0 2 0 3 5 2 3 103 8 1 5 4 0 5 87 8 1 5 5 0 98 0 0 5 0 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 33 31 27 25 0 23 0 23 36 33 17 20 35 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 538;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = Agrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(539,0,l),
(773,0,l),
(515,708,l),
(259,708,l),
(0,0,l),
(233,0,l),
(268,107,l),
(504,107,l)
);
},
{
closed = 1;
nodes = (
(515,749,l),
(515,897,l),
(256,1007,l),
(256,843,l)
);
},
{
closed = 1;
nodes = (
(386,471,l),
(450,274,l),
(322,274,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
13 1 4 1 1 76 11 10 9 8 4 1 74 6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 12 12 0 0 12 14 12 14 0 7 0 7 17 17 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Aacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(539,0,l),
(773,0,l),
(515,708,l),
(259,708,l),
(0,0,l),
(233,0,l),
(268,107,l),
(504,107,l)
);
},
{
closed = 1;
nodes = (
(515,843,l),
(515,1007,l),
(256,897,l),
(256,749,l)
);
},
{
closed = 1;
nodes = (
(386,471,l),
(450,274,l),
(322,274,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
13 1 4 1 1 76 11 10 9 8 4 1 74 6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 12 12 0 0 12 14 12 14 0 7 0 7 17 17 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(539,0,l),
(773,0,l),
(515,708,l),
(259,708,l),
(0,0,l),
(233,0,l),
(268,107,l),
(504,107,l)
);
},
{
closed = 1;
nodes = (
(387,827,l),
(552,749,l),
(552,893,l),
(387,968,l),
(221,893,l),
(221,749,l)
);
},
{
closed = 1;
nodes = (
(386,471,l),
(450,274,l),
(322,274,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
15 1 4 1 1 76 13 12 11 10 9 8 6 1 74 6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 14 14 0 0 14 16 14 16 0 7 0 7 17 17 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Atilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(539,0,l),
(773,0,l),
(515,708,l),
(259,708,l),
(0,0,l),
(233,0,l),
(268,107,l),
(504,107,l)
);
},
{
closed = 1;
nodes = (
(270,796,o),
(306,796,qs),
(318,796,o),
(346,785,o),
(360,778,qs),
(384,765,o),
(426,751,o),
(450,751,qs),
(514,751,o),
(595,833,o),
(611,926,q),
(502,926,l),
(495,879,o),
(458,879,qs),
(446,879,o),
(423,888,o),
(404,898,qs),
(380,911,o),
(338,925,o),
(314,925,qs),
(250,925,o),
(169,842,o),
(153,749,q),
(261,749,l)
);
},
{
closed = 1;
nodes = (
(450,274,l),
(322,274,l),
(386,471,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
34 1 10 1 1 76 6 1 4 0 8 7 4 8 105 0 5 12 9 2 7 1 5 7 106 0 10 11 1 3 0 10 3 104 0 1 1 28 77 2 1 0 0 29 0 78 8 8 0 0 33 32 8 31 8 31 30 28 24 22 20 19 18 16 12 10 0 7 0 7 17 17 17 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = Adieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(539,0,l),
(773,0,l),
(515,708,l),
(259,708,l),
(0,0,l),
(233,0,l),
(268,107,l),
(504,107,l)
);
},
{
closed = 1;
nodes = (
(310,767,o),
(360,816,o),
(360,852,qs),
(360,890,o),
(311,939,o),
(273,939,qs),
(237,939,o),
(188,889,o),
(188,852,qs),
(188,816,o),
(237,767,o),
(273,767,qs)
);
},
{
closed = 1;
nodes = (
(535,767,o),
(585,816,o),
(585,852,qs),
(585,890,o),
(536,939,o),
(498,939,qs),
(462,939,o),
(413,889,o),
(413,852,qs),
(413,816,o),
(462,767,o),
(498,767,qs)
);
},
{
closed = 1;
nodes = (
(450,274,l),
(322,274,l),
(386,471,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
34 1 8 1 1 76 6 1 4 11 7 10 3 5 1 4 5 105 0 8 9 1 3 0 8 3 104 0 1 1 28 77 2 1 0 0 29 0 78 20 20 8 8 0 0 33 32 20 31 20 30 26 24 8 19 8 18 14 12 0 7 0 7 17 17 17 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Aring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(539,0,l),
(773,0,l),
(515,708,l),
(259,708,l),
(0,0,l),
(233,0,l),
(268,107,l),
(504,107,l)
);
},
{
closed = 1;
nodes = (
(367,825,o),
(341,851,o),
(341,872,qs),
(341,893,o),
(367,919,o),
(387,919,qs),
(407,919,o),
(433,893,o),
(433,872,qs),
(433,851,o),
(407,825,o),
(387,825,qs)
);
},
{
closed = 1;
nodes = (
(331,1004,o),
(255,932,o),
(255,872,qs),
(255,812,o),
(331,740,o),
(387,740,qs),
(443,740,o),
(519,812,o),
(519,872,qs),
(519,932,o),
(443,1004,o),
(387,1004,qs)
);
},
{
closed = 1;
nodes = (
(450,274,l),
(322,274,l),
(386,471,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
34 1 8 1 1 76 11 1 7 0 4 5 7 4 105 10 1 5 0 6 1 5 6 105 0 8 9 1 3 0 8 3 104 0 1 1 28 77 2 1 0 0 29 0 78 20 20 8 8 0 0 33 32 20 31 20 30 26 24 8 19 8 18 14 12 0 7 0 7 17 17 17 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = AE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,537,l),
(490,264,l),
(363,264,l)
);
},
{
closed = 1;
nodes = (
(241,0,l),
(286,97,l),
(490,97,l),
(490,0,l),
(952,0,l),
(952,177,l),
(712,177,l),
(712,280,l),
(922,280,l),
(922,447,l),
(712,447,l),
(712,532,l),
(952,532,l),
(952,708,l),
(339,708,l),
(0,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
1 1 2 1 1 76 0 3 0 4 0 3 4 103 9 1 0 0 7 6 0 7 103 0 2 2 1 95 0 1 1 28 77 0 5 5 6 95 8 1 6 6 29 6 78 0 0 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 0 2 0 2 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 986;
}
);
note = AE;
unicode = 198;
},
{
glyphname = Ccedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,259,o),
(100,107,o),
(233,11,o),
(323,-1,q),
(323,-134,l),
(408,-134,ls),
(434,-134,o),
(434,-149,qs),
(434,-156,o),
(420,-165,o),
(408,-165,qs),
(258,-165,l),
(258,-278,l),
(431,-278,ls),
(491,-278,o),
(581,-221,o),
(581,-156,qs),
(581,-112,o),
(539,-57,o),
(479,-34,o),
(451,-34,q),
(451,0,l),
(446,0,l),
(558,17,o),
(704,163,o),
(723,274,q),
(489,274,l),
(473,239,o),
(414,200,o),
(376,200,qs),
(320,200,o),
(255,284,o),
(255,355,qs),
(255,426,o),
(320,510,o),
(376,510,qs),
(414,510,o),
(473,471,o),
(489,436,q),
(723,436,l),
(708,520,o),
(617,646,o),
(472,715,o),
(380,715,qs),
(273,715,o),
(115,624,o),
(30,460,o),
(30,355,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
43 1 5 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 5 3 8 7 5 114 0 3 0 8 7 3 8 103 0 2 2 0 97 0 0 0 34 77 0 7 7 6 96 0 6 6 33 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 5 3 8 3 5 8 128 0 3 0 8 7 3 8 103 0 2 2 0 97 0 0 0 34 77 0 7 7 6 96 0 6 6 33 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
35 33 37 21 18 36 34 19 34 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Egrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,708,l),
(50,708,l),
(50,0,l),
(522,0,l),
(522,177,l),
(272,177,l),
(272,277,l),
(492,277,l),
(492,444,l),
(272,444,l),
(272,531,l),
(522,531,l)
);
},
{
closed = 1;
nodes = (
(410,749,l),
(410,897,l),
(151,1007,l),
(151,843,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
15 14 13 12 4 4 74 0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Eacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,708,l),
(50,708,l),
(50,0,l),
(522,0,l),
(522,177,l),
(272,177,l),
(272,277,l),
(492,277,l),
(492,444,l),
(272,444,l),
(272,531,l),
(522,531,l)
);
},
{
closed = 1;
nodes = (
(410,843,l),
(410,1007,l),
(151,897,l),
(151,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
15 14 13 12 4 4 74 0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ecircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,708,l),
(50,708,l),
(50,0,l),
(522,0,l),
(522,177,l),
(272,177,l),
(272,277,l),
(492,277,l),
(492,444,l),
(272,444,l),
(272,531,l),
(522,531,l)
);
},
{
closed = 1;
nodes = (
(282,827,l),
(447,749,l),
(447,893,l),
(282,968,l),
(116,893,l),
(116,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
17 16 15 14 13 12 6 4 74 0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,708,l),
(50,708,l),
(50,0,l),
(522,0,l),
(522,177,l),
(272,177,l),
(272,277,l),
(492,277,l),
(492,444,l),
(272,444,l),
(272,531,l),
(522,531,l)
);
},
{
closed = 1;
nodes = (
(205,767,o),
(255,816,o),
(255,852,qs),
(255,890,o),
(206,939,o),
(168,939,qs),
(132,939,o),
(83,889,o),
(83,852,qs),
(83,816,o),
(132,767,o),
(168,767,qs)
);
},
{
closed = 1;
nodes = (
(430,767,o),
(480,816,o),
(480,852,qs),
(480,890,o),
(431,939,o),
(393,939,qs),
(357,939,o),
(308,889,o),
(308,852,qs),
(308,816,o),
(357,767,o),
(393,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
8 1 6 12 9 11 3 7 4 6 7 105 0 0 0 1 2 0 1 103 10 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 24 24 12 12 0 0 24 35 24 34 30 28 12 23 12 22 18 16 0 11 0 11 17 17 17 17 17 13 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,708,l),
(50,708,l)
);
},
{
closed = 1;
nodes = (
(290,749,l),
(290,897,l),
(31,1007,l),
(31,843,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
7 6 5 4 4 1 74 2 1 1 1 28 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,708,l),
(50,708,l)
);
},
{
closed = 1;
nodes = (
(290,843,l),
(290,1007,l),
(31,897,l),
(31,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
7 6 5 4 4 1 74 2 1 1 1 28 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,708,l),
(50,708,l)
);
},
{
closed = 1;
nodes = (
(162,827,l),
(327,749,l),
(327,893,l),
(162,968,l),
(-4,893,l),
(-4,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
9 8 7 6 5 4 6 1 74 2 1 1 1 28 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,708,l),
(50,708,l)
);
},
{
closed = 1;
nodes = (
(85,767,o),
(135,816,o),
(135,852,qs),
(135,890,o),
(86,939,o),
(48,939,qs),
(12,939,o),
(-37,889,o),
(-37,852,qs),
(-37,816,o),
(12,767,o),
(48,767,qs)
);
},
{
closed = 1;
nodes = (
(310,767,o),
(360,816,o),
(360,852,qs),
(360,890,o),
(311,939,o),
(273,939,qs),
(237,939,o),
(188,889,o),
(188,852,qs),
(188,816,o),
(237,767,o),
(273,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
4 1 2 8 5 7 3 3 1 2 3 105 6 1 1 1 28 77 0 0 0 29 0 78 16 16 4 4 0 0 16 27 16 26 22 20 4 15 4 14 10 8 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Eth;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,444,l),
(0,444,l),
(0,268,l),
(50,268,l),
(50,0,l),
(345,0,ls),
(456,0,o),
(623,93,o),
(713,255,o),
(713,356,qs),
(713,458,o),
(623,618,o),
(456,708,o),
(345,708,qs),
(50,708,l)
);
},
{
closed = 1;
nodes = (
(272,268,l),
(402,268,l),
(402,444,l),
(272,444,l),
(272,514,l),
(325,514,ls),
(400,514,o),
(488,432,o),
(488,356,qs),
(488,280,o),
(400,198,o),
(325,198,qs),
(272,198,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
6 1 3 7 1 2 4 3 2 103 0 5 5 0 95 8 1 0 0 28 77 9 1 4 4 1 95 0 1 1 29 1 78 16 15 1 0 26 25 24 23 22 20 15 27 16 27 13 12 11 10 9 7 0 14 1 14 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 743;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = Ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(507,708,l),
(507,346,l),
(272,708,l),
(50,708,l),
(50,0,l),
(272,0,l),
(272,356,l),
(507,0,l),
(729,0,l),
(729,708,l)
);
},
{
closed = 1;
nodes = (
(272,796,o),
(308,796,qs),
(320,796,o),
(348,785,o),
(362,778,qs),
(386,765,o),
(428,751,o),
(452,751,qs),
(516,751,o),
(597,833,o),
(613,926,q),
(504,926,l),
(497,879,o),
(460,879,qs),
(448,879,o),
(425,888,o),
(406,898,qs),
(382,911,o),
(340,925,o),
(316,925,qs),
(252,925,o),
(171,842,o),
(155,749,q),
(263,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
7 2 2 0 2 1 76 6 1 4 0 8 7 4 8 105 0 5 10 9 2 7 2 5 7 106 3 1 2 2 28 77 1 1 0 0 29 0 78 10 10 10 33 10 33 36 34 17 36 35 18 17 18 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 779;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Ograve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(758,461,o),
(661,627,o),
(495,720,o),
(395,720,qs),
(295,720,o),
(128,627,o),
(30,461,o),
(30,357,qs),
(30,253,o),
(128,87,o),
(295,-7,o),
(395,-7,qs),
(494,-7,o),
(661,87,o),
(758,253,o),
(758,357,qs)
);
},
{
closed = 1;
nodes = (
(256,430,o),
(328,515,o),
(395,515,qs),
(461,515,o),
(533,430,o),
(533,357,qs),
(533,285,o),
(461,200,o),
(395,200,qs),
(328,200,o),
(256,285,o),
(256,357,qs)
);
},
{
closed = 1;
nodes = (
(264,843,l),
(523,749,l),
(523,897,l),
(264,1007,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
31 30 29 28 4 1 74 0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Oacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(758,461,o),
(661,627,o),
(495,720,o),
(395,720,qs),
(295,720,o),
(128,627,o),
(30,461,o),
(30,357,qs),
(30,253,o),
(128,87,o),
(295,-7,o),
(395,-7,qs),
(494,-7,o),
(661,87,o),
(758,253,o),
(758,357,qs)
);
},
{
closed = 1;
nodes = (
(256,430,o),
(328,515,o),
(395,515,qs),
(461,515,o),
(533,430,o),
(533,357,qs),
(533,285,o),
(461,200,o),
(395,200,qs),
(328,200,o),
(256,285,o),
(256,357,qs)
);
},
{
closed = 1;
nodes = (
(264,897,l),
(264,749,l),
(523,843,l),
(523,1007,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
31 30 29 28 4 1 74 0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(758,461,o),
(661,627,o),
(495,720,o),
(395,720,qs),
(295,720,o),
(128,627,o),
(30,461,o),
(30,357,qs),
(30,253,o),
(128,87,o),
(295,-7,o),
(395,-7,qs),
(494,-7,o),
(661,87,o),
(758,253,o),
(758,357,qs)
);
},
{
closed = 1;
nodes = (
(256,430,o),
(328,515,o),
(395,515,qs),
(461,515,o),
(533,430,o),
(533,357,qs),
(533,285,o),
(461,200,o),
(395,200,qs),
(328,200,o),
(256,285,o),
(256,357,qs)
);
},
{
closed = 1;
nodes = (
(560,893,l),
(395,968,l),
(229,893,l),
(229,749,l),
(395,827,l),
(560,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
33 32 31 30 29 5 1 74 0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Otilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(758,461,o),
(661,627,o),
(495,720,o),
(395,720,qs),
(295,720,o),
(128,627,o),
(30,461,o),
(30,357,qs),
(30,253,o),
(128,87,o),
(295,-7,o),
(395,-7,qs),
(494,-7,o),
(661,87,o),
(758,253,o),
(758,357,qs)
);
},
{
closed = 1;
nodes = (
(256,430,o),
(328,515,o),
(395,515,qs),
(461,515,o),
(533,430,o),
(533,357,qs),
(533,285,o),
(461,200,o),
(395,200,qs),
(328,200,o),
(256,285,o),
(256,357,qs)
);
},
{
closed = 1;
nodes = (
(278,796,o),
(314,796,qs),
(326,796,o),
(354,785,o),
(368,778,qs),
(392,765,o),
(434,751,o),
(458,751,qs),
(522,751,o),
(603,833,o),
(619,926,q),
(510,926,l),
(503,879,o),
(466,879,qs),
(454,879,o),
(431,888,o),
(412,898,qs),
(388,911,o),
(346,925,o),
(322,925,qs),
(258,925,o),
(177,842,o),
(161,749,q),
(269,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
6 1 4 0 8 7 4 8 105 0 5 10 9 2 7 1 5 7 106 0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 28 28 28 51 28 51 36 34 17 36 37 36 37 38 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = Odieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(758,461,o),
(661,627,o),
(495,720,o),
(395,720,qs),
(295,720,o),
(128,627,o),
(30,461,o),
(30,357,qs),
(30,253,o),
(128,87,o),
(295,-7,o),
(395,-7,qs),
(494,-7,o),
(661,87,o),
(758,253,o),
(758,357,qs)
);
},
{
closed = 1;
nodes = (
(256,430,o),
(328,515,o),
(395,515,qs),
(461,515,o),
(533,430,o),
(533,357,qs),
(533,285,o),
(461,200,o),
(395,200,qs),
(328,200,o),
(256,285,o),
(256,357,qs)
);
},
{
closed = 1;
nodes = (
(318,767,o),
(368,816,o),
(368,852,qs),
(368,890,o),
(319,939,o),
(281,939,qs),
(245,939,o),
(196,889,o),
(196,852,qs),
(196,816,o),
(245,767,o),
(281,767,qs)
);
},
{
closed = 1;
nodes = (
(543,767,o),
(593,816,o),
(593,852,qs),
(593,890,o),
(544,939,o),
(506,939,qs),
(470,939,o),
(421,889,o),
(421,852,qs),
(421,816,o),
(470,767,o),
(506,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
6 1 4 9 7 8 3 5 1 4 5 105 0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 40 40 28 28 40 51 40 50 46 44 28 39 28 38 39 36 37 38 34 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,79,l),
(287,204,l),
(414,78,l),
(561,223,l),
(432,351,l),
(550,470,l),
(406,612,l),
(289,494,l),
(171,612,l),
(24,467,l),
(144,347,l),
(20,221,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
8 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = Oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(757,428,o),
(711,552,o),
(669,600,q),
(769,712,l),
(654,712,l),
(605,657,l),
(511,720,o),
(394,720,qs),
(294,720,o),
(127,627,o),
(29,461,o),
(29,357,qs),
(29,286,o),
(76,161,o),
(119,113,q),
(18,1,l),
(134,1,l),
(184,56,l),
(229,26,o),
(336,-7,o),
(394,-7,qs),
(493,-7,o),
(660,87,o),
(757,253,o),
(757,357,qs)
);
},
{
closed = 1;
nodes = (
(255,430,o),
(327,515,o),
(394,515,qs),
(433,515,o),
(463,499,q),
(268,281,l),
(255,313,o),
(255,357,qs)
);
},
{
closed = 1;
nodes = (
(355,200,o),
(325,215,q),
(519,432,l),
(532,402,o),
(532,357,qs),
(532,285,o),
(460,200,o),
(394,200,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
21 18 2 4 2 38 37 27 26 4 5 4 9 6 2 0 5 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
21 18 2 4 3 38 37 27 26 4 5 4 9 6 2 1 5 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 4 2 97 3 1 2 2 34 77 6 1 5 5 0 97 1 1 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 3 28 77 0 4 4 2 97 0 2 2 34 77 0 1 1 29 77 6 1 5 5 0 97 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
33 33 33 40 33 39 40 18 39 19 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,309,ls),
(46,207,o),
(124,65,o),
(263,-7,o),
(353,-7,qs),
(443,-7,o),
(589,65,o),
(673,208,o),
(673,309,qs),
(673,708,l),
(452,708,l),
(452,309,ls),
(452,260,o),
(406,203,o),
(358,203,qs),
(310,203,o),
(267,260,o),
(267,309,qs),
(267,708,l),
(46,708,l)
);
},
{
closed = 1;
nodes = (
(229,843,l),
(488,749,l),
(488,897,l),
(229,1007,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
23 22 21 20 4 1 74 4 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 0 0 0 19 0 19 36 19 35 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,309,ls),
(46,207,o),
(124,65,o),
(263,-7,o),
(353,-7,qs),
(443,-7,o),
(589,65,o),
(673,208,o),
(673,309,qs),
(673,708,l),
(452,708,l),
(452,309,ls),
(452,260,o),
(406,203,o),
(358,203,qs),
(310,203,o),
(267,260,o),
(267,309,qs),
(267,708,l),
(46,708,l)
);
},
{
closed = 1;
nodes = (
(229,897,l),
(229,749,l),
(488,843,l),
(488,1007,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
23 22 21 20 4 1 74 4 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 0 0 0 19 0 19 36 19 35 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,309,ls),
(46,207,o),
(124,65,o),
(263,-7,o),
(353,-7,qs),
(443,-7,o),
(589,65,o),
(673,208,o),
(673,309,qs),
(673,708,l),
(452,708,l),
(452,309,ls),
(452,260,o),
(406,203,o),
(358,203,qs),
(310,203,o),
(267,260,o),
(267,309,qs),
(267,708,l),
(46,708,l)
);
},
{
closed = 1;
nodes = (
(525,893,l),
(360,968,l),
(194,893,l),
(194,749,l),
(360,827,l),
(525,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
25 24 23 22 21 5 1 74 4 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 0 0 0 19 0 19 36 19 35 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,309,ls),
(46,207,o),
(124,65,o),
(263,-7,o),
(353,-7,qs),
(443,-7,o),
(589,65,o),
(673,208,o),
(673,309,qs),
(673,708,l),
(452,708,l),
(452,309,ls),
(452,260,o),
(406,203,o),
(358,203,qs),
(310,203,o),
(267,260,o),
(267,309,qs),
(267,708,l),
(46,708,l)
);
},
{
closed = 1;
nodes = (
(283,767,o),
(333,816,o),
(333,852,qs),
(333,890,o),
(284,939,o),
(246,939,qs),
(210,939,o),
(161,889,o),
(161,852,qs),
(161,816,o),
(210,767,o),
(246,767,qs)
);
},
{
closed = 1;
nodes = (
(508,767,o),
(558,816,o),
(558,852,qs),
(558,890,o),
(509,939,o),
(471,939,qs),
(435,939,o),
(386,889,o),
(386,852,qs),
(386,816,o),
(435,767,o),
(471,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
6 1 4 10 7 9 3 5 1 4 5 105 8 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 32 32 20 20 0 0 32 43 32 42 38 36 20 31 20 30 26 24 0 19 0 19 36 19 35 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Yacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,215,l),
(254,0,l),
(476,0,l),
(476,215,l),
(730,708,l),
(480,708,l),
(367,457,l),
(254,708,l),
(0,708,l)
);
},
{
closed = 1;
nodes = (
(494,843,l),
(494,1007,l),
(235,897,l),
(235,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
7 4 1 3 1 0 1 76 12 11 10 9 4 0 74 3 2 2 0 0 28 77 0 1 1 29 1 78 0 0 0 8 0 8 18 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,420,l),
(335,420,ls),
(404,420,o),
(404,355,qs),
(404,290,o),
(335,290,qs),
(272,290,l)
);
},
{
closed = 1;
nodes = (
(629,461,o),
(490,588,o),
(360,588,qs),
(270,588,l),
(270,708,l),
(50,708,l),
(50,0,l),
(272,0,l),
(272,125,l),
(360,125,ls),
(446,125,o),
(567,186,o),
(629,291,o),
(629,355,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 0 0 2 3 0 2 103 0 4 4 28 77 0 1 1 5 95 0 5 5 31 77 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 5 0 1 0 5 1 105 6 1 0 0 2 3 0 2 103 0 4 4 28 77 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 0 0 2 3 0 2 103 0 4 4 28 77 0 1 1 5 95 0 5 5 31 77 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 5 0 1 0 5 1 105 6 1 0 0 2 3 0 2 103 0 4 4 28 77 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 18 16 15 14 13 12 11 9 5 3 0 6 1 6 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 649;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(264,0,l),
(264,499,ls),
(264,536,o),
(309,580,o),
(346,580,qs),
(377,580,o),
(415,553,o),
(415,531,qs),
(415,517,o),
(396,485,o),
(377,463,qs),
(352,430,o),
(326,384,o),
(326,358,qs),
(326,316,o),
(398,257,o),
(488,223,qs),
(535,205,o),
(564,183,o),
(564,169,qs),
(564,157,o),
(548,143,o),
(534,143,qs),
(516,143,o),
(486,168,o),
(480,188,q),
(286,188,l),
(304,91,o),
(433,-10,o),
(540,-10,qs),
(608,-10,o),
(712,37,o),
(771,123,o),
(771,179,qs),
(771,239,o),
(705,314,o),
(626,346,qs),
(574,367,o),
(546,387,o),
(546,398,qs),
(546,405,o),
(562,428,o),
(572,440,qs),
(600,473,o),
(634,532,o),
(634,572,qs),
(634,626,o),
(562,713,o),
(437,763,o),
(360,763,qs),
(270,763,o),
(127,702,o),
(44,587,o),
(44,509,qs),
(44,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 3 2 1 2 3 114 0 0 0 4 2 0 4 105 0 2 2 1 97 5 1 1 1 35 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 2 5 2 3 114 0 0 0 4 2 0 4 105 0 5 5 29 77 0 2 2 1 97 0 1 1 35 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 2 5 2 3 5 128 0 0 0 4 2 0 4 105 0 5 5 29 77 0 2 2 1 97 0 1 1 35 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
54 53 50 48 32 30 28 27 25 23 35 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 815;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = agrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,0,l),
(630,0,l),
(630,564,l),
(409,564,l),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
},
{
closed = 1;
nodes = (
(216,696,l),
(475,602,l),
(475,750,l),
(216,860,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
6 1 4 0 11 1 2 5 2 76 34 33 32 31 4 0 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
6 1 4 1 11 1 2 5 2 76 34 33 32 31 4 0 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 37 35 17 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = aacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,0,l),
(630,0,l),
(630,564,l),
(409,564,l),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
},
{
closed = 1;
nodes = (
(216,750,l),
(216,602,l),
(475,696,l),
(475,860,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
6 1 4 0 11 1 2 5 2 76 34 33 32 31 4 0 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
6 1 4 1 11 1 2 5 2 76 34 33 32 31 4 0 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 37 35 17 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,0,l),
(630,0,l),
(630,564,l),
(409,564,l),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
},
{
closed = 1;
nodes = (
(512,746,l),
(347,821,l),
(181,746,l),
(181,602,l),
(347,680,l),
(512,602,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
6 1 4 0 11 1 2 5 2 76 36 35 34 33 32 5 0 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
6 1 4 1 11 1 2 5 2 76 36 35 34 33 32 5 0 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 37 35 17 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = atilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,0,l),
(630,0,l),
(630,564,l),
(409,564,l),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
},
{
closed = 1;
nodes = (
(230,649,o),
(266,649,qs),
(278,649,o),
(306,638,o),
(320,631,qs),
(344,618,o),
(386,604,o),
(410,604,qs),
(474,604,o),
(555,686,o),
(571,779,q),
(462,779,l),
(455,732,o),
(418,732,qs),
(406,732,o),
(383,741,o),
(364,751,qs),
(340,764,o),
(298,778,o),
(274,778,qs),
(210,778,o),
(129,695,o),
(113,602,q),
(221,602,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 0 11 1 2 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 1 11 1 2 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
8 1 6 0 10 9 6 10 105 12 11 2 9 9 7 97 0 7 7 34 77 0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
8 1 6 0 10 9 6 10 105 12 11 2 9 9 7 97 0 7 7 34 77 0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
8 1 6 0 10 9 6 10 105 0 7 12 11 2 9 0 7 9 106 0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
31 31 31 54 31 54 53 51 47 45 17 36 37 36 37 35 17 19 34 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = adieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,0,l),
(630,0,l),
(630,564,l),
(409,564,l),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
},
{
closed = 1;
nodes = (
(270,620,o),
(320,669,o),
(320,705,qs),
(320,743,o),
(271,792,o),
(233,792,qs),
(197,792,o),
(148,742,o),
(148,705,qs),
(148,669,o),
(197,620,o),
(233,620,qs)
);
},
{
closed = 1;
nodes = (
(495,620,o),
(545,669,o),
(545,705,qs),
(545,743,o),
(496,792,o),
(458,792,qs),
(422,792,o),
(373,742,o),
(373,705,qs),
(373,669,o),
(422,620,o),
(458,620,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 0 11 1 2 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 1 11 1 2 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
8 1 6 11 9 10 3 7 0 6 7 105 0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
8 1 6 11 9 10 3 7 0 6 7 105 0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
43 43 31 31 43 54 43 53 49 47 31 42 31 41 39 36 37 35 17 19 34 12 8 29 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = aring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,0,l),
(630,0,l),
(630,564,l),
(409,564,l),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
},
{
closed = 1;
nodes = (
(291,857,o),
(215,785,o),
(215,725,qs),
(215,665,o),
(291,593,o),
(347,593,qs),
(403,593,o),
(479,665,o),
(479,725,qs),
(479,785,o),
(403,857,o),
(347,857,qs)
);
},
{
closed = 1;
nodes = (
(327,678,o),
(301,704,o),
(301,725,qs),
(301,746,o),
(327,772,o),
(347,772,qs),
(367,772,o),
(393,746,o),
(393,725,qs),
(393,704,o),
(367,678,o),
(347,678,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 0 11 1 2 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 1 11 1 2 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
10 1 7 0 8 9 7 8 105 11 1 9 0 6 0 9 6 105 0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
10 1 7 0 8 9 7 8 105 11 1 9 0 6 0 9 6 105 0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
43 43 31 31 43 54 43 53 49 47 31 42 31 41 39 36 37 35 17 19 34 12 8 29 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = aring;
unicode = 229;
},
{
glyphname = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(761,397,o),
(809,365,o),
(809,334,q),
(639,334,l),
(652,397,o),
(724,397,qs)
);
},
{
closed = 1;
nodes = (
(771,167,o),
(717,167,qs),
(684,167,o),
(643,201,o),
(638,243,q),
(1029,243,l),
(1034,266,o),
(1034,287,qs),
(1034,374,o),
(973,502,o),
(866,571,o),
(796,571,qs),
(736,571,o),
(650,527,o),
(630,487,q),
(630,564,l),
(409,564,l),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs),
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,0,l),
(630,0,l),
(630,77,l),
(651,37,o),
(736,-7,o),
(796,-7,qs),
(882,-7,o),
(1004,111,o),
(1022,203,q),
(787,203,l)
);
},
{
closed = 1;
nodes = (
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs),
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
32 29 2 1 5 15 12 2 2 9 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
32 29 2 1 6 15 12 2 3 9 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 0 0 8 10 0 8 103 12 13 2 1 1 5 97 7 6 2 5 5 37 77 14 1 10 10 2 97 4 3 2 2 2 35 77 11 1 9 9 2 97 4 3 2 2 2 35 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 9 10 2 10 9 114 0 0 0 8 10 0 8 103 13 1 1 1 5 97 7 6 2 5 5 37 77 0 12 12 5 97 7 6 2 5 5 37 77 11 14 2 10 10 2 97 4 3 2 2 2 35 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
0 9 11 2 10 9 114 0 0 0 8 10 0 8 103 13 1 1 1 5 97 7 6 2 5 5 37 77 0 12 12 5 97 7 6 2 5 5 37 77 14 1 10 10 2 97 4 3 2 2 2 35 77 0 11 11 2 97 4 3 2 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
0 9 11 3 11 9 3 128 0 0 0 8 10 0 8 103 0 6 6 31 77 13 1 1 1 5 97 7 1 5 5 37 77 0 12 12 5 97 7 1 5 5 37 77 14 1 10 10 2 97 4 1 2 2 35 77 0 3 3 29 77 0 11 11 2 97 4 1 2 2 35 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
6 6 0 0 57 55 51 49 6 47 6 47 46 44 42 41 36 34 31 30 27 25 19 17 14 13 10 8 0 5 0 4 17 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 1054;
}
);
note = ae;
unicode = 230;
},
{
glyphname = ccedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,166,o),
(142,16,o),
(245,-2,q),
(245,-134,l),
(330,-134,ls),
(356,-134,o),
(356,-149,qs),
(356,-156,o),
(342,-165,o),
(330,-165,qs),
(180,-165,l),
(180,-278,l),
(353,-278,ls),
(413,-278,o),
(503,-221,o),
(503,-156,qs),
(503,-112,o),
(461,-57,o),
(401,-34,o),
(373,-34,q),
(373,-1,l),
(458,16,o),
(572,134,o),
(589,227,q),
(354,227,l),
(341,183,o),
(303,183,qs),
(276,183,o),
(245,233,o),
(245,282,qs),
(245,331,o),
(276,381,o),
(303,381,qs),
(341,381,o),
(354,337,q),
(589,337,l),
(569,447,o),
(418,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
39 21 2 5 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 1 2 4 2 1 114 0 4 3 2 4 3 126 0 5 3 8 7 5 114 0 3 0 8 7 3 8 103 0 2 2 0 97 0 0 0 37 77 0 7 7 6 96 0 6 6 33 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 114 0 4 3 2 4 3 126 0 5 3 8 3 5 8 128 0 3 0 8 7 3 8 103 0 2 2 0 97 0 0 0 37 77 0 7 7 6 96 0 6 6 33 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 5 3 8 3 5 8 128 0 3 0 8 7 3 8 103 0 2 2 0 97 0 0 0 37 77 0 7 7 6 96 0 6 6 33 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
35 33 37 20 17 36 33 18 34 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = egrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,397,o),
(371,368,o),
(371,340,q),
(239,340,l),
(249,397,o),
(308,397,qs)
);
},
{
closed = 1;
nodes = (
(333,170,o),
(297,170,qs),
(241,170,o),
(237,243,q),
(593,243,l),
(596,264,o),
(596,287,qs),
(596,374,o),
(523,502,o),
(392,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(93,63,o),
(224,-7,o),
(308,-7,qs),
(378,-7,o),
(495,48,o),
(572,143,o),
(584,203,q),
(349,203,l)
);
},
{
closed = 1;
nodes = (
(177,703,l),
(436,609,l),
(436,757,l),
(177,867,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
33 32 31 30 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
8 1 6 4 5 5 6 114 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
6 6 0 0 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = eacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,397,o),
(371,368,o),
(371,340,q),
(239,340,l),
(249,397,o),
(308,397,qs)
);
},
{
closed = 1;
nodes = (
(333,170,o),
(297,170,qs),
(241,170,o),
(237,243,q),
(593,243,l),
(596,264,o),
(596,287,qs),
(596,374,o),
(523,502,o),
(392,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(93,63,o),
(224,-7,o),
(308,-7,qs),
(378,-7,o),
(495,48,o),
(572,143,o),
(584,203,q),
(349,203,l)
);
},
{
closed = 1;
nodes = (
(177,757,l),
(177,609,l),
(436,703,l),
(436,867,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
33 32 31 30 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
8 1 6 4 5 5 6 114 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
6 6 0 0 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ecircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,397,o),
(371,368,o),
(371,340,q),
(239,340,l),
(249,397,o),
(308,397,qs)
);
},
{
closed = 1;
nodes = (
(333,170,o),
(297,170,qs),
(241,170,o),
(237,243,q),
(593,243,l),
(596,264,o),
(596,287,qs),
(596,374,o),
(523,502,o),
(392,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(93,63,o),
(224,-7,o),
(308,-7,qs),
(378,-7,o),
(495,48,o),
(572,143,o),
(584,203,q),
(349,203,l)
);
},
{
closed = 1;
nodes = (
(473,753,l),
(308,828,l),
(142,753,l),
(142,609,l),
(308,687,l),
(473,609,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
35 34 33 32 31 5 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
8 1 6 4 5 5 6 114 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
6 6 0 0 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,397,o),
(371,368,o),
(371,340,q),
(239,340,l),
(249,397,o),
(308,397,qs)
);
},
{
closed = 1;
nodes = (
(333,170,o),
(297,170,qs),
(241,170,o),
(237,243,q),
(593,243,l),
(596,264,o),
(596,287,qs),
(596,374,o),
(523,502,o),
(392,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(93,63,o),
(224,-7,o),
(308,-7,qs),
(378,-7,o),
(495,48,o),
(572,143,o),
(584,203,q),
(349,203,l)
);
},
{
closed = 1;
nodes = (
(231,627,o),
(281,676,o),
(281,712,qs),
(281,750,o),
(232,799,o),
(194,799,qs),
(158,799,o),
(109,749,o),
(109,712,qs),
(109,676,o),
(158,627,o),
(194,627,qs)
);
},
{
closed = 1;
nodes = (
(456,627,o),
(506,676,o),
(506,712,qs),
(506,750,o),
(457,799,o),
(419,799,qs),
(383,799,o),
(334,749,o),
(334,712,qs),
(334,676,o),
(383,627,o),
(419,627,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
12 1 6 4 5 5 6 114 9 1 7 14 10 13 3 8 3 7 8 105 0 0 0 4 6 0 4 103 11 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
12 1 6 4 5 4 6 5 128 9 1 7 14 10 13 3 8 3 7 8 105 0 0 0 4 6 0 4 103 11 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
42 42 30 30 6 6 0 0 42 53 42 52 48 46 30 41 30 40 36 34 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(297,0,l),
(297,564,l),
(75,564,l)
);
},
{
closed = 1;
nodes = (
(315,602,l),
(315,750,l),
(56,860,l),
(56,696,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
7 6 5 4 4 1 74 2 1 1 1 31 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(297,0,l),
(297,564,l),
(75,564,l)
);
},
{
closed = 1;
nodes = (
(315,696,l),
(315,860,l),
(56,750,l),
(56,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
7 6 5 4 4 1 74 2 1 1 1 31 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(297,0,l),
(297,564,l),
(75,564,l)
);
},
{
closed = 1;
nodes = (
(187,680,l),
(352,602,l),
(352,746,l),
(187,821,l),
(21,746,l),
(21,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
9 8 7 6 5 4 6 1 74 2 1 1 1 31 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(297,0,l),
(297,564,l),
(75,564,l)
);
},
{
closed = 1;
nodes = (
(110,620,o),
(160,669,o),
(160,705,qs),
(160,743,o),
(111,792,o),
(73,792,qs),
(37,792,o),
(-12,742,o),
(-12,705,qs),
(-12,669,o),
(37,620,o),
(73,620,qs)
);
},
{
closed = 1;
nodes = (
(335,620,o),
(385,669,o),
(385,705,qs),
(385,743,o),
(336,792,o),
(298,792,qs),
(262,792,o),
(213,742,o),
(213,705,qs),
(213,669,o),
(262,620,o),
(298,620,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
4 1 2 8 5 7 3 3 1 2 3 105 6 1 1 1 31 77 0 0 0 29 0 78 16 16 4 4 0 0 16 27 16 26 22 20 4 15 4 14 10 8 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = eth;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,197,o),
(104,65,o),
(245,-6,o),
(328,-6,qs),
(410,-6,o),
(544,69,o),
(623,215,o),
(623,317,qs),
(623,404,o),
(561,581,o),
(508,657,q),
(529,663,l),
(529,735,l),
(462,716,l),
(440,740,l),
(247,740,l),
(276,714,o),
(308,673,q),
(264,660,l),
(264,588,l),
(350,612,l),
(370,581,o),
(380,560,q),
(334,568,o),
(301,568,qs),
(222,568,o),
(94,499,o),
(20,371,o),
(20,284,qs)
);
},
{
closed = 1;
nodes = (
(246,331,o),
(293,377,o),
(324,377,qs),
(352,377,o),
(397,331,o),
(397,282,qs),
(397,232,o),
(357,186,o),
(328,186,qs),
(298,186,o),
(246,233,o),
(246,282,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
17 16 15 14 10 9 8 7 8 0 1 5 1 4 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 1 133 0 4 4 0 97 0 0 0 31 77 0 3 3 2 97 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 1 133 0 4 4 0 97 0 0 0 37 77 0 3 3 2 97 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 37 42 24 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = eth;
unicode = 240;
},
{
glyphname = ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,299,ls),
(272,339,o),
(314,386,o),
(351,386,qs),
(387,386,o),
(430,339,o),
(430,299,qs),
(430,0,l),
(651,0,l),
(651,327,ls),
(651,438,o),
(542,568,o),
(445,568,qs),
(385,568,o),
(298,518,o),
(272,478,q),
(272,564,l),
(50,564,l),
(50,0,l),
(272,0,l)
);
},
{
closed = 1;
nodes = (
(267,649,o),
(303,649,qs),
(315,649,o),
(343,638,o),
(357,631,qs),
(381,618,o),
(423,604,o),
(447,604,qs),
(511,604,o),
(592,686,o),
(608,779,q),
(499,779,l),
(492,732,o),
(455,732,qs),
(443,732,o),
(420,741,o),
(401,751,qs),
(377,764,o),
(335,778,o),
(311,778,qs),
(247,778,o),
(166,695,o),
(150,602,q),
(258,602,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 3 0 2 0 3 2 128 7 1 5 0 9 8 5 9 105 12 10 2 8 8 6 97 0 6 6 34 77 1 1 0 0 31 77 11 4 2 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 2 0 3 2 128 7 1 5 0 9 8 5 9 105 0 6 12 10 2 8 0 6 8 106 1 1 0 0 31 77 11 4 2 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
20 20 0 0 20 43 20 43 42 40 36 34 32 31 30 28 24 22 0 19 0 19 35 19 35 17 13 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = ograve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(616,370,o),
(539,501,o),
(403,571,o),
(318,571,qs),
(233,571,o),
(97,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(97,63,o),
(233,-7,o),
(318,-7,qs),
(403,-7,o),
(539,63,o),
(616,194,o),
(616,282,qs)
);
},
{
closed = 1;
nodes = (
(245,330,o),
(287,379,o),
(318,379,qs),
(349,379,o),
(391,330,o),
(391,282,qs),
(391,234,o),
(349,185,o),
(318,185,qs),
(286,185,o),
(245,234,o),
(245,282,qs)
);
},
{
closed = 1;
nodes = (
(212,696,l),
(471,602,l),
(471,750,l),
(212,860,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
31 30 29 28 4 1 74 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = oacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(616,370,o),
(539,501,o),
(403,571,o),
(318,571,qs),
(233,571,o),
(97,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(97,63,o),
(233,-7,o),
(318,-7,qs),
(403,-7,o),
(539,63,o),
(616,194,o),
(616,282,qs)
);
},
{
closed = 1;
nodes = (
(245,330,o),
(287,379,o),
(318,379,qs),
(349,379,o),
(391,330,o),
(391,282,qs),
(391,234,o),
(349,185,o),
(318,185,qs),
(286,185,o),
(245,234,o),
(245,282,qs)
);
},
{
closed = 1;
nodes = (
(212,750,l),
(212,602,l),
(471,696,l),
(471,860,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
31 30 29 28 4 1 74 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(616,370,o),
(539,501,o),
(403,571,o),
(318,571,qs),
(233,571,o),
(97,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(97,63,o),
(233,-7,o),
(318,-7,qs),
(403,-7,o),
(539,63,o),
(616,194,o),
(616,282,qs)
);
},
{
closed = 1;
nodes = (
(245,330,o),
(287,379,o),
(318,379,qs),
(349,379,o),
(391,330,o),
(391,282,qs),
(391,234,o),
(349,185,o),
(318,185,qs),
(286,185,o),
(245,234,o),
(245,282,qs)
);
},
{
closed = 1;
nodes = (
(508,746,l),
(343,821,l),
(177,746,l),
(177,602,l),
(343,680,l),
(508,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
33 32 31 30 29 5 1 74 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = otilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(616,370,o),
(539,501,o),
(403,571,o),
(318,571,qs),
(233,571,o),
(97,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(97,63,o),
(233,-7,o),
(318,-7,qs),
(403,-7,o),
(539,63,o),
(616,194,o),
(616,282,qs)
);
},
{
closed = 1;
nodes = (
(245,330,o),
(287,379,o),
(318,379,qs),
(349,379,o),
(391,330,o),
(391,282,qs),
(391,234,o),
(349,185,o),
(318,185,qs),
(286,185,o),
(245,234,o),
(245,282,qs)
);
},
{
closed = 1;
nodes = (
(226,649,o),
(262,649,qs),
(274,649,o),
(302,638,o),
(316,631,qs),
(340,618,o),
(382,604,o),
(406,604,qs),
(470,604,o),
(551,686,o),
(567,779,q),
(458,779,l),
(451,732,o),
(414,732,qs),
(402,732,o),
(379,741,o),
(360,751,qs),
(336,764,o),
(294,778,o),
(270,778,qs),
(206,778,o),
(125,695,o),
(109,602,q),
(217,602,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
6 1 4 0 8 7 4 8 105 10 9 2 7 7 5 97 0 5 5 34 77 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
6 1 4 0 8 7 4 8 105 0 5 10 9 2 7 1 5 7 106 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
28 28 28 51 28 51 36 34 17 36 37 36 37 38 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = odieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(616,370,o),
(539,501,o),
(403,571,o),
(318,571,qs),
(233,571,o),
(97,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(97,63,o),
(233,-7,o),
(318,-7,qs),
(403,-7,o),
(539,63,o),
(616,194,o),
(616,282,qs)
);
},
{
closed = 1;
nodes = (
(245,330,o),
(287,379,o),
(318,379,qs),
(349,379,o),
(391,330,o),
(391,282,qs),
(391,234,o),
(349,185,o),
(318,185,qs),
(286,185,o),
(245,234,o),
(245,282,qs)
);
},
{
closed = 1;
nodes = (
(266,620,o),
(316,669,o),
(316,705,qs),
(316,743,o),
(267,792,o),
(229,792,qs),
(193,792,o),
(144,742,o),
(144,705,qs),
(144,669,o),
(193,620,o),
(229,620,qs)
);
},
{
closed = 1;
nodes = (
(491,620,o),
(541,669,o),
(541,705,qs),
(541,743,o),
(492,792,o),
(454,792,qs),
(418,792,o),
(369,742,o),
(369,705,qs),
(369,669,o),
(418,620,o),
(454,620,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
6 1 4 9 7 8 3 5 1 4 5 105 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 40 40 28 28 40 51 40 50 46 44 28 39 28 38 39 36 37 38 34 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,240,l),
(531,240,l),
(531,441,l),
(20,441,l)
);
},
{
closed = 1;
nodes = (
(407,149,o),
(337,212,o),
(280,212,qs),
(222,212,o),
(152,149,o),
(152,101,qs),
(152,54,o),
(222,-8,o),
(280,-8,qs),
(337,-8,o),
(407,54,o),
(407,101,qs)
);
},
{
closed = 1;
nodes = (
(407,624,o),
(337,687,o),
(280,687,qs),
(222,687,o),
(152,624,o),
(152,576,qs),
(152,529,o),
(222,467,o),
(280,467,qs),
(337,467,o),
(407,529,o),
(407,576,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 1 0 0 3 1 0 103 0 4 4 5 97 0 5 5 28 77 0 3 3 2 97 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 5 0 4 1 5 4 105 6 1 1 0 0 3 1 0 103 0 3 3 2 97 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 25 23 19 17 13 11 7 5 0 3 0 3 17 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = divide;
unicode = 247;
},
{
glyphname = oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(608,399,o),
(540,476,q),
(621,564,l),
(518,564,l),
(482,525,l),
(408,571,o),
(310,571,qs),
(225,571,o),
(89,501,o),
(12,370,o),
(12,282,qs),
(12,164,o),
(80,87,q),
(0,0,l),
(103,0,l),
(138,39,l),
(212,-7,o),
(310,-7,qs),
(395,-7,o),
(531,63,o),
(608,194,o),
(608,282,qs)
);
},
{
closed = 1;
nodes = (
(237,330,o),
(279,379,o),
(310,379,qs),
(328,379,o),
(341,372,q),
(238,260,l),
(237,266,o),
(237,282,qs)
);
},
{
closed = 1;
nodes = (
(293,185,o),
(279,192,q),
(382,303,l),
(383,297,o),
(383,282,qs),
(383,234,o),
(341,185,o),
(310,185,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
19 16 2 4 2 35 24 2 5 4 8 5 2 0 5 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
19 16 2 4 3 35 24 2 5 4 8 5 2 1 5 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 4 2 97 3 1 2 2 37 77 6 1 5 5 0 97 1 1 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 3 31 77 0 4 4 2 97 0 2 2 37 77 0 1 1 29 77 6 1 5 5 0 97 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
30 30 30 37 30 36 39 18 38 18 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 621;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(647,564,l),
(425,564,l),
(425,265,ls),
(425,225,o),
(383,178,o),
(346,178,qs),
(310,178,o),
(267,225,o),
(267,265,qs),
(267,564,l),
(46,564,l),
(46,237,ls),
(46,126,o),
(155,-4,o),
(252,-4,qs),
(312,-4,o),
(399,46,o),
(425,86,q),
(425,0,l),
(647,0,l)
);
},
{
closed = 1;
nodes = (
(218,696,l),
(477,602,l),
(477,750,l),
(218,860,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
1 1 0 2 1 76 23 22 21 20 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 1 0 1 2 0 128 3 1 1 1 31 77 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 2 1 0 1 2 0 128 3 1 1 1 31 77 5 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 19 0 19 19 35 19 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(647,564,l),
(425,564,l),
(425,265,ls),
(425,225,o),
(383,178,o),
(346,178,qs),
(310,178,o),
(267,225,o),
(267,265,qs),
(267,564,l),
(46,564,l),
(46,237,ls),
(46,126,o),
(155,-4,o),
(252,-4,qs),
(312,-4,o),
(399,46,o),
(425,86,q),
(425,0,l),
(647,0,l)
);
},
{
closed = 1;
nodes = (
(218,750,l),
(218,602,l),
(477,696,l),
(477,860,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
1 1 0 2 1 76 23 22 21 20 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 1 0 1 2 0 128 3 1 1 1 31 77 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 2 1 0 1 2 0 128 3 1 1 1 31 77 5 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 19 0 19 19 35 19 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(647,564,l),
(425,564,l),
(425,265,ls),
(425,225,o),
(383,178,o),
(346,178,qs),
(310,178,o),
(267,225,o),
(267,265,qs),
(267,564,l),
(46,564,l),
(46,237,ls),
(46,126,o),
(155,-4,o),
(252,-4,qs),
(312,-4,o),
(399,46,o),
(425,86,q),
(425,0,l),
(647,0,l)
);
},
{
closed = 1;
nodes = (
(514,746,l),
(349,821,l),
(183,746,l),
(183,602,l),
(349,680,l),
(514,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 1 0 2 1 76 25 24 23 22 21 5 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 1 0 1 2 0 128 3 1 1 1 31 77 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 2 1 0 1 2 0 128 3 1 1 1 31 77 5 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 19 0 19 19 35 19 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(647,564,l),
(425,564,l),
(425,265,ls),
(425,225,o),
(383,178,o),
(346,178,qs),
(310,178,o),
(267,225,o),
(267,265,qs),
(267,564,l),
(46,564,l),
(46,237,ls),
(46,126,o),
(155,-4,o),
(252,-4,qs),
(312,-4,o),
(399,46,o),
(425,86,q),
(425,0,l),
(647,0,l)
);
},
{
closed = 1;
nodes = (
(272,620,o),
(322,669,o),
(322,705,qs),
(322,743,o),
(273,792,o),
(235,792,qs),
(199,792,o),
(150,742,o),
(150,705,qs),
(150,669,o),
(199,620,o),
(235,620,qs)
);
},
{
closed = 1;
nodes = (
(497,620,o),
(547,669,o),
(547,705,qs),
(547,743,o),
(498,792,o),
(460,792,qs),
(424,792,o),
(375,742,o),
(375,705,qs),
(375,669,o),
(424,620,o),
(460,620,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 1 0 1 2 0 128 7 1 5 11 8 10 3 6 1 5 6 105 3 1 1 1 31 77 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 1 0 1 2 0 128 7 1 5 11 8 10 3 6 1 5 6 105 3 1 1 1 31 77 9 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
32 32 20 20 0 0 32 43 32 42 38 36 20 31 20 30 26 24 0 19 0 19 19 35 19 35 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = yacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(343,278,l),
(237,564,l),
(-10,564,l),
(225,28,l),
(83,-270,l),
(326,-270,l),
(687,564,l),
(442,564,l)
);
},
{
closed = 1;
nodes = (
(467,696,l),
(467,860,l),
(208,750,l),
(208,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
6 3 2 0 1 1 76 11 10 9 8 4 1 74 3 2 2 1 1 31 77 0 0 0 33 0 78 0 0 0 7 0 7 18 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,740,l),
(50,-270,l),
(272,-270,l),
(272,62,l),
(301,27,o),
(367,-6,o),
(411,-6,qs),
(478,-6,o),
(592,66,o),
(660,195,o),
(660,278,qs),
(660,361,o),
(592,493,o),
(478,568,o),
(411,568,qs),
(365,568,o),
(299,543,o),
(272,514,q),
(272,740,l)
);
},
{
closed = 1;
nodes = (
(435,229,o),
(385,187,o),
(354,187,qs),
(323,187,o),
(272,233,o),
(272,282,qs),
(272,331,o),
(323,376,o),
(354,376,qs),
(384,376,o),
(435,327,o),
(435,278,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 1 4 0 14 1 1 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 0 97 0 0 0 31 77 0 5 5 1 97 0 1 1 35 77 0 3 3 2 95 0 2 2 33 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 0 97 0 0 0 37 77 0 5 5 1 97 0 1 1 35 77 0 3 3 2 95 0 2 2 33 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 34 17 19 38 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = ydieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(343,278,l),
(237,564,l),
(-10,564,l),
(225,28,l),
(83,-270,l),
(326,-270,l),
(687,564,l),
(442,564,l)
);
},
{
closed = 1;
nodes = (
(262,620,o),
(312,669,o),
(312,705,qs),
(312,743,o),
(263,792,o),
(225,792,qs),
(189,792,o),
(140,742,o),
(140,705,qs),
(140,669,o),
(189,620,o),
(225,620,qs)
);
},
{
closed = 1;
nodes = (
(487,620,o),
(537,669,o),
(537,705,qs),
(537,743,o),
(488,792,o),
(450,792,qs),
(414,792,o),
(365,742,o),
(365,705,qs),
(365,669,o),
(414,620,o),
(450,620,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
6 3 2 0 1 1 76 5 1 3 9 6 8 3 4 1 3 4 105 7 2 2 1 1 31 77 0 0 0 33 0 78 20 20 8 8 0 0 20 31 20 30 26 24 8 19 8 18 14 12 0 7 0 7 18 17 10 8 24 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = Amacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(539,0,l),
(773,0,l),
(515,708,l),
(259,708,l),
(0,0,l),
(233,0,l),
(268,107,l),
(504,107,l)
);
},
{
closed = 1;
nodes = (
(603,769,l),
(603,916,l),
(172,916,l),
(172,769,l)
);
},
{
closed = 1;
nodes = (
(386,471,l),
(450,274,l),
(322,274,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
13 1 6 1 1 76 0 4 0 5 1 4 5 103 8 1 6 7 1 3 0 6 3 104 0 1 1 28 77 2 1 0 0 29 0 78 12 12 0 0 12 14 12 14 11 10 9 8 0 7 0 7 17 17 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = amacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,0,l),
(630,0,l),
(630,564,l),
(409,564,l),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
},
{
closed = 1;
nodes = (
(132,622,l),
(563,622,l),
(563,769,l),
(132,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 0 11 1 2 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 1 11 1 2 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
8 1 7 0 6 0 7 6 103 0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
8 1 7 0 6 0 7 6 103 0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
31 31 31 34 31 34 20 36 37 35 17 19 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = Abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(539,0,l),
(773,0,l),
(515,708,l),
(259,708,l),
(0,0,l),
(233,0,l),
(268,107,l),
(504,107,l)
);
},
{
closed = 1;
nodes = (
(472,967,l),
(472,936,o),
(434,905,o),
(387,905,qs),
(340,905,o),
(302,936,o),
(302,967,q),
(199,967,l),
(199,950,ls),
(199,851,o),
(304,747,o),
(387,747,qs),
(470,747,o),
(575,851,o),
(575,950,qs),
(575,967,l)
);
},
{
closed = 1;
nodes = (
(450,274,l),
(322,274,l),
(386,471,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
26 1 8 1 1 76 7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 8 9 1 3 0 8 3 104 0 1 1 28 77 2 1 0 0 29 0 78 0 0 25 24 23 22 20 18 16 15 12 10 0 7 0 7 17 17 17 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,0,l),
(630,0,l),
(630,564,l),
(409,564,l),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
},
{
closed = 1;
nodes = (
(432,820,l),
(432,789,o),
(394,758,o),
(347,758,qs),
(300,758,o),
(262,789,o),
(262,820,q),
(159,820,l),
(159,803,ls),
(159,704,o),
(264,600,o),
(347,600,qs),
(430,600,o),
(535,704,o),
(535,803,qs),
(535,820,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 0 11 1 2 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 1 11 1 2 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
9 1 7 8 7 133 0 8 0 6 0 8 6 105 0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 98 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
9 1 7 8 7 133 0 8 0 6 0 8 6 105 0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 98 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
46 45 34 19 37 36 37 35 17 19 34 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = Aogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(259,708,l),
(0,0,l),
(233,0,l),
(268,107,l),
(504,107,l),
(539,0,l),
(517,-22,o),
(499,-69,o),
(499,-97,qs),
(499,-157,o),
(584,-223,o),
(659,-223,qs),
(720,-223,o),
(773,-207,q),
(773,-91,l),
(725,-107,o),
(691,-107,qs),
(654,-107,o),
(654,-82,qs),
(654,-68,o),
(686,-38,o),
(729,-19,qs),
(773,0,l),
(515,708,l)
);
},
{
closed = 1;
nodes = (
(450,274,l),
(322,274,l),
(386,471,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
26 1 5 4 8 1 0 3 9 1 1 0 3 76 17 1 3 1 75 0 5 0 2 3 5 2 104 0 0 0 1 0 1 101 0 4 4 28 77 0 3 3 29 3 78 17 17 17 22 35 37 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = aogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,2,l),
(380,-23,o),
(356,-73,o),
(356,-103,qs),
(356,-159,o),
(442,-223,o),
(517,-223,qs),
(577,-223,o),
(630,-207,q),
(630,-91,l),
(582,-107,o),
(545,-107,qs),
(529,-107,o),
(511,-95,o),
(511,-86,qs),
(511,-71,o),
(546,-41,o),
(587,-21,qs),
(630,0,l),
(630,564,l),
(409,564,l),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
6 1 5 0 28 27 9 3 4 6 18 1 2 4 19 1 3 2 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
6 1 5 1 28 27 9 3 4 6 18 1 2 4 19 1 3 2 4 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 0 3 2 3 102 0 5 5 0 97 1 1 0 0 37 77 0 6 6 4 97 0 4 4 35 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 0 3 2 3 102 0 1 1 31 77 0 5 5 0 97 0 0 0 37 77 0 6 6 4 97 0 4 4 35 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
36 37 40 35 39 19 34 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = Cacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,250,o),
(115,86,o),
(273,-5,o),
(380,-5,qs),
(472,-5,o),
(617,64,o),
(708,190,o),
(723,274,q),
(489,274,l),
(473,239,o),
(414,200,o),
(376,200,qs),
(320,200,o),
(255,284,o),
(255,355,qs),
(255,426,o),
(320,510,o),
(376,510,qs),
(414,510,o),
(473,471,o),
(489,436,q),
(723,436,l),
(708,520,o),
(617,646,o),
(472,715,o),
(380,715,qs),
(273,715,o),
(115,624,o),
(30,460,o),
(30,355,qs)
);
},
{
closed = 1;
nodes = (
(246,897,l),
(246,749,l),
(505,843,l),
(505,1007,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
33 32 31 30 4 0 74 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 34 77 0 3 3 5 97 0 5 5 35 5 78 35 18 36 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = cacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,194,o),
(93,63,o),
(224,-7,o),
(308,-7,qs),
(418,-7,o),
(569,117,o),
(589,227,q),
(354,227,l),
(341,183,o),
(303,183,qs),
(276,183,o),
(245,233,o),
(245,282,qs),
(245,331,o),
(276,381,o),
(303,381,qs),
(341,381,o),
(354,337,q),
(589,337,l),
(569,447,o),
(418,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(168,750,l),
(168,602,l),
(427,696,l),
(427,860,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
29 28 27 26 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 114 0 4 3 3 4 112 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 17 36 33 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = Cdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,250,o),
(115,86,o),
(273,-5,o),
(380,-5,qs),
(472,-5,o),
(617,64,o),
(708,190,o),
(723,274,q),
(489,274,l),
(473,239,o),
(414,200,o),
(376,200,qs),
(320,200,o),
(255,284,o),
(255,355,qs),
(255,426,o),
(320,510,o),
(376,510,qs),
(414,510,o),
(473,471,o),
(489,436,q),
(723,436,l),
(708,520,o),
(617,646,o),
(472,715,o),
(380,715,qs),
(273,715,o),
(115,624,o),
(30,460,o),
(30,355,qs)
);
},
{
closed = 1;
nodes = (
(412,767,o),
(462,816,o),
(462,852,qs),
(462,890,o),
(413,939,o),
(375,939,qs),
(339,939,o),
(290,889,o),
(290,852,qs),
(290,816,o),
(339,767,o),
(375,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 6 8 1 7 0 6 7 105 0 2 2 0 97 0 0 0 34 77 0 3 3 5 97 0 5 5 35 5 78 30 30 30 41 30 40 40 35 18 36 34 19 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = cdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,194,o),
(93,63,o),
(224,-7,o),
(308,-7,qs),
(418,-7,o),
(569,117,o),
(589,227,q),
(354,227,l),
(341,183,o),
(303,183,qs),
(276,183,o),
(245,233,o),
(245,282,qs),
(245,331,o),
(276,381,o),
(303,381,qs),
(341,381,o),
(354,337,q),
(589,337,l),
(569,447,o),
(418,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(334,620,o),
(384,669,o),
(384,705,qs),
(384,743,o),
(335,792,o),
(297,792,qs),
(261,792,o),
(212,742,o),
(212,705,qs),
(212,669,o),
(261,620,o),
(297,620,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 4 2 1 114 0 4 3 3 4 112 0 6 8 1 7 0 6 7 105 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 6 8 1 7 0 6 7 105 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
26 26 26 37 26 36 40 34 17 36 33 18 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = Ccaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,250,o),
(115,86,o),
(273,-5,o),
(380,-5,qs),
(472,-5,o),
(617,64,o),
(708,190,o),
(723,274,q),
(489,274,l),
(473,239,o),
(414,200,o),
(376,200,qs),
(320,200,o),
(255,284,o),
(255,355,qs),
(255,426,o),
(320,510,o),
(376,510,qs),
(414,510,o),
(473,471,o),
(489,436,q),
(723,436,l),
(708,520,o),
(617,646,o),
(472,715,o),
(380,715,qs),
(273,715,o),
(115,624,o),
(30,460,o),
(30,355,qs)
);
},
{
closed = 1;
nodes = (
(377,880,l),
(211,968,l),
(211,824,l),
(377,749,l),
(542,824,l),
(542,968,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
35 34 33 32 31 30 6 0 74 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 34 77 0 3 3 5 97 0 5 5 35 5 78 35 18 36 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = ccaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,194,o),
(93,63,o),
(224,-7,o),
(308,-7,qs),
(418,-7,o),
(569,117,o),
(589,227,q),
(354,227,l),
(341,183,o),
(303,183,qs),
(276,183,o),
(245,233,o),
(245,282,qs),
(245,331,o),
(276,381,o),
(303,381,qs),
(341,381,o),
(354,337,q),
(589,337,l),
(569,447,o),
(418,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(299,733,l),
(133,821,l),
(133,677,l),
(299,602,l),
(464,677,l),
(464,821,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
31 30 29 28 27 26 6 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 114 0 4 3 3 4 112 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 17 36 33 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = Dcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,0,l),
(345,0,ls),
(456,0,o),
(623,93,o),
(713,255,o),
(713,356,qs),
(713,458,o),
(623,618,o),
(456,708,o),
(345,708,qs),
(50,708,l)
);
},
{
closed = 1;
nodes = (
(272,514,l),
(325,514,ls),
(400,514,o),
(488,432,o),
(488,356,qs),
(488,280,o),
(400,198,o),
(325,198,qs),
(272,198,l)
);
},
{
closed = 1;
nodes = (
(359,880,l),
(193,968,l),
(193,824,l),
(359,749,l),
(524,824,l),
(524,968,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
25 24 23 22 21 20 6 0 74 0 3 3 0 95 4 1 0 0 28 77 5 1 2 2 1 95 0 1 1 29 1 78 12 11 1 0 18 16 11 19 12 19 9 7 0 10 1 10 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 743;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = dcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(690,594,l),
(762,594,l),
(762,582,ls),
(762,508,o),
(707,508,q),
(707,429,l),
(788,429,o),
(872,528,o),
(872,606,qs),
(872,674,o),
(846,740,q),
(690,740,l)
);
},
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(387,38,o),
(408,77,q),
(408,0,l),
(630,0,l),
(630,740,l),
(408,740,l),
(408,487,l),
(387,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
18 1 0 1 23 1 6 9 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
5 10 2 3 0 2 4 3 2 103 0 1 0 0 8 1 0 105 0 8 8 4 97 0 4 4 37 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 2 4 3 2 87 0 1 0 0 8 1 0 105 0 8 8 4 97 0 4 4 37 77 5 10 2 3 3 6 95 0 6 6 29 77 0 9 9 7 97 0 7 7 35 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 40 38 34 32 27 25 22 21 20 19 16 14 0 11 0 11 18 17 20 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 882;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = Dcroat;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,444,l),
(0,444,l),
(0,268,l),
(50,268,l),
(50,0,l),
(345,0,ls),
(456,0,o),
(623,93,o),
(713,255,o),
(713,356,qs),
(713,458,o),
(623,618,o),
(456,708,o),
(345,708,qs),
(50,708,l)
);
},
{
closed = 1;
nodes = (
(272,268,l),
(402,268,l),
(402,444,l),
(272,444,l),
(272,514,l),
(325,514,ls),
(400,514,o),
(488,432,o),
(488,356,qs),
(488,280,o),
(400,198,o),
(325,198,qs),
(272,198,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
6 1 3 7 1 2 4 3 2 103 0 5 5 0 95 8 1 0 0 28 77 9 1 4 4 1 95 0 1 1 29 1 78 16 15 1 0 26 25 24 23 22 20 15 27 16 27 13 12 11 10 9 7 0 14 1 14 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 743;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = dcroat;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(387,38,o),
(408,77,q),
(408,0,l),
(630,0,l),
(630,592,l),
(694,592,l),
(694,688,l),
(630,688,l),
(630,740,l),
(408,740,l),
(408,688,l),
(349,688,l),
(349,592,l),
(408,592,l),
(408,487,l),
(387,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
6 1 8 0 19 1 6 9 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 3 3 6 97 7 1 6 6 29 77 5 1 1 1 2 95 4 1 2 2 28 77 0 8 8 0 97 0 0 0 37 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 6 97 7 1 6 6 29 77 0 8 8 0 97 0 0 0 37 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
4 1 2 5 1 1 0 2 1 103 0 8 8 0 97 0 0 0 37 77 0 3 3 6 95 0 6 6 29 77 0 9 9 7 97 0 7 7 35 7 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
36 34 37 35 17 17 17 17 17 19 34 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = Emacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,708,l),
(50,708,l),
(50,0,l),
(522,0,l),
(522,177,l),
(272,177,l),
(272,277,l),
(492,277,l),
(492,444,l),
(272,444,l),
(272,531,l),
(522,531,l)
);
},
{
closed = 1;
nodes = (
(498,769,l),
(498,916,l),
(67,916,l),
(67,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 6 0 7 4 6 7 103 0 0 0 1 2 0 1 103 8 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 0 0 15 14 13 12 0 11 0 11 17 17 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = emacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,397,o),
(371,368,o),
(371,340,q),
(239,340,l),
(249,397,o),
(308,397,qs)
);
},
{
closed = 1;
nodes = (
(333,170,o),
(297,170,qs),
(241,170,o),
(237,243,q),
(593,243,l),
(596,264,o),
(596,287,qs),
(596,374,o),
(523,502,o),
(392,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(93,63,o),
(224,-7,o),
(308,-7,qs),
(378,-7,o),
(495,48,o),
(572,143,o),
(584,203,q),
(349,203,l)
);
},
{
closed = 1;
nodes = (
(93,629,l),
(524,629,l),
(524,776,l),
(93,776,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
10 1 6 4 5 5 6 114 11 1 8 0 7 3 8 7 103 0 0 0 4 6 0 4 103 9 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
10 1 6 4 5 4 6 5 128 11 1 8 0 7 3 8 7 103 0 0 0 4 6 0 4 103 9 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
30 30 6 6 0 0 30 33 30 33 32 31 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = Ebreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,708,l),
(50,708,l),
(50,0,l),
(522,0,l),
(522,177,l),
(272,177,l),
(272,277,l),
(492,277,l),
(492,444,l),
(272,444,l),
(272,531,l),
(522,531,l)
);
},
{
closed = 1;
nodes = (
(367,967,l),
(367,936,o),
(329,905,o),
(282,905,qs),
(235,905,o),
(197,936,o),
(197,967,q),
(94,967,l),
(94,950,ls),
(94,851,o),
(199,747,o),
(282,747,qs),
(365,747,o),
(470,851,o),
(470,950,qs),
(470,967,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
9 1 7 8 7 133 0 8 0 6 4 8 6 105 0 0 0 1 2 0 1 103 10 1 5 5 4 95 0 4 4 28 77 0 2 2 3 96 0 3 3 29 3 78 0 0 27 26 24 22 20 19 16 14 0 11 0 11 17 17 17 17 17 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = ebreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,397,o),
(371,368,o),
(371,340,q),
(239,340,l),
(249,397,o),
(308,397,qs)
);
},
{
closed = 1;
nodes = (
(333,170,o),
(297,170,qs),
(241,170,o),
(237,243,q),
(593,243,l),
(596,264,o),
(596,287,qs),
(596,374,o),
(523,502,o),
(392,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(93,63,o),
(224,-7,o),
(308,-7,qs),
(378,-7,o),
(495,48,o),
(572,143,o),
(584,203,q),
(349,203,l)
);
},
{
closed = 1;
nodes = (
(393,827,l),
(393,796,o),
(355,765,o),
(308,765,qs),
(261,765,o),
(223,796,o),
(223,827,q),
(120,827,l),
(120,810,ls),
(120,711,o),
(225,607,o),
(308,607,qs),
(391,607,o),
(496,711,o),
(496,810,qs),
(496,827,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
10 1 8 9 8 133 12 1 6 4 5 5 6 114 0 9 0 7 3 9 7 105 0 0 0 4 6 0 4 104 11 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
10 1 8 9 8 133 12 1 6 4 5 4 6 5 128 0 9 0 7 3 9 7 105 0 0 0 4 6 0 4 104 11 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
6 6 0 0 45 44 42 40 38 37 34 32 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 13 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = Edotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,708,l),
(50,708,l),
(50,0,l),
(522,0,l),
(522,177,l),
(272,177,l),
(272,277,l),
(492,277,l),
(492,444,l),
(272,444,l),
(272,531,l),
(522,531,l)
);
},
{
closed = 1;
nodes = (
(317,767,o),
(367,816,o),
(367,852,qs),
(367,890,o),
(318,939,o),
(280,939,qs),
(244,939,o),
(195,889,o),
(195,852,qs),
(195,816,o),
(244,767,o),
(280,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
0 6 9 1 7 4 6 7 105 0 0 0 1 2 0 1 103 8 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 12 12 0 0 12 23 12 22 18 16 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = edotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,397,o),
(371,368,o),
(371,340,q),
(239,340,l),
(249,397,o),
(308,397,qs)
);
},
{
closed = 1;
nodes = (
(333,170,o),
(297,170,qs),
(241,170,o),
(237,243,q),
(593,243,l),
(596,264,o),
(596,287,qs),
(596,374,o),
(523,502,o),
(392,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(93,63,o),
(224,-7,o),
(308,-7,qs),
(378,-7,o),
(495,48,o),
(572,143,o),
(584,203,q),
(349,203,l)
);
},
{
closed = 1;
nodes = (
(343,627,o),
(393,676,o),
(393,712,qs),
(393,750,o),
(344,799,o),
(306,799,qs),
(270,799,o),
(221,749,o),
(221,712,qs),
(221,676,o),
(270,627,o),
(306,627,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
10 1 6 4 5 5 6 114 0 7 11 1 8 3 7 8 105 0 0 0 4 6 0 4 103 9 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
10 1 6 4 5 4 6 5 128 0 7 11 1 8 3 7 8 105 0 0 0 4 6 0 4 103 9 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
30 30 6 6 0 0 30 41 30 40 36 34 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = Eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,708,l),
(50,708,l),
(50,0,l),
(299,0,l),
(271,-24,o),
(248,-73,o),
(248,-103,qs),
(248,-159,o),
(334,-223,o),
(409,-223,qs),
(469,-223,o),
(522,-207,q),
(522,-91,l),
(474,-107,o),
(437,-107,qs),
(421,-107,o),
(403,-95,o),
(403,-86,qs),
(403,-71,o),
(438,-41,o),
(479,-21,qs),
(522,0,l),
(522,177,l),
(272,177,l),
(272,277,l),
(492,277,l),
(492,444,l),
(272,444,l),
(272,531,l),
(522,531,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
16 1 3 5 17 1 4 3 2 76 7 1 5 1 75 0 0 0 1 2 0 1 103 0 3 0 4 3 4 101 8 1 7 7 6 95 0 6 6 28 77 0 2 2 5 95 0 5 5 29 5 78 0 0 0 29 0 29 17 21 35 39 17 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,397,o),
(371,368,o),
(371,340,q),
(239,340,l),
(249,397,o),
(308,397,qs)
);
},
{
closed = 1;
nodes = (
(355,-99,o),
(318,-99,qs),
(302,-99,o),
(284,-87,o),
(284,-78,qs),
(284,-63,o),
(319,-33,o),
(360,-13,qs),
(400,6,l),
(472,28,o),
(570,133,o),
(584,203,q),
(349,203,l),
(333,170,o),
(297,170,qs),
(241,170,o),
(237,243,q),
(593,243,l),
(596,264,o),
(596,287,qs),
(596,374,o),
(523,502,o),
(392,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs),
(20,184,o),
(109,45,o),
(188,14,q),
(156,-11,o),
(129,-64,o),
(129,-95,qs),
(129,-151,o),
(215,-215,o),
(290,-215,qs),
(350,-215,o),
(403,-199,q),
(403,-83,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
45 14 2 7 5 6 1 2 7 2 76 0 6 4 5 4 6 5 128 0 5 7 4 5 7 126 0 0 0 4 6 0 4 103 0 7 0 2 7 2 102 8 1 1 1 3 97 0 3 3 37 1 78 0 0 44 42 33 32 31 29 28 27 22 20 9 7 0 5 0 4 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = Ecaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,708,l),
(50,708,l),
(50,0,l),
(522,0,l),
(522,177,l),
(272,177,l),
(272,277,l),
(492,277,l),
(492,444,l),
(272,444,l),
(272,531,l),
(522,531,l)
);
},
{
closed = 1;
nodes = (
(282,749,l),
(447,824,l),
(447,968,l),
(282,880,l),
(116,968,l),
(116,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
17 16 15 14 13 12 6 4 74 0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = ecaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,397,o),
(371,368,o),
(371,340,q),
(239,340,l),
(249,397,o),
(308,397,qs)
);
},
{
closed = 1;
nodes = (
(333,170,o),
(297,170,qs),
(241,170,o),
(237,243,q),
(593,243,l),
(596,264,o),
(596,287,qs),
(596,374,o),
(523,502,o),
(392,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(93,63,o),
(224,-7,o),
(308,-7,qs),
(378,-7,o),
(495,48,o),
(572,143,o),
(584,203,q),
(349,203,l)
);
},
{
closed = 1;
nodes = (
(308,740,l),
(142,828,l),
(142,684,l),
(308,609,l),
(473,684,l),
(473,828,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
35 34 33 32 31 30 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
8 1 6 4 5 5 6 114 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
6 6 0 0 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = Gbreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,715,o),
(117,624,o),
(30,460,o),
(30,355,qs),
(30,250,o),
(117,86,o),
(280,-5,o),
(390,-5,qs),
(514,-5,o),
(676,108,o),
(722,187,q),
(722,409,l),
(361,409,l),
(361,252,l),
(538,252,l),
(492,190,o),
(414,190,qs),
(333,190,o),
(255,272,o),
(255,355,qs),
(255,427,o),
(325,510,o),
(389,510,qs),
(423,510,o),
(471,487,o),
(484,466,q),
(718,466,l),
(702,581,o),
(527,715,o),
(388,715,qs)
);
},
{
closed = 1;
nodes = (
(462,967,l),
(462,936,o),
(424,905,o),
(377,905,qs),
(330,905,o),
(292,936,o),
(292,967,q),
(189,967,l),
(189,950,ls),
(189,851,o),
(294,747,o),
(377,747,qs),
(460,747,o),
(565,851,o),
(565,950,qs),
(565,967,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
18 1 5 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
10 1 8 9 8 133 0 0 1 4 1 0 114 0 9 0 7 6 9 7 105 0 4 0 3 2 4 3 103 0 1 1 6 97 11 1 6 6 34 77 0 2 2 5 98 0 5 5 35 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
10 1 8 9 8 133 0 0 1 4 1 0 4 128 0 9 0 7 6 9 7 105 0 4 0 3 2 4 3 103 0 1 1 6 97 11 1 6 6 34 77 0 2 2 5 98 0 5 5 35 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
0 0 45 44 42 40 38 37 34 32 0 29 0 28 35 17 17 36 34 18 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = gbreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,10,ls),
(409,-45,o),
(365,-85,o),
(326,-85,qs),
(263,-85,o),
(254,-41,q),
(36,-41,l),
(47,-150,o),
(206,-277,o),
(342,-277,qs),
(443,-277,o),
(572,-199,o),
(630,-69,o),
(630,10,qs),
(630,564,l),
(409,564,l),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
},
{
closed = 1;
nodes = (
(432,820,l),
(432,789,o),
(394,758,o),
(347,758,qs),
(300,758,o),
(262,789,o),
(262,820,q),
(159,820,l),
(159,803,ls),
(159,704,o),
(264,600,o),
(347,600,qs),
(430,600,o),
(535,704,o),
(535,803,qs),
(535,820,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 6 0 23 1 5 7 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 6 1 23 1 5 7 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
11 1 9 10 9 133 0 3 5 4 4 3 114 0 10 0 8 0 10 8 105 0 6 6 0 97 1 1 0 0 37 77 0 7 7 5 98 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
11 1 9 10 9 133 0 3 5 4 5 3 4 128 0 10 0 8 0 10 8 105 0 6 6 0 97 1 1 0 0 37 77 0 7 7 5 98 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
11 1 9 10 9 133 0 3 5 4 5 3 4 128 0 10 0 8 0 10 8 105 0 1 1 31 77 0 6 6 0 97 0 0 0 37 77 0 7 7 5 98 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
58 57 55 53 51 50 37 36 37 37 33 18 36 19 34 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = Gdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,715,o),
(117,624,o),
(30,460,o),
(30,355,qs),
(30,250,o),
(117,86,o),
(280,-5,o),
(390,-5,qs),
(514,-5,o),
(676,108,o),
(722,187,q),
(722,409,l),
(361,409,l),
(361,252,l),
(538,252,l),
(492,190,o),
(414,190,qs),
(333,190,o),
(255,272,o),
(255,355,qs),
(255,427,o),
(325,510,o),
(389,510,qs),
(423,510,o),
(471,487,o),
(484,466,q),
(718,466,l),
(702,581,o),
(527,715,o),
(388,715,qs)
);
},
{
closed = 1;
nodes = (
(412,767,o),
(462,816,o),
(462,852,qs),
(462,890,o),
(413,939,o),
(375,939,qs),
(339,939,o),
(290,889,o),
(290,852,qs),
(290,816,o),
(339,767,o),
(375,767,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
18 1 5 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 0 1 4 1 0 114 0 7 10 1 8 6 7 8 105 0 4 0 3 2 4 3 103 0 1 1 6 97 9 1 6 6 34 77 0 2 2 5 97 0 5 5 35 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 0 1 4 1 0 4 128 0 7 10 1 8 6 7 8 105 0 4 0 3 2 4 3 103 0 1 1 6 97 9 1 6 6 34 77 0 2 2 5 97 0 5 5 35 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
30 30 0 0 30 41 30 40 36 34 0 29 0 28 35 17 17 36 34 18 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = gdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,10,ls),
(409,-45,o),
(365,-85,o),
(326,-85,qs),
(263,-85,o),
(254,-41,q),
(36,-41,l),
(47,-150,o),
(206,-277,o),
(342,-277,qs),
(443,-277,o),
(572,-199,o),
(630,-69,o),
(630,10,qs),
(630,564,l),
(409,564,l),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
},
{
closed = 1;
nodes = (
(382,620,o),
(432,669,o),
(432,705,qs),
(432,743,o),
(383,792,o),
(345,792,qs),
(309,792,o),
(260,742,o),
(260,705,qs),
(260,669,o),
(309,620,o),
(345,620,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 6 0 23 1 5 7 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 6 1 23 1 5 7 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 3 5 4 4 3 114 0 8 10 1 9 0 8 9 105 0 6 6 0 97 1 1 0 0 37 77 0 7 7 5 97 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 3 5 4 5 3 4 128 0 8 10 1 9 0 8 9 105 0 6 6 0 97 1 1 0 0 37 77 0 7 7 5 97 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 3 5 4 5 3 4 128 0 8 10 1 9 0 8 9 105 0 1 1 31 77 0 6 6 0 97 0 0 0 37 77 0 7 7 5 97 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
43 43 43 54 43 53 39 36 37 37 33 18 36 19 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = uni0122;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(298,-182,l),
(370,-182,l),
(370,-193,ls),
(370,-268,o),
(315,-268,q),
(315,-346,l),
(396,-346,o),
(480,-247,o),
(480,-170,qs),
(480,-103,o),
(454,-35,q),
(298,-35,l)
);
},
{
closed = 1;
nodes = (
(279,715,o),
(117,624,o),
(30,460,o),
(30,355,qs),
(30,250,o),
(117,86,o),
(280,-5,o),
(390,-5,qs),
(514,-5,o),
(676,108,o),
(722,187,q),
(722,409,l),
(361,409,l),
(361,252,l),
(538,252,l),
(492,190,o),
(414,190,qs),
(333,190,o),
(255,272,o),
(255,355,qs),
(255,427,o),
(325,510,o),
(389,510,qs),
(423,510,o),
(471,487,o),
(484,466,q),
(718,466,l),
(702,581,o),
(527,715,o),
(388,715,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
30 1 9 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 4 5 8 5 4 114 0 8 0 7 6 8 7 103 11 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 5 5 10 97 12 1 10 10 34 77 0 6 6 9 97 0 9 9 35 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 4 5 8 5 4 8 128 0 8 0 7 6 8 7 103 11 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 5 5 10 97 12 1 10 10 34 77 0 6 6 9 97 0 9 9 35 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
12 12 0 0 12 41 12 40 34 32 29 28 27 26 25 23 19 17 15 14 0 11 0 11 18 17 20 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 756;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = uni0123;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(438,746,l),
(366,746,l),
(366,757,ls),
(366,832,o),
(421,832,q),
(421,910,l),
(340,910,o),
(257,811,o),
(257,734,qs),
(257,664,o),
(282,599,q),
(438,599,l)
);
},
{
closed = 1;
nodes = (
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,10,ls),
(409,-45,o),
(365,-85,o),
(326,-85,qs),
(263,-85,o),
(254,-41,q),
(36,-41,l),
(47,-150,o),
(206,-277,o),
(342,-277,qs),
(443,-277,o),
(572,-199,o),
(630,-69,o),
(630,10,qs),
(630,564,l),
(409,564,l),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs),
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
18 1 10 4 35 1 9 11 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
18 1 10 5 35 1 9 11 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 7 9 8 8 7 114 0 0 0 1 2 0 1 105 0 2 12 1 3 4 2 3 103 0 10 10 4 97 5 1 4 4 37 77 0 11 11 9 97 0 9 9 35 77 0 8 8 6 98 0 6 6 39 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 7 9 8 9 7 8 128 0 0 0 1 2 0 1 105 0 2 12 1 3 4 2 3 103 0 10 10 4 97 5 1 4 4 37 77 0 11 11 9 97 0 9 9 35 77 0 8 8 6 98 0 6 6 39 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
0 7 9 8 9 7 8 128 0 0 0 1 2 0 1 105 0 2 12 1 3 4 2 3 103 0 5 5 31 77 0 10 10 4 97 0 4 4 37 77 0 11 11 9 97 0 9 9 35 77 0 8 8 6 98 0 6 6 39 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
0 0 52 50 46 44 39 37 32 30 29 28 26 24 20 19 16 14 0 11 0 11 18 17 20 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = Itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,708,l),
(50,708,l)
);
},
{
closed = 1;
nodes = (
(45,796,o),
(81,796,qs),
(93,796,o),
(121,785,o),
(135,778,qs),
(159,765,o),
(201,751,o),
(225,751,qs),
(289,751,o),
(370,833,o),
(386,926,q),
(277,926,l),
(270,879,o),
(233,879,qs),
(221,879,o),
(198,888,o),
(179,898,qs),
(155,911,o),
(113,925,o),
(89,925,qs),
(25,925,o),
(-56,842,o),
(-72,749,q),
(36,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
4 1 2 0 6 5 2 6 105 0 3 9 7 2 5 1 3 5 106 8 1 1 1 28 77 0 0 0 29 0 78 4 4 0 0 4 27 4 27 26 24 20 18 16 15 14 12 8 6 0 3 0 3 17 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(297,0,l),
(297,564,l),
(75,564,l)
);
},
{
closed = 1;
nodes = (
(70,649,o),
(106,649,qs),
(118,649,o),
(146,638,o),
(160,631,qs),
(184,618,o),
(226,604,o),
(250,604,qs),
(314,604,o),
(395,686,o),
(411,779,q),
(302,779,l),
(295,732,o),
(258,732,qs),
(246,732,o),
(223,741,o),
(204,751,qs),
(180,764,o),
(138,778,o),
(114,778,qs),
(50,778,o),
(-31,695,o),
(-47,602,q),
(61,602,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
4 1 2 0 6 5 2 6 105 9 7 2 5 5 3 97 0 3 3 34 77 8 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
4 1 2 0 6 5 2 6 105 0 3 9 7 2 5 1 3 5 106 8 1 1 1 31 77 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
4 4 0 0 4 27 4 27 26 24 20 18 16 15 14 12 8 6 0 3 0 3 17 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = Imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,708,l),
(50,708,l)
);
},
{
closed = 1;
nodes = (
(378,769,l),
(378,916,l),
(-53,916,l),
(-53,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 0 3 1 2 3 103 4 1 1 1 28 77 0 0 0 29 0 78 0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(297,0,l),
(297,564,l),
(75,564,l)
);
},
{
closed = 1;
nodes = (
(403,622,l),
(403,769,l),
(-28,769,l),
(-28,622,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 0 3 1 2 3 103 4 1 1 1 31 77 0 0 0 29 0 78 0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = uni012C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,708,l),
(50,708,l)
);
},
{
closed = 1;
nodes = (
(247,967,l),
(247,936,o),
(209,905,o),
(162,905,qs),
(115,905,o),
(77,936,o),
(77,967,q),
(-26,967,l),
(-26,950,ls),
(-26,851,o),
(79,747,o),
(162,747,qs),
(245,747,o),
(350,851,o),
(350,950,qs),
(350,967,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
5 1 3 4 3 133 0 4 0 2 1 4 2 105 6 1 1 1 28 77 0 0 0 29 0 78 0 0 19 18 16 14 12 11 8 6 0 3 0 3 17 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = uni012C;
unicode = 300;
},
{
glyphname = uni012D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(297,0,l),
(297,564,l),
(75,564,l)
);
},
{
closed = 1;
nodes = (
(272,820,l),
(272,789,o),
(234,758,o),
(187,758,qs),
(140,758,o),
(102,789,o),
(102,820,q),
(-1,820,l),
(-1,803,ls),
(-1,704,o),
(104,600,o),
(187,600,qs),
(270,600,o),
(375,704,o),
(375,803,qs),
(375,820,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
5 1 3 4 3 133 0 4 0 2 1 4 2 105 6 1 1 1 31 77 0 0 0 29 0 78 0 0 19 18 16 14 12 11 8 6 0 3 0 3 17 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = uni012D;
unicode = 301;
},
{
glyphname = Iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,-107,o),
(187,-107,qs),
(171,-107,o),
(153,-95,o),
(153,-86,qs),
(153,-71,o),
(188,-41,o),
(229,-21,qs),
(272,0,l),
(272,708,l),
(50,708,l),
(50,1,l),
(22,-23,o),
(-2,-74,o),
(-2,-103,qs),
(-2,-159,o),
(84,-223,o),
(159,-223,qs),
(219,-223,o),
(272,-207,q),
(272,-91,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
20 11 8 3 2 1 0 1 0 2 2 76 0 2 0 0 2 0 102 0 1 1 28 1 78 39 22 33 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,0,l),
(22,-24,o),
(-2,-75,o),
(-2,-104,qs),
(-2,-160,o),
(84,-224,o),
(159,-224,qs),
(219,-224,o),
(272,-208,q),
(272,-92,l),
(224,-108,o),
(187,-108,qs),
(171,-108,o),
(153,-96,o),
(153,-87,qs),
(153,-72,o),
(188,-42,o),
(229,-22,qs),
(272,-1,l),
(272,0,l),
(272,564,l),
(50,564,l)
);
},
{
closed = 1;
nodes = (
(219,609,o),
(289,671,o),
(289,718,qs),
(289,766,o),
(219,829,o),
(162,829,qs),
(104,829,o),
(34,766,o),
(34,718,qs),
(34,671,o),
(104,609,o),
(162,609,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
20 11 1 3 0 2 12 1 1 0 2 76 0 3 6 1 4 2 3 4 105 0 0 0 1 0 1 102 5 1 2 2 31 2 78 22 22 0 0 22 33 22 32 28 26 0 21 0 21 35 40 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = Idotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,708,l),
(50,708,l)
);
},
{
closed = 1;
nodes = (
(197,767,o),
(247,816,o),
(247,852,qs),
(247,890,o),
(198,939,o),
(160,939,qs),
(124,939,o),
(75,889,o),
(75,852,qs),
(75,816,o),
(124,767,o),
(160,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 2 5 1 3 1 2 3 105 4 1 1 1 28 77 0 0 0 29 0 78 4 4 0 0 4 15 4 14 10 8 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = dotlessi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(297,0,l),
(297,564,l),
(75,564,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 31 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = uni0136;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(319,-182,l),
(391,-182,l),
(391,-193,ls),
(391,-268,o),
(336,-268,q),
(336,-346,l),
(417,-346,o),
(500,-247,o),
(500,-170,qs),
(500,-100,o),
(475,-35,q),
(319,-35,l)
);
},
{
closed = 1;
nodes = (
(478,0,l),
(742,0,l),
(482,369,l),
(726,708,l),
(475,708,l),
(272,410,l),
(272,708,l),
(50,708,l),
(50,0,l),
(272,0,l),
(272,307,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
22 19 16 3 4 5 1 76 8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 6 1 5 5 28 77 7 1 4 4 29 4 78 0 0 21 20 18 17 15 14 13 12 0 11 0 11 18 17 20 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 798;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = uni0137;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(262,-182,l),
(334,-182,l),
(334,-193,ls),
(334,-268,o),
(279,-268,q),
(279,-346,l),
(360,-346,o),
(443,-247,o),
(443,-170,qs),
(443,-100,o),
(418,-35,q),
(262,-35,l)
);
},
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,225,l),
(411,0,l),
(676,0,l),
(460,280,l),
(671,564,l),
(413,564,l),
(272,353,l),
(272,740,l),
(50,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
19 16 13 3 5 4 1 76 8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 9 1 7 7 5 95 6 1 5 5 29 77 0 4 4 31 77 6 1 5 5 29 5 78 12 12 0 0 12 22 12 22 21 20 18 17 15 14 0 11 0 11 18 17 20 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = Lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,708,l),
(50,0,l),
(486,0,l),
(486,168,l),
(272,168,l),
(272,708,l)
);
},
{
closed = 1;
nodes = (
(359,843,l),
(359,1007,l),
(100,897,l),
(100,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
9 8 7 6 4 2 74 0 2 2 28 77 0 0 0 1 96 0 1 1 29 1 78 17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,740,l),
(50,740,l)
);
},
{
closed = 1;
nodes = (
(290,872,l),
(290,1036,l),
(31,926,l),
(31,778,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
7 6 5 4 4 1 74 2 1 1 1 0 95 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = uni013B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,-182,l),
(282,-182,l),
(282,-193,ls),
(282,-268,o),
(227,-268,q),
(227,-346,l),
(308,-346,o),
(392,-247,o),
(392,-170,qs),
(392,-103,o),
(366,-35,q),
(210,-35,l)
);
},
{
closed = 1;
nodes = (
(50,708,l),
(50,0,l),
(486,0,l),
(486,168,l),
(272,168,l),
(272,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
7 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 28 77 0 4 4 5 96 0 5 5 29 5 78 0 0 17 16 15 14 13 12 0 11 0 11 18 17 20 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 511;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = uni013C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,-182,l),
(159,-182,l),
(159,-193,ls),
(159,-268,o),
(104,-268,q),
(104,-346,l),
(185,-346,o),
(268,-247,o),
(268,-170,qs),
(268,-100,o),
(243,-35,q),
(87,-35,l)
);
},
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,740,l),
(50,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
6 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 5 5 4 95 0 4 4 29 4 78 12 12 0 0 12 15 12 15 14 13 0 11 0 11 18 17 20 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = Lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,562,l),
(441,562,l),
(441,550,ls),
(441,513,o),
(412,476,o),
(386,476,q),
(386,397,l),
(467,397,o),
(550,496,o),
(550,574,qs),
(550,644,o),
(525,708,q),
(369,708,l)
);
},
{
closed = 1;
nodes = (
(50,708,l),
(50,0,l),
(486,0,l),
(486,168,l),
(272,168,l),
(272,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
0 1 0 0 4 1 0 105 0 2 2 3 95 6 7 2 3 3 28 77 0 4 4 5 96 0 5 5 29 5 78 0 0 18 17 16 15 14 13 0 12 0 12 19 17 20 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(325,594,l),
(397,594,l),
(397,582,ls),
(397,545,o),
(368,508,o),
(342,508,q),
(342,429,l),
(423,429,o),
(506,528,o),
(506,606,qs),
(506,676,o),
(481,740,q),
(325,740,l)
);
},
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,740,l),
(50,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
0 2 1 3 2 87 0 1 0 0 4 1 0 105 7 5 6 3 3 3 4 95 0 4 4 29 4 78 13 13 0 0 13 16 13 16 15 14 0 12 0 12 19 17 20 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = Ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,708,l),
(50,0,l),
(486,0,l),
(486,168,l),
(272,168,l),
(272,708,l)
);
},
{
closed = 1;
nodes = (
(266,767,o),
(316,816,o),
(316,852,qs),
(316,890,o),
(267,939,o),
(229,939,qs),
(193,939,o),
(144,889,o),
(144,852,qs),
(144,816,o),
(193,767,o),
(229,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 5 1 4 2 3 4 105 0 2 2 28 77 0 0 0 1 96 0 1 1 29 1 78 6 6 6 17 6 16 37 17 17 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,796,o),
(247,845,o),
(247,881,qs),
(247,919,o),
(198,968,o),
(160,968,qs),
(124,968,o),
(75,918,o),
(75,881,qs),
(75,845,o),
(124,796,o),
(160,796,qs)
);
},
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,740,l),
(50,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 0 4 1 1 3 0 1 105 5 1 3 3 2 95 0 2 2 29 2 78 12 12 0 0 12 15 12 15 14 13 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = Lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,708,l),
(65,452,l),
(10,437,l),
(10,241,l),
(65,256,l),
(65,0,l),
(501,0,l),
(501,168,l),
(287,168,l),
(287,317,l),
(362,338,l),
(362,534,l),
(287,513,l),
(287,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 10 9 8 3 2 1 0 8 0 2 1 76 0 2 2 28 77 0 0 0 1 96 0 1 1 29 1 78 21 17 20 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 521;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,0,l),
(297,0,l),
(297,320,l),
(362,338,l),
(362,534,l),
(297,516,l),
(297,740,l),
(75,740,l),
(75,455,l),
(10,437,l),
(10,241,l),
(75,259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 7 6 5 2 1 0 8 1 0 1 76 0 0 0 1 95 0 1 1 29 1 78 21 19 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = Nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(507,708,l),
(507,346,l),
(272,708,l),
(50,708,l),
(50,0,l),
(272,0,l),
(272,356,l),
(507,0,l),
(729,0,l),
(729,708,l)
);
},
{
closed = 1;
nodes = (
(517,843,l),
(517,1007,l),
(258,897,l),
(258,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
7 2 2 0 2 1 76 13 12 11 10 4 2 74 3 1 2 2 28 77 1 1 0 0 29 0 78 18 17 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 779;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,750,l),
(253,602,l),
(512,696,l),
(512,860,l)
);
},
{
closed = 1;
nodes = (
(651,0,l),
(651,327,ls),
(651,438,o),
(542,568,o),
(445,568,qs),
(385,568,o),
(298,518,o),
(272,478,q),
(272,564,l),
(50,564,l),
(50,0,l),
(272,0,l),
(272,299,ls),
(272,339,o),
(314,386,o),
(351,386,qs),
(387,386,o),
(430,339,o),
(430,299,qs),
(430,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
15 1 0 2 1 76 3 2 1 0 4 2 74 0 0 2 1 2 0 1 128 3 1 2 2 31 77 4 1 1 1 29 1 78 19 35 17 19 38 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = uni0145;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,-182,l),
(406,-182,l),
(406,-193,ls),
(406,-268,o),
(351,-268,q),
(351,-346,l),
(432,-346,o),
(516,-247,o),
(516,-170,qs),
(516,-103,o),
(490,-35,q),
(334,-35,l)
);
},
{
closed = 1;
nodes = (
(507,708,l),
(507,346,l),
(272,708,l),
(50,708,l),
(50,0,l),
(272,0,l),
(272,356,l),
(507,0,l),
(729,0,l),
(729,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
19 14 2 4 6 1 76 8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 6 6 28 77 5 1 4 4 29 4 78 0 0 21 20 18 17 16 15 13 12 0 11 0 11 18 17 20 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 829;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = uni0146;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(293,-182,l),
(365,-182,l),
(365,-193,ls),
(365,-268,o),
(310,-268,q),
(310,-346,l),
(391,-346,o),
(474,-247,o),
(474,-170,qs),
(474,-100,o),
(449,-35,q),
(293,-35,l)
);
},
{
closed = 1;
nodes = (
(651,0,l),
(651,327,ls),
(651,438,o),
(542,568,o),
(445,568,qs),
(385,568,o),
(298,518,o),
(272,478,q),
(272,564,l),
(50,564,l),
(50,0,l),
(272,0,l),
(272,299,ls),
(272,339,o),
(314,386,o),
(351,386,qs),
(387,386,o),
(430,339,o),
(430,299,qs),
(430,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
23 1 4 6 1 76 0 4 6 5 6 4 5 128 9 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 6 6 31 77 8 1 5 5 29 5 78 0 0 31 30 27 25 22 21 20 19 16 14 0 11 0 11 18 17 20 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = Ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(507,708,l),
(507,346,l),
(272,708,l),
(50,708,l),
(50,0,l),
(272,0,l),
(272,356,l),
(507,0,l),
(729,0,l),
(729,708,l)
);
},
{
closed = 1;
nodes = (
(389,749,l),
(554,824,l),
(554,968,l),
(389,880,l),
(223,968,l),
(223,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
7 2 2 0 2 1 76 15 14 13 12 11 10 6 2 74 3 1 2 2 28 77 1 1 0 0 29 0 78 18 17 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 779;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(651,0,l),
(651,327,ls),
(651,438,o),
(542,568,o),
(445,568,qs),
(385,568,o),
(298,518,o),
(272,478,q),
(272,564,l),
(50,564,l),
(50,0,l),
(272,0,l),
(272,299,ls),
(272,339,o),
(314,386,o),
(351,386,qs),
(387,386,o),
(430,339,o),
(430,299,qs),
(430,0,l)
);
},
{
closed = 1;
nodes = (
(384,733,l),
(218,821,l),
(218,677,l),
(384,602,l),
(549,677,l),
(549,821,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
11 1 0 2 1 76 25 24 23 22 21 20 6 2 74 0 0 2 1 2 0 1 128 3 1 2 2 31 77 4 1 1 1 29 1 78 19 35 17 19 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = Omacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(758,461,o),
(661,627,o),
(495,720,o),
(395,720,qs),
(295,720,o),
(128,627,o),
(30,461,o),
(30,357,qs),
(30,253,o),
(128,87,o),
(295,-7,o),
(395,-7,qs),
(494,-7,o),
(661,87,o),
(758,253,o),
(758,357,qs)
);
},
{
closed = 1;
nodes = (
(256,430,o),
(328,515,o),
(395,515,qs),
(461,515,o),
(533,430,o),
(533,357,qs),
(533,285,o),
(461,200,o),
(395,200,qs),
(328,200,o),
(256,285,o),
(256,357,qs)
);
},
{
closed = 1;
nodes = (
(180,769,l),
(611,769,l),
(611,916,l),
(180,916,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
6 1 5 0 4 1 5 4 103 0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 28 28 28 31 28 31 20 36 37 38 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = omacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(616,370,o),
(539,501,o),
(403,571,o),
(318,571,qs),
(233,571,o),
(97,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(97,63,o),
(233,-7,o),
(318,-7,qs),
(403,-7,o),
(539,63,o),
(616,194,o),
(616,282,qs)
);
},
{
closed = 1;
nodes = (
(245,330,o),
(287,379,o),
(318,379,qs),
(349,379,o),
(391,330,o),
(391,282,qs),
(391,234,o),
(349,185,o),
(318,185,qs),
(286,185,o),
(245,234,o),
(245,282,qs)
);
},
{
closed = 1;
nodes = (
(128,622,l),
(559,622,l),
(559,769,l),
(128,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
6 1 5 0 4 1 5 4 103 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 28 28 28 31 28 31 20 36 37 38 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = uni014E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(758,461,o),
(661,627,o),
(495,720,o),
(395,720,qs),
(295,720,o),
(128,627,o),
(30,461,o),
(30,357,qs),
(30,253,o),
(128,87,o),
(295,-7,o),
(395,-7,qs),
(494,-7,o),
(661,87,o),
(758,253,o),
(758,357,qs)
);
},
{
closed = 1;
nodes = (
(256,430,o),
(328,515,o),
(395,515,qs),
(461,515,o),
(533,430,o),
(533,357,qs),
(533,285,o),
(461,200,o),
(395,200,qs),
(328,200,o),
(256,285,o),
(256,357,qs)
);
},
{
closed = 1;
nodes = (
(480,967,l),
(480,936,o),
(442,905,o),
(395,905,qs),
(348,905,o),
(310,936,o),
(310,967,q),
(207,967,l),
(207,950,ls),
(207,851,o),
(312,747,o),
(395,747,qs),
(478,747,o),
(583,851,o),
(583,950,qs),
(583,967,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 3 3 1 97 0 1 1 34 77 0 2 2 0 98 0 0 0 35 0 78 18 34 19 37 36 37 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = uni014E;
unicode = 334;
},
{
glyphname = uni014F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(616,370,o),
(539,501,o),
(403,571,o),
(318,571,qs),
(233,571,o),
(97,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(97,63,o),
(233,-7,o),
(318,-7,qs),
(403,-7,o),
(539,63,o),
(616,194,o),
(616,282,qs)
);
},
{
closed = 1;
nodes = (
(245,330,o),
(287,379,o),
(318,379,qs),
(349,379,o),
(391,330,o),
(391,282,qs),
(391,234,o),
(349,185,o),
(318,185,qs),
(286,185,o),
(245,234,o),
(245,282,qs)
);
},
{
closed = 1;
nodes = (
(428,820,l),
(428,789,o),
(390,758,o),
(343,758,qs),
(296,758,o),
(258,789,o),
(258,820,q),
(155,820,l),
(155,803,ls),
(155,704,o),
(260,600,o),
(343,600,qs),
(426,600,o),
(531,704,o),
(531,803,qs),
(531,820,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 3 3 1 97 0 1 1 37 77 0 2 2 0 98 0 0 0 35 0 78 18 34 19 37 36 37 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = uni014F;
unicode = 335;
},
{
glyphname = Ohungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(758,461,o),
(661,627,o),
(495,720,o),
(395,720,qs),
(295,720,o),
(128,627,o),
(30,461,o),
(30,357,qs),
(30,253,o),
(128,87,o),
(295,-7,o),
(395,-7,qs),
(494,-7,o),
(661,87,o),
(758,253,o),
(758,357,qs)
);
},
{
closed = 1;
nodes = (
(256,430,o),
(328,515,o),
(395,515,qs),
(461,515,o),
(533,430,o),
(533,357,qs),
(533,285,o),
(461,200,o),
(395,200,qs),
(328,200,o),
(256,285,o),
(256,357,qs)
);
},
{
closed = 1;
nodes = (
(283,992,l),
(203,748,l),
(336,748,l),
(451,992,l)
);
},
{
closed = 1;
nodes = (
(529,992,l),
(426,748,l),
(559,748,l),
(697,992,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 5 6 1 4 1 5 4 103 0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 17 17 17 19 36 37 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = ohungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(616,370,o),
(539,501,o),
(403,571,o),
(318,571,qs),
(233,571,o),
(97,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(97,63,o),
(233,-7,o),
(318,-7,qs),
(403,-7,o),
(539,63,o),
(616,194,o),
(616,282,qs)
);
},
{
closed = 1;
nodes = (
(245,330,o),
(287,379,o),
(318,379,qs),
(349,379,o),
(391,330,o),
(391,282,qs),
(391,234,o),
(349,185,o),
(318,185,qs),
(286,185,o),
(245,234,o),
(245,282,qs)
);
},
{
closed = 1;
nodes = (
(231,845,l),
(151,601,l),
(284,601,l),
(399,845,l)
);
},
{
closed = 1;
nodes = (
(477,845,l),
(374,601,l),
(507,601,l),
(645,845,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 5 6 1 4 1 5 4 103 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 17 17 17 19 36 37 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = OE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1015,532,l),
(1015,708,l),
(543,708,l),
(543,671,l),
(511,695,o),
(424,720,o),
(378,720,qs),
(278,720,o),
(119,627,o),
(30,460,o),
(30,354,qs),
(30,248,o),
(119,81,o),
(278,-12,o),
(378,-12,qs),
(485,-7,o),
(543,37,q),
(543,0,l),
(1015,0,l),
(1015,177,l),
(765,177,l),
(765,277,l),
(985,277,l),
(985,444,l),
(765,444,l),
(765,532,l)
);
},
{
closed = 1;
nodes = (
(461,515,o),
(533,429,o),
(533,354,qs),
(533,279,o),
(461,193,o),
(395,193,qs),
(328,193,o),
(256,279,o),
(256,354,qs),
(256,429,o),
(328,515,o),
(395,515,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
21 1 7 5 8 1 3 2 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
21 1 7 6 8 1 3 2 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 0 0 1 2 0 1 103 10 9 2 7 7 5 97 6 1 5 5 34 77 8 1 2 2 3 97 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 0 0 1 8 0 1 103 0 7 7 5 97 6 1 5 5 34 77 10 1 9 9 5 97 6 1 5 5 34 77 0 8 8 3 97 4 1 3 3 29 77 0 2 2 3 97 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 0 0 1 8 0 1 103 0 7 7 6 95 0 6 6 28 77 10 1 9 9 5 97 0 5 5 34 77 0 8 8 3 97 4 1 3 3 29 77 0 2 2 3 97 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 0 0 1 8 0 1 103 0 7 7 6 95 0 6 6 28 77 10 1 9 9 5 97 0 5 5 34 77 0 2 2 3 95 0 3 3 29 77 0 8 8 4 97 0 4 4 35 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
26 26 26 37 26 36 37 17 19 38 34 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 1049;
}
);
note = OE;
unicode = 338;
},
{
glyphname = oe;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(391,234,o),
(349,185,o),
(318,185,qs),
(286,185,o),
(245,234,o),
(245,282,qs),
(245,330,o),
(287,379,o),
(318,379,qs),
(349,379,o),
(391,330,o),
(391,282,qs)
);
},
{
closed = 1;
nodes = (
(715,397,o),
(751,366,o),
(751,334,q),
(618,334,l),
(627,397,o),
(688,397,qs)
);
},
{
closed = 1;
nodes = (
(20,194,o),
(97,63,o),
(233,-7,o),
(318,-7,qs),
(372,-7,o),
(467,22,o),
(505,49,q),
(581,-7,o),
(688,-7,qs),
(758,-7,o),
(875,48,o),
(952,143,o),
(964,203,q),
(729,203,l),
(713,170,o),
(677,170,qs),
(651,170,o),
(619,202,o),
(616,243,q),
(971,243,l),
(976,266,o),
(976,287,qs),
(976,374,o),
(903,502,o),
(772,571,o),
(688,571,qs),
(581,571,o),
(505,515,q),
(467,542,o),
(372,571,o),
(318,571,qs),
(233,571,o),
(97,501,o),
(20,370,o),
(20,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
24 1 0 4 45 1 9 1 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
24 1 3 4 45 1 9 1 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
24 1 3 4 45 1 9 7 2 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 0 6 1 2 6 103 11 3 2 0 0 4 97 5 1 4 4 37 77 8 7 2 1 1 9 97 10 1 9 9 35 9 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 8 6 1 1 8 114 0 2 0 6 8 2 6 103 11 1 3 3 4 97 5 1 4 4 37 77 0 0 0 4 97 5 1 4 4 37 77 7 1 1 1 9 98 10 1 9 9 35 9 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
0 8 6 1 7 8 114 0 2 0 6 8 2 6 103 11 1 3 3 4 97 5 1 4 4 37 77 0 0 0 4 97 5 1 4 4 37 77 0 1 1 9 97 10 1 9 9 35 77 0 7 7 9 98 10 1 9 9 35 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 62 values pushed */
0 8 6 1 6 8 1 128 0 2 0 6 8 2 6 103 11 1 3 3 4 97 5 1 4 4 37 77 0 0 0 4 97 5 1 4 4 37 77 0 1 1 9 97 10 1 9 9 35 77 0 7 7 9 98 10 1 9 9 35 9 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
12 12 49 47 44 42 39 38 37 35 33 32 27 25 22 20 12 17 12 16 20 36 33 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 1022;
}
);
note = oe;
unicode = 339;
},
{
glyphname = Racute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(424,431,o),
(392,402,o),
(360,402,qs),
(272,402,l),
(272,522,l),
(360,522,ls),
(391,522,o),
(424,490,o),
(424,462,qs)
);
},
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,254,l),
(273,254,l),
(406,0,l),
(650,0,l),
(496,271,l),
(570,295,o),
(649,405,o),
(649,476,qs),
(649,542,o),
(588,647,o),
(466,708,o),
(380,708,qs),
(50,708,l)
);
},
{
closed = 1;
nodes = (
(194,897,l),
(194,749,l),
(453,843,l),
(453,1007,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
19 16 2 3 1 1 76 27 26 25 24 4 2 74 0 1 0 3 0 1 3 128 0 0 0 2 95 5 1 2 2 28 77 4 1 3 3 29 3 78 10 9 22 21 18 17 9 23 10 23 33 33 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = racute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,231,ls),
(272,287,o),
(331,331,o),
(394,331,qs),
(457,331,l),
(457,568,l),
(404,568,o),
(306,509,o),
(272,460,q),
(272,564,l),
(50,564,l),
(50,0,l),
(272,0,l)
);
},
{
closed = 1;
nodes = (
(144,750,l),
(144,602,l),
(403,696,l),
(403,860,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
3 1 2 0 1 76 16 15 14 13 4 0 74 0 2 2 0 97 1 1 0 0 31 77 4 1 3 3 29 3 78 0 0 0 12 0 12 33 19 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 467;
}
);
note = racute;
unicode = 341;
},
{
glyphname = uni0156;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,-182,l),
(342,-182,l),
(342,-193,ls),
(342,-268,o),
(287,-268,q),
(287,-346,l),
(368,-346,o),
(452,-247,o),
(452,-170,qs),
(452,-103,o),
(426,-35,q),
(270,-35,l)
);
},
{
closed = 1;
nodes = (
(272,0,l),
(272,254,l),
(273,254,l),
(406,0,l),
(650,0,l),
(496,271,l),
(570,295,o),
(649,405,o),
(649,476,qs),
(649,542,o),
(588,647,o),
(466,708,o),
(380,708,qs),
(50,708,l),
(50,0,l)
);
},
{
closed = 1;
nodes = (
(424,431,o),
(392,402,o),
(360,402,qs),
(272,402,l),
(272,522,l),
(360,522,ls),
(391,522,o),
(424,490,o),
(424,462,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
23 20 2 5 8 1 76 0 8 7 5 7 8 5 128 9 1 3 0 2 1 3 2 104 0 1 0 0 1 0 101 0 7 7 4 95 0 4 4 28 77 6 1 5 5 29 5 78 0 0 33 31 30 28 26 25 22 21 14 12 0 11 0 11 18 17 20 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = uni0157;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(80,-182,l),
(152,-182,l),
(152,-193,ls),
(152,-268,o),
(97,-268,q),
(97,-346,l),
(178,-346,o),
(261,-247,o),
(261,-170,qs),
(261,-100,o),
(236,-35,q),
(80,-35,l)
);
},
{
closed = 1;
nodes = (
(272,231,ls),
(272,287,o),
(331,331,o),
(394,331,qs),
(457,331,l),
(457,568,l),
(404,568,o),
(306,509,o),
(272,460,q),
(272,564,l),
(50,564,l),
(50,0,l),
(272,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
15 1 6 4 1 76 8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 4 97 5 1 4 4 31 77 9 1 7 7 29 7 78 12 12 0 0 12 24 12 24 21 19 18 17 14 13 0 11 0 11 18 17 20 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 467;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = Rcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(424,431,o),
(392,402,o),
(360,402,qs),
(272,402,l),
(272,522,l),
(360,522,ls),
(391,522,o),
(424,490,o),
(424,462,qs)
);
},
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,254,l),
(273,254,l),
(406,0,l),
(650,0,l),
(496,271,l),
(570,295,o),
(649,405,o),
(649,476,qs),
(649,542,o),
(588,647,o),
(466,708,o),
(380,708,qs),
(50,708,l)
);
},
{
closed = 1;
nodes = (
(325,880,l),
(159,968,l),
(159,824,l),
(325,749,l),
(490,824,l),
(490,968,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
19 16 2 3 1 1 76 29 28 27 26 25 24 6 2 74 0 1 0 3 0 1 3 128 0 0 0 2 95 5 1 2 2 28 77 4 1 3 3 29 3 78 10 9 22 21 18 17 9 23 10 23 33 33 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = rcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(272,231,ls),
(272,287,o),
(331,331,o),
(394,331,qs),
(457,331,l),
(457,568,l),
(404,568,o),
(306,509,o),
(272,460,q),
(272,564,l),
(50,564,l),
(50,0,l),
(272,0,l)
);
},
{
closed = 1;
nodes = (
(275,733,l),
(109,821,l),
(109,677,l),
(275,602,l),
(440,677,l),
(440,821,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
3 1 2 0 1 76 18 17 16 15 14 13 6 0 74 0 2 2 0 97 1 1 0 0 31 77 4 1 3 3 29 3 78 0 0 0 12 0 12 33 19 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 467;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = Sacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,281,o),
(533,363,o),
(446,409,o),
(379,434,qs),
(321,456,o),
(268,487,o),
(268,511,qs),
(268,528,o),
(286,547,o),
(300,547,qs),
(320,547,o),
(348,521,o),
(349,491,q),
(588,491,l),
(584,600,o),
(431,720,o),
(301,720,qs),
(224,720,o),
(101,670,o),
(30,573,o),
(30,504,qs),
(29,435,o),
(93,347,o),
(182,301,o),
(250,277,qs),
(307,257,o),
(361,226,o),
(361,201,qs),
(361,183,o),
(336,166,o),
(318,166,qs),
(269,166,o),
(264,227,q),
(28,227,l),
(35,112,o),
(200,-7,o),
(327,-7,qs),
(411,-7,o),
(533,51,o),
(597,154,o),
(597,219,qs)
);
},
{
closed = 1;
nodes = (
(182,897,l),
(182,749,l),
(441,843,l),
(441,1007,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
44 43 42 41 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 3 4 4 5 114 0 1 4 2 2 1 114 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 3 4 4 5 114 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 5 3 4 3 5 4 128 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 44 33 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = sacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(541,233,o),
(479,306,o),
(395,336,o),
(334,348,qs),
(288,357,o),
(246,374,o),
(246,391,qs),
(246,404,o),
(264,417,o),
(281,417,qs),
(308,417,o),
(340,392,o),
(345,369,q),
(542,369,l),
(529,459,o),
(400,571,o),
(286,571,qs),
(209,571,o),
(101,522,o),
(46,437,o),
(46,385,qs),
(46,325,o),
(105,257,o),
(184,229,o),
(245,217,qs),
(295,207,o),
(337,191,o),
(337,172,qs),
(337,161,o),
(317,146,o),
(300,146,qs),
(273,146,o),
(238,170,o),
(234,195,q),
(21,195,l),
(26,137,o),
(98,45,o),
(221,-7,o),
(301,-7,qs),
(374,-7,o),
(483,39,o),
(541,119,o),
(541,169,qs)
);
},
{
closed = 1;
nodes = (
(171,750,l),
(171,602,l),
(430,696,l),
(430,860,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
46 45 44 43 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 3 4 4 5 114 0 1 4 2 2 1 114 0 4 4 3 98 0 3 3 37 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 5 3 4 3 5 4 128 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 37 77 0 2 2 0 98 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 44 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = uni015E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,281,o),
(533,363,o),
(446,409,o),
(379,434,qs),
(321,456,o),
(268,487,o),
(268,511,qs),
(268,528,o),
(286,547,o),
(300,547,qs),
(320,547,o),
(348,521,o),
(349,491,q),
(588,491,l),
(584,600,o),
(431,720,o),
(301,720,qs),
(224,720,o),
(101,670,o),
(30,573,o),
(30,504,qs),
(29,435,o),
(93,347,o),
(182,301,o),
(250,277,qs),
(307,257,o),
(361,226,o),
(361,201,qs),
(361,183,o),
(336,166,o),
(318,166,qs),
(269,166,o),
(264,227,q),
(28,227,l),
(35,129,o),
(159,13,o),
(259,-2,q),
(259,-134,l),
(344,-134,ls),
(370,-134,o),
(370,-149,qs),
(370,-156,o),
(356,-165,o),
(344,-165,qs),
(194,-165,l),
(194,-278,l),
(367,-278,ls),
(427,-278,o),
(517,-221,o),
(517,-156,qs),
(517,-112,o),
(475,-57,o),
(415,-34,o),
(387,-34,q),
(387,-3,l),
(486,12,o),
(597,132,o),
(597,219,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
20 2 2 0 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 8 6 7 7 8 114 0 4 7 5 5 4 114 0 0 5 3 2 0 114 0 5 0 3 2 5 3 104 0 7 7 6 98 0 6 6 34 77 0 2 2 1 96 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 8 6 7 7 8 114 0 4 7 5 5 4 114 0 0 5 3 5 0 3 128 0 5 0 3 2 5 3 104 0 7 7 6 98 0 6 6 34 77 0 2 2 1 96 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 8 6 7 7 8 114 0 4 7 5 7 4 5 128 0 0 5 3 5 0 3 128 0 5 0 3 2 5 3 104 0 7 7 6 98 0 6 6 34 77 0 2 2 1 96 0 1 1 33 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 8 6 7 6 8 7 128 0 4 7 5 7 4 5 128 0 0 5 3 5 0 3 128 0 5 0 3 2 5 3 104 0 7 7 6 98 0 6 6 34 77 0 2 2 1 96 0 1 1 33 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
34 18 44 33 20 35 33 37 19 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = uni015E;
unicode = 350;
},
{
glyphname = uni015F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(541,233,o),
(479,306,o),
(395,336,o),
(334,348,qs),
(288,357,o),
(246,374,o),
(246,391,qs),
(246,404,o),
(264,417,o),
(281,417,qs),
(308,417,o),
(340,392,o),
(345,369,q),
(542,369,l),
(529,459,o),
(400,571,o),
(286,571,qs),
(209,571,o),
(101,522,o),
(46,437,o),
(46,385,qs),
(46,325,o),
(105,257,o),
(184,229,o),
(245,217,qs),
(295,207,o),
(337,191,o),
(337,172,qs),
(337,161,o),
(317,146,o),
(300,146,qs),
(273,146,o),
(238,170,o),
(234,195,q),
(21,195,l),
(28,117,o),
(150,9,o),
(248,-4,q),
(248,-134,l),
(333,-134,ls),
(359,-134,o),
(359,-149,qs),
(359,-156,o),
(345,-165,o),
(333,-165,qs),
(183,-165,l),
(183,-278,l),
(356,-278,ls),
(416,-278,o),
(506,-221,o),
(506,-156,qs),
(506,-112,o),
(464,-57,o),
(404,-34,o),
(376,-34,q),
(376,0,l),
(453,16,o),
(541,107,o),
(541,169,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
20 2 2 0 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 8 6 7 7 8 114 0 4 7 5 7 4 5 128 0 0 5 3 2 0 114 0 5 0 3 2 5 3 103 0 7 7 6 98 0 6 6 37 77 0 2 2 1 96 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 8 6 7 7 8 114 0 4 7 5 7 4 5 128 0 0 5 3 5 0 3 128 0 5 0 3 2 5 3 103 0 7 7 6 98 0 6 6 37 77 0 2 2 1 96 0 1 1 33 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 8 6 7 6 8 7 128 0 4 7 5 7 4 5 128 0 0 5 3 5 0 3 128 0 5 0 3 2 5 3 103 0 7 7 6 98 0 6 6 37 77 0 2 2 1 96 0 1 1 33 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
34 18 44 34 20 35 33 37 19 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = uni015F;
unicode = 351;
},
{
glyphname = Scaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,281,o),
(533,363,o),
(446,409,o),
(379,434,qs),
(321,456,o),
(268,487,o),
(268,511,qs),
(268,528,o),
(286,547,o),
(300,547,qs),
(320,547,o),
(348,521,o),
(349,491,q),
(588,491,l),
(584,600,o),
(431,720,o),
(301,720,qs),
(224,720,o),
(101,670,o),
(30,573,o),
(30,504,qs),
(29,435,o),
(93,347,o),
(182,301,o),
(250,277,qs),
(307,257,o),
(361,226,o),
(361,201,qs),
(361,183,o),
(336,166,o),
(318,166,qs),
(269,166,o),
(264,227,q),
(28,227,l),
(35,112,o),
(200,-7,o),
(327,-7,qs),
(411,-7,o),
(533,51,o),
(597,154,o),
(597,219,qs)
);
},
{
closed = 1;
nodes = (
(313,880,l),
(147,968,l),
(147,824,l),
(313,749,l),
(478,824,l),
(478,968,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
46 45 44 43 42 41 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 3 4 4 5 114 0 1 4 2 2 1 114 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 3 4 4 5 114 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 5 3 4 3 5 4 128 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 44 33 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = scaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(541,233,o),
(479,306,o),
(395,336,o),
(334,348,qs),
(288,357,o),
(246,374,o),
(246,391,qs),
(246,404,o),
(264,417,o),
(281,417,qs),
(308,417,o),
(340,392,o),
(345,369,q),
(542,369,l),
(529,459,o),
(400,571,o),
(286,571,qs),
(209,571,o),
(101,522,o),
(46,437,o),
(46,385,qs),
(46,325,o),
(105,257,o),
(184,229,o),
(245,217,qs),
(295,207,o),
(337,191,o),
(337,172,qs),
(337,161,o),
(317,146,o),
(300,146,qs),
(273,146,o),
(238,170,o),
(234,195,q),
(21,195,l),
(26,137,o),
(98,45,o),
(221,-7,o),
(301,-7,qs),
(374,-7,o),
(483,39,o),
(541,119,o),
(541,169,qs)
);
},
{
closed = 1;
nodes = (
(302,733,l),
(136,821,l),
(136,677,l),
(302,602,l),
(467,677,l),
(467,821,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
48 47 46 45 44 43 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 3 4 4 5 114 0 1 4 2 2 1 114 0 4 4 3 98 0 3 3 37 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 5 3 4 3 5 4 128 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 37 77 0 2 2 0 98 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 44 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = uni0162;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(10,532,l),
(196,532,l),
(196,0,l),
(249,0,l),
(249,-134,l),
(334,-134,ls),
(360,-134,o),
(360,-149,qs),
(360,-156,o),
(346,-165,o),
(334,-165,qs),
(184,-165,l),
(184,-278,l),
(357,-278,ls),
(417,-278,o),
(507,-221,o),
(507,-156,qs),
(507,-112,o),
(465,-57,o),
(405,-34,o),
(377,-34,q),
(377,0,l),
(418,0,l),
(418,532,l),
(606,532,l),
(606,708,l),
(10,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 2 1 5 4 2 114 0 5 4 1 5 4 126 7 1 0 0 8 95 9 1 8 8 28 77 6 1 1 1 29 77 0 4 4 3 96 0 3 3 33 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 2 1 5 1 2 5 128 0 5 4 1 5 4 126 7 1 0 0 8 95 9 1 8 8 28 77 6 1 1 1 29 77 0 4 4 3 96 0 3 3 33 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 26 0 26 17 17 35 33 37 17 17 17 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni0163;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(85,231,ls),
(85,80,o),
(184,28,q),
(184,-127,l),
(269,-127,ls),
(295,-127,o),
(295,-142,qs),
(295,-149,o),
(281,-158,o),
(269,-158,qs),
(119,-158,l),
(119,-271,l),
(292,-271,ls),
(352,-271,o),
(442,-214,o),
(442,-149,qs),
(442,-105,o),
(400,-50,o),
(340,-27,o),
(312,-27,q),
(312,0,l),
(317,0,l),
(401,0,l),
(401,189,l),
(348,189,ls),
(326,189,o),
(307,207,o),
(307,227,qs),
(307,379,l),
(399,379,l),
(399,564,l),
(307,564,l),
(307,700,l),
(85,700,l),
(85,564,l),
(15,564,l),
(15,379,l),
(85,379,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
34 1 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 6 5 9 8 6 114 11 10 2 3 3 0 95 2 1 0 0 31 77 0 4 4 5 95 0 5 5 29 77 0 9 9 1 95 0 1 1 28 77 0 8 8 7 96 0 7 7 33 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 6 5 9 5 6 9 128 11 10 2 3 3 0 95 2 1 0 0 31 77 0 4 4 5 95 0 5 5 29 77 0 9 9 1 95 0 1 1 28 77 0 8 8 7 96 0 7 7 33 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 37 0 37 33 31 33 37 18 17 35 17 17 17 17 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 436;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = Tcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(10,532,l),
(196,532,l),
(196,0,l),
(418,0,l),
(418,532,l),
(606,532,l),
(606,708,l),
(10,708,l)
);
},
{
closed = 1;
nodes = (
(303,749,l),
(468,824,l),
(468,968,l),
(303,880,l),
(137,968,l),
(137,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
13 12 11 10 9 8 6 3 74 2 1 0 0 3 95 4 1 3 3 28 77 0 1 1 29 1 78 0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = tcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,744,l),
(410,744,l),
(410,727,ls),
(410,688,o),
(355,688,q),
(355,609,l),
(437,609,o),
(520,696,o),
(520,766,qs),
(520,797,o),
(508,855,o),
(494,890,q),
(338,890,l)
);
},
{
closed = 1;
nodes = (
(85,231,ls),
(85,0,o),
(317,0,qs),
(401,0,l),
(401,189,l),
(348,189,ls),
(326,189,o),
(307,207,o),
(307,227,qs),
(307,379,l),
(399,379,l),
(399,564,l),
(307,564,l),
(307,700,l),
(85,700,l),
(85,564,l),
(15,564,l),
(15,379,l),
(85,379,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
11 1 3 0 2 1 3 2 103 0 0 0 1 97 5 1 1 1 28 77 12 10 2 7 7 4 95 6 1 4 4 31 77 0 8 8 9 96 0 9 9 29 9 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
11 1 3 0 2 5 3 2 103 0 5 5 28 77 0 0 0 1 97 0 1 1 28 77 12 10 2 7 7 4 95 6 1 4 4 31 77 0 8 8 9 96 0 9 9 29 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
11 1 3 0 2 5 3 2 103 0 1 0 0 4 1 0 105 0 5 5 28 77 12 10 2 7 7 4 95 6 1 4 4 31 77 0 8 8 9 96 0 9 9 29 9 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
13 13 0 0 13 31 13 31 29 27 26 24 21 20 19 18 17 16 15 14 0 12 0 12 18 17 21 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 436;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = Utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,309,ls),
(46,207,o),
(124,65,o),
(263,-7,o),
(353,-7,qs),
(443,-7,o),
(589,65,o),
(673,208,o),
(673,309,qs),
(673,708,l),
(452,708,l),
(452,309,ls),
(452,260,o),
(406,203,o),
(358,203,qs),
(310,203,o),
(267,260,o),
(267,309,qs),
(267,708,l),
(46,708,l)
);
},
{
closed = 1;
nodes = (
(243,796,o),
(279,796,qs),
(291,796,o),
(319,785,o),
(333,778,qs),
(357,765,o),
(399,751,o),
(423,751,qs),
(487,751,o),
(568,833,o),
(584,926,q),
(475,926,l),
(468,879,o),
(431,879,qs),
(419,879,o),
(396,888,o),
(377,898,qs),
(353,911,o),
(311,925,o),
(287,925,qs),
(223,925,o),
(142,842,o),
(126,749,q),
(234,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
6 1 4 0 8 7 4 8 105 0 5 11 9 2 7 1 5 7 106 10 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 20 20 0 0 20 43 20 43 42 40 36 34 32 31 30 28 24 22 0 19 0 19 36 19 35 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(647,0,l),
(647,564,l),
(425,564,l),
(425,265,ls),
(425,225,o),
(383,178,o),
(346,178,qs),
(310,178,o),
(267,225,o),
(267,265,qs),
(267,564,l),
(46,564,l),
(46,237,ls),
(46,126,o),
(155,-4,o),
(252,-4,qs),
(312,-4,o),
(399,46,o),
(425,86,q),
(425,0,l)
);
},
{
closed = 1;
nodes = (
(232,649,o),
(268,649,qs),
(280,649,o),
(308,638,o),
(322,631,qs),
(346,618,o),
(388,604,o),
(412,604,qs),
(476,604,o),
(557,686,o),
(573,779,q),
(464,779,l),
(457,732,o),
(420,732,qs),
(408,732,o),
(385,741,o),
(366,751,qs),
(342,764,o),
(300,778,o),
(276,778,qs),
(212,778,o),
(131,695,o),
(115,602,q),
(223,602,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 1 0 1 2 0 128 7 1 5 0 9 8 5 9 105 11 10 2 8 8 6 97 0 6 6 34 77 3 1 1 1 31 77 4 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 1 0 1 2 0 128 7 1 5 0 9 8 5 9 105 11 10 2 8 8 6 97 0 6 6 34 77 3 1 1 1 31 77 4 1 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 0 1 2 0 128 7 1 5 0 9 8 5 9 105 0 6 11 10 2 8 1 6 8 106 3 1 1 1 31 77 4 1 0 0 35 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
20 20 20 43 20 43 42 40 34 17 36 35 17 19 35 19 34 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = Umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,309,ls),
(46,207,o),
(124,65,o),
(263,-7,o),
(353,-7,qs),
(443,-7,o),
(589,65,o),
(673,208,o),
(673,309,qs),
(673,708,l),
(452,708,l),
(452,309,ls),
(452,260,o),
(406,203,o),
(358,203,qs),
(310,203,o),
(267,260,o),
(267,309,qs),
(267,708,l),
(46,708,l)
);
},
{
closed = 1;
nodes = (
(145,769,l),
(576,769,l),
(576,916,l),
(145,916,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
7 1 5 0 4 1 5 4 103 6 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 20 20 0 0 20 23 20 23 22 21 0 19 0 19 36 19 35 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(647,564,l),
(425,564,l),
(425,265,ls),
(425,225,o),
(383,178,o),
(346,178,qs),
(310,178,o),
(267,225,o),
(267,265,qs),
(267,564,l),
(46,564,l),
(46,237,ls),
(46,126,o),
(155,-4,o),
(252,-4,qs),
(312,-4,o),
(399,46,o),
(425,86,q),
(425,0,l),
(647,0,l)
);
},
{
closed = 1;
nodes = (
(134,622,l),
(565,622,l),
(565,769,l),
(134,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 1 0 1 2 0 128 8 1 6 0 5 1 6 5 103 3 1 1 1 31 77 7 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 2 1 0 1 2 0 128 8 1 6 0 5 1 6 5 103 3 1 1 1 31 77 7 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
20 20 0 0 20 23 20 23 22 21 0 19 0 19 19 35 19 35 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = Ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,309,ls),
(46,207,o),
(124,65,o),
(263,-7,o),
(353,-7,qs),
(443,-7,o),
(589,65,o),
(673,208,o),
(673,309,qs),
(673,708,l),
(452,708,l),
(452,309,ls),
(452,260,o),
(406,203,o),
(358,203,qs),
(310,203,o),
(267,260,o),
(267,309,qs),
(267,708,l),
(46,708,l)
);
},
{
closed = 1;
nodes = (
(445,967,l),
(445,936,o),
(407,905,o),
(360,905,qs),
(313,905,o),
(275,936,o),
(275,967,q),
(172,967,l),
(172,950,ls),
(172,851,o),
(277,747,o),
(360,747,qs),
(443,747,o),
(548,851,o),
(548,950,qs),
(548,967,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 8 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 0 0 35 34 32 30 28 27 24 22 0 19 0 19 36 19 35 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(647,564,l),
(425,564,l),
(425,265,ls),
(425,225,o),
(383,178,o),
(346,178,qs),
(310,178,o),
(267,225,o),
(267,265,qs),
(267,564,l),
(46,564,l),
(46,237,ls),
(46,126,o),
(155,-4,o),
(252,-4,qs),
(312,-4,o),
(399,46,o),
(425,86,q),
(425,0,l),
(647,0,l)
);
},
{
closed = 1;
nodes = (
(434,820,l),
(434,789,o),
(396,758,o),
(349,758,qs),
(302,758,o),
(264,789,o),
(264,820,q),
(161,820,l),
(161,803,ls),
(161,704,o),
(266,600,o),
(349,600,qs),
(432,600,o),
(537,704,o),
(537,803,qs),
(537,820,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
8 1 6 7 6 133 0 2 1 0 1 2 0 128 0 7 0 5 1 7 5 105 3 1 1 1 31 77 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
8 1 6 7 6 133 0 2 1 0 1 2 0 128 0 7 0 5 1 7 5 105 3 1 1 1 31 77 9 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
0 0 35 34 32 30 28 27 24 22 0 19 0 19 19 35 19 35 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = Uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,309,ls),
(46,207,o),
(124,65,o),
(263,-7,o),
(353,-7,qs),
(443,-7,o),
(589,65,o),
(673,208,o),
(673,309,qs),
(673,708,l),
(452,708,l),
(452,309,ls),
(452,260,o),
(406,203,o),
(358,203,qs),
(310,203,o),
(267,260,o),
(267,309,qs),
(267,708,l),
(46,708,l)
);
},
{
closed = 1;
nodes = (
(304,1004,o),
(228,932,o),
(228,872,qs),
(228,812,o),
(304,740,o),
(360,740,qs),
(416,740,o),
(492,812,o),
(492,872,qs),
(492,932,o),
(416,1004,o),
(360,1004,qs)
);
},
{
closed = 1;
nodes = (
(340,825,o),
(314,851,o),
(314,872,qs),
(314,893,o),
(340,919,o),
(360,919,qs),
(380,919,o),
(406,893,o),
(406,872,qs),
(406,851,o),
(380,825,o),
(360,825,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
9 1 5 0 6 7 5 6 105 10 1 7 0 4 1 7 4 105 8 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 32 32 20 20 0 0 32 43 32 42 38 36 20 31 20 30 26 24 0 19 0 19 36 19 35 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(647,564,l),
(425,564,l),
(425,265,ls),
(425,225,o),
(383,178,o),
(346,178,qs),
(310,178,o),
(267,225,o),
(267,265,qs),
(267,564,l),
(46,564,l),
(46,237,ls),
(46,126,o),
(155,-4,o),
(252,-4,qs),
(312,-4,o),
(399,46,o),
(425,86,q),
(425,0,l),
(647,0,l)
);
},
{
closed = 1;
nodes = (
(329,678,o),
(303,704,o),
(303,725,qs),
(303,746,o),
(329,772,o),
(349,772,qs),
(369,772,o),
(395,746,o),
(395,725,qs),
(395,704,o),
(369,678,o),
(349,678,qs)
);
},
{
closed = 1;
nodes = (
(293,857,o),
(217,785,o),
(217,725,qs),
(217,665,o),
(293,593,o),
(349,593,qs),
(405,593,o),
(481,665,o),
(481,725,qs),
(481,785,o),
(405,857,o),
(349,857,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 0 1 2 0 128 11 1 8 0 5 6 8 5 105 10 1 6 0 7 1 6 7 105 3 1 1 1 31 77 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 0 1 2 0 128 11 1 8 0 5 6 8 5 105 10 1 6 0 7 1 6 7 105 3 1 1 1 31 77 9 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
32 32 20 20 0 0 32 43 32 42 38 36 20 31 20 30 26 24 0 19 0 19 19 35 19 35 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uring;
unicode = 367;
},
{
glyphname = Uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,309,ls),
(46,207,o),
(124,65,o),
(263,-7,o),
(353,-7,qs),
(443,-7,o),
(589,65,o),
(673,208,o),
(673,309,qs),
(673,708,l),
(452,708,l),
(452,309,ls),
(452,260,o),
(406,203,o),
(358,203,qs),
(310,203,o),
(267,260,o),
(267,309,qs),
(267,708,l),
(46,708,l)
);
},
{
closed = 1;
nodes = (
(248,992,l),
(168,748,l),
(301,748,l),
(416,992,l)
);
},
{
closed = 1;
nodes = (
(494,992,l),
(391,748,l),
(524,748,l),
(662,992,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
7 1 5 6 1 4 1 5 4 103 8 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 0 0 27 26 25 24 23 22 21 20 0 19 0 19 36 19 35 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(647,564,l),
(425,564,l),
(425,265,ls),
(425,225,o),
(383,178,o),
(346,178,qs),
(310,178,o),
(267,225,o),
(267,265,qs),
(267,564,l),
(46,564,l),
(46,237,ls),
(46,126,o),
(155,-4,o),
(252,-4,qs),
(312,-4,o),
(399,46,o),
(425,86,q),
(425,0,l),
(647,0,l)
);
},
{
closed = 1;
nodes = (
(237,845,l),
(157,601,l),
(290,601,l),
(405,845,l)
);
},
{
closed = 1;
nodes = (
(483,845,l),
(380,601,l),
(513,601,l),
(651,845,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 1 0 1 2 0 128 8 1 6 7 1 5 1 6 5 103 3 1 1 1 31 77 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 1 0 1 2 0 128 8 1 6 7 1 5 1 6 5 103 3 1 1 1 31 77 9 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
0 0 27 26 25 24 23 22 21 20 0 19 0 19 19 35 19 35 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = Uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,309,ls),
(46,193,o),
(147,41,o),
(236,11,q),
(202,-15,o),
(175,-68,o),
(175,-100,qs),
(175,-156,o),
(261,-220,o),
(336,-220,qs),
(396,-220,o),
(449,-204,q),
(449,-88,l),
(401,-104,o),
(364,-104,qs),
(348,-104,o),
(330,-92,o),
(330,-83,qs),
(330,-68,o),
(365,-38,o),
(406,-18,qs),
(449,3,l),
(448,4,l),
(551,30,o),
(673,186,o),
(673,309,qs),
(673,708,l),
(452,708,l),
(452,309,ls),
(452,260,o),
(406,203,o),
(358,203,qs),
(310,203,o),
(267,260,o),
(267,309,qs),
(267,708,l),
(46,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
32 23 2 2 0 24 1 3 2 2 76 0 0 1 2 1 0 2 128 0 2 0 3 2 3 102 5 4 2 1 1 28 1 78 0 0 0 36 0 36 35 43 19 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(647,564,l),
(425,564,l),
(425,265,ls),
(425,225,o),
(383,178,o),
(346,178,qs),
(310,178,o),
(267,225,o),
(267,265,qs),
(267,564,l),
(46,564,l),
(46,237,ls),
(46,126,o),
(155,-4,o),
(252,-4,qs),
(312,-4,o),
(399,46,o),
(425,86,q),
(425,0,l),
(427,0,l),
(398,-24,o),
(373,-76,o),
(373,-106,qs),
(373,-162,o),
(459,-226,o),
(534,-226,qs),
(594,-226,o),
(647,-210,q),
(647,-94,l),
(599,-110,o),
(562,-110,qs),
(546,-110,o),
(528,-98,o),
(528,-89,qs),
(528,-74,o),
(563,-44,o),
(604,-24,qs),
(647,-3,l),
(646,0,l),
(647,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
39 21 19 3 2 4 10 1 0 2 11 1 1 0 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 3 2 3 4 2 128 0 0 0 1 0 1 102 5 1 3 3 31 77 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 4 3 2 3 4 2 128 0 0 0 1 0 1 102 5 1 3 3 31 77 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
19 35 19 41 35 39 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = Wcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,0,l),
(468,0,l),
(550,402,l),
(632,0,l),
(908,0,l),
(1070,708,l),
(831,708,l),
(767,262,l),
(671,708,l),
(429,708,l),
(333,262,l),
(269,708,l),
(30,708,l)
);
},
{
closed = 1;
nodes = (
(551,824,l),
(716,746,l),
(716,890,l),
(551,965,l),
(385,890,l),
(385,746,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
9 4 1 3 2 0 1 76 18 17 16 15 14 13 6 0 74 5 4 1 3 0 0 28 77 3 1 2 2 29 2 78 0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 1100;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = wcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,0,l),
(382,0,l),
(454,318,l),
(522,0,l),
(772,0,l),
(906,564,l),
(701,564,l),
(653,217,l),
(576,564,l),
(339,564,l),
(266,221,l),
(219,564,l),
(-1,564,l)
);
},
{
closed = 1;
nodes = (
(453,680,l),
(618,602,l),
(618,746,l),
(453,821,l),
(287,746,l),
(287,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
9 4 1 3 2 0 1 76 18 17 16 15 14 13 6 0 74 5 4 1 3 0 0 31 77 3 1 2 2 29 2 78 0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 903;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = Ycircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,215,l),
(254,0,l),
(476,0,l),
(476,215,l),
(730,708,l),
(480,708,l),
(367,457,l),
(254,708,l),
(0,708,l)
);
},
{
closed = 1;
nodes = (
(366,827,l),
(531,749,l),
(531,893,l),
(366,968,l),
(200,893,l),
(200,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
7 4 1 3 1 0 1 76 14 13 12 11 10 9 6 0 74 3 2 2 0 0 28 77 0 1 1 29 1 78 0 0 0 8 0 8 18 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = ycircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(343,278,l),
(237,564,l),
(-10,564,l),
(225,28,l),
(83,-270,l),
(326,-270,l),
(687,564,l),
(442,564,l)
);
},
{
closed = 1;
nodes = (
(339,680,l),
(504,602,l),
(504,746,l),
(339,821,l),
(173,746,l),
(173,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
6 3 2 0 1 1 76 13 12 11 10 9 8 6 1 74 3 2 2 1 1 31 77 0 0 0 33 0 78 0 0 0 7 0 7 18 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = Ydieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,215,l),
(254,0,l),
(476,0,l),
(476,215,l),
(730,708,l),
(480,708,l),
(367,457,l),
(254,708,l),
(0,708,l)
);
},
{
closed = 1;
nodes = (
(289,767,o),
(339,816,o),
(339,852,qs),
(339,890,o),
(290,939,o),
(252,939,qs),
(216,939,o),
(167,889,o),
(167,852,qs),
(167,816,o),
(216,767,o),
(252,767,qs)
);
},
{
closed = 1;
nodes = (
(514,767,o),
(564,816,o),
(564,852,qs),
(564,890,o),
(515,939,o),
(477,939,qs),
(441,939,o),
(392,889,o),
(392,852,qs),
(392,816,o),
(441,767,o),
(477,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
7 4 1 3 1 0 1 76 5 1 3 9 6 8 3 4 0 3 4 105 7 2 2 0 0 28 77 0 1 1 29 1 78 21 21 9 9 0 0 21 32 21 31 27 25 9 20 9 19 15 13 0 8 0 8 18 18 10 8 24 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(580,708,l),
(50,708,l),
(50,532,l),
(330,532,l),
(50,167,l),
(50,0,l),
(580,0,l),
(580,177,l),
(296,177,l),
(580,541,l)
);
},
{
closed = 1;
nodes = (
(443,843,l),
(443,1007,l),
(184,897,l),
(184,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
9 1 2 3 4 1 1 0 2 76 13 12 11 10 4 3 74 0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,564,l),
(23,564,l),
(23,380,l),
(235,380,l),
(20,174,l),
(20,0,l),
(498,0,l),
(498,184,l),
(263,184,l),
(488,390,l)
);
},
{
closed = 1;
nodes = (
(394,696,l),
(394,860,l),
(135,750,l),
(135,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
9 1 2 3 4 1 1 0 2 76 13 12 11 10 4 3 74 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = Zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(580,708,l),
(50,708,l),
(50,532,l),
(330,532,l),
(50,167,l),
(50,0,l),
(580,0,l),
(580,177,l),
(296,177,l),
(580,541,l)
);
},
{
closed = 1;
nodes = (
(350,767,o),
(400,816,o),
(400,852,qs),
(400,890,o),
(351,939,o),
(313,939,qs),
(277,939,o),
(228,889,o),
(228,852,qs),
(228,816,o),
(277,767,o),
(313,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
9 1 2 3 4 1 1 0 2 76 0 4 6 1 5 3 4 5 105 0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 10 10 10 21 10 20 38 17 18 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,564,l),
(23,564,l),
(23,380,l),
(235,380,l),
(20,174,l),
(20,0,l),
(498,0,l),
(498,184,l),
(263,184,l),
(488,390,l)
);
},
{
closed = 1;
nodes = (
(301,620,o),
(351,669,o),
(351,705,qs),
(351,743,o),
(302,792,o),
(264,792,qs),
(228,792,o),
(179,742,o),
(179,705,qs),
(179,669,o),
(228,620,o),
(264,620,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
9 1 2 3 4 1 1 0 2 76 0 4 6 1 5 3 4 5 105 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 10 10 10 21 10 20 38 17 18 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = Zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(580,708,l),
(50,708,l),
(50,532,l),
(330,532,l),
(50,167,l),
(50,0,l),
(580,0,l),
(580,177,l),
(296,177,l),
(580,541,l)
);
},
{
closed = 1;
nodes = (
(315,749,l),
(480,824,l),
(480,968,l),
(315,880,l),
(149,968,l),
(149,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
9 1 2 3 4 1 1 0 2 76 15 14 13 12 11 10 6 3 74 0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,564,l),
(23,564,l),
(23,380,l),
(235,380,l),
(20,174,l),
(20,0,l),
(498,0,l),
(498,184,l),
(263,184,l),
(488,390,l)
);
},
{
closed = 1;
nodes = (
(266,602,l),
(431,677,l),
(431,821,l),
(266,733,l),
(100,821,l),
(100,677,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
9 1 2 3 4 1 1 0 2 76 15 14 13 12 11 10 6 3 74 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = uni018F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(330,196,o),
(259,247,o),
(256,287,q),
(514,287,l),
(504,244,o),
(428,196,o),
(380,196,qs)
);
},
{
closed = 1;
nodes = (
(492,-9,o),
(654,81,o),
(743,248,o),
(743,359,qs),
(743,471,o),
(654,637,o),
(492,727,o),
(385,727,qs),
(297,727,o),
(152,657,o),
(59,536,o),
(44,460,q),
(277,460,l),
(287,492,o),
(349,529,o),
(389,529,qs),
(440,529,o),
(513,468,o),
(517,409,q),
(34,409,l),
(30,373,o),
(30,353,qs),
(30,243,o),
(118,79,o),
(278,-9,o),
(385,-9,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
0 4 3 2 3 4 2 128 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 34 77 7 1 1 1 6 97 8 1 6 6 35 6 78 7 7 0 0 7 32 7 31 25 23 20 19 17 15 13 12 0 6 0 5 18 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = uni018F;
unicode = 399;
},
{
glyphname = florin;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(37,564,l),
(18,379,l),
(59,379,l),
(8,-98,l),
(4,-120,o),
(-14,-120,qs),
(-52,-120,l),
(-70,-310,l),
(-37,-310,ls),
(76,-310,o),
(217,-216,o),
(230,-98,qs),
(280,379,l),
(343,379,l),
(362,564,l),
(299,564,l),
(300,569,ls),
(302,589,o),
(331,604,o),
(359,604,q),
(378,793,l),
(237,793,o),
(92,685,o),
(79,569,qs),
(78,564,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
7 1 6 1 1 76 9 1 6 1 75 0 0 0 1 6 0 1 105 0 4 0 3 4 3 101 5 1 2 2 6 95 0 6 6 31 2 78 17 18 33 35 21 17 18 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 340;
}
);
note = florin;
unicode = 402;
},
{
glyphname = uni01FC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,894,l),
(347,746,l),
(606,840,l),
(606,1004,l)
);
},
{
closed = 1;
nodes = (
(241,0,l),
(286,97,l),
(490,97,l),
(490,0,l),
(952,0,l),
(952,177,l),
(712,177,l),
(712,280,l),
(922,280,l),
(922,447,l),
(712,447,l),
(712,532,l),
(952,532,l),
(952,708,l),
(339,708,l),
(0,0,l)
);
},
{
closed = 1;
nodes = (
(490,537,l),
(490,264,l),
(363,264,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
21 1 1 0 1 76 3 2 1 0 4 0 74 0 2 0 3 8 2 3 103 9 1 8 0 6 5 8 6 103 0 1 1 0 95 0 0 0 28 77 0 4 4 5 95 7 1 5 5 29 5 78 20 20 20 22 20 22 17 17 17 17 17 17 17 20 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 986;
}
);
note = uni01FC;
unicode = 508;
},
{
glyphname = uni01FD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(761,397,o),
(809,365,o),
(809,334,q),
(639,334,l),
(652,397,o),
(724,397,qs)
);
},
{
closed = 1;
nodes = (
(771,167,o),
(717,167,qs),
(684,167,o),
(643,201,o),
(638,243,q),
(1029,243,l),
(1034,266,o),
(1034,287,qs),
(1034,374,o),
(973,502,o),
(866,571,o),
(796,571,qs),
(736,571,o),
(650,527,o),
(630,487,q),
(630,564,l),
(409,564,l),
(409,487,l),
(388,526,o),
(308,571,o),
(253,571,qs),
(187,571,o),
(81,502,o),
(20,371,o),
(20,282,qs),
(20,193,o),
(81,62,o),
(187,-7,o),
(253,-7,qs),
(308,-7,o),
(388,38,o),
(409,77,q),
(409,0,l),
(630,0,l),
(630,77,l),
(651,37,o),
(736,-7,o),
(796,-7,qs),
(882,-7,o),
(1004,111,o),
(1022,203,q),
(787,203,l)
);
},
{
closed = 1;
nodes = (
(245,327,o),
(291,377,o),
(327,377,qs),
(363,377,o),
(409,327,o),
(409,282,qs),
(409,237,o),
(363,187,o),
(327,187,qs),
(291,187,o),
(245,237,o),
(245,282,qs)
);
},
{
closed = 1;
nodes = (
(398,750,l),
(398,602,l),
(657,696,l),
(657,860,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
32 29 2 1 5 15 12 2 2 9 2 76 63 62 61 60 4 5 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
32 29 2 1 6 15 12 2 3 9 2 76 63 62 61 60 4 5 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 0 0 8 10 0 8 103 12 13 2 1 1 5 97 7 6 2 5 5 37 77 14 1 10 10 2 97 4 3 2 2 2 35 77 11 1 9 9 2 97 4 3 2 2 2 35 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 9 10 2 10 9 114 0 0 0 8 10 0 8 103 13 1 1 1 5 97 7 6 2 5 5 37 77 0 12 12 5 97 7 6 2 5 5 37 77 11 14 2 10 10 2 97 4 3 2 2 2 35 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
0 9 11 2 10 9 114 0 0 0 8 10 0 8 103 13 1 1 1 5 97 7 6 2 5 5 37 77 0 12 12 5 97 7 6 2 5 5 37 77 14 1 10 10 2 97 4 3 2 2 2 35 77 0 11 11 2 97 4 3 2 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
0 9 11 3 11 9 3 128 0 0 0 8 10 0 8 103 0 6 6 31 77 13 1 1 1 5 97 7 1 5 5 37 77 0 12 12 5 97 7 1 5 5 37 77 14 1 10 10 2 97 4 1 2 2 35 77 0 3 3 29 77 0 11 11 2 97 4 1 2 2 35 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
6 6 0 0 57 55 51 49 6 47 6 47 46 44 42 41 36 34 31 30 27 25 19 17 14 13 10 8 0 5 0 4 17 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 1054;
}
);
note = uni01FD;
unicode = 509;
},
{
glyphname = uni0218;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,-182,l),
(335,-182,l),
(335,-193,ls),
(335,-268,o),
(280,-268,q),
(280,-346,l),
(361,-346,o),
(445,-247,o),
(445,-170,qs),
(445,-103,o),
(419,-35,q),
(263,-35,l)
);
},
{
closed = 1;
nodes = (
(597,281,o),
(533,363,o),
(446,409,o),
(379,434,qs),
(321,456,o),
(268,487,o),
(268,511,qs),
(268,528,o),
(286,547,o),
(300,547,qs),
(320,547,o),
(348,521,o),
(349,491,q),
(588,491,l),
(584,600,o),
(431,720,o),
(301,720,qs),
(224,720,o),
(101,670,o),
(30,573,o),
(30,504,qs),
(29,435,o),
(93,347,o),
(182,301,o),
(250,277,qs),
(307,257,o),
(361,226,o),
(361,201,qs),
(361,183,o),
(336,166,o),
(318,166,qs),
(269,166,o),
(264,227,q),
(28,227,l),
(35,112,o),
(200,-7,o),
(327,-7,qs),
(411,-7,o),
(533,51,o),
(597,154,o),
(597,219,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 9 7 8 8 9 114 0 5 8 6 6 5 114 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 8 8 7 98 0 7 7 34 77 0 6 6 4 98 0 4 4 35 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 9 7 8 8 9 114 0 5 8 6 8 5 6 128 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 8 8 7 98 0 7 7 34 77 0 6 6 4 98 0 4 4 35 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 9 7 8 7 9 8 128 0 5 8 6 8 5 6 128 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 8 8 7 98 0 7 7 34 77 0 6 6 4 98 0 4 4 35 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 43 41 39 38 36 34 22 20 19 18 16 14 0 11 0 11 18 17 20 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 685;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni0219;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,-182,l),
(280,-182,l),
(280,-193,ls),
(280,-268,o),
(225,-268,q),
(225,-346,l),
(306,-346,o),
(389,-247,o),
(389,-170,qs),
(389,-100,o),
(364,-35,q),
(208,-35,l)
);
},
{
closed = 1;
nodes = (
(541,233,o),
(479,306,o),
(395,336,o),
(334,348,qs),
(288,357,o),
(246,374,o),
(246,391,qs),
(246,404,o),
(264,417,o),
(281,417,qs),
(308,417,o),
(340,392,o),
(345,369,q),
(542,369,l),
(529,459,o),
(400,571,o),
(286,571,qs),
(209,571,o),
(101,522,o),
(46,437,o),
(46,385,qs),
(46,325,o),
(105,257,o),
(184,229,o),
(245,217,qs),
(295,207,o),
(337,191,o),
(337,172,qs),
(337,161,o),
(317,146,o),
(300,146,qs),
(273,146,o),
(238,170,o),
(234,195,q),
(21,195,l),
(26,137,o),
(98,45,o),
(221,-7,o),
(301,-7,qs),
(374,-7,o),
(483,39,o),
(541,119,o),
(541,169,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 9 7 8 8 9 114 0 5 8 6 6 5 114 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 8 8 7 98 0 7 7 37 77 0 6 6 4 98 0 4 4 35 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 9 7 8 7 9 8 128 0 5 8 6 8 5 6 128 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 8 8 7 98 0 7 7 37 77 0 6 6 4 98 0 4 4 35 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 45 43 41 40 38 36 24 22 20 19 16 14 0 11 0 11 18 17 20 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = uni021A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,-182,l),
(301,-182,l),
(301,-193,ls),
(301,-268,o),
(246,-268,q),
(246,-346,l),
(327,-346,o),
(410,-247,o),
(410,-170,qs),
(410,-100,o),
(385,-35,q),
(229,-35,l)
);
},
{
closed = 1;
nodes = (
(10,532,l),
(196,532,l),
(196,0,l),
(418,0,l),
(418,532,l),
(606,532,l),
(606,708,l),
(10,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 6 1 4 4 7 95 9 1 7 7 28 77 0 5 5 29 5 78 12 12 0 0 12 19 12 19 18 17 16 15 14 13 0 11 0 11 18 17 20 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = uni021B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(147,-182,l),
(219,-182,l),
(219,-193,ls),
(219,-268,o),
(164,-268,q),
(164,-346,l),
(245,-346,o),
(329,-247,o),
(329,-170,qs),
(329,-103,o),
(303,-35,q),
(147,-35,l)
);
},
{
closed = 1;
nodes = (
(85,231,ls),
(85,0,o),
(317,0,qs),
(401,0,l),
(401,189,l),
(348,189,ls),
(326,189,o),
(307,207,o),
(307,227,qs),
(307,379,l),
(399,379,l),
(399,564,l),
(307,564,l),
(307,700,l),
(85,700,l),
(85,564,l),
(15,564,l),
(15,379,l),
(85,379,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
11 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 5 5 28 77 12 10 2 7 7 4 95 6 1 4 4 31 77 0 8 8 9 96 0 9 9 29 9 78 12 12 0 0 12 30 12 30 28 26 25 23 20 19 18 17 16 15 14 13 0 11 0 11 18 17 20 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 436;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = uni0259;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(281,167,o),
(245,196,o),
(245,224,q),
(377,224,l),
(367,167,o),
(308,167,qs)
);
},
{
closed = 1;
nodes = (
(392,-7,o),
(523,63,o),
(596,194,o),
(596,282,qs),
(596,370,o),
(523,501,o),
(392,571,o),
(308,571,qs),
(238,571,o),
(121,516,o),
(44,421,o),
(32,361,q),
(267,361,l),
(283,394,o),
(319,394,qs),
(375,394,o),
(379,321,q),
(23,321,l),
(20,300,o),
(20,277,qs),
(20,190,o),
(93,62,o),
(224,-7,o),
(308,-7,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 4 3 2 3 4 114 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 37 77 7 1 1 1 6 97 8 1 6 6 35 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 2 3 4 2 128 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 37 77 7 1 1 1 6 97 8 1 6 6 35 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
6 6 0 0 6 29 6 28 22 20 17 16 15 13 12 11 0 5 0 4 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = uni0259;
unicode = 601;
},
{
glyphname = uni02BC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,413,l),
(328,708,l),
(108,708,l),
(64,413,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 378;
}
);
note = uni02BC;
unicode = 700;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(341,746,l),
(176,821,l),
(10,746,l),
(10,602,l),
(176,680,l),
(341,602,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 351;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,733,l),
(10,821,l),
(10,677,l),
(176,602,l),
(341,677,l),
(341,821,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 351;
}
);
note = caron;
unicode = 711;
},
{
glyphname = uni02C9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(10,622,l),
(441,622,l),
(441,769,l),
(10,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 451;
}
);
note = uni02C9;
unicode = 713;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,820,l),
(283,789,o),
(245,758,o),
(198,758,qs),
(151,758,o),
(113,789,o),
(113,820,q),
(10,820,l),
(10,803,ls),
(10,704,o),
(115,600,o),
(198,600,qs),
(281,600,o),
(386,704,o),
(386,803,qs),
(386,820,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 2 1 133 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 18 34 19 34 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 395;
}
);
note = breve;
unicode = 728;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,620,o),
(182,669,o),
(182,705,qs),
(182,743,o),
(133,792,o),
(95,792,qs),
(59,792,o),
(10,742,o),
(10,705,qs),
(10,669,o),
(59,620,o),
(95,620,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 192;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(86,857,o),
(10,785,o),
(10,725,qs),
(10,665,o),
(86,593,o),
(142,593,qs),
(198,593,o),
(274,665,o),
(274,725,qs),
(274,785,o),
(198,857,o),
(142,857,qs)
);
},
{
closed = 1;
nodes = (
(122,678,o),
(96,704,o),
(96,725,qs),
(96,746,o),
(122,772,o),
(142,772,qs),
(162,772,o),
(188,746,o),
(188,725,qs),
(188,704,o),
(162,678,o),
(142,678,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 1 0 2 3 1 2 105 5 1 3 0 0 3 89 5 1 3 3 0 97 0 0 3 0 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 283;
}
);
note = ring;
unicode = 730;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(213,79,ls),
(102,34,o),
(18,-50,o),
(18,-103,qs),
(18,-159,o),
(104,-223,o),
(179,-223,qs),
(239,-223,o),
(292,-207,q),
(292,-91,l),
(244,-107,o),
(207,-107,qs),
(191,-107,o),
(173,-95,o),
(173,-86,qs),
(173,-71,o),
(208,-41,o),
(249,-21,qs),
(292,0,l),
(250,94,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 32 values pushed */
10 1 1 0 1 76 19 9 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 35 38 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 302;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,649,o),
(153,649,qs),
(165,649,o),
(193,638,o),
(207,631,qs),
(231,618,o),
(273,604,o),
(297,604,qs),
(361,604,o),
(442,686,o),
(458,779,q),
(349,779,l),
(342,732,o),
(305,732,qs),
(293,732,o),
(270,741,o),
(251,751,qs),
(227,764,o),
(185,778,o),
(161,778,qs),
(97,778,o),
(16,695,o),
(0,602,q),
(108,602,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 1 4 3 1 89 2 1 0 0 4 3 0 4 105 0 1 1 3 98 6 5 2 3 1 3 82 0 0 0 23 0 23 36 34 17 36 34 7 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 458;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(90,845,l),
(10,601,l),
(143,601,l),
(258,845,l)
);
},
{
closed = 1;
nodes = (
(366,601,l),
(504,845,l),
(336,845,l),
(233,601,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 3 1 0 1 0 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 513;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = Wgrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,0,l),
(468,0,l),
(550,402,l),
(632,0,l),
(908,0,l),
(1070,708,l),
(831,708,l),
(767,262,l),
(671,708,l),
(429,708,l),
(333,262,l),
(269,708,l),
(30,708,l)
);
},
{
closed = 1;
nodes = (
(680,746,l),
(680,894,l),
(421,1004,l),
(421,840,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 5 4 1 3 0 0 28 77 3 1 2 2 29 2 78 0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 1100;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = wgrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,0,l),
(382,0,l),
(454,318,l),
(522,0,l),
(772,0,l),
(906,564,l),
(701,564,l),
(653,217,l),
(576,564,l),
(339,564,l),
(266,221,l),
(219,564,l),
(-1,564,l)
);
},
{
closed = 1;
nodes = (
(582,602,l),
(582,750,l),
(323,860,l),
(323,696,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 5 4 1 3 0 0 31 77 3 1 2 2 29 2 78 0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 903;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = Wacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,0,l),
(468,0,l),
(550,402,l),
(632,0,l),
(908,0,l),
(1070,708,l),
(831,708,l),
(767,262,l),
(671,708,l),
(429,708,l),
(333,262,l),
(269,708,l),
(30,708,l)
);
},
{
closed = 1;
nodes = (
(680,840,l),
(680,1004,l),
(421,894,l),
(421,746,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 5 4 1 3 0 0 28 77 3 1 2 2 29 2 78 0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 1100;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = wacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,0,l),
(382,0,l),
(454,318,l),
(522,0,l),
(772,0,l),
(906,564,l),
(701,564,l),
(653,217,l),
(576,564,l),
(339,564,l),
(266,221,l),
(219,564,l),
(-1,564,l)
);
},
{
closed = 1;
nodes = (
(582,696,l),
(582,860,l),
(323,750,l),
(323,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 5 4 1 3 0 0 31 77 3 1 2 2 29 2 78 0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 903;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = Wdieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,0,l),
(468,0,l),
(550,402,l),
(632,0,l),
(908,0,l),
(1070,708,l),
(831,708,l),
(767,262,l),
(671,708,l),
(429,708,l),
(333,262,l),
(269,708,l),
(30,708,l)
);
},
{
closed = 1;
nodes = (
(474,764,o),
(524,813,o),
(524,849,qs),
(524,887,o),
(475,936,o),
(437,936,qs),
(401,936,o),
(352,886,o),
(352,849,qs),
(352,813,o),
(401,764,o),
(437,764,qs)
);
},
{
closed = 1;
nodes = (
(699,764,o),
(749,813,o),
(749,849,qs),
(749,887,o),
(700,936,o),
(662,936,qs),
(626,936,o),
(577,886,o),
(577,849,qs),
(577,813,o),
(626,764,o),
(662,764,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
9 4 1 3 2 0 1 76 7 1 5 11 8 10 3 6 0 5 6 105 9 4 1 3 0 0 28 77 3 1 2 2 29 2 78 25 25 13 13 0 0 25 36 25 35 31 29 13 24 13 23 19 17 0 12 0 12 18 17 18 18 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 1100;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = wdieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,0,l),
(382,0,l),
(454,318,l),
(522,0,l),
(772,0,l),
(906,564,l),
(701,564,l),
(653,217,l),
(576,564,l),
(339,564,l),
(266,221,l),
(219,564,l),
(-1,564,l)
);
},
{
closed = 1;
nodes = (
(376,620,o),
(426,669,o),
(426,705,qs),
(426,743,o),
(377,792,o),
(339,792,qs),
(303,792,o),
(254,742,o),
(254,705,qs),
(254,669,o),
(303,620,o),
(339,620,qs)
);
},
{
closed = 1;
nodes = (
(601,620,o),
(651,669,o),
(651,705,qs),
(651,743,o),
(602,792,o),
(564,792,qs),
(528,792,o),
(479,742,o),
(479,705,qs),
(479,669,o),
(528,620,o),
(564,620,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
9 4 1 3 2 0 1 76 7 1 5 11 8 10 3 6 0 5 6 105 9 4 1 3 0 0 31 77 3 1 2 2 29 2 78 25 25 13 13 0 0 25 36 25 35 31 29 13 24 13 23 19 17 0 12 0 12 18 17 18 18 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 903;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = uni1EBC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,708,l),
(50,708,l),
(50,0,l),
(522,0,l),
(522,177,l),
(272,177,l),
(272,277,l),
(492,277,l),
(492,444,l),
(272,444,l),
(272,531,l),
(522,531,l)
);
},
{
closed = 1;
nodes = (
(165,796,o),
(201,796,qs),
(213,796,o),
(241,785,o),
(255,778,qs),
(279,765,o),
(321,751,o),
(345,751,qs),
(409,751,o),
(490,833,o),
(506,926,q),
(397,926,l),
(390,879,o),
(353,879,qs),
(341,879,o),
(318,888,o),
(299,898,qs),
(275,911,o),
(233,925,o),
(209,925,qs),
(145,925,o),
(64,842,o),
(48,749,q),
(156,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
8 1 6 0 10 9 6 10 105 0 7 13 11 2 9 4 7 9 106 0 0 0 1 2 0 1 103 12 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 12 12 0 0 12 35 12 35 34 32 28 26 24 23 22 20 16 14 0 11 0 11 17 17 17 17 17 14 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = uni1EBC;
unicode = 7868;
},
{
glyphname = uni1EBD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,397,o),
(371,368,o),
(371,340,q),
(239,340,l),
(249,397,o),
(308,397,qs)
);
},
{
closed = 1;
nodes = (
(333,170,o),
(297,170,qs),
(241,170,o),
(237,243,q),
(593,243,l),
(596,264,o),
(596,287,qs),
(596,374,o),
(523,502,o),
(392,571,o),
(308,571,qs),
(224,571,o),
(93,501,o),
(20,370,o),
(20,282,qs),
(20,194,o),
(93,63,o),
(224,-7,o),
(308,-7,qs),
(378,-7,o),
(495,48,o),
(572,143,o),
(584,203,q),
(349,203,l)
);
},
{
closed = 1;
nodes = (
(191,656,o),
(227,656,qs),
(239,656,o),
(267,645,o),
(281,638,qs),
(305,625,o),
(347,611,o),
(371,611,qs),
(435,611,o),
(516,693,o),
(532,786,q),
(423,786,l),
(416,739,o),
(379,739,qs),
(367,739,o),
(344,748,o),
(325,758,qs),
(301,771,o),
(259,785,o),
(235,785,qs),
(171,785,o),
(90,702,o),
(74,609,q),
(182,609,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
14 1 6 4 5 5 6 114 9 1 7 0 11 10 7 11 105 0 0 0 4 6 0 4 103 15 12 2 10 10 8 97 0 8 8 34 77 13 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
14 1 6 4 5 5 6 114 9 1 7 0 11 10 7 11 105 0 8 15 12 2 10 3 8 10 106 0 0 0 4 6 0 4 103 13 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
14 1 6 4 5 4 6 5 128 9 1 7 0 11 10 7 11 105 0 8 15 12 2 10 3 8 10 106 0 0 0 4 6 0 4 103 13 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
30 30 6 6 0 0 30 53 30 53 52 50 46 44 42 41 40 38 34 32 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 16 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = uni1EBD;
unicode = 7869;
},
{
glyphname = Ygrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,215,l),
(254,0,l),
(476,0,l),
(476,215,l),
(730,708,l),
(480,708,l),
(367,457,l),
(254,708,l),
(0,708,l)
);
},
{
closed = 1;
nodes = (
(494,749,l),
(494,897,l),
(235,1007,l),
(235,843,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
7 4 1 3 1 0 1 76 12 11 10 9 4 0 74 3 2 2 0 0 28 77 0 1 1 29 1 78 0 0 0 8 0 8 18 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = ygrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(343,278,l),
(237,564,l),
(-10,564,l),
(225,28,l),
(83,-270,l),
(326,-270,l),
(687,564,l),
(442,564,l)
);
},
{
closed = 1;
nodes = (
(467,602,l),
(467,750,l),
(208,860,l),
(208,696,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
6 3 2 0 1 1 76 11 10 9 8 4 1 74 3 2 2 1 1 31 77 0 0 0 33 0 78 0 0 0 7 0 7 18 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni1EF8;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,215,l),
(254,0,l),
(476,0,l),
(476,215,l),
(730,708,l),
(480,708,l),
(367,457,l),
(254,708,l),
(0,708,l)
);
},
{
closed = 1;
nodes = (
(249,796,o),
(285,796,qs),
(297,796,o),
(325,785,o),
(339,778,qs),
(363,765,o),
(405,751,o),
(429,751,qs),
(493,751,o),
(574,833,o),
(590,926,q),
(481,926,l),
(474,879,o),
(437,879,qs),
(425,879,o),
(402,888,o),
(383,898,qs),
(359,911,o),
(317,925,o),
(293,925,qs),
(229,925,o),
(148,842,o),
(132,749,q),
(240,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
7 4 1 3 1 0 1 76 5 1 3 0 7 6 3 7 105 0 4 10 8 2 6 0 4 6 106 9 2 2 0 0 28 77 0 1 1 29 1 78 9 9 0 0 9 32 9 32 31 29 25 23 21 20 19 17 13 11 0 8 0 8 18 18 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = uni1EF8;
unicode = 7928;
},
{
glyphname = uni1EF9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(343,278,l),
(237,564,l),
(-10,564,l),
(225,28,l),
(83,-270,l),
(326,-270,l),
(687,564,l),
(442,564,l)
);
},
{
closed = 1;
nodes = (
(222,649,o),
(258,649,qs),
(270,649,o),
(298,638,o),
(312,631,qs),
(336,618,o),
(378,604,o),
(402,604,qs),
(466,604,o),
(547,686,o),
(563,779,q),
(454,779,l),
(447,732,o),
(410,732,qs),
(398,732,o),
(375,741,o),
(356,751,qs),
(332,764,o),
(290,778,o),
(266,778,qs),
(202,778,o),
(121,695,o),
(105,602,q),
(213,602,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
6 3 2 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
5 1 3 0 7 6 3 7 105 10 8 2 6 6 4 97 0 4 4 34 77 9 2 2 1 1 31 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
5 1 3 0 7 6 3 7 105 0 4 10 8 2 6 1 4 6 106 9 2 2 1 1 31 77 0 0 0 33 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
8 8 0 0 8 31 8 31 30 28 24 22 20 19 18 16 12 10 0 7 0 7 18 17 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = uni1EF9;
unicode = 7929;
},
{
glyphname = endash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,250,l),
(628,250,l),
(628,433,l),
(55,433,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 683;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,250,l),
(881,250,l),
(881,433,l),
(55,433,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 936;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(168,708,l),
(50,413,l),
(270,413,l),
(314,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 28 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 378;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,413,l),
(328,708,l),
(108,708,l),
(64,413,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 28 1 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 378;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,-161,l),
(178,-161,l),
(310,205,l),
(90,205,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 276;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(168,708,l),
(50,413,l),
(270,413,l),
(314,708,l)
);
},
{
closed = 1;
nodes = (
(540,413,l),
(584,708,l),
(438,708,l),
(320,413,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 0 0 1 95 2 1 1 1 28 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(480,413,l),
(598,708,l),
(378,708,l),
(334,413,l)
);
},
{
closed = 1;
nodes = (
(210,413,l),
(328,708,l),
(108,708,l),
(64,413,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 28 1 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,-161,l),
(178,-161,l),
(310,205,l),
(90,205,l)
);
},
{
closed = 1;
nodes = (
(526,-161,l),
(658,205,l),
(438,205,l),
(380,-161,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
2 4 2 1 0 0 1 87 2 4 2 1 1 0 95 3 1 0 1 0 79 0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 696;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = dagger;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(447,549,l),
(469,794,l),
(247,794,l),
(268,549,l),
(51,564,l),
(51,398,l),
(268,413,l),
(247,-270,l),
(469,-270,l),
(447,413,l),
(666,398,l),
(666,564,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 4 3 4 133 2 1 0 0 3 95 5 1 3 3 31 77 0 1 1 33 1 78 17 17 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 717;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(666,564,l),
(447,549,l),
(468,794,l),
(246,794,l),
(268,549,l),
(50,564,l),
(50,398,l),
(268,413,l),
(268,111,l),
(50,127,l),
(50,-40,l),
(268,-25,l),
(246,-270,l),
(468,-270,l),
(447,-25,l),
(666,-40,l),
(666,127,l),
(447,111,l),
(447,413,l),
(666,398,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
10 9 2 1 4 0 3 1 76 0 5 4 5 133 2 1 0 3 1 3 0 1 128 8 7 2 3 3 4 95 6 1 4 4 31 77 0 1 1 33 1 78 0 0 0 19 0 19 17 17 17 19 17 17 19 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 716;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(315,166,o),
(392,210,o),
(436,287,o),
(436,333,qs),
(436,380,o),
(392,457,o),
(315,502,o),
(268,502,qs),
(222,502,o),
(145,457,o),
(100,380,o),
(100,333,qs),
(100,287,o),
(145,210,o),
(222,166,o),
(268,166,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 15 0 14 38 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = ellipsis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,149,o),
(492,212,o),
(435,212,qs),
(377,212,o),
(307,149,o),
(307,101,qs),
(307,54,o),
(377,-8,o),
(435,-8,qs),
(492,-8,o),
(562,54,o),
(562,101,qs)
);
},
{
closed = 1;
nodes = (
(837,149,o),
(767,212,o),
(710,212,qs),
(652,212,o),
(582,149,o),
(582,101,qs),
(582,54,o),
(652,-8,o),
(710,-8,qs),
(767,-8,o),
(837,54,o),
(837,101,qs)
);
},
{
closed = 1;
nodes = (
(287,149,o),
(217,212,o),
(160,212,qs),
(102,212,o),
(32,149,o),
(32,101,qs),
(32,54,o),
(102,-8,o),
(160,-8,qs),
(217,-8,o),
(287,54,o),
(287,101,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
5 3 2 1 1 0 97 4 2 2 0 0 35 0 78 36 36 36 36 36 33 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 869;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = perthousand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,452,o),
(120,360,o),
(201,360,qs),
(281,360,o),
(380,452,o),
(380,540,qs),
(380,628,o),
(281,721,o),
(201,721,qs),
(120,721,o),
(20,628,o),
(20,540,qs)
);
},
{
closed = 1;
nodes = (
(217,592,o),
(236,566,o),
(236,540,qs),
(236,515,o),
(217,489,o),
(199,489,qs),
(165,489,o),
(165,540,qs),
(165,592,o),
(199,592,qs)
);
},
{
closed = 1;
nodes = (
(156,0,l),
(368,0,l),
(741,711,l),
(529,711,l)
);
},
{
closed = 1;
nodes = (
(517,83,o),
(617,-10,o),
(697,-10,qs),
(778,-10,o),
(876,83,o),
(876,171,qs),
(876,259,o),
(778,352,o),
(697,352,qs),
(617,352,o),
(517,259,o),
(517,171,qs)
);
},
{
closed = 1;
nodes = (
(713,223,o),
(732,196,o),
(732,171,qs),
(732,145,o),
(713,119,o),
(696,119,qs),
(661,119,o),
(661,171,qs),
(661,223,o),
(696,223,qs)
);
},
{
closed = 1;
nodes = (
(904,83,o),
(1004,-10,o),
(1085,-10,qs),
(1165,-10,o),
(1264,83,o),
(1264,171,qs),
(1264,259,o),
(1165,352,o),
(1085,352,qs),
(1004,352,o),
(904,259,o),
(904,171,qs)
);
},
{
closed = 1;
nodes = (
(1100,223,o),
(1120,196,o),
(1120,171,qs),
(1120,145,o),
(1101,119,o),
(1083,119,qs),
(1049,119,o),
(1049,171,qs),
(1049,223,o),
(1083,223,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 2 0 1 6 2 1 105 10 1 6 17 13 16 3 9 8 6 9 106 14 1 3 3 0 97 15 5 2 0 0 34 77 12 1 8 8 4 97 11 7 2 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 2 0 1 6 2 1 105 10 1 6 17 13 16 3 9 8 6 9 106 15 1 5 5 28 77 14 1 3 3 0 97 0 0 0 34 77 0 4 4 29 77 12 1 8 8 7 97 11 1 7 7 35 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 44 values pushed */
60 60 38 38 22 22 12 12 60 69 60 68 64 62 57 55 51 49 38 47 38 46 42 40 35 33 29 27 22 25 22 25 24 23 12 21 12 20 37 36 33 18 8 25 
CALL[ ]	/* CallFunction */";
};
width = 1284;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(244,295,l),
(323,470,l),
(122,470,l),
(45,295,l),
(122,120,l),
(323,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 5 0 5 18 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(252,120,l),
(328,295,l),
(252,470,l),
(50,470,l),
(130,295,l),
(50,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = fraction;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-27,0,l),
(185,0,l),
(558,711,l),
(346,711,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 28 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = Euro;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,343,l),
(15,343,l),
(15,244,l),
(81,244,l),
(111,129,o),
(287,-5,o),
(417,-5,qs),
(509,-5,o),
(654,64,o),
(745,190,o),
(760,274,q),
(526,274,l),
(510,239,o),
(451,200,o),
(413,200,qs),
(356,200,o),
(323,244,q),
(451,244,l),
(451,343,l),
(292,343,l),
(292,355,l),
(292,371,l),
(451,371,l),
(451,471,l),
(327,471,l),
(360,510,o),
(413,510,qs),
(451,510,o),
(510,471,o),
(526,436,q),
(760,436,l),
(745,520,o),
(654,646,o),
(509,715,o),
(417,715,qs),
(288,715,o),
(113,584,o),
(82,471,q),
(15,471,l),
(15,371,l),
(67,371,l),
(67,355,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
0 3 1 0 1 3 0 128 0 10 7 8 7 10 8 128 5 1 1 6 1 0 7 1 0 103 13 1 7 12 1 8 9 7 8 103 0 4 4 2 97 0 2 2 34 77 0 9 9 11 97 0 11 11 35 11 78 40 39 38 37 35 33 30 29 27 25 17 18 17 17 34 19 34 17 16 14 8 31 
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = uni20BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(339,712,l),
(114,712,l),
(114,538,l),
(10,522,l),
(10,397,l),
(114,412,l),
(114,379,l),
(10,364,l),
(10,235,l),
(114,249,l),
(114,31,l),
(300,-2,o),
(419,-2,qs),
(563,-2,o),
(733,96,o),
(809,307,o),
(809,481,q),
(584,481,l),
(584,476,ls),
(584,388,o),
(567,281,o),
(495,206,o),
(417,206,qs),
(372,206,o),
(339,213,q),
(339,281,l),
(451,296,l),
(451,426,l),
(339,410,l),
(339,444,l),
(447,459,l),
(447,588,l),
(339,572,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
32 29 28 0 4 1 3 27 26 25 24 23 22 7 6 5 4 3 2 1 13 0 1 21 1 2 0 3 76 0 1 3 0 3 1 0 128 0 3 3 28 77 0 0 0 2 98 0 2 2 29 2 78 26 35 35 40 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 819;
}
);
note = uni20BA;
unicode = 8378;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,542,l),
(406,542,ls),
(433,542,o),
(464,509,o),
(464,487,qs),
(464,462,o),
(434,432,o),
(406,432,qs),
(332,432,l)
);
},
{
closed = 1;
nodes = (
(10,264,l),
(110,264,l),
(110,223,l),
(10,223,l),
(10,58,l),
(110,58,l),
(110,0,l),
(332,0,l),
(332,58,l),
(446,58,l),
(446,223,l),
(332,223,l),
(332,264,l),
(420,264,ls),
(550,264,o),
(689,386,o),
(689,486,qs),
(689,586,o),
(550,708,o),
(420,708,qs),
(110,708,l),
(110,432,l),
(10,432,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
12 10 11 3 0 9 1 3 4 0 3 103 8 1 4 7 1 5 6 4 5 103 0 1 1 2 95 0 2 2 28 77 0 6 6 29 6 78 9 9 1 0 9 31 9 31 30 29 28 27 26 25 24 23 22 21 20 19 18 16 12 10 7 5 0 8 1 8 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 709;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni2113;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,0,l),
(272,0,l),
(272,740,l),
(50,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = uni2113;
unicode = 8467;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,581,l),
(116,581,l),
(116,358,l),
(270,358,l),
(270,581,l),
(356,581,l),
(356,708,l),
(30,708,l)
);
},
{
closed = 1;
nodes = (
(535,358,l),
(535,538,l),
(602,358,l),
(705,358,l),
(773,525,l),
(776,358,l),
(917,358,l),
(917,708,l),
(725,708,l),
(662,552,l),
(612,708,l),
(401,708,l),
(401,358,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
18 15 10 3 1 0 1 76 8 7 6 3 1 0 1 134 5 4 9 3 3 0 0 3 87 5 4 9 3 3 3 0 95 2 1 0 3 0 79 0 0 20 19 17 16 14 13 12 11 9 8 0 7 0 7 17 17 17 10 6 25 
CALL[ ]	/* CallFunction */";
};
width = 947;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = uni2126;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(33,317,o),
(69,209,o),
(114,167,q),
(33,167,l),
(33,0,l),
(300,0,l),
(300,172,l),
(278,226,o),
(258,306,o),
(258,355,qs),
(258,434,o),
(329,515,o),
(396,515,qs),
(463,515,o),
(533,434,o),
(533,355,qs),
(533,306,o),
(513,224,o),
(492,172,q),
(492,0,l),
(759,0,l),
(759,167,l),
(678,167,l),
(723,209,o),
(759,317,o),
(759,387,qs),
(759,491,o),
(663,642,o),
(498,720,o),
(396,720,qs),
(293,720,o),
(128,642,o),
(33,491,o),
(33,387,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
26 14 2 1 3 1 76 0 0 0 3 1 0 3 105 5 1 1 2 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 17 22 38 17 22 34 6 6 28 
CALL[ ]	/* CallFunction */";
};
width = 791;
}
);
note = uni2126;
unicode = 8486;
},
{
glyphname = estimated;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,117,o),
(379,117,qs),
(320,117,o),
(253,140,q),
(253,324,l),
(713,324,l),
(713,388,ls),
(713,476,o),
(631,628,o),
(476,721,o),
(370,721,qs),
(263,721,o),
(108,622,o),
(28,449,o),
(28,340,qs),
(28,232,o),
(119,75,o),
(278,-7,o),
(379,-7,qs),
(552,-7,o),
(683,133,q),
(613,216,l)
);
},
{
closed = 1;
nodes = (
(253,427,l),
(253,582,l),
(255,583,l),
(293,594,o),
(337,603,o),
(370,603,qs),
(446,603,o),
(490,586,q),
(490,427,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
27 22 2 5 4 21 17 2 3 2 2 76 0 1 0 4 5 1 4 105 0 5 0 2 3 5 2 103 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 20 35 34 20 38 33 6 6 28 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = estimated;
unicode = 8494;
},
{
glyphname = partialdiff;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(378,250,o),
(346,186,o),
(311,186,qs),
(287,186,o),
(255,226,o),
(255,267,qs),
(255,377,o),
(326,377,qs),
(348,377,o),
(378,344,o),
(378,311,qs)
);
},
{
closed = 1;
nodes = (
(30,177,o),
(100,54,o),
(219,-6,o),
(291,-6,qs),
(445,-6,o),
(612,209,o),
(612,401,qs),
(612,560,o),
(469,740,o),
(333,740,qs),
(271,740,o),
(199,721,q),
(199,614,l),
(228,617,o),
(252,617,qs),
(319,617,o),
(390,573,o),
(407,527,q),
(372,561,o),
(303,561,qs),
(227,561,o),
(103,492,o),
(30,358,o),
(30,266,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
22 1 3 4 21 1 2 3 16 1 0 2 3 76 0 4 0 3 2 4 3 105 0 2 0 0 1 2 0 105 0 1 5 5 1 89 0 1 1 5 97 0 5 1 5 81 36 35 35 37 35 33 6 6 28 
CALL[ ]	/* CallFunction */";
};
width = 642;
}
);
note = partialdiff;
unicode = 8706;
},
{
glyphname = uni2206;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,168,l),
(20,0,l),
(750,0,l),
(750,168,l),
(475,711,l),
(296,711,l)
);
},
{
closed = 1;
nodes = (
(386,460,l),
(521,168,l),
(249,168,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
7 1 2 1 1 76 4 1 2 2 1 75 3 1 1 2 1 133 4 1 2 0 0 2 87 4 1 2 2 0 95 0 0 2 0 79 6 6 0 0 6 8 6 8 0 5 0 5 18 5 6 23 
CALL[ ]	/* CallFunction */";
};
width = 770;
}
);
note = uni2206;
unicode = 8710;
},
{
glyphname = product;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(10,545,l),
(75,545,l),
(75,0,l),
(297,0,l),
(297,545,l),
(456,545,l),
(456,0,l),
(678,0,l),
(678,545,l),
(743,545,l),
(743,711,l),
(10,711,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
3 1 1 0 1 134 6 1 5 0 0 5 87 6 1 5 5 0 95 4 2 2 0 5 0 79 0 0 0 11 0 11 17 17 17 17 17 7 6 27 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = product;
unicode = 8719;
},
{
glyphname = summation;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(40,453,l),
(258,346,l),
(40,214,l),
(40,-45,l),
(546,-45,l),
(546,123,l),
(254,123,l),
(473,268,l),
(473,435,l),
(275,544,l),
(546,544,l),
(546,711,l),
(40,711,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
11 10 9 4 3 5 1 0 1 76 4 1 3 0 0 1 3 0 103 0 1 2 2 1 87 0 1 1 2 95 0 2 1 2 79 0 0 0 12 0 12 17 19 17 5 6 25 
CALL[ ]	/* CallFunction */";
};
width = 586;
}
);
note = summation;
unicode = 8721;
},
{
glyphname = minus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,250,l),
(486,250,l),
(486,433,l),
(20,433,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = uni2215;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-36,-198,l),
(177,-198,l),
(442,955,l),
(230,955,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 399;
}
);
note = uni2215;
unicode = 8725;
},
{
glyphname = uni2219;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(302,344,o),
(232,407,o),
(175,407,qs),
(117,407,o),
(47,344,o),
(47,296,qs),
(47,249,o),
(117,187,o),
(175,187,qs),
(232,187,o),
(302,249,o),
(302,296,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 36 33 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 349;
}
);
note = uni2219;
unicode = 8729;
},
{
glyphname = radical;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(443,-40,l),
(993,927,l),
(869,927,l),
(457,206,l),
(309,472,l),
(19,301,l),
(80,201,l),
(173,255,l),
(338,-40,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
4 3 2 1 4 1 0 1 76 0 0 1 0 133 0 1 1 118 17 21 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1020;
}
);
note = radical;
unicode = 8730;
},
{
glyphname = infinity;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(228,303,o),
(204,326,o),
(204,347,qs),
(204,369,o),
(228,393,o),
(247,393,qs),
(267,393,o),
(304,365,o),
(327,338,q),
(293,303,o),
(247,303,qs)
);
},
{
closed = 1;
nodes = (
(570,303,o),
(528,326,o),
(508,347,q),
(525,370,o),
(572,393,o),
(597,393,qs),
(617,393,o),
(641,370,o),
(641,348,qs),
(641,327,o),
(616,303,o),
(597,303,qs)
);
},
{
closed = 1;
nodes = (
(33,259,o),
(137,161,o),
(231,160,qs),
(286,159,o),
(378,203,o),
(411,242,q),
(453,204,o),
(552,160,o),
(618,160,qs),
(672,160,o),
(760,205,o),
(812,291,o),
(812,348,qs),
(812,437,o),
(708,534,o),
(613,535,qs),
(556,536,o),
(461,488,o),
(428,446,q),
(391,487,o),
(296,535,o),
(226,535,qs),
(173,535,o),
(85,490,o),
(33,405,o),
(33,347,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
29 1 0 4 19 1 2 1 0 42 1 6 1 3 76 5 1 4 2 1 0 1 4 0 105 9 3 8 3 1 6 6 1 89 9 3 8 3 1 1 6 97 7 1 6 1 6 81 11 11 0 0 46 44 40 38 33 31 27 25 11 22 11 21 17 15 0 10 0 9 35 10 6 23 
CALL[ ]	/* CallFunction */";
};
width = 844;
}
);
note = infinity;
unicode = 8734;
},
{
glyphname = integral;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-3,-120,o),
(-22,-120,qs),
(-39,-120,l),
(-57,-310,l),
(-44,-310,ls),
(68,-310,o),
(210,-216,o),
(222,-98,qs),
(306,746,l),
(310,768,o),
(328,768,qs),
(346,768,l),
(364,958,l),
(351,958,ls),
(239,958,o),
(97,864,o),
(85,746,qs),
(1,-98,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 3 0 1 105 0 3 2 2 3 89 0 3 3 2 97 0 2 3 2 81 33 36 33 34 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = integral;
unicode = 8747;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(190,107,o),
(217,139,o),
(244,139,qs),
(261,139,o),
(294,127,o),
(324,112,qs),
(360,93,o),
(419,72,o),
(455,72,qs),
(546,72,o),
(670,201,o),
(691,336,q),
(525,336,l),
(520,298,o),
(493,267,o),
(466,267,qs),
(449,267,o),
(415,280,o),
(387,294,qs),
(351,313,o),
(291,334,o),
(255,334,qs),
(164,334,o),
(42,206,o),
(20,70,q),
(184,70,l)
);
},
{
closed = 1;
nodes = (
(190,382,o),
(217,414,o),
(244,414,qs),
(261,414,o),
(294,402,o),
(324,387,qs),
(360,368,o),
(419,347,o),
(455,347,qs),
(546,347,o),
(670,476,o),
(691,611,q),
(525,611,l),
(520,573,o),
(493,542,o),
(466,542,qs),
(449,542,o),
(415,555,o),
(387,569,qs),
(351,588,o),
(291,609,o),
(255,609,qs),
(164,609,o),
(42,481,o),
(20,345,q),
(184,345,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
8 1 6 0 10 9 6 10 105 0 7 13 11 2 9 0 7 9 105 0 1 4 3 1 89 2 1 0 0 4 3 0 4 105 0 1 1 3 97 12 5 2 3 1 3 81 26 26 0 0 26 51 26 51 49 47 43 41 39 38 36 34 30 28 0 25 0 25 36 34 18 36 34 14 6 27 
CALL[ ]	/* CallFunction */";
};
width = 711;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(21,-1,l),
(128,-1,l),
(198,99,l),
(606,99,l),
(606,300,l),
(339,300,l),
(395,379,l),
(606,379,l),
(606,580,l),
(536,580,l),
(606,680,l),
(500,680,l),
(430,580,l),
(20,580,l),
(20,379,l),
(288,379,l),
(233,300,l),
(20,300,l),
(20,99,l),
(91,99,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 3 2 3 133 0 8 7 8 134 4 1 2 5 1 1 0 2 1 103 6 1 0 7 7 0 87 6 1 0 0 7 95 10 9 2 7 0 7 79 0 0 0 19 0 19 17 17 17 17 17 17 17 17 17 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 626;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(48,-60,l),
(472,-60,l),
(472,111,l),
(48,111,l)
);
},
{
closed = 1;
nodes = (
(200,195,l),
(472,195,l),
(293,375,l),
(472,556,l),
(200,556,l),
(20,375,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
9 6 2 3 2 1 76 0 2 3 2 133 0 3 1 3 133 4 1 1 0 0 1 87 4 1 1 1 0 95 0 0 1 0 79 0 0 8 7 5 4 0 3 0 3 17 5 6 23 
CALL[ ]	/* CallFunction */";
};
width = 492;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(292,195,l),
(472,375,l),
(292,556,l),
(20,556,l),
(199,375,l),
(20,195,l)
);
},
{
closed = 1;
nodes = (
(444,-60,l),
(444,111,l),
(20,111,l),
(20,-60,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 492;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lozenge;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(10,355,l),
(287,79,l),
(562,355,l),
(287,630,l)
);
},
{
closed = 1;
nodes = (
(287,423,l),
(355,355,l),
(287,286,l),
(218,355,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
6 4 3 1 2 50 
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = lozenge;
unicode = 9674;
},
{
glyphname = fi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(70,0,l),
(292,0,l),
(292,379,l),
(415,379,l),
(415,0,l),
(637,0,l),
(637,564,l),
(294,564,l),
(298,590,o),
(329,608,o),
(361,604,q),
(361,793,l),
(225,805,o),
(72,684,o),
(70,564,q),
(10,564,l),
(10,379,l),
(70,379,l)
);
},
{
closed = 1;
nodes = (
(585,589,o),
(654,647,o),
(654,694,qs),
(654,740,o),
(585,799,o),
(527,799,qs),
(469,799,o),
(399,740,o),
(399,694,qs),
(399,647,o),
(468,589,o),
(527,589,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
6 5 2 7 6 1 76 0 6 9 1 7 0 6 7 105 8 5 2 3 3 0 95 1 1 0 0 31 77 4 1 2 2 29 2 78 18 18 0 0 18 29 18 28 24 22 0 17 0 17 17 17 17 23 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
note = fi;
unicode = 64257;
},
{
glyphname = fl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(70,0,l),
(292,0,l),
(292,379,l),
(375,379,l),
(375,564,l),
(294,564,l),
(299,591,o),
(336,609,o),
(375,604,q),
(375,793,l),
(232,806,o),
(72,684,o),
(70,564,q),
(10,564,l),
(10,379,l),
(70,379,l)
);
},
{
closed = 1;
nodes = (
(435,0,l),
(657,0,l),
(657,740,l),
(435,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
6 1 0 6 1 76 5 1 6 74 7 4 2 2 2 0 95 1 1 0 0 31 77 8 1 6 6 3 95 5 1 3 3 29 3 78 16 16 0 0 16 19 16 19 18 17 0 15 0 15 17 17 23 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 707;
}
);
note = fl;
unicode = 64258;
},
{
glyphname = exclam.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(126,281,l),
(316,281,l),
(342,755,l),
(100,755,l)
);
},
{
closed = 1;
nodes = (
(331,0,l),
(331,212,l),
(111,212,l),
(111,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 2 0 1 131 4 1 1 1 132 0 2 2 3 95 0 3 3 21 2 78 0 0 7 6 5 4 0 3 0 3 17 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 442;
}
);
note = exclam.ss01;
},
{
glyphname = comma.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(25,-61,l),
(112,-61,l),
(112,-72,ls),
(112,-108,o),
(86,-132,o),
(57,-132,q),
(57,-210,l),
(149,-210,o),
(237,-103,o),
(237,-23,qs),
(237,18,o),
(215,100,o),
(196,131,q),
(25,131,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 0 0 1 2 0 1 109 0 2 3 3 2 91 0 2 2 3 95 4 1 3 2 3 79 0 0 0 13 0 13 19 17 21 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 276;
}
);
note = comma.ss01;
},
{
glyphname = period.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(28,0,l),
(248,0,l),
(248,212,l),
(28,212,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 0 95 0 0 0 21 1 78 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 277;
}
);
note = period.ss01;
},
{
glyphname = colon.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,0,l),
(282,0,l),
(282,212,l),
(62,212,l)
);
},
{
closed = 1;
nodes = (
(282,391,l),
(282,603,l),
(62,603,l),
(62,391,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
0 3 0 2 3 2 99 4 1 1 1 0 95 0 0 0 21 1 78 0 0 7 6 5 4 0 3 0 3 17 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 332;
}
);
note = colon.ss01;
},
{
glyphname = semicolon.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(122,-61,l),
(209,-61,l),
(209,-72,ls),
(209,-108,o),
(183,-132,o),
(154,-132,q),
(154,-210,l),
(246,-210,o),
(334,-103,o),
(334,-23,qs),
(334,18,o),
(312,100,o),
(293,131,q),
(122,131,l)
);
},
{
closed = 1;
nodes = (
(112,370,l),
(332,370,l),
(332,582,l),
(112,582,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 0 0 1 2 0 1 109 0 2 6 1 3 4 2 3 107 0 4 5 5 4 91 0 4 4 5 95 7 1 5 4 5 79 14 14 0 0 14 17 14 17 16 15 0 13 0 13 19 17 21 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 431;
}
);
note = semicolon.ss01;
},
{
glyphname = question.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(90,0,l),
(310,0,l),
(310,212,l),
(90,212,l)
);
},
{
closed = 1;
nodes = (
(229,568,o),
(248,593,o),
(267,593,qs),
(282,593,o),
(301,573,o),
(301,556,qs),
(301,525,o),
(239,498,o),
(179,498,qs),
(95,498,l),
(95,286,l),
(303,286,l),
(303,357,l),
(366,358,o),
(464,409,o),
(518,498,o),
(518,557,qs),
(518,664,o),
(386,773,o),
(275,773,qs),
(189,773,o),
(72,712,o),
(17,609,o),
(20,548,q),
(229,548,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 3 4 5 4 3 5 131 9 1 7 5 6 6 7 117 0 4 0 5 7 4 5 107 0 6 0 2 6 2 102 8 1 1 1 0 95 0 0 0 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 3 4 5 4 3 5 131 9 1 7 5 6 5 7 6 131 0 4 0 5 7 4 5 107 0 6 0 2 6 2 102 8 1 1 1 0 95 0 0 0 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
4 4 0 0 4 28 4 28 26 24 20 18 17 16 15 14 9 7 0 3 0 3 17 10 7 23 
CALL[ ]	/* CallFunction */";
};
width = 538;
}
);
note = question.ss01;
},
{
glyphname = exclamdown.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(126,284,l),
(316,284,l),
(342,-190,l),
(100,-190,l)
);
},
{
closed = 1;
nodes = (
(111,565,l),
(331,565,l),
(331,353,l),
(111,353,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
4 1 1 0 1 136 0 0 3 0 136 5 1 3 2 2 3 91 5 1 3 3 2 95 0 2 3 2 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23 
CALL[ ]	/* CallFunction */";
};
width = 442;
}
);
note = exclamdown.ss01;
},
{
glyphname = periodcentered.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,190,l),
(270,190,l),
(270,402,l),
(50,402,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 91 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = periodcentered.ss01;
},
{
glyphname = questiondown.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(448,564,l),
(228,564,l),
(228,352,l),
(448,352,l)
);
},
{
closed = 1;
nodes = (
(309,-4,o),
(290,-29,o),
(271,-29,qs),
(256,-29,o),
(237,-9,o),
(237,8,qs),
(237,39,o),
(299,66,o),
(359,66,qs),
(443,66,l),
(443,278,l),
(235,278,l),
(235,207,l),
(172,206,o),
(74,155,o),
(20,66,o),
(20,7,qs),
(20,-100,o),
(152,-209,o),
(263,-209,qs),
(349,-209,o),
(466,-148,o),
(521,-45,o),
(518,16,q),
(309,16,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
9 1 7 6 5 6 7 117 0 3 5 4 5 3 4 131 0 2 0 6 7 2 6 109 0 5 0 4 1 5 4 107 8 1 1 1 0 95 0 0 0 20 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
9 1 7 6 5 6 7 117 0 3 5 4 5 3 4 131 0 2 0 6 7 2 6 109 0 5 0 4 1 5 4 107 8 1 1 0 0 1 91 8 1 1 1 0 95 0 0 1 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
9 1 7 6 5 6 7 117 0 3 5 4 5 3 4 131 0 2 0 6 7 2 6 109 0 5 0 4 1 5 4 107 8 1 1 1 0 95 0 0 0 20 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
9 1 7 6 5 6 7 117 0 3 5 4 5 3 4 131 0 2 0 6 7 2 6 109 0 5 0 4 1 5 4 107 8 1 1 0 0 1 91 8 1 1 1 0 95 0 0 1 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
9 1 7 6 5 6 7 117 0 3 5 4 5 3 4 131 0 2 0 6 7 2 6 109 0 5 0 4 1 5 4 107 8 1 1 1 0 95 0 0 0 20 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
9 1 7 6 5 6 7 117 0 3 5 4 5 3 4 131 0 2 0 6 7 2 6 109 0 5 0 4 1 5 4 107 8 1 1 0 0 1 91 8 1 1 1 0 95 0 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
9 1 7 6 5 6 7 5 131 0 3 5 4 5 3 4 131 0 2 0 6 7 2 6 109 0 5 0 4 1 5 4 107 8 1 1 0 0 1 91 8 1 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
4 4 0 0 4 28 4 28 26 24 20 18 17 16 15 14 9 7 0 3 0 3 17 10 7 23 
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = questiondown.ss01;
},
{
glyphname = divide.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,240,l),
(531,240,l),
(531,441,l),
(20,441,l)
);
},
{
closed = 1;
nodes = (
(384,0,l),
(384,212,l),
(164,212,l),
(164,0,l)
);
},
{
closed = 1;
nodes = (
(384,469,l),
(384,681,l),
(164,681,l),
(164,469,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 0 6 1 1 5 0 1 107 0 5 0 4 5 4 99 0 2 2 3 95 0 3 3 21 2 78 0 0 11 10 9 8 7 6 5 4 0 3 0 3 17 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = divide.ss01;
},
{
glyphname = uni02BC.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,730,l),
(122,730,l),
(122,718,ls),
(122,681,o),
(93,644,o),
(67,644,q),
(67,565,l),
(148,565,o),
(231,664,o),
(231,742,qs),
(231,812,o),
(206,876,q),
(50,876,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 0 2 1 3 2 103 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 0 0 0 12 0 12 19 17 20 5 6 25 
CALL[ ]	/* CallFunction */";
};
width = 281;
}
);
note = uni02BC.ss01;
},
{
glyphname = quoteleft.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,712,l),
(160,712,l),
(160,723,ls),
(160,798,o),
(215,798,q),
(215,876,l),
(134,876,o),
(50,777,o),
(50,700,qs),
(50,633,o),
(76,565,q),
(232,565,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 0 2 1 3 2 107 0 1 0 0 1 93 0 1 1 0 97 0 0 1 0 81 0 0 0 11 0 11 18 17 20 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 281;
}
);
note = quoteleft.ss01;
},
{
glyphname = quoteright.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,730,l),
(122,730,l),
(122,718,ls),
(122,681,o),
(93,644,o),
(67,644,q),
(67,565,l),
(148,565,o),
(231,664,o),
(231,742,qs),
(231,812,o),
(206,876,q),
(50,876,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 0 0 1 2 0 1 109 0 2 3 3 2 91 0 2 2 3 95 4 1 3 2 3 79 0 0 0 12 0 12 19 17 20 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 281;
}
);
note = quoteright.ss01;
},
{
glyphname = quotedblleft.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,712,l),
(384,712,l),
(384,723,ls),
(384,798,o),
(439,798,q),
(439,876,l),
(358,876,o),
(275,777,o),
(275,700,qs),
(275,630,o),
(300,565,q),
(456,565,l)
);
},
{
closed = 1;
nodes = (
(232,712,l),
(160,712,l),
(160,723,ls),
(160,798,o),
(215,798,q),
(215,876,l),
(134,876,o),
(50,777,o),
(50,700,qs),
(50,633,o),
(76,565,q),
(232,565,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
9 7 8 3 3 6 1 2 1 3 2 107 5 1 1 0 0 1 93 5 1 1 1 0 97 4 1 0 1 0 81 12 12 0 0 12 23 12 23 22 21 19 18 17 16 0 11 0 11 18 17 20 10 7 25 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = quotedblleft.ss01;
},
{
glyphname = quotedblright.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(274,730,l),
(346,730,l),
(346,718,ls),
(346,644,o),
(291,644,q),
(291,565,l),
(372,565,o),
(456,664,o),
(456,742,qs),
(456,810,o),
(430,876,q),
(274,876,l)
);
},
{
closed = 1;
nodes = (
(50,730,l),
(122,730,l),
(122,718,ls),
(122,681,o),
(93,644,o),
(67,644,q),
(67,565,l),
(148,565,o),
(231,664,o),
(231,742,qs),
(231,812,o),
(206,876,q),
(50,876,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
4 1 0 5 1 1 2 0 1 109 6 1 2 3 3 2 91 6 1 2 2 3 95 9 7 8 3 3 2 3 79 12 12 0 0 12 24 12 24 23 22 19 18 17 16 0 11 0 11 18 17 20 10 7 25 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = quotedblright.ss01;
},
{
glyphname = ellipsis.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(42,0,l),
(262,0,l),
(262,212,l),
(42,212,l)
);
},
{
closed = 1;
nodes = (
(542,0,l),
(542,212,l),
(322,212,l),
(322,0,l)
);
},
{
closed = 1;
nodes = (
(812,0,l),
(812,212,l),
(592,212,l),
(592,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 2 6 3 1 1 0 95 5 3 2 0 0 21 1 78 0 0 11 10 9 8 7 6 5 4 0 3 0 3 17 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 854;
}
);
note = ellipsis.ss01;
},
{
glyphname = a.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(593,0,l),
(593,332,ls),
(593,403,o),
(524,512,o),
(397,572,o),
(313,572,qs),
(241,572,o),
(121,516,o),
(42,417,o),
(27,354,q),
(251,354,l),
(258,371,o),
(289,394,o),
(312,394,qs),
(340,394,o),
(371,358,o),
(371,323,q),
(274,323,ls),
(146,323,o),
(20,230,o),
(20,151,qs),
(20,75,o),
(121,-11,o),
(197,-11,qs),
(254,-11,o),
(352,36,o),
(372,76,q),
(372,0,l)
);
},
{
closed = 1;
nodes = (
(244,207,o),
(278,233,o),
(308,233,qs),
(370,233,l),
(370,221,ls),
(370,190,o),
(323,143,o),
(290,143,qs),
(269,143,o),
(244,165,o),
(244,186,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
0 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 2 3 117 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
35 34 20 35 18 34 36 34 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = a.ss02;
},
{
glyphname = aacute.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,750,l),
(216,602,l),
(475,696,l),
(475,860,l)
);
},
{
closed = 1;
nodes = (
(593,0,l),
(593,332,ls),
(593,403,o),
(524,512,o),
(397,572,o),
(313,572,qs),
(241,572,o),
(121,516,o),
(42,417,o),
(27,354,q),
(251,354,l),
(258,371,o),
(289,394,o),
(312,394,qs),
(340,394,o),
(371,358,o),
(371,323,q),
(274,323,ls),
(146,323,o),
(20,230,o),
(20,151,qs),
(20,75,o),
(121,-11,o),
(197,-11,qs),
(254,-11,o),
(352,36,o),
(372,76,q),
(372,0,l)
);
},
{
closed = 1;
nodes = (
(244,207,o),
(278,233,o),
(308,233,qs),
(370,233,l),
(370,221,ls),
(370,190,o),
(323,143,o),
(290,143,qs),
(269,143,o),
(244,165,o),
(244,186,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 2 1 0 4 0 74 4 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 2 3 117 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
35 34 20 35 18 34 36 38 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = aacute.ss02;
},
{
glyphname = abreve.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(432,820,l),
(432,789,o),
(394,758,o),
(347,758,qs),
(300,758,o),
(262,789,o),
(262,820,q),
(159,820,l),
(159,803,ls),
(159,704,o),
(264,600,o),
(347,600,qs),
(430,600,o),
(535,704,o),
(535,803,qs),
(535,820,l)
);
},
{
closed = 1;
nodes = (
(593,0,l),
(593,332,ls),
(593,403,o),
(524,512,o),
(397,572,o),
(313,572,qs),
(241,572,o),
(121,516,o),
(42,417,o),
(27,354,q),
(251,354,l),
(258,371,o),
(289,394,o),
(312,394,qs),
(340,394,o),
(371,358,o),
(371,323,q),
(274,323,ls),
(146,323,o),
(20,230,o),
(20,151,qs),
(20,75,o),
(121,-11,o),
(197,-11,qs),
(254,-11,o),
(352,36,o),
(372,76,q),
(372,0,l)
);
},
{
closed = 1;
nodes = (
(244,207,o),
(278,233,o),
(308,233,qs),
(370,233,l),
(370,221,ls),
(370,190,o),
(323,143,o),
(290,143,qs),
(269,143,o),
(244,165,o),
(244,186,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
16 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 10 9 11 9 10 11 131 0 7 5 6 6 7 117 3 1 1 2 1 137 0 11 0 5 7 11 5 107 0 6 0 8 0 6 8 110 0 0 0 2 1 0 2 109 0 4 4 21 77 0 9 9 21 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 10 9 11 9 10 11 131 0 7 5 6 5 7 6 131 3 1 1 2 1 137 0 11 0 5 7 11 5 107 0 6 0 8 0 6 8 110 0 0 0 2 1 0 2 109 0 4 4 21 77 0 9 9 21 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
52 50 47 45 43 42 35 18 34 36 35 18 34 19 34 12 7 31 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = abreve.ss02;
},
{
glyphname = acircumflex.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(512,746,l),
(347,821,l),
(181,746,l),
(181,602,l),
(347,680,l),
(512,602,l)
);
},
{
closed = 1;
nodes = (
(593,0,l),
(593,332,ls),
(593,403,o),
(524,512,o),
(397,572,o),
(313,572,qs),
(241,572,o),
(121,516,o),
(42,417,o),
(27,354,q),
(251,354,l),
(258,371,o),
(289,394,o),
(312,394,qs),
(340,394,o),
(371,358,o),
(371,323,q),
(274,323,ls),
(146,323,o),
(20,230,o),
(20,151,qs),
(20,75,o),
(121,-11,o),
(197,-11,qs),
(254,-11,o),
(352,36,o),
(372,76,q),
(372,0,l)
);
},
{
closed = 1;
nodes = (
(244,207,o),
(278,233,o),
(308,233,qs),
(370,233,l),
(370,221,ls),
(370,190,o),
(323,143,o),
(290,143,qs),
(269,143,o),
(244,165,o),
(244,186,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
5 4 3 2 1 5 0 74 6 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 2 3 117 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
35 34 20 35 18 34 36 40 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = acircumflex.ss02;
},
{
glyphname = adieresis.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,620,o),
(320,669,o),
(320,705,qs),
(320,743,o),
(271,792,o),
(233,792,qs),
(197,792,o),
(148,742,o),
(148,705,qs),
(148,669,o),
(197,620,o),
(233,620,qs)
);
},
{
closed = 1;
nodes = (
(495,620,o),
(545,669,o),
(545,705,qs),
(545,743,o),
(496,792,o),
(458,792,qs),
(422,792,o),
(373,742,o),
(373,705,qs),
(373,669,o),
(422,620,o),
(458,620,qs)
);
},
{
closed = 1;
nodes = (
(593,0,l),
(593,332,ls),
(593,403,o),
(524,512,o),
(397,572,o),
(313,572,qs),
(241,572,o),
(121,516,o),
(42,417,o),
(27,354,q),
(251,354,l),
(258,371,o),
(289,394,o),
(312,394,qs),
(340,394,o),
(371,358,o),
(371,323,q),
(274,323,ls),
(146,323,o),
(20,230,o),
(20,151,qs),
(20,75,o),
(121,-11,o),
(197,-11,qs),
(254,-11,o),
(352,36,o),
(372,76,q),
(372,0,l)
);
},
{
closed = 1;
nodes = (
(244,207,o),
(278,233,o),
(308,233,qs),
(370,233,l),
(370,221,ls),
(370,190,o),
(323,143,o),
(290,143,qs),
(269,143,o),
(244,165,o),
(244,186,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
24 1 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 10 9 11 9 10 11 131 0 7 5 6 6 7 117 0 11 0 5 7 11 5 107 0 6 0 8 1 6 8 110 13 3 12 3 1 2 1 0 1 0 101 0 4 4 21 77 0 9 9 21 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 10 9 11 9 10 11 131 0 7 5 6 5 7 6 131 0 11 0 5 7 11 5 107 0 6 0 8 1 6 8 110 13 3 12 3 1 2 1 0 1 0 101 0 4 4 21 77 0 9 9 21 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
12 12 0 0 60 58 55 53 51 50 46 44 41 40 38 36 34 32 28 26 12 23 12 22 18 16 0 11 0 10 36 14 7 23 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = adieresis.ss02;
},
{
glyphname = agrave.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,696,l),
(475,602,l),
(475,750,l),
(216,860,l)
);
},
{
closed = 1;
nodes = (
(593,0,l),
(593,332,ls),
(593,403,o),
(524,512,o),
(397,572,o),
(313,572,qs),
(241,572,o),
(121,516,o),
(42,417,o),
(27,354,q),
(251,354,l),
(258,371,o),
(289,394,o),
(312,394,qs),
(340,394,o),
(371,358,o),
(371,323,q),
(274,323,ls),
(146,323,o),
(20,230,o),
(20,151,qs),
(20,75,o),
(121,-11,o),
(197,-11,qs),
(254,-11,o),
(352,36,o),
(372,76,q),
(372,0,l)
);
},
{
closed = 1;
nodes = (
(244,207,o),
(278,233,o),
(308,233,qs),
(370,233,l),
(370,221,ls),
(370,190,o),
(323,143,o),
(290,143,qs),
(269,143,o),
(244,165,o),
(244,186,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 2 1 0 4 0 74 4 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 2 3 117 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
35 34 20 35 18 34 36 38 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = agrave.ss02;
},
{
glyphname = amacron.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,622,l),
(563,622,l),
(563,769,l),
(132,769,l)
);
},
{
closed = 1;
nodes = (
(593,0,l),
(593,332,ls),
(593,403,o),
(524,512,o),
(397,572,o),
(313,572,qs),
(241,572,o),
(121,516,o),
(42,417,o),
(27,354,q),
(251,354,l),
(258,371,o),
(289,394,o),
(312,394,qs),
(340,394,o),
(371,358,o),
(371,323,q),
(274,323,ls),
(146,323,o),
(20,230,o),
(20,151,qs),
(20,75,o),
(121,-11,o),
(197,-11,qs),
(254,-11,o),
(352,36,o),
(372,76,q),
(372,0,l)
);
},
{
closed = 1;
nodes = (
(244,207,o),
(278,233,o),
(308,233,qs),
(370,233,l),
(370,221,ls),
(370,190,o),
(323,143,o),
(290,143,qs),
(269,143,o),
(244,165,o),
(244,186,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 8 7 9 7 8 9 131 0 5 3 4 4 5 117 0 9 0 3 5 9 3 107 0 4 0 6 0 4 6 110 0 0 10 1 1 0 1 99 0 2 2 21 77 0 7 7 21 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 8 7 9 7 8 9 131 0 5 3 4 3 5 4 131 0 9 0 3 5 9 3 107 0 4 0 6 0 4 6 110 0 0 10 1 1 0 1 99 0 2 2 21 77 0 7 7 21 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
0 0 40 38 35 33 31 30 26 24 21 20 18 16 14 12 8 6 0 3 0 3 17 11 7 23 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = amacron.ss02;
},
{
glyphname = aogonek.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(545,-107,o),
(508,-107,qs),
(492,-107,o),
(474,-95,o),
(474,-86,qs),
(474,-71,o),
(509,-41,o),
(550,-21,qs),
(593,0,l),
(593,332,ls),
(593,403,o),
(524,512,o),
(397,572,o),
(313,572,qs),
(241,572,o),
(121,516,o),
(42,417,o),
(27,354,q),
(251,354,l),
(258,371,o),
(289,394,o),
(312,394,qs),
(340,394,o),
(371,358,o),
(371,323,q),
(274,323,ls),
(146,323,o),
(20,230,o),
(20,151,qs),
(20,75,o),
(121,-11,o),
(197,-11,qs),
(254,-11,o),
(352,36,o),
(372,76,q),
(372,2,l),
(343,-23,o),
(319,-73,o),
(319,-103,qs),
(319,-159,o),
(405,-223,o),
(480,-223,qs),
(540,-223,o),
(593,-207,q),
(593,-91,l)
);
},
{
closed = 1;
nodes = (
(244,207,o),
(278,233,o),
(308,233,qs),
(370,233,l),
(370,221,ls),
(370,190,o),
(323,143,o),
(290,143,qs),
(269,143,o),
(244,165,o),
(244,186,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
44 35 9 8 0 5 5 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 7 1 8 1 7 8 131 0 4 2 3 3 4 117 0 0 0 6 1 0 6 109 0 8 0 2 4 8 2 107 0 3 0 5 3 5 102 0 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 7 1 8 1 7 8 131 0 4 2 3 2 4 3 131 0 0 0 6 1 0 6 109 0 8 0 2 4 8 2 107 0 3 0 5 3 5 102 0 1 1 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
35 35 42 35 18 34 36 40 33 9 7 31 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = aogonek.ss02;
},
{
glyphname = aring.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,857,o),
(215,785,o),
(215,725,qs),
(215,665,o),
(291,593,o),
(347,593,qs),
(403,593,o),
(479,665,o),
(479,725,qs),
(479,785,o),
(403,857,o),
(347,857,qs)
);
},
{
closed = 1;
nodes = (
(327,678,o),
(301,704,o),
(301,725,qs),
(301,746,o),
(327,772,o),
(347,772,qs),
(367,772,o),
(393,746,o),
(393,725,qs),
(393,704,o),
(367,678,o),
(347,678,qs)
);
},
{
closed = 1;
nodes = (
(593,0,l),
(593,332,ls),
(593,403,o),
(524,512,o),
(397,572,o),
(313,572,qs),
(241,572,o),
(121,516,o),
(42,417,o),
(27,354,q),
(251,354,l),
(258,371,o),
(289,394,o),
(312,394,qs),
(340,394,o),
(371,358,o),
(371,323,q),
(274,323,ls),
(146,323,o),
(20,230,o),
(20,151,qs),
(20,75,o),
(121,-11,o),
(197,-11,qs),
(254,-11,o),
(352,36,o),
(372,76,q),
(372,0,l)
);
},
{
closed = 1;
nodes = (
(244,207,o),
(278,233,o),
(308,233,qs),
(370,233,l),
(370,221,ls),
(370,190,o),
(323,143,o),
(290,143,qs),
(269,143,o),
(244,165,o),
(244,186,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
24 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 10 9 11 9 10 11 131 0 7 5 6 6 7 117 0 11 0 5 7 11 5 107 0 6 0 8 0 6 8 110 0 0 13 1 3 2 0 3 109 0 2 12 1 1 2 1 101 0 4 4 21 77 0 9 9 21 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
0 10 9 11 9 10 11 131 0 7 5 6 5 7 6 131 0 11 0 5 7 11 5 107 0 6 0 8 0 6 8 110 0 0 13 1 3 2 0 3 109 0 2 12 1 1 2 1 101 0 4 4 21 77 0 9 9 21 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
12 12 0 0 60 58 55 53 51 50 46 44 41 40 38 36 34 32 28 26 12 23 12 22 18 16 0 11 0 10 36 14 7 23 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = aring.ss02;
},
{
glyphname = atilde.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(230,649,o),
(266,649,qs),
(278,649,o),
(306,638,o),
(320,631,qs),
(344,618,o),
(386,604,o),
(410,604,qs),
(474,604,o),
(555,686,o),
(571,779,q),
(462,779,l),
(455,732,o),
(418,732,qs),
(406,732,o),
(383,741,o),
(364,751,qs),
(340,764,o),
(298,778,o),
(274,778,qs),
(210,778,o),
(129,695,o),
(113,602,q),
(221,602,l)
);
},
{
closed = 1;
nodes = (
(593,0,l),
(593,332,ls),
(593,403,o),
(524,512,o),
(397,572,o),
(313,572,qs),
(241,572,o),
(121,516,o),
(42,417,o),
(27,354,q),
(251,354,l),
(258,371,o),
(289,394,o),
(312,394,qs),
(340,394,o),
(371,358,o),
(371,323,q),
(274,323,ls),
(146,323,o),
(20,230,o),
(20,151,qs),
(20,75,o),
(121,-11,o),
(197,-11,qs),
(254,-11,o),
(352,36,o),
(372,76,q),
(372,0,l)
);
},
{
closed = 1;
nodes = (
(244,207,o),
(278,233,o),
(308,233,qs),
(370,233,l),
(370,221,ls),
(370,190,o),
(323,143,o),
(290,143,qs),
(269,143,o),
(244,165,o),
(244,186,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
24 1 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 12 11 13 11 12 13 131 0 9 7 8 8 9 117 0 13 0 7 9 13 7 107 0 8 0 10 3 8 10 110 14 5 2 3 0 1 0 3 1 109 0 4 2 1 0 4 0 102 0 6 6 21 77 0 11 11 21 11 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
0 12 11 13 11 12 13 131 0 9 7 8 7 9 8 131 0 13 0 7 9 13 7 107 0 8 0 10 3 8 10 110 14 5 2 3 0 1 0 3 1 109 0 4 2 1 0 4 0 102 0 6 6 21 77 0 11 11 21 11 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
0 0 60 58 55 53 51 50 46 44 41 40 38 36 34 32 28 26 0 23 0 23 36 34 17 36 34 15 7 27 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = atilde.ss02;
},
{
glyphname = ampersand.ss03;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,473,o),
(167,426,q),
(103,408,o),
(25,297,o),
(25,218,qs),
(25,156,o),
(79,54,o),
(187,-7,o),
(264,-7,qs),
(371,-7,o),
(439,56,q),
(479,0,l),
(700,0,l),
(366,468,ls),
(354,486,o),
(345,504,o),
(345,512,qs),
(345,521,o),
(356,532,o),
(365,532,qs),
(377,532,o),
(389,519,o),
(391,505,qs),
(394,489,o),
(394,464,q),
(600,464,l),
(603,531,o),
(584,584,qs),
(533,715,o),
(361,715,qs),
(291,715,o),
(190,665,o),
(138,584,o),
(138,537,qs)
);
},
{
closed = 1;
nodes = (
(214,245,o),
(243,270,o),
(266,270,qs),
(289,270,o),
(318,245,o),
(318,224,qs),
(318,202,o),
(289,176,o),
(266,176,qs),
(243,176,o),
(214,202,o),
(214,224,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
31 22 16 3 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 6 5 1 5 6 1 131 0 1 2 2 1 115 0 2 0 0 2 0 102 0 3 3 21 77 0 5 5 4 97 0 4 4 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 6 5 1 5 6 1 131 0 1 2 5 1 2 129 0 2 0 0 2 0 102 0 3 3 21 77 0 5 5 4 97 0 4 4 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
36 42 34 22 36 19 34 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 700;
}
);
note = ampersand.ss03;
},
{
glyphname = two.ss04;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(28,0,l),
(545,0,l),
(545,179,l),
(316,179,l),
(405,266,ls),
(458,317,o),
(514,392,o),
(538,464,o),
(538,510,qs),
(538,566,o),
(489,661,o),
(379,721,o),
(293,721,qs),
(219,721,o),
(98,666,o),
(26,550,o),
(25,462,q),
(240,462,l),
(241,499,o),
(262,535,o),
(279,535,qs),
(312,535,o),
(312,494,qs),
(312,459,o),
(265,390,o),
(197,324,qs),
(28,160,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
26 1 2 73 0 1 3 0 3 1 0 131 0 0 0 2 0 2 101 0 3 3 4 95 0 4 4 21 3 78 17 24 35 18 36 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = two.ss04;
},
{
glyphname = three.ss04;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(382,-7,o),
(497,49,o),
(561,150,o),
(561,215,qs),
(561,299,o),
(470,404,o),
(390,420,q),
(538,551,l),
(538,717,l),
(74,717,l),
(74,527,l),
(270,527,l),
(173,441,l),
(173,302,l),
(268,302,ls),
(308,302,o),
(355,263,o),
(355,229,qs),
(355,205,o),
(329,176,o),
(307,176,qs),
(276,176,o),
(251,213,o),
(253,249,q),
(37,249,l),
(39,117,o),
(184,-7,o),
(307,-7,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
20 19 14 3 4 73 0 0 1 2 1 0 2 131 0 2 3 1 2 3 129 0 3 0 4 3 4 99 0 1 1 5 97 6 1 5 5 21 1 78 0 0 0 27 0 26 17 18 36 34 18 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = three.ss04;
},
{
glyphname = six.ss04;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(572,312,o),
(519,413,o),
(427,463,o),
(371,463,qs),
(360,463,o),
(342,461,q),
(518,717,l),
(275,717,l),
(112,468,ls),
(71,405,o),
(35,297,o),
(35,245,qs),
(35,170,o),
(103,56,o),
(225,-7,o),
(305,-7,qs),
(379,-7,o),
(501,52,o),
(572,163,o),
(572,240,qs)
);
},
{
closed = 1;
nodes = (
(331,295,o),
(364,263,o),
(364,237,qs),
(364,211,o),
(331,179,o),
(305,179,qs),
(279,179,o),
(246,211,o),
(246,237,qs),
(246,263,o),
(279,295,o),
(305,295,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
13 1 1 73 5 1 4 3 2 3 4 2 131 0 2 1 3 2 1 129 0 1 1 132 0 3 3 0 97 0 0 0 21 3 78 20 20 20 31 20 30 40 34 23 34 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = six.ss04;
},
{
glyphname = nine.ss04;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(19,402,o),
(74,302,o),
(167,252,o),
(223,252,qs),
(233,252,o),
(253,254,q),
(76,-6,l),
(321,-6,l),
(484,247,ls),
(525,310,o),
(561,418,o),
(561,470,qs),
(561,545,o),
(492,659,o),
(369,722,o),
(289,722,qs),
(215,722,o),
(91,662,o),
(19,550,o),
(19,473,qs)
);
},
{
closed = 1;
nodes = (
(315,536,o),
(348,504,o),
(348,478,qs),
(348,452,o),
(315,420,o),
(289,420,qs),
(263,420,o),
(230,452,o),
(230,478,qs),
(230,504,o),
(263,536,o),
(289,536,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
13 1 0 73 0 2 1 3 1 2 3 131 0 3 4 1 3 4 129 5 1 4 0 0 4 0 101 0 1 1 21 1 78 20 20 20 31 20 30 40 34 23 34 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = nine.ss04;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Black;
properties = (
{
key = postscriptFullName;
value = "Amoeba Sans-Black";
},
{
key = postscriptFontName;
value = "AmoebaSans-Black";
}
);
weightClass = 900;
widthClass = 6;
}
);
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2020 The Poppins Project Authors (https://github.com/itfoundry/Poppins)";
}
);
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Indian Type Foundry & Digital Amoeba";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Ninad Kale (Devanagari), Jonny Pinhorn (Latin), M Vidiantara Saputra";
}
);
},
{
key = licenseURL;
value = "http://scripts.sil.org/OFL";
},
{
key = sampleTexts;
values = (
{
language = ENG;
value = ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789;
}
);
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = "https://indiantypefoundry.com";
},
{
key = postscriptFontName;
value = "Amoeba Sans - Black";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 3;
versionMinor = 200;
}
