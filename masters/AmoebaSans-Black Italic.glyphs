{
.appVersion = "3134";
.formatVersion = 3;
DisplayStrings = (
"Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm Nn Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz
0123456789"
);
customParameters = (
{
name = vendorID;
value = ITFO;
},
{
name = panose;
value = (
0,
0,
10,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
15
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1254",
"1257",
"bit 29"
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
.null,
CR,
space,
dvR,
dvKx,
dvGx,
dvJx,
uni20A8,
uni20B9,
uni200C,
uni200D,
uni25CC,
dvEyelash,
dvRashtrasign,
dvKx_RA,
dvGx_RA,
dvJx_RA,
dvKx_R,
dvGx_R,
dvJx_R,
dvKx_KxA,
dvKx_TA,
dvKx_PHA,
dvKx_PHxA,
dvKx_BA,
dvKx_MA,
dvJx_JxA,
dvJx_YA,
dvEyelash_YA,
dvEyelash_HA,
dvmII.aLong,
dvmII_Anusvara,
dvmII_Reph,
dvmII_Reph_Anusvara,
dvmII_Anusvara.aLong,
dvmII_Reph.aLong,
dvmII_Reph_Anusvara.aLong,
dvmE_Anusvara,
dvmE_Reph,
dvmE_Reph_Anusvara,
dvmAI_Anusvara,
dvmAI_Reph,
dvmAI_Reph_Anusvara,
dvmO_Anusvara,
dvmO_Reph,
dvmO_Reph_Anusvara,
dvmAU_Anusvara,
dvmAU_Reph,
dvmAU_Reph_Anusvara,
dvmEcandra_Anusvara,
dvmOcandra_Anusvara,
dvRA_mU,
dvRA_mUU,
dvmI.a01,
dvmI.a02,
dvmI.a03,
dvmI.a04,
dvmI.a05,
dvmI.a06,
dvmI.a07,
dvmI.a08,
dvmI.a09,
dvmI.a10,
dvmI.a11,
dvmI.a12,
dvmI.a13,
dvmI.a14,
dvmI.a15,
dvmI.a16,
dvmI.a17,
dvmI.a18,
dvmI.a19,
dvmI.a20,
dvmI.a21,
dvmI.a22,
dvmI.a23,
dvmI.a24,
exclam,
quotedbl,
numbersign,
dollar,
percent,
ampersand,
quotesingle,
parenleft,
parenright,
asterisk,
plus,
comma,
hyphen,
period,
slash,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
colon,
semicolon,
less,
equal,
greater,
question,
at,
A,
B,
C,
D,
E,
F,
G,
H,
I,
J,
K,
L,
M,
N,
O,
P,
Q,
R,
S,
T,
U,
V,
W,
X,
Y,
Z,
bracketleft,
backslash,
bracketright,
asciicircum,
underscore,
grave,
a,
b,
c,
d,
e,
f,
g,
h,
i,
j,
k,
l,
m,
n,
o,
p,
q,
r,
s,
t,
u,
v,
w,
x,
y,
z,
braceleft,
bar,
braceright,
asciitilde,
uni00A0,
exclamdown,
cent,
sterling,
currency,
yen,
brokenbar,
section,
dieresis,
copyright,
ordfeminine,
guillemotleft,
logicalnot,
uni00AD,
registered,
macron,
degree,
plusminus,
uni00B2,
uni00B3,
acute,
uni00B5,
paragraph,
periodcentered,
cedilla,
uni00B9,
ordmasculine,
guillemotright,
onequarter,
onehalf,
threequarters,
questiondown,
Agrave,
Aacute,
Acircumflex,
Atilde,
Adieresis,
Aring,
AE,
Ccedilla,
Egrave,
Eacute,
Ecircumflex,
Edieresis,
Igrave,
Iacute,
Icircumflex,
Idieresis,
Eth,
Ntilde,
Ograve,
Oacute,
Ocircumflex,
Otilde,
Odieresis,
multiply,
Oslash,
Ugrave,
Uacute,
Ucircumflex,
Udieresis,
Yacute,
Thorn,
germandbls,
agrave,
aacute,
acircumflex,
atilde,
adieresis,
aring,
ae,
ccedilla,
egrave,
eacute,
ecircumflex,
edieresis,
igrave,
iacute,
icircumflex,
idieresis,
eth,
ntilde,
ograve,
oacute,
ocircumflex,
otilde,
odieresis,
divide,
oslash,
ugrave,
uacute,
ucircumflex,
udieresis,
yacute,
thorn,
ydieresis,
Amacron,
amacron,
Abreve,
abreve,
Aogonek,
aogonek,
Cacute,
cacute,
Cdotaccent,
cdotaccent,
Ccaron,
ccaron,
Dcaron,
dcaron,
Dcroat,
dcroat,
Emacron,
emacron,
Ebreve,
ebreve,
Edotaccent,
edotaccent,
Eogonek,
eogonek,
Ecaron,
ecaron,
Gbreve,
gbreve,
Gdotaccent,
gdotaccent,
uni0122,
uni0123,
Itilde,
itilde,
Imacron,
imacron,
uni012C,
uni012D,
Iogonek,
iogonek,
Idotaccent,
dotlessi,
uni0136,
uni0137,
Lacute,
lacute,
uni013B,
uni013C,
Lcaron,
lcaron,
Ldot,
ldot,
Lslash,
lslash,
Nacute,
nacute,
uni0145,
uni0146,
Ncaron,
ncaron,
Omacron,
omacron,
uni014E,
uni014F,
Ohungarumlaut,
ohungarumlaut,
OE,
oe,
Racute,
racute,
uni0156,
uni0157,
Rcaron,
rcaron,
Sacute,
sacute,
uni015E,
uni015F,
Scaron,
scaron,
uni0162,
uni0163,
Tcaron,
tcaron,
Utilde,
utilde,
Umacron,
umacron,
Ubreve,
ubreve,
Uring,
uring,
Uhungarumlaut,
uhungarumlaut,
Uogonek,
uogonek,
Wcircumflex,
wcircumflex,
Ycircumflex,
ycircumflex,
Ydieresis,
Zacute,
zacute,
Zdotaccent,
zdotaccent,
Zcaron,
zcaron,
uni018F,
florin,
uni01FC,
uni01FD,
uni0218,
uni0219,
uni021A,
uni021B,
uni0259,
uni02BC,
circumflex,
caron,
uni02C9,
breve,
dotaccent,
ring,
ogonek,
tilde,
hungarumlaut,
Wgrave,
wgrave,
Wacute,
wacute,
Wdieresis,
wdieresis,
uni1EBC,
uni1EBD,
Ygrave,
ygrave,
uni1EF8,
uni1EF9,
endash,
emdash,
quoteleft,
quoteright,
quotesinglbase,
quotedblleft,
quotedblright,
quotedblbase,
dagger,
daggerdbl,
bullet,
ellipsis,
perthousand,
guilsinglleft,
guilsinglright,
fraction,
Euro,
uni20BA,
uni20BD,
uni2113,
trademark,
uni2126,
estimated,
partialdiff,
uni2206,
product,
summation,
minus,
uni2215,
uni2219,
radical,
infinity,
integral,
approxequal,
notequal,
lessequal,
greaterequal,
lozenge,
fi,
fl,
exclam.ss01,
comma.ss01,
period.ss01,
colon.ss01,
semicolon.ss01,
question.ss01,
exclamdown.ss01,
periodcentered.ss01,
questiondown.ss01,
divide.ss01,
uni02BC.ss01,
quoteleft.ss01,
quoteright.ss01,
quotedblleft.ss01,
quotedblright.ss01,
ellipsis.ss01,
a.ss02,
aacute.ss02,
abreve.ss02,
acircumflex.ss02,
adieresis.ss02,
agrave.ss02,
amacron.ss02,
aogonek.ss02,
aring.ss02,
atilde.ss02,
ampersand.ss03,
two.ss04,
three.ss04,
six.ss04,
nine.ss04
);
}
);
date = "2017-12-22 01:47:54 +0000";
familyName = "Amoeba Sans";
featurePrefixes = (
{
code = "lookup SUB_0 {
	sub L periodcentered by Ldot;
	sub l periodcentered by ldot;
} SUB_0;
lookup SUB_1 {
	sub A by ordfeminine;
	sub O by ordmasculine;
	sub a by ordfeminine;
	sub o by ordmasculine;
} SUB_1;
";
name = Prefix;
}
);
features = (
{
code = "script DFLT;
language dflt;
lookup SUB_2 {
	sub exclam by exclam.ss01;
	sub comma by comma.ss01;
	sub period by period.ss01;
	sub colon by colon.ss01;
	sub semicolon by semicolon.ss01;
	sub question by question.ss01;
	sub exclamdown by exclamdown.ss01;
	sub periodcentered by periodcentered.ss01;
	sub questiondown by questiondown.ss01;
	sub divide by divide.ss01;
	sub quoteleft by quoteleft.ss01;
	sub quoteright by quoteright.ss01;
	sub quotedblleft by quotedblleft.ss01;
	sub quotedblright by quotedblright.ss01;
	sub ellipsis by ellipsis.ss01;
} SUB_2;
script dev2;
language dflt;
lookup SUB_2;
script deva;
language dflt;
lookup SUB_2;
";
tag = ss01;
},
{
code = "script DFLT;
language dflt;
lookup SUB_3 {
	sub a by a.ss02;
	sub agrave by agrave.ss02;
	sub aacute by aacute.ss02;
	sub acircumflex by acircumflex.ss02;
	sub atilde by atilde.ss02;
	sub adieresis by adieresis.ss02;
	sub aring by aring.ss02;
	sub amacron by amacron.ss02;
	sub abreve by abreve.ss02;
	sub aogonek by aogonek.ss02;
} SUB_3;
script dev2;
language dflt;
lookup SUB_3;
script deva;
language dflt;
lookup SUB_3;
";
tag = ss02;
},
{
code = "script DFLT;
language dflt;
lookup SUB_4 {
	sub ampersand by ampersand.ss03;
} SUB_4;
script dev2;
language dflt;
lookup SUB_4;
script deva;
language dflt;
lookup SUB_4;
";
tag = ss03;
},
{
code = "script DFLT;
language dflt;
lookup SUB_5 {
	sub two by two.ss04;
	sub three by three.ss04;
	sub six by six.ss04;
	sub nine by nine.ss04;
} SUB_5;
script dev2;
language dflt;
lookup SUB_5;
script deva;
language dflt;
lookup SUB_5;
";
tag = ss04;
},
{
code = "script DFLT;
language dflt;
lookup SUB_6 {
	sub fi by f i;
	sub fl by f l;
} SUB_6;
script dev2;
language dflt;
lookup SUB_6;
script deva;
language dflt;
lookup SUB_6;
script latn;
language dflt;
lookup SUB_6;
language CAT;
lookup SUB_6;
";
tag = ccmp;
},
{
code = "script latn;
language CAT;
lookup SUB_7 {
	sub L' lookup SUB_0 periodcentered' L;
	sub l' lookup SUB_0 periodcentered' l;
} SUB_7;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_8 {
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
} SUB_8;
script dev2;
language dflt;
lookup SUB_8;
script deva;
language dflt;
lookup SUB_8;
script latn;
language dflt;
lookup SUB_8;
language CAT;
lookup SUB_8;
";
tag = sups;
},
{
code = "script DFLT;
language dflt;
lookup SUB_9 {
	sub one slash two by onehalf;
	sub one slash four by onequarter;
	sub three slash four by threequarters;
} SUB_9;
script dev2;
language dflt;
lookup SUB_9;
script deva;
language dflt;
lookup SUB_9;
script latn;
language dflt;
lookup SUB_9;
language CAT;
lookup SUB_9;
";
tag = frac;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	@SUB_10_0_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_10_0_BT_0 [A a]' lookup SUB_1;
	@SUB_10_1_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_10_1_BT_0 [O o]' lookup SUB_1;
} SUB_10;
script dev2;
language dflt;
lookup SUB_10;
script deva;
language dflt;
lookup SUB_10;
script latn;
language dflt;
lookup SUB_10;
language CAT;
lookup SUB_10;
";
tag = ordn;
},
{
code = "script DFLT;
language dflt;
lookup SUB_11 {
	sub f i by fi;
	sub f l by fl;
} SUB_11;
script dev2;
language dflt;
lookup SUB_11;
script deva;
language dflt;
lookup SUB_11;
script latn;
language dflt;
lookup SUB_11;
language CAT;
lookup SUB_11;
";
tag = liga;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 1050;
},
{
name = typoDescender;
value = -350;
},
{
name = typoLineGap;
value = 100;
},
{
name = winAscent;
value = 1135;
},
{
name = winDescent;
value = 627;
},
{
name = hheaAscender;
value = 1050;
},
{
name = hheaDescender;
value = -350;
},
{
name = strikeoutPosition;
value = 338;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 5 values pushed */\0120 37 0 3 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01242 4 26 8 18 4 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01246 2 34 6 22 2 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 10 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\0122752 1728 1216 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 13 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\01264 64 64 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01244 2 28 6 20 2 3 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    24,\012    24,\012    24,\012    24,\012    540,\012    \"-9\",\012    540,\012    \"-9\",\012    225,\012    225,\012    192,\012    192,\012    708,\012    0,\012    740,\012    564,\012    0,\012    \"-270\",\012    720,\012    \"-7\",\012    829,\012    571,\012    \"-7\",\012    \"-277\",\012    24,\012    24,\012    24,\012    24,\012    717,\012    352,\012    717,\012    349\012)";
}
);
id = m01;
metricValues = (
{
pos = 1050;
},
{
pos = 713;
},
{
pos = 564;
},
{
},
{
pos = -350;
},
{
}
);
name = "Black Italic";
userData = {
GSCornerRadius = 45;
GSOffsetHorizontal = 15;
GSOffsetVertical = 10;
};
}
);
glyphs = (
{
glyphname = .notdef;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-62,0,l),
(438,0,l),
(562,700,l),
(62,700,l)
);
},
{
closed = 1;
nodes = (
(95,605,l),
(220,350,l),
(5,95,l)
);
},
{
closed = 1;
nodes = (
(242,305,l),
(367,50,l),
(27,50,l)
);
},
{
closed = 1;
nodes = (
(473,650,l),
(258,395,l),
(133,650,l)
);
},
{
closed = 1;
nodes = (
(495,605,l),
(405,95,l),
(280,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
15 14 13 8 6 5 6 2 3 1 76 4 1 1 0 3 2 1 3 103 5 1 2 0 0 2 87 5 1 2 2 0 95 0 0 2 0 79 7 7 0 0 12 11 7 9 7 9 0 3 0 3 17 6 6 23 
CALL[ ]	/* CallFunction */";
};
width = 500;
}
);
note = ".notdef";
},
{
glyphname = .null;
layers = (
{
layerId = m01;
width = 0;
}
);
note = ".null";
unicode = 0;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 170;
}
);
note = CR;
unicode = 13;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 170;
}
);
note = space;
unicode = 32;
},
{
glyphname = dvR;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(208,-291,l),
(415,-291,l),
(318,-53,l),
(116,-53,l)
);
},
{
closed = 1;
nodes = (
(50,571,l),
(333,571,l),
(329,545,ls),
(319,493,o),
(258,438,o),
(186,438,qs),
(88,438,l),
(47,209,ls),
(36,147,o),
(73,48,o),
(168,-9,o),
(242,-9,qs),
(345,-9,o),
(480,107,o),
(498,206,qs),
(501,232,l),
(306,232,l),
(301,199,ls),
(298,184,o),
(281,164,o),
(268,164,qs),
(241,164,o),
(248,199,qs),
(261,276,l),
(387,283,o),
(512,427,o),
(533,545,qs),
(537,571,l),
(600,571,l),
(630,740,l),
(80,740,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 7 2 3 2 7 3 128 0 3 5 2 3 5 126 0 5 4 4 5 112 11 1 9 8 1 2 7 9 2 103 0 4 0 6 1 4 6 106 10 1 1 0 0 1 87 10 1 1 1 0 95 0 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 7 2 3 2 7 3 128 0 3 5 2 3 5 126 0 5 4 2 5 4 126 11 1 9 8 1 2 7 9 2 103 0 4 0 6 1 4 6 106 10 1 1 0 0 1 87 10 1 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
4 4 0 0 4 34 4 34 33 32 29 27 23 21 18 17 14 12 10 9 6 5 0 3 0 3 17 12 6 23 
CALL[ ]	/* CallFunction */";
};
width = 528;
}
);
note = dvR;
},
{
glyphname = dvKx;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(535,0,l),
(582,267,ls),
(588,302,o),
(626,340,o),
(654,340,qs),
(683,340,o),
(705,304,o),
(701,278,q),
(908,278,l),
(919,344,o),
(893,450,o),
(815,513,o),
(751,513,qs),
(669,513,o),
(616,461,q),
(635,571,l),
(959,571,l),
(989,740,l),
(74,740,l),
(44,571,l),
(439,571,l),
(420,461,l),
(385,513,o),
(297,513,qs),
(197,513,o),
(64,384,o),
(46,278,qs),
(34,210,o),
(63,104,o),
(143,43,o),
(206,43,qs),
(299,43,o),
(356,100,q),
(339,0,l)
);
},
{
closed = 1;
nodes = (
(180,-227,o),
(257,-162,o),
(265,-115,qs),
(274,-67,o),
(220,0,o),
(172,0,qs),
(125,0,o),
(47,-67,o),
(38,-115,qs),
(30,-162,o),
(85,-227,o),
(132,-227,qs)
);
},
{
closed = 1;
nodes = (
(278,214,o),
(248,249,o),
(253,277,qs),
(258,305,o),
(302,341,o),
(332,341,qs),
(362,341,o),
(392,307,o),
(388,279,qs),
(383,251,o),
(338,214,o),
(309,214,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
18 11 2 7 1 0 1 0 12 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 6 7 12 7 6 114 0 8 0 9 0 8 9 128 0 3 4 1 2 1 3 2 103 5 1 1 11 1 7 6 1 7 105 14 1 12 0 0 8 12 0 105 0 9 10 10 9 89 0 9 9 10 97 13 1 10 9 10 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
0 6 7 12 7 6 12 128 0 8 0 9 0 8 9 128 0 3 4 1 2 1 3 2 103 5 1 1 11 1 7 6 1 7 105 14 1 12 0 0 8 12 0 105 0 9 10 10 9 89 0 9 9 10 97 13 1 10 9 10 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
46 46 34 34 46 57 46 56 52 50 34 45 34 44 40 38 19 34 19 34 17 17 18 37 33 15 6 31 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = dvKx;
},
{
glyphname = dvGx;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(36,571,l),
(339,571,l),
(303,364,ls),
(298,339,o),
(280,308,o),
(261,308,qs),
(242,308,o),
(232,337,o),
(237,364,qs),
(242,396,l),
(45,396,l),
(43,385,o),
(39,363,qs),
(19,250,o),
(123,135,o),
(236,135,qs),
(351,135,o),
(489,265,o),
(508,373,qs),
(543,571,l),
(646,571,l),
(676,740,l),
(66,740,l)
);
},
{
closed = 1;
nodes = (
(236,-135,o),
(313,-70,o),
(322,-23,qs),
(330,25,o),
(276,92,o),
(228,92,qs),
(181,92,o),
(103,25,o),
(95,-23,qs),
(86,-70,o),
(141,-135,o),
(188,-135,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
0 2 0 3 0 2 3 128 8 1 5 4 1 0 2 5 0 103 0 3 0 1 6 3 1 105 0 6 7 7 6 89 0 6 6 7 97 9 1 7 6 7 81 23 23 0 0 23 34 23 33 29 27 0 22 0 22 19 35 20 35 17 10 6 27 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = dvGx;
},
{
glyphname = dvJx;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,80,o),
(448,138,o),
(526,241,o),
(541,308,q),
(718,308,l),
(748,481,l),
(372,481,l),
(345,325,ls),
(333,258,o),
(287,258,qs),
(239,258,o),
(251,325,qs),
(278,481,l),
(73,481,l),
(45,319,ls),
(25,210,o),
(133,80,o),
(256,80,qs)
);
},
{
closed = 1;
nodes = (
(41,571,l),
(764,571,l),
(794,740,l),
(71,740,l)
);
},
{
closed = 1;
nodes = (
(255,-189,o),
(333,-124,o),
(341,-77,qs),
(349,-29,o),
(295,38,o),
(247,38,qs),
(200,38,o),
(122,-29,o),
(114,-77,qs),
(106,-124,o),
(160,-189,o),
(207,-189,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
10 1 6 0 5 0 6 5 103 2 1 0 0 3 1 0 3 103 0 1 9 1 4 7 1 4 105 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81 22 22 18 18 0 0 22 33 22 32 28 26 18 21 18 21 20 19 0 17 0 16 17 18 34 19 12 6 26 
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = dvJx;
},
{
glyphname = uni20A8;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(438,431,o),
(401,402,o),
(369,402,qs),
(281,402,l),
(302,522,l),
(390,522,ls),
(421,522,o),
(449,490,o),
(444,462,qs)
);
},
{
closed = 1;
nodes = (
(-12,0,l),
(210,0,l),
(255,254,l),
(344,0,l),
(588,0,l),
(482,271,l),
(560,295,o),
(659,405,o),
(671,476,qs),
(683,542,o),
(640,647,o),
(529,708,o),
(443,708,qs),
(113,708,l)
);
},
{
closed = 1;
nodes = (
(671,331,o),
(729,260,o),
(819,230,o),
(886,219,qs),
(938,209,o),
(980,194,o),
(978,178,qs),
(974,156,o),
(935,156,qs),
(868,156,o),
(870,195,q),
(653,195,l),
(651,97,o),
(785,-7,o),
(909,-7,qs),
(983,-7,o),
(1098,40,o),
(1168,122,o),
(1177,173,qs),
(1187,233,o),
(1127,304,o),
(1034,334,o),
(966,346,qs),
(915,356,o),
(873,370,o),
(876,385,qs),
(880,407,o),
(924,407,qs),
(985,407,o),
(988,369,q),
(1205,369,l),
(1203,460,o),
(1079,571,o),
(956,571,qs),
(879,571,o),
(760,523,o),
(690,442,o),
(681,393,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 16 2 9 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 1 7 6 7 1 6 128 0 6 9 7 6 112 0 9 10 10 9 112 0 0 0 2 95 11 1 2 2 28 77 0 7 7 5 97 0 5 5 37 77 0 10 10 3 96 8 4 2 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 1 7 6 7 1 6 128 0 6 9 7 6 9 126 0 9 10 7 9 10 126 0 0 0 2 95 11 1 2 2 28 77 0 7 7 5 97 0 5 5 37 77 0 10 10 3 96 8 4 2 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
0 1 7 6 7 1 6 128 0 6 9 7 6 9 126 0 9 10 7 9 10 126 0 0 0 2 95 11 1 2 2 28 77 0 7 7 5 97 0 5 5 37 77 4 1 3 3 29 77 0 10 10 8 98 0 8 8 35 8 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
10 9 52 50 49 48 46 44 33 31 30 29 27 25 21 20 18 17 9 22 10 22 33 33 12 8 24 
CALL[ ]	/* CallFunction */";
};
width = 1229;
}
);
note = uni20A8;
unicode = 8360;
},
{
glyphname = uni20B9;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(68,563,l),
(320,563,l),
(314,530,l),
(62,530,l),
(40,406,l),
(286,406,l),
(275,387,o),
(224,370,o),
(130,365,o),
(33,365,q),
(11,242,ls),
(-12,111,o),
(96,-10,o),
(218,-10,qs),
(326,-10,o),
(461,110,o),
(485,211,q),
(280,211,l),
(274,180,o),
(256,155,o),
(237,155,qs),
(218,155,o),
(207,180,o),
(211,204,qs),
(215,223,l),
(322,223,o),
(464,325,o),
(494,406,q),
(557,406,l),
(579,530,l),
(521,530,l),
(527,563,l),
(585,563,l),
(610,708,l),
(93,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 5 4 3 4 5 117 0 3 7 4 3 7 129 0 7 2 4 7 2 129 10 1 0 12 1 11 0 11 99 0 4 4 6 97 0 6 6 21 77 8 1 2 2 1 95 9 1 1 1 20 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 5 4 3 4 5 3 131 0 3 7 4 3 7 129 0 7 2 4 7 2 129 10 1 0 12 1 11 0 11 99 0 4 4 6 97 0 6 6 21 77 8 1 2 2 1 95 9 1 1 1 20 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 5 4 3 4 5 3 131 0 3 7 4 3 7 129 0 7 2 4 7 2 129 8 1 2 9 1 1 0 2 1 107 10 1 0 12 1 11 0 11 99 0 4 4 6 97 0 6 6 21 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 34 0 34 33 32 31 30 18 35 34 18 35 18 17 17 17 13 7 31 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = uni20B9;
unicode = 8377;
},
{
glyphname = uni200C;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-68,-230,l),
(116,811,l),
(69,811,l),
(-115,-230,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni200C;
unicode = 8204;
},
{
glyphname = uni200D;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,593,l),
(102,688,l),
(215,784,l),
(188,816,l),
(75,721,l),
(-3,816,l),
(-42,783,l),
(37,688,l),
(-73,595,l),
(-46,562,l),
(36,635,l),
(-116,-230,l),
(-69,-230,l),
(83,635,l),
(142,560,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
14 13 12 11 10 9 8 7 6 5 4 3 0 13 0 74 0 0 0 118 17 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni200D;
unicode = 8205;
},
{
glyphname = uni25CC;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(586,428,o),
(566,451,o),
(547,451,qs),
(528,451,o),
(500,428,o),
(496,409,qs),
(493,390,o),
(513,367,o),
(532,367,qs),
(551,367,o),
(579,390,o),
(582,409,qs)
);
},
{
closed = 1;
nodes = (
(159,142,o),
(139,165,o),
(120,165,qs),
(101,165,o),
(73,142,o),
(70,123,qs),
(67,104,o),
(86,81,o),
(105,81,qs),
(124,81,o),
(153,104,o),
(156,123,qs)
);
},
{
closed = 1;
nodes = (
(244,66,o),
(224,89,o),
(205,89,qs),
(186,89,o),
(158,66,o),
(154,47,qs),
(151,28,o),
(171,5,o),
(190,5,qs),
(209,5,o),
(237,28,o),
(240,47,qs)
);
},
{
closed = 1;
nodes = (
(134,255,o),
(114,278,o),
(95,278,qs),
(76,278,o),
(48,255,o),
(45,236,qs),
(41,217,o),
(61,194,o),
(80,194,qs),
(99,194,o),
(127,217,o),
(131,236,qs)
);
},
{
closed = 1;
nodes = (
(365,52,o),
(345,75,o),
(326,75,qs),
(307,75,o),
(279,52,o),
(276,33,qs),
(273,14,o),
(293,-9,o),
(312,-9,qs),
(331,-9,o),
(359,14,o),
(362,33,qs)
);
},
{
closed = 1;
nodes = (
(170,376,o),
(151,399,o),
(132,399,qs),
(113,399,o),
(84,376,o),
(81,357,qs),
(78,338,o),
(98,315,o),
(117,315,qs),
(136,315,o),
(164,338,o),
(167,357,qs)
);
},
{
closed = 1;
nodes = (
(488,98,o),
(469,121,o),
(450,121,qs),
(431,121,o),
(402,98,o),
(399,79,qs),
(396,60,o),
(416,37,o),
(435,37,qs),
(454,37,o),
(482,60,o),
(485,79,qs)
);
},
{
closed = 1;
nodes = (
(264,475,o),
(244,498,o),
(225,498,qs),
(206,498,o),
(178,475,o),
(175,456,qs),
(171,437,o),
(191,414,o),
(210,414,qs),
(229,414,o),
(257,437,o),
(261,456,qs)
);
},
{
closed = 1;
nodes = (
(578,194,o),
(558,217,o),
(539,217,qs),
(520,217,o),
(492,194,o),
(489,175,qs),
(486,156,o),
(506,133,o),
(525,133,qs),
(544,133,o),
(572,156,o),
(575,175,qs)
);
},
{
closed = 1;
nodes = (
(388,517,o),
(368,540,o),
(349,540,qs),
(330,540,o),
(302,517,o),
(299,498,qs),
(296,479,o),
(316,456,o),
(335,456,qs),
(354,456,o),
(382,479,o),
(385,498,qs)
);
},
{
closed = 1;
nodes = (
(610,314,o),
(590,337,o),
(571,337,qs),
(552,337,o),
(524,314,o),
(520,295,qs),
(517,276,o),
(537,253,o),
(556,253,qs),
(575,253,o),
(603,276,o),
(606,295,qs)
);
},
{
closed = 1;
nodes = (
(507,502,o),
(487,525,o),
(468,525,qs),
(449,525,o),
(421,502,o),
(417,483,qs),
(414,464,o),
(434,441,o),
(453,441,qs),
(472,441,o),
(500,464,o),
(503,483,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 146 values pushed */
0 19 0 18 1 19 18 105 0 23 0 22 14 23 22 105 0 15 0 14 11 15 14 105 0 1 0 0 21 1 0 105 0 11 0 10 7 11 10 105 0 21 0 20 17 21 20 105 0 7 0 6 3 7 6 105 0 17 0 16 13 17 16 105 0 3 0 2 9 3 2 105 0 9 12 8 9 89 0 13 0 12 4 13 12 105 0 5 0 4 8 5 4 105 0 9 9 8 97 0 8 9 8 81 141 139 135 133 129 127 123 121 117 115 111 109 105 103 99 97 93 91 87 85 81 79 75 73 69 67 63 61 57 55 36 36 36 36 36 36 36 36 33 24 6 31 
CALL[ ]	/* CallFunction */";
};
width = 651;
}
);
note = uni25CC;
unicode = 9676;
},
{
glyphname = dvEyelash;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(349,403,o),
(300,403,qs),
(260,403,o),
(217,444,o),
(221,488,q),
(27,488,l),
(11,369,o),
(137,258,o),
(246,258,qs),
(302,258,o),
(414,291,o),
(458,319,q),
(397,428,l)
);
},
{
closed = 1;
nodes = (
(2,571,l),
(504,571,l),
(533,740,l),
(31,740,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
12 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 1 3 2 2 1 114 5 1 4 0 3 1 4 3 103 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 3 2 3 1 2 128 5 1 4 0 3 1 4 3 103 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
13 13 13 16 13 16 19 34 18 34 6 6 26 
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = dvEyelash;
},
{
glyphname = dvRashtrasign;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-642,-97,l),
(-438,-97,l),
(-357,1,l),
(-309,-97,l),
(-104,-97,l),
(-206,82,l),
(-477,82,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
3 1 0 2 1 76 3 1 2 0 0 2 87 3 1 2 2 0 95 1 1 0 2 0 79 0 0 0 6 0 6 18 17 4 6 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvRashtrasign;
},
{
glyphname = dvKx_RA;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(420,0,l),
(615,0,l),
(662,267,l),
(671,301,o),
(708,340,o),
(735,340,qs),
(764,340,o),
(786,304,o),
(782,278,qs),
(777,252,o),
(742,221,o),
(718,221,qs),
(710,221,o),
(702,223,q),
(674,65,l),
(709,56,o),
(745,56,qs),
(805,56,o),
(907,110,o),
(977,213,o),
(990,283,qs),
(1001,346,o),
(974,451,o),
(895,513,o),
(831,513,qs),
(749,513,o),
(696,461,q),
(715,571,l),
(1093,571,l),
(1123,740,l),
(58,740,l),
(28,571,l),
(520,571,l),
(501,461,l),
(466,513,o),
(378,513,qs),
(278,513,o),
(146,384,o),
(127,278,qs),
(115,210,o),
(157,105,o),
(207,80,q),
(81,-46,l),
(299,-46,l),
(439,111,l)
);
},
{
closed = 1;
nodes = (
(42,-25,o),
(106,29,o),
(113,67,qs),
(120,106,o),
(75,161,o),
(35,161,qs),
(-4,161,o),
(-67,106,o),
(-74,67,qs),
(-81,29,o),
(-37,-25,o),
(2,-25,qs)
);
},
{
closed = 1;
nodes = (
(359,214,o),
(329,249,o),
(334,277,qs),
(339,305,o),
(382,341,o),
(413,341,qs),
(443,341,o),
(473,307,o),
(469,279,qs),
(464,251,o),
(419,214,o),
(390,214,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 114 values pushed */
17 10 2 8 1 41 30 2 7 8 44 29 2 3 6 10 3 76 15 1 13 7 10 7 13 10 128 0 9 6 11 6 9 11 128 0 0 11 0 134 0 3 4 1 2 1 3 2 103 5 1 1 12 1 8 7 1 8 105 0 10 6 11 10 89 0 7 0 6 9 7 6 105 0 10 10 11 97 14 1 11 10 11 81 57 57 45 45 57 68 57 67 63 61 45 56 45 55 51 49 43 42 36 35 38 34 17 17 18 38 16 16 6 31 
CALL[ ]	/* CallFunction */";
};
width = 1043;
}
);
note = dvKx_RA;
},
{
glyphname = dvGx_RA;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(531,0,l),
(730,0,l),
(830,571,l),
(906,571,l),
(936,740,l),
(56,740,l),
(26,571,l),
(329,571,l),
(306,442,ls),
(302,418,o),
(284,387,o),
(265,387,qs),
(246,387,o),
(236,415,o),
(240,442,qs),
(246,474,l),
(49,474,l),
(46,463,o),
(42,441,qs),
(22,328,o),
(127,213,o),
(240,213,qs),
(355,213,o),
(493,344,o),
(512,451,qs),
(533,571,l),
(626,571,l),
(587,346,l),
(133,-20,l),
(367,-20,l),
(555,141,l)
);
},
{
closed = 1;
nodes = (
(77,-1,o),
(141,53,o),
(148,91,qs),
(154,130,o),
(110,185,o),
(70,185,qs),
(31,185,o),
(-33,130,o),
(-39,91,qs),
(-46,53,o),
(-2,-1,o),
(37,-1,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
2 1 2 4 30 1 8 9 2 76 0 3 1 4 1 3 4 128 0 0 8 0 134 0 6 7 5 2 1 3 6 1 103 0 4 0 2 9 4 2 105 0 9 8 8 9 89 0 9 9 8 97 11 10 2 8 9 8 81 31 31 31 42 31 41 37 35 17 17 17 19 35 20 35 18 16 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 858;
}
);
note = dvGx_RA;
},
{
glyphname = dvJx_RA;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,571,l),
(653,571,l),
(638,488,l),
(362,488,l),
(345,394,ls),
(334,327,o),
(287,327,qs),
(240,327,o),
(251,394,qs),
(268,488,l),
(63,488,l),
(45,388,ls),
(26,279,o),
(133,149,o),
(256,149,qs),
(350,149,o),
(485,243,o),
(517,324,q),
(609,324,l),
(608,316,l),
(188,-58,l),
(410,-58,l),
(576,106,l),
(557,0,l),
(747,0,l),
(848,571,l),
(924,571,l),
(953,740,l),
(59,740,l)
);
},
{
closed = 1;
nodes = (
(111,-56,o),
(175,-2,o),
(181,36,qs),
(188,75,o),
(144,130,o),
(104,130,qs),
(65,130,o),
(1,75,o),
(-6,36,qs),
(-12,-2,o),
(32,-56,o),
(71,-56,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 88 values pushed */
8 1 3 5 5 1 1 9 2 76 6 1 4 0 5 0 4 5 128 0 1 9 2 9 1 2 128 11 1 8 7 1 0 4 8 0 103 0 5 0 3 9 5 3 105 0 9 1 2 9 89 0 9 9 2 97 12 10 2 2 9 2 81 29 29 0 0 29 40 29 39 35 33 0 28 0 28 17 18 34 19 37 18 17 17 13 6 30 
CALL[ ]	/* CallFunction */";
};
width = 872;
}
);
note = dvJx_RA;
},
{
glyphname = dvKx_R;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(420,0,l),
(615,0,l),
(662,267,l),
(671,301,o),
(708,340,o),
(735,340,qs),
(764,340,o),
(786,304,o),
(782,278,q),
(989,278,l),
(1000,344,o),
(974,450,o),
(895,513,o),
(831,513,qs),
(749,513,o),
(696,461,q),
(715,571,l),
(1040,571,l),
(1070,740,l),
(58,740,l),
(28,571,l),
(520,571,l),
(501,461,l),
(466,513,o),
(378,513,qs),
(278,513,o),
(146,384,o),
(127,278,qs),
(115,210,o),
(157,105,o),
(207,80,q),
(81,-46,l),
(299,-46,l),
(439,111,l)
);
},
{
closed = 1;
nodes = (
(42,-25,o),
(106,29,o),
(113,67,qs),
(120,106,o),
(75,161,o),
(35,161,qs),
(-4,161,o),
(-67,106,o),
(-74,67,qs),
(-81,29,o),
(-37,-25,o),
(2,-25,qs)
);
},
{
closed = 1;
nodes = (
(359,214,o),
(329,249,o),
(334,277,qs),
(339,305,o),
(382,341,o),
(413,341,qs),
(443,341,o),
(473,307,o),
(469,279,qs),
(464,251,o),
(419,214,o),
(390,214,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
17 10 2 7 1 30 1 12 6 33 2 2 8 9 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 6 7 12 7 6 114 14 1 12 9 7 12 9 126 0 8 9 10 9 8 10 128 0 0 10 0 134 0 3 4 1 2 1 3 2 103 5 1 1 11 1 7 6 1 7 105 0 9 8 10 9 89 0 9 9 10 97 13 1 10 9 10 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 6 7 12 7 6 12 128 14 1 12 9 7 12 9 126 0 8 9 10 9 8 10 128 0 0 10 0 134 0 3 4 1 2 1 3 2 103 5 1 1 11 1 7 6 1 7 105 0 9 8 10 9 89 0 9 9 10 97 13 1 10 9 10 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
46 46 34 34 46 57 46 56 52 50 34 45 34 44 40 38 19 34 19 34 17 17 18 38 16 15 6 31 
CALL[ ]	/* CallFunction */";
};
width = 774;
}
);
note = dvKx_R;
},
{
glyphname = dvGx_R;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(601,180,l),
(638,387,l),
(133,-20,l),
(367,-20,l)
);
},
{
closed = 1;
nodes = (
(26,571,l),
(329,571,l),
(306,442,ls),
(302,418,o),
(284,387,o),
(265,387,qs),
(246,387,o),
(236,415,o),
(240,442,qs),
(246,474,l),
(49,474,l),
(46,463,o),
(42,441,qs),
(22,328,o),
(127,213,o),
(240,213,qs),
(355,213,o),
(493,344,o),
(512,451,qs),
(533,571,l),
(670,571,l),
(700,740,l),
(56,740,l)
);
},
{
closed = 1;
nodes = (
(77,-1,o),
(141,53,o),
(148,91,qs),
(154,130,o),
(110,185,o),
(70,185,qs),
(31,185,o),
(-33,130,o),
(-39,91,qs),
(-46,53,o),
(-2,-1,o),
(37,-1,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 93 values pushed */
2 1 8 7 1 76 1 1 4 1 75 0 3 1 4 1 3 4 128 9 1 0 8 0 134 10 1 6 5 1 1 3 6 1 103 0 4 0 2 7 4 2 105 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81 27 27 4 4 0 0 27 38 27 37 33 31 4 26 4 26 25 24 21 19 16 15 11 9 6 5 0 3 0 3 12 6 22 
CALL[ ]	/* CallFunction */";
};
width = 588;
}
);
note = dvGx_R;
},
{
glyphname = dvJx_R;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,571,l),
(753,571,l),
(782,740,l),
(59,740,l)
);
},
{
closed = 1;
nodes = (
(410,-58,l),
(690,219,l),
(738,488,l),
(362,488,l),
(345,394,ls),
(334,327,o),
(287,327,qs),
(240,327,o),
(251,394,qs),
(268,488,l),
(63,488,l),
(45,388,ls),
(26,279,o),
(133,149,o),
(256,149,qs),
(347,149,o),
(480,237,o),
(512,314,q),
(606,314,l),
(188,-58,l)
);
},
{
closed = 1;
nodes = (
(111,-56,o),
(175,-2,o),
(181,36,qs),
(188,75,o),
(144,130,o),
(104,130,qs),
(65,130,o),
(1,75,o),
(-6,36,qs),
(-12,-2,o),
(32,-56,o),
(71,-56,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */
21 1 3 2 1 76 10 1 1 0 0 4 1 0 103 6 1 4 0 2 3 4 2 103 0 5 0 3 8 5 3 105 0 8 7 7 8 89 0 8 8 7 97 11 9 2 7 8 7 81 24 24 0 0 24 35 24 34 30 28 23 22 20 19 17 15 13 12 9 7 5 4 0 3 0 3 17 12 6 23 
CALL[ ]	/* CallFunction */";
};
width = 553;
}
);
note = dvJx_R;
},
{
glyphname = dvKx_KxA;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1094,571,l),
(1075,461,l),
(1040,513,o),
(952,513,qs),
(888,513,o),
(836,485,q),
(804,513,o),
(750,513,qs),
(669,513,o),
(616,461,q),
(635,571,l)
);
},
{
closed = 1;
nodes = (
(180,-227,o),
(257,-162,o),
(265,-115,qs),
(274,-67,o),
(220,0,o),
(172,0,qs),
(125,0,o),
(47,-67,o),
(38,-115,qs),
(30,-162,o),
(85,-227,o),
(132,-227,qs)
);
},
{
closed = 1;
nodes = (
(835,-227,o),
(912,-162,o),
(920,-115,qs),
(929,-67,o),
(875,0,o),
(827,0,qs),
(780,0,o),
(702,-67,o),
(693,-115,qs),
(685,-162,o),
(740,-227,o),
(787,-227,qs)
);
},
{
closed = 1;
nodes = (
(278,214,o),
(248,249,o),
(253,277,qs),
(258,305,o),
(302,341,o),
(332,341,qs),
(362,341,o),
(392,307,o),
(388,279,qs),
(383,251,o),
(338,214,o),
(309,214,qs)
);
},
{
closed = 1;
nodes = (
(933,214,o),
(903,249,o),
(908,277,qs),
(913,305,o),
(957,341,o),
(987,341,qs),
(1017,341,o),
(1047,307,o),
(1043,279,qs),
(1038,251,o),
(993,214,o),
(964,214,qs)
);
},
{
closed = 1;
nodes = (
(1190,0,l),
(1237,267,ls),
(1243,302,o),
(1281,340,o),
(1309,340,qs),
(1338,340,o),
(1360,304,o),
(1356,278,qs),
(1351,252,o),
(1316,221,o),
(1292,221,qs),
(1283,221,o),
(1277,223,q),
(1249,65,l),
(1283,56,o),
(1319,56,qs),
(1379,56,o),
(1481,110,o),
(1551,213,o),
(1564,283,qs),
(1575,346,o),
(1548,451,o),
(1470,513,o),
(1406,513,qs),
(1324,513,o),
(1271,461,q),
(1290,571,l),
(1667,571,l),
(1697,740,l),
(74,740,l),
(44,571,l),
(439,571,l),
(420,461,l),
(385,513,o),
(297,513,qs),
(197,513,o),
(64,384,o),
(46,278,qs),
(34,210,o),
(63,104,o),
(143,43,o),
(206,43,qs),
(299,43,o),
(356,100,q),
(339,0,l),
(535,0,l),
(582,267,ls),
(588,302,o),
(626,340,o),
(654,340,qs),
(683,340,o),
(704,304,o),
(700,278,q),
(701,278,l),
(689,210,o),
(718,104,o),
(798,43,o),
(861,43,qs),
(954,43,o),
(1011,100,q),
(994,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 157 values pushed */
93 86 8 4 0 5 7 0 106 1 21 7 105 75 59 3 20 8 3 76 23 1 13 11 3 11 13 3 128 0 17 18 16 2 2 0 17 2 103 19 15 1 3 0 22 12 9 3 7 21 0 7 105 0 21 0 20 11 21 20 105 27 10 26 3 8 14 1 11 13 8 11 105 5 1 3 4 4 3 89 5 1 3 3 4 97 25 6 24 3 4 3 4 81 47 47 35 35 23 23 11 11 119 118 115 113 109 108 104 102 96 94 92 91 90 89 88 87 85 83 78 76 74 73 70 68 62 60 47 58 47 57 53 51 35 46 35 45 41 39 23 34 23 33 29 27 11 22 11 21 37 18 34 33 28 6 26 
CALL[ ]	/* CallFunction */";
};
width = 1601;
}
);
note = dvKx_KxA;
},
{
glyphname = dvKx_TA;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1151,571,l),
(1137,488,l),
(1016,488,ls),
(931,488,o),
(861,459,q),
(819,503,o),
(743,503,qs),
(665,503,o),
(616,458,q),
(635,571,l)
);
},
{
closed = 1;
nodes = (
(180,-227,o),
(257,-162,o),
(265,-115,qs),
(274,-67,o),
(220,0,o),
(172,0,qs),
(125,0,o),
(47,-67,o),
(38,-115,qs),
(30,-162,o),
(85,-227,o),
(132,-227,qs)
);
},
{
closed = 1;
nodes = (
(278,214,o),
(248,249,o),
(253,277,qs),
(258,305,o),
(302,341,o),
(332,341,qs),
(362,341,o),
(392,307,o),
(388,279,qs),
(383,251,o),
(338,214,o),
(309,214,qs)
);
},
{
closed = 1;
nodes = (
(582,267,ls),
(588,302,o),
(626,339,o),
(654,339,qs),
(677,339,o),
(699,300,o),
(694,267,q),
(691,259,o),
(689,243,qs),
(667,119,o),
(794,1,o),
(906,1,qs),
(955,1,l),
(983,160,l),
(967,160,ls),
(923,160,o),
(888,203,o),
(894,238,qs),
(900,272,o),
(956,314,o),
(995,314,qs),
(1106,314,l),
(1051,0,l),
(1255,0,l),
(1355,571,l),
(1432,571,l),
(1462,740,l),
(74,740,l),
(44,571,l),
(439,571,l),
(420,461,l),
(385,513,o),
(297,513,qs),
(197,513,o),
(64,384,o),
(46,278,qs),
(34,210,o),
(63,104,o),
(143,43,o),
(206,43,qs),
(299,43,o),
(356,100,q),
(339,0,l),
(535,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 133 values pushed */
46 4 0 3 5 1 70 1 6 13 35 1 7 14 3 76 0 10 11 9 2 2 8 10 2 103 0 8 0 5 8 89 0 0 16 1 5 13 0 5 105 0 1 0 13 6 1 13 103 19 1 6 0 7 12 6 7 105 0 14 20 17 15 3 12 3 14 12 103 0 3 4 4 3 89 0 3 3 4 97 18 1 4 3 4 81 34 34 22 22 10 10 34 77 34 77 74 72 66 64 63 61 57 55 54 53 52 51 50 49 48 47 45 43 38 36 22 33 22 32 28 26 10 21 10 20 37 17 34 33 21 6 26 
CALL[ ]	/* CallFunction */";
};
width = 1366;
}
);
note = dvKx_TA;
},
{
glyphname = dvKx_PHA;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(736,571,l),
(724,502,l),
(660,496,o),
(615,457,q),
(635,571,l)
);
},
{
closed = 1;
nodes = (
(930,307,o),
(902,353,o),
(909,390,qs),
(940,571,l),
(1085,571,l),
(1054,390,ls),
(1047,354,o),
(1001,307,o),
(965,307,qs)
);
},
{
closed = 1;
nodes = (
(582,267,ls),
(588,302,o),
(626,340,o),
(654,340,qs),
(675,340,o),
(697,320,o),
(699,304,qs),
(706,227,o),
(798,136,o),
(881,136,qs),
(961,136,o),
(1016,179,q),
(985,0,l),
(1189,0,l),
(1232,245,ls),
(1240,291,o),
(1285,340,o),
(1318,340,qs),
(1347,340,o),
(1369,304,o),
(1365,278,qs),
(1360,253,o),
(1327,220,o),
(1301,220,qs),
(1290,220,o),
(1278,223,q),
(1251,68,l),
(1285,56,o),
(1328,56,qs),
(1388,56,o),
(1490,111,o),
(1561,216,o),
(1574,288,qs),
(1584,350,o),
(1556,452,o),
(1478,513,o),
(1415,513,qs),
(1328,513,o),
(1270,462,q),
(1289,571,l),
(1674,571,l),
(1704,740,l),
(74,740,l),
(44,571,l),
(439,571,l),
(420,461,l),
(385,513,o),
(297,513,qs),
(197,513,o),
(64,384,o),
(46,278,qs),
(34,210,o),
(63,104,o),
(143,43,o),
(206,43,qs),
(299,43,o),
(356,100,q),
(339,0,l),
(535,0,l)
);
},
{
closed = 1;
nodes = (
(180,-227,o),
(257,-162,o),
(265,-115,qs),
(274,-67,o),
(220,0,o),
(172,0,qs),
(125,0,o),
(47,-67,o),
(38,-115,qs),
(30,-162,o),
(85,-227,o),
(132,-227,qs)
);
},
{
closed = 1;
nodes = (
(278,214,o),
(248,249,o),
(253,277,qs),
(258,305,o),
(302,341,o),
(332,341,qs),
(362,341,o),
(392,307,o),
(388,279,qs),
(383,251,o),
(338,214,o),
(309,214,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 154 values pushed */
33 26 2 0 4 11 4 46 1 10 2 60 1 13 19 45 15 2 9 13 4 76 21 15 2 12 3 16 3 12 16 128 0 6 7 5 1 3 0 4 6 0 103 8 1 4 18 14 2 11 2 4 11 105 20 1 2 0 13 9 2 13 105 0 10 0 9 3 10 9 105 23 1 19 0 3 12 19 3 105 0 16 17 17 16 89 0 16 16 17 97 22 1 17 16 17 81 85 85 73 73 14 14 5 5 85 96 85 95 91 89 73 84 73 83 79 77 14 72 14 72 69 67 63 61 59 58 55 53 49 47 44 42 36 34 32 31 30 29 28 27 25 23 18 16 5 13 5 12 20 19 24 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1608;
}
);
note = dvKx_PHA;
},
{
glyphname = dvKx_PHxA;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(737,571,l),
(725,502,l),
(658,496,o),
(615,457,q),
(635,571,l)
);
},
{
closed = 1;
nodes = (
(180,-227,o),
(257,-162,o),
(265,-115,qs),
(274,-67,o),
(220,0,o),
(172,0,qs),
(125,0,o),
(47,-67,o),
(38,-115,qs),
(30,-162,o),
(85,-227,o),
(132,-227,qs)
);
},
{
closed = 1;
nodes = (
(811,-127,o),
(889,-62,o),
(897,-15,qs),
(906,33,o),
(851,100,o),
(803,100,qs),
(756,100,o),
(679,33,o),
(670,-15,qs),
(662,-62,o),
(716,-127,o),
(763,-127,qs)
);
},
{
closed = 1;
nodes = (
(278,214,o),
(248,249,o),
(253,277,qs),
(258,305,o),
(302,341,o),
(332,341,qs),
(362,341,o),
(392,307,o),
(388,279,qs),
(383,251,o),
(338,214,o),
(309,214,qs)
);
},
{
closed = 1;
nodes = (
(931,307,o),
(903,353,o),
(910,390,qs),
(941,571,l),
(1086,571,l),
(1055,390,ls),
(1048,354,o),
(1002,307,o),
(966,307,qs)
);
},
{
closed = 1;
nodes = (
(582,267,ls),
(588,302,o),
(626,340,o),
(654,340,qs),
(675,340,o),
(698,319,o),
(700,302,q),
(701,302,l),
(707,226,o),
(800,136,o),
(882,136,qs),
(962,136,o),
(1017,179,q),
(986,0,l),
(1190,0,l),
(1233,245,ls),
(1241,291,o),
(1286,340,o),
(1319,340,qs),
(1348,340,o),
(1370,304,o),
(1366,278,qs),
(1361,253,o),
(1328,220,o),
(1302,220,qs),
(1291,220,o),
(1279,223,q),
(1252,68,l),
(1286,56,o),
(1329,56,qs),
(1389,56,o),
(1491,111,o),
(1562,216,o),
(1575,288,qs),
(1585,350,o),
(1557,452,o),
(1479,513,o),
(1416,513,qs),
(1329,513,o),
(1271,462,q),
(1290,571,l),
(1675,571,l),
(1705,740,l),
(74,740,l),
(44,571,l),
(439,571,l),
(420,461,l),
(385,513,o),
(297,513,qs),
(197,513,o),
(64,384,o),
(46,278,qs),
(34,210,o),
(63,104,o),
(143,43,o),
(206,43,qs),
(299,43,o),
(356,100,q),
(339,0,l),
(535,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 175 values pushed */
69 62 2 0 4 5 10 82 1 16 8 96 1 19 6 81 1 15 3 4 76 51 1 3 1 75 26 21 2 18 9 1 9 18 1 128 0 12 13 11 7 3 0 10 12 0 103 14 1 10 20 17 2 5 8 10 5 105 25 1 8 0 19 3 8 19 105 0 16 0 15 9 16 15 105 24 1 6 0 9 18 6 9 105 0 1 4 2 1 89 0 3 23 1 4 2 3 4 105 0 1 1 2 97 22 1 2 1 2 81 50 50 41 41 29 29 17 17 5 5 50 109 50 109 106 104 99 97 95 94 91 89 85 83 80 78 72 70 68 67 66 65 64 63 61 59 54 52 41 49 41 48 45 44 29 40 29 39 35 33 17 28 17 27 23 21 5 16 5 15 37 19 27 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1609;
}
);
note = dvKx_PHxA;
},
{
glyphname = dvKx_BA;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1135,571,l),
(1121,489,l),
(1070,524,o),
(987,524,qs),
(908,524,o),
(837,484,q),
(803,513,o),
(750,513,qs),
(669,513,o),
(616,461,q),
(635,571,l)
);
},
{
closed = 1;
nodes = (
(1231,0,l),
(1331,571,l),
(1407,571,l),
(1437,740,l),
(74,740,l),
(44,571,l),
(439,571,l),
(420,461,l),
(385,513,o),
(297,513,qs),
(197,513,o),
(64,384,o),
(46,278,qs),
(34,210,o),
(63,104,o),
(143,43,o),
(206,43,qs),
(299,43,o),
(356,100,q),
(339,0,l),
(535,0,l),
(582,267,ls),
(588,302,o),
(626,340,o),
(654,340,qs),
(683,340,o),
(704,304,o),
(700,278,qs),
(690,209,o),
(734,100,o),
(833,39,o),
(902,39,qs),
(995,39,o),
(1050,85,q),
(1035,0,l)
);
},
{
closed = 1;
nodes = (
(180,-227,o),
(257,-162,o),
(265,-115,qs),
(274,-67,o),
(220,0,o),
(172,0,qs),
(125,0,o),
(47,-67,o),
(38,-115,qs),
(30,-162,o),
(85,-227,o),
(132,-227,qs)
);
},
{
closed = 1;
nodes = (
(278,214,o),
(248,249,o),
(253,277,qs),
(258,305,o),
(302,341,o),
(332,341,qs),
(362,341,o),
(392,307,o),
(388,279,qs),
(383,251,o),
(338,214,o),
(309,214,qs)
);
},
{
closed = 1;
nodes = (
(1055,395,o),
(1106,335,o),
(1098,288,qs),
(1096,279,o),
(1091,265,q),
(944,378,l),
(975,395,o),
(1008,395,qs)
);
},
{
closed = 1;
nodes = (
(925,182,o),
(870,241,o),
(879,288,qs),
(881,300,o),
(886,312,q),
(1034,198,l),
(1004,182,o),
(971,182,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
37 8 4 0 4 16 0 71 1 4 16 80 72 2 15 4 79 1 17 15 26 11 2 6 17 5 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
37 8 4 0 4 16 0 71 1 4 16 80 72 2 15 4 79 1 17 15 26 11 2 3 17 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
37 8 4 0 4 16 0 71 1 4 16 80 72 2 15 4 79 1 17 15 26 11 2 6 17 5 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
11 1 5 3 12 3 5 12 128 0 9 10 8 2 2 1 9 2 103 0 1 20 1 16 4 1 16 105 7 1 0 14 1 4 15 0 4 105 19 1 15 0 6 3 15 6 105 21 1 17 0 3 5 17 3 105 0 12 13 13 12 89 0 12 12 13 97 18 1 13 12 13 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
11 1 5 3 12 3 5 12 128 0 9 10 8 2 2 1 9 2 103 0 1 20 1 16 4 1 16 105 7 1 0 14 1 4 15 0 4 105 19 1 15 17 3 15 89 21 1 17 6 1 3 5 17 3 105 0 12 13 13 12 89 0 12 12 13 97 18 1 13 12 13 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
11 1 5 3 12 3 5 12 128 0 9 10 8 2 2 1 9 2 103 0 1 20 1 16 4 1 16 105 7 1 0 14 1 4 15 0 4 105 19 1 15 0 6 3 15 6 105 21 1 17 0 3 5 17 3 105 0 12 13 13 12 89 0 12 12 13 97 18 1 13 12 13 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 46 values pushed */
78 78 70 70 58 58 46 46 78 85 78 84 70 77 70 76 58 69 58 68 64 62 46 57 46 56 52 50 45 44 43 42 41 40 18 37 34 19 37 34 18 34 33 22 6 31 
CALL[ ]	/* CallFunction */";
};
width = 1341;
}
);
note = dvKx_BA;
},
{
glyphname = dvKx_MA;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(666,503,o),
(615,455,q),
(635,571,l),
(1039,571,l),
(1022,471,l),
(978,471,ls),
(919,471,o),
(866,453,q),
(829,503,o),
(748,503,qs)
);
},
{
closed = 1;
nodes = (
(180,-227,o),
(257,-162,o),
(265,-115,qs),
(274,-67,o),
(220,0,o),
(172,0,qs),
(125,0,o),
(47,-67,o),
(38,-115,qs),
(30,-162,o),
(85,-227,o),
(132,-227,qs)
);
},
{
closed = 1;
nodes = (
(278,214,o),
(248,249,o),
(253,277,qs),
(258,305,o),
(302,341,o),
(332,341,qs),
(362,341,o),
(392,307,o),
(388,279,qs),
(383,251,o),
(338,214,o),
(309,214,qs)
);
},
{
closed = 1;
nodes = (
(902,208,o),
(880,232,o),
(884,256,qs),
(888,280,o),
(927,305,o),
(955,305,qs),
(993,305,l),
(986,266,ls),
(981,240,o),
(949,208,o),
(923,208,qs)
);
},
{
closed = 1;
nodes = (
(1306,471,l),
(1212,471,l),
(1229,571,l),
(1323,571,l)
);
},
{
closed = 1;
nodes = (
(582,267,ls),
(588,302,o),
(626,340,o),
(654,340,qs),
(682,340,o),
(704,305,o),
(700,279,q),
(698,271,o),
(695,255,qs),
(683,189,o),
(726,90,o),
(825,36,o),
(897,36,qs),
(1013,36,o),
(1158,165,o),
(1178,277,qs),
(1183,305,l),
(1277,305,l),
(1223,0,l),
(1428,0,l),
(1528,571,l),
(1605,571,l),
(1635,740,l),
(74,740,l),
(44,571,l),
(439,571,l),
(420,461,l),
(385,513,o),
(297,513,qs),
(197,513,o),
(64,384,o),
(46,278,qs),
(34,210,o),
(63,104,o),
(143,43,o),
(206,43,qs),
(299,43,o),
(356,100,q),
(339,0,l),
(535,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 166 values pushed */
61 7 1 3 5 0 81 1 6 7 50 1 11 8 3 76 26 20 2 16 18 3 18 16 3 128 0 14 15 13 25 10 4 1 12 14 1 103 0 12 2 5 12 89 21 1 2 19 1 5 7 2 5 105 9 1 0 17 1 7 6 0 7 105 23 1 6 0 11 18 6 11 105 24 1 8 0 18 16 8 18 105 0 3 4 4 3 89 0 3 3 4 97 22 1 4 3 4 81 49 49 45 45 34 34 22 22 10 10 0 0 49 88 49 88 85 83 76 74 71 70 69 68 67 66 65 64 63 62 60 58 53 51 45 48 45 48 47 46 34 44 34 43 39 37 22 33 22 32 28 26 10 21 10 20 16 14 0 9 0 8 17 34 27 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1525;
}
);
note = dvKx_MA;
},
{
glyphname = dvJx_JxA;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(255,-189,o),
(333,-124,o),
(341,-77,qs),
(349,-29,o),
(295,38,o),
(247,38,qs),
(200,38,o),
(122,-29,o),
(114,-77,qs),
(106,-124,o),
(160,-189,o),
(207,-189,qs)
);
},
{
closed = 1;
nodes = (
(819,-189,o),
(897,-124,o),
(905,-77,qs),
(913,-29,o),
(859,38,o),
(811,38,qs),
(764,38,o),
(686,-29,o),
(678,-77,qs),
(670,-124,o),
(724,-189,o),
(771,-189,qs)
);
},
{
closed = 1;
nodes = (
(1322,0,l),
(1423,571,l),
(1499,571,l),
(1529,740,l),
(71,740,l),
(41,571,l),
(1219,571,l),
(1203,481,l),
(936,481,l),
(909,325,ls),
(897,258,o),
(851,258,qs),
(803,258,o),
(815,325,qs),
(842,481,l),
(372,481,l),
(345,325,ls),
(333,258,o),
(287,258,qs),
(239,258,o),
(251,325,qs),
(278,481,l),
(73,481,l),
(45,319,ls),
(25,210,o),
(133,80,o),
(256,80,qs),
(329,80,o),
(448,138,o),
(526,241,o),
(541,308,q),
(607,308,l),
(592,204,o),
(700,80,o),
(820,80,qs),
(893,80,o),
(1012,138,o),
(1090,241,o),
(1105,308,q),
(1173,308,l),
(1118,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
0 16 0 1 0 16 1 128 0 14 15 1 13 8 14 13 103 12 10 2 8 6 1 4 9 8 4 103 11 1 9 7 1 5 0 9 5 105 2 1 0 16 1 0 89 2 1 0 0 1 97 18 3 17 3 1 0 1 81 12 12 0 0 64 63 62 61 60 59 58 57 56 55 53 51 49 48 46 44 42 41 38 36 33 32 30 28 25 24 12 23 12 22 18 16 0 11 0 10 36 19 6 23 
CALL[ ]	/* CallFunction */";
};
width = 1436;
}
);
note = dvJx_JxA;
},
{
glyphname = dvJx_YA;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1211,0,l),
(1312,571,l),
(1388,571,l),
(1418,740,l),
(71,740,l),
(41,571,l),
(795,571,l),
(790,540,ls),
(781,493,o),
(721,441,o),
(644,441,qs),
(365,441,l),
(345,325,ls),
(333,258,o),
(287,258,qs),
(239,258,o),
(251,325,qs),
(271,441,l),
(66,441,l),
(45,319,ls),
(25,210,o),
(133,80,o),
(256,80,qs),
(355,80,o),
(501,184,o),
(530,272,q),
(588,272,o),
(612,273,q),
(616,174,o),
(734,63,o),
(840,63,qs),
(952,63,o),
(1028,121,q),
(1006,0,l)
);
},
{
closed = 1;
nodes = (
(255,-189,o),
(333,-124,o),
(341,-77,qs),
(349,-29,o),
(295,38,o),
(247,38,qs),
(200,38,o),
(122,-29,o),
(114,-77,qs),
(106,-124,o),
(160,-189,o),
(207,-189,qs)
);
},
{
closed = 1;
nodes = (
(864,232,o),
(812,277,o),
(812,311,q),
(885,330,o),
(973,434,o),
(985,502,qs),
(997,571,l),
(1107,571,l),
(1073,375,ls),
(1061,312,o),
(979,232,o),
(914,232,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 101 values pushed */
54 1 1 3 0 1 2 13 2 76 0 9 10 11 10 9 11 128 0 7 12 8 2 6 3 7 6 103 5 1 3 0 1 4 3 1 103 0 4 0 2 0 4 2 105 15 1 13 0 0 10 13 0 105 0 10 9 11 10 89 0 10 10 11 97 14 1 11 10 11 81 46 46 34 34 46 57 46 56 50 49 34 45 34 44 40 38 33 32 17 17 19 34 34 19 34 34 33 16 6 31 
CALL[ ]	/* CallFunction */";
};
width = 1325;
}
);
note = dvJx_YA;
},
{
glyphname = dvEyelash_YA;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,232,o),
(503,279,o),
(505,314,q),
(583,328,o),
(663,429,o),
(676,502,qs),
(688,571,l),
(799,571,l),
(765,375,ls),
(754,312,o),
(672,232,o),
(607,232,qs)
);
},
{
closed = 1;
nodes = (
(903,0,l),
(1003,571,l),
(1080,571,l),
(1110,740,l),
(54,740,l),
(24,571,l),
(487,571,l),
(482,540,ls),
(472,484,o),
(418,419,o),
(352,415,qs),
(328,413,o),
(280,430,o),
(252,469,o),
(258,498,q),
(65,498,l),
(48,377,o),
(184,261,o),
(300,259,q),
(306,167,o),
(426,63,o),
(532,63,qs),
(644,63,o),
(720,121,q),
(699,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
8 1 3 5 12 1 2 1 2 76 0 5 4 3 4 5 3 128 0 9 2 9 134 0 7 8 6 2 0 4 7 0 103 0 4 0 3 1 4 3 105 10 1 1 2 2 1 89 10 1 1 1 2 97 0 2 1 2 81 0 0 36 35 34 33 32 31 30 29 26 25 21 20 18 17 15 13 0 11 0 10 19 11 6 23 
CALL[ ]	/* CallFunction */";
};
width = 1034;
}
);
note = dvEyelash_YA;
},
{
glyphname = dvEyelash_HA;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(573,70,o),
(541,50,o),
(522,50,qs),
(500,50,o),
(472,84,o),
(478,118,qs),
(484,150,o),
(524,184,o),
(546,184,qs),
(567,184,o),
(591,162,o),
(590,144,q),
(785,144,l),
(793,237,o),
(691,344,o),
(579,344,qs),
(560,344,o),
(550,343,q),
(545,351,o),
(547,360,qs),
(549,374,o),
(570,388,o),
(585,388,qs),
(752,388,l),
(785,571,l),
(905,571,l),
(935,740,l),
(65,740,l),
(35,571,l),
(591,571,l),
(584,531,l),
(536,531,ls),
(468,531,o),
(375,473,o),
(358,425,q),
(347,422,o),
(330,422,qs),
(296,422,o),
(261,461,o),
(267,492,q),
(74,492,l),
(63,422,o),
(111,318,o),
(206,263,o),
(266,263,qs),
(338,263,o),
(386,288,q),
(344,260,o),
(289,175,o),
(279,121,qs),
(267,48,o),
(311,-60,o),
(417,-117,o),
(492,-117,qs),
(597,-117,o),
(752,-9,o),
(775,86,q),
(580,86,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
39 10 2 1 9 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 77 values pushed */
0 4 5 2 5 4 2 128 0 2 3 3 2 112 0 8 3 9 3 8 9 128 0 10 11 13 11 10 114 14 1 13 12 12 13 112 0 6 7 1 5 4 6 5 103 0 3 0 1 11 3 1 106 0 9 0 11 10 9 11 105 0 12 0 0 12 89 0 12 12 0 98 0 0 12 0 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 78 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 8 3 9 3 8 9 128 0 10 11 13 11 10 114 14 1 13 12 12 13 112 0 6 7 1 5 4 6 5 103 0 3 0 1 11 3 1 106 0 9 0 11 10 9 11 105 0 12 0 0 12 89 0 12 12 0 98 0 0 12 0 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
35 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 79 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 8 3 9 3 8 9 128 0 10 11 13 11 10 13 128 14 1 13 12 12 13 112 0 6 7 1 5 4 6 5 103 0 3 0 1 11 3 1 106 0 9 0 11 10 9 11 105 0 12 0 0 12 89 0 12 12 0 98 0 0 12 0 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 80 values pushed */
0 4 5 2 5 4 2 128 0 2 3 5 2 3 126 0 8 3 9 3 8 9 128 0 10 11 13 11 10 13 128 14 1 13 12 11 13 12 126 0 6 7 1 5 4 6 5 103 0 3 0 1 11 3 1 106 0 9 0 11 10 9 11 105 0 12 0 0 12 89 0 12 12 0 98 0 0 12 0 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 57 0 57 55 53 49 47 45 44 42 40 33 17 17 17 35 34 19 39 34 15 6 31 
CALL[ ]	/* CallFunction */";
};
width = 849;
}
);
note = dvEyelash_HA;
},
{
glyphname = dvmII.aLong;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-336,696,l),
(-327,748,ls),
(-317,806,o),
(-216,883,o),
(-86,883,qs),
(47,883,o),
(121,806,o),
(111,748,qs),
(110,740,l),
(27,740,l),
(-3,571,l),
(74,571,l),
(-27,0,l),
(177,0,l),
(278,571,l),
(354,571,l),
(384,740,l),
(308,740,l),
(312,763,ls),
(335,897,o),
(164,1054,o),
(-56,1054,qs),
(-269,1054,o),
(-496,899,o),
(-520,763,qs),
(-532,696,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 7 1 2 1 7 2 128 0 3 2 3 134 0 0 0 6 1 0 6 105 5 1 1 7 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 19 35 17 17 17 17 19 34 8 6 30 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmII.aLong;
},
{
glyphname = dvmII_Anusvara;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-42,696,l),
(-28,775,ls),
(-20,819,o),
(19,882,o),
(65,882,qs),
(108,882,o),
(124,819,o),
(116,775,qs),
(110,740,l),
(27,740,l),
(-3,571,l),
(74,571,l),
(-27,0,l),
(177,0,l),
(278,571,l),
(354,571,l),
(384,740,l),
(308,740,l),
(312,765,ls),
(363,1053,o),
(95,1053,qs),
(-48,1053,o),
(-204,900,o),
(-228,765,qs),
(-240,696,l)
);
},
{
closed = 1;
nodes = (
(508,782,o),
(587,848,o),
(595,895,qs),
(603,943,o),
(548,1009,o),
(500,1009,qs),
(453,1009,o),
(375,943,o),
(367,895,qs),
(359,848,o),
(413,782,o),
(460,782,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
0 7 1 2 1 7 2 128 0 3 2 3 134 0 0 0 6 9 0 6 105 0 8 10 1 9 1 8 9 105 5 1 1 7 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 25 25 25 36 25 35 37 19 35 17 17 17 17 18 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmII_Anusvara;
},
{
glyphname = dvmII_Reph;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-42,696,l),
(-28,775,ls),
(-20,819,o),
(19,882,o),
(65,882,qs),
(108,882,o),
(124,819,o),
(116,775,qs),
(110,740,l),
(27,740,l),
(-3,571,l),
(74,571,l),
(-27,0,l),
(177,0,l),
(278,571,l),
(354,571,l),
(384,740,l),
(308,740,l),
(322,822,ls),
(326,845,o),
(348,877,o),
(374,877,qs),
(397,877,o),
(410,845,o),
(402,812,q),
(583,812,l),
(611,921,o),
(537,1038,o),
(454,1038,qs),
(350,1038,o),
(295,964,q),
(245,1053,o),
(95,1053,qs),
(-48,1053,o),
(-204,900,o),
(-228,765,qs),
(-240,696,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
5 1 9 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 2 3 4 3 2 114 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 2 3 4 3 2 4 128 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
36 35 32 30 17 17 17 17 19 34 18 34 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmII_Reph;
},
{
glyphname = dvmII_Reph_Anusvara;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(307,740,l),
(320,812,ls),
(327,852,o),
(379,901,o),
(416,901,qs),
(451,901,o),
(483,865,o),
(482,841,q),
(645,841,l),
(663,902,o),
(635,1001,o),
(551,1058,o),
(487,1058,qs),
(422,1058,o),
(325,1007,o),
(294,965,q),
(242,1053,o),
(94,1053,qs),
(-49,1053,o),
(-205,900,o),
(-228,765,qs),
(-241,696,l),
(-43,696,l),
(-29,775,ls),
(-21,819,o),
(18,882,o),
(64,882,qs),
(107,882,o),
(123,819,o),
(115,775,qs),
(109,740,l),
(26,740,l),
(-4,571,l),
(73,571,l),
(-27,0,l),
(177,0,l),
(277,571,l),
(353,571,l),
(383,740,l)
);
},
{
closed = 1;
nodes = (
(412,768,o),
(447,797,o),
(451,817,qs),
(454,838,o),
(430,867,o),
(409,867,qs),
(389,867,o),
(354,838,o),
(351,817,qs),
(347,797,o),
(371,768,o),
(391,768,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
22 1 9 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 8 11 12 9 8 114 0 5 3 0 3 5 0 128 0 1 0 1 134 0 7 0 9 4 7 9 105 0 6 0 4 11 6 4 105 0 11 13 1 12 3 11 12 105 10 1 3 5 0 3 87 10 1 3 3 0 95 2 1 0 3 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 8 11 12 11 8 12 128 0 5 3 0 3 5 0 128 0 1 0 1 134 0 7 0 9 4 7 9 105 0 6 0 4 11 6 4 105 0 11 13 1 12 3 11 12 105 10 1 3 5 0 3 87 10 1 3 3 0 95 2 1 0 3 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
39 39 39 50 39 49 45 43 38 37 34 32 19 35 35 19 35 17 17 17 16 14 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmII_Reph_Anusvara;
},
{
glyphname = dvmII_Anusvara.aLong;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-336,696,l),
(-327,748,ls),
(-317,806,o),
(-216,883,o),
(-86,883,qs),
(47,883,o),
(121,806,o),
(111,748,qs),
(110,740,l),
(27,740,l),
(-3,571,l),
(74,571,l),
(-27,0,l),
(177,0,l),
(278,571,l),
(354,571,l),
(384,740,l),
(308,740,l),
(312,763,ls),
(335,897,o),
(164,1054,o),
(-56,1054,qs),
(-269,1054,o),
(-496,899,o),
(-520,763,qs),
(-532,696,l)
);
},
{
closed = 1;
nodes = (
(508,782,o),
(587,848,o),
(595,895,qs),
(603,943,o),
(548,1009,o),
(500,1009,qs),
(453,1009,o),
(375,943,o),
(367,895,qs),
(359,848,o),
(413,782,o),
(460,782,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
0 7 1 2 1 7 2 128 0 3 2 3 134 0 0 0 6 9 0 6 105 0 8 10 1 9 1 8 9 105 5 1 1 7 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 26 26 26 37 26 36 37 19 35 17 17 17 17 19 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmII_Anusvara.aLong;
},
{
glyphname = dvmII_Reph.aLong;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-336,696,l),
(-327,748,ls),
(-317,806,o),
(-216,883,o),
(-86,883,qs),
(47,883,o),
(121,806,o),
(111,748,qs),
(110,740,l),
(27,740,l),
(-3,571,l),
(74,571,l),
(-27,0,l),
(177,0,l),
(278,571,l),
(354,571,l),
(384,740,l),
(308,740,l),
(322,822,ls),
(326,845,o),
(348,877,o),
(374,877,qs),
(397,877,o),
(410,845,o),
(402,812,q),
(583,812,l),
(610,921,o),
(537,1038,o),
(454,1038,qs),
(391,1038,o),
(305,985,o),
(280,942,q),
(199,1054,o),
(-56,1054,qs),
(-269,1054,o),
(-496,899,o),
(-520,763,qs),
(-532,696,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
5 1 9 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 2 3 4 3 2 114 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 2 3 4 3 2 4 128 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
37 36 33 31 17 17 17 17 19 34 18 35 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmII_Reph.aLong;
},
{
glyphname = dvmII_Reph_Anusvara.aLong;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(307,740,l),
(320,812,ls),
(327,852,o),
(379,901,o),
(416,901,qs),
(451,901,o),
(483,865,o),
(482,841,q),
(645,841,l),
(663,902,o),
(635,1001,o),
(551,1058,o),
(487,1058,qs),
(413,1058,o),
(309,994,o),
(280,943,q),
(197,1054,o),
(-56,1054,qs),
(-269,1054,o),
(-497,899,o),
(-521,763,qs),
(-533,696,l),
(-337,696,l),
(-327,748,ls),
(-317,806,o),
(-217,883,o),
(-87,883,qs),
(46,883,o),
(121,806,o),
(111,748,qs),
(109,740,l),
(26,740,l),
(-4,571,l),
(73,571,l),
(-27,0,l),
(177,0,l),
(277,571,l),
(353,571,l),
(383,740,l)
);
},
{
closed = 1;
nodes = (
(412,768,o),
(447,797,o),
(451,817,qs),
(454,838,o),
(430,867,o),
(409,867,qs),
(389,867,o),
(354,838,o),
(351,817,qs),
(347,797,o),
(371,768,o),
(391,768,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
22 1 9 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 8 11 12 9 8 114 0 5 3 0 3 5 0 128 0 1 0 1 134 0 7 0 9 4 7 9 105 0 6 0 4 11 6 4 105 0 11 13 1 12 3 11 12 105 10 1 3 5 0 3 87 10 1 3 3 0 95 2 1 0 3 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 63 values pushed */
0 8 11 12 9 8 114 0 5 3 0 3 5 0 128 0 1 0 1 134 0 9 4 6 9 89 7 1 6 0 4 11 6 4 105 0 11 13 1 12 3 11 12 105 10 1 3 5 0 3 87 10 1 3 3 0 95 2 1 0 3 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 8 11 12 9 8 114 0 5 3 0 3 5 0 128 0 1 0 1 134 0 7 0 9 4 7 9 105 0 6 0 4 11 6 4 105 0 11 13 1 12 3 11 12 105 10 1 3 5 0 3 87 10 1 3 3 0 95 2 1 0 3 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 8 11 12 11 8 12 128 0 5 3 0 3 5 0 128 0 1 0 1 134 0 7 0 9 4 7 9 105 0 6 0 4 11 6 4 105 0 11 13 1 12 3 11 12 105 10 1 3 5 0 3 87 10 1 3 3 0 95 2 1 0 3 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
39 39 39 50 39 49 45 43 38 37 34 32 19 35 35 19 35 17 17 17 16 14 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmII_Reph_Anusvara.aLong;
},
{
glyphname = dvmE_Anusvara;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-137,859,o),
(-212,973,o),
(-310,1011,o),
(-401,1012,qs),
(-457,1012,l),
(-485,849,l),
(-426,849,ls),
(-384,849,o),
(-339,832,o),
(-307,787,o),
(-283,735,q),
(-93,735,l)
);
},
{
closed = 1;
nodes = (
(54,787,o),
(132,853,o),
(140,900,qs),
(149,948,o),
(94,1014,o),
(46,1014,qs),
(-1,1014,o),
(-79,948,o),
(-88,900,qs),
(-96,853,o),
(-41,787,o),
(6,787,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
5 1 2 4 2 134 3 1 1 0 0 4 1 0 105 3 1 1 1 4 97 6 1 4 1 4 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
5 1 2 4 2 134 0 3 1 4 3 89 0 1 0 0 4 1 0 105 0 3 3 4 97 6 1 4 3 4 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
5 1 2 4 2 134 3 1 1 0 0 4 1 0 105 3 1 1 1 4 97 6 1 4 1 4 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
12 12 0 0 12 23 12 22 18 16 0 11 0 11 33 35 7 6 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmE_Anusvara;
},
{
glyphname = dvmE_Reph;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-95,742,ls),
(-107,776,o),
(-102,808,qs),
(-98,831,o),
(-71,859,o),
(-49,859,qs),
(-27,859,o),
(-12,827,o),
(-18,805,q),
(154,805,l),
(170,863,o),
(152,958,o),
(82,1014,o),
(23,1014,qs),
(-48,1014,o),
(-138,943,o),
(-158,888,q),
(-186,940,o),
(-250,993,o),
(-334,1011,o),
(-401,1012,qs),
(-457,1012,l),
(-485,849,l),
(-426,849,ls),
(-384,849,o),
(-339,832,o),
(-307,787,o),
(-283,735,q),
(-93,735,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
11 1 4 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 3 0 5 4 3 114 6 1 5 5 132 2 1 1 0 4 0 1 4 105 2 1 1 1 0 97 0 0 1 0 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 3 0 5 4 3 114 6 1 5 5 132 0 1 4 0 1 89 0 2 0 4 0 2 4 105 0 1 1 0 97 0 0 1 0 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 3 0 5 4 3 114 6 1 5 5 132 2 1 1 0 4 0 1 4 105 2 1 1 1 0 97 0 0 1 0 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 3 0 5 0 3 5 128 6 1 5 5 132 2 1 1 0 4 0 1 4 105 2 1 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 28 0 28 34 19 37 33 35 7 6 27 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmE_Reph;
},
{
glyphname = dvmE_Reph_Anusvara;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-98,747,ls),
(-112,787,o),
(-106,822,qs),
(-100,856,o),
(-48,902,o),
(-14,902,qs),
(28,902,o),
(61,849,o),
(53,814,q),
(189,814,l),
(206,879,o),
(181,976,o),
(99,1029,o),
(36,1029,qs),
(-40,1029,o),
(-142,957,o),
(-167,901,q),
(-194,947,o),
(-256,994,o),
(-338,1011,o),
(-402,1012,qs),
(-458,1012,l),
(-487,849,l),
(-428,849,ls),
(-386,849,o),
(-341,832,o),
(-309,787,o),
(-284,735,q),
(-94,735,l)
);
},
{
closed = 1;
nodes = (
(-17,770,o),
(18,799,o),
(22,819,qs),
(26,840,o),
(1,869,o),
(-20,869,qs),
(-40,869,o),
(-74,840,o),
(-78,819,qs),
(-82,799,o),
(-58,770,o),
(-38,770,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
11 1 6 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 3 0 7 4 3 114 8 1 5 7 5 134 0 2 0 4 6 2 4 105 0 6 0 7 6 89 0 1 0 0 3 1 0 105 0 6 6 7 97 9 1 7 6 7 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 3 0 7 0 3 7 128 8 1 5 7 5 134 0 2 0 4 6 2 4 105 0 6 0 7 6 89 0 1 0 0 3 1 0 105 0 6 6 7 97 9 1 7 6 7 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
29 29 0 0 29 40 29 39 35 33 0 28 0 28 34 19 37 33 35 10 6 27 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmE_Reph_Anusvara;
},
{
glyphname = dvmAI_Anusvara;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-100,737,l),
(-162,915,o),
(-231,1053,o),
(-315,1091,o),
(-406,1091,qs),
(-466,1091,l),
(-488,965,l),
(-423,965,ls),
(-386,965,o),
(-344,956,o),
(-301,919,o),
(-282,877,q),
(-305,896,o),
(-344,912,o),
(-390,916,o),
(-441,916,qs),
(-497,916,l),
(-519,791,l),
(-458,791,ls),
(-407,791,o),
(-370,788,o),
(-342,777,o),
(-311,759,qs),
(-274,737,l)
);
},
{
closed = 1;
nodes = (
(51,783,o),
(130,849,o),
(138,896,qs),
(146,944,o),
(91,1010,o),
(43,1010,qs),
(-4,1010,o),
(-82,944,o),
(-90,896,qs),
(-98,849,o),
(-44,783,o),
(3,783,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
11 1 0 1 1 76 0 4 6 4 134 0 5 2 6 5 89 0 3 0 2 1 3 2 105 0 1 0 0 6 1 0 105 0 5 5 6 97 7 1 6 5 6 81 24 24 24 35 24 34 37 19 33 38 33 35 8 6 28 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmAI_Anusvara;
},
{
glyphname = dvmAI_Reph;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-100,737,l),
(-104,748,ls),
(-113,781,o),
(-109,808,qs),
(-105,831,o),
(-78,859,o),
(-56,859,qs),
(-34,859,o),
(-19,827,o),
(-25,805,q),
(128,805,l),
(144,863,o),
(129,958,o),
(66,1014,o),
(13,1014,qs),
(-53,1014,o),
(-137,951,o),
(-159,901,q),
(-194,991,o),
(-255,1070,o),
(-331,1091,o),
(-406,1091,qs),
(-466,1091,l),
(-488,965,l),
(-423,965,ls),
(-386,965,o),
(-344,956,o),
(-301,919,o),
(-282,877,q),
(-305,896,o),
(-344,912,o),
(-390,916,o),
(-441,916,qs),
(-497,916,l),
(-519,791,l),
(-458,791,ls),
(-407,791,o),
(-370,788,o),
(-342,777,o),
(-311,759,qs),
(-274,737,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
22 11 2 6 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 5 6 0 6 5 114 0 7 0 7 134 0 3 0 2 1 3 2 105 0 1 6 0 1 89 0 4 0 6 5 4 6 105 0 1 1 0 97 0 0 1 0 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 5 6 0 6 5 0 128 0 7 0 7 134 0 3 0 2 1 3 2 105 0 1 6 0 1 89 0 4 0 6 5 4 6 105 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
21 34 19 37 33 38 33 35 8 6 30 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmAI_Reph;
},
{
glyphname = dvmAI_Reph_Anusvara;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-100,737,l),
(-102,741,o),
(-101,742,q),
(-110,768,o),
(-115,799,o),
(-112,818,qs),
(-105,855,o),
(-55,902,o),
(-20,902,qs),
(22,902,o),
(56,849,o),
(47,814,q),
(183,814,l),
(200,876,o),
(176,974,o),
(94,1029,o),
(30,1029,qs),
(-40,1029,o),
(-138,963,o),
(-163,912,q),
(-198,996,o),
(-257,1071,o),
(-332,1091,o),
(-406,1091,qs),
(-466,1091,l),
(-488,965,l),
(-423,965,ls),
(-386,965,o),
(-344,956,o),
(-301,919,o),
(-282,877,q),
(-305,896,o),
(-344,912,o),
(-390,916,o),
(-441,916,qs),
(-497,916,l),
(-519,791,l),
(-458,791,ls),
(-407,791,o),
(-370,788,o),
(-342,777,o),
(-311,759,qs),
(-274,737,l)
);
},
{
closed = 1;
nodes = (
(-22,770,o),
(13,799,o),
(16,819,qs),
(20,840,o),
(-5,869,o),
(-26,869,qs),
(-46,869,o),
(-80,840,o),
(-84,819,qs),
(-87,799,o),
(-63,770,o),
(-43,770,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
22 1 6 1 11 1 8 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 5 8 0 6 5 114 0 7 9 7 134 0 3 0 2 1 3 2 105 0 4 0 6 8 4 6 105 0 8 5 9 8 89 0 1 0 0 9 1 0 105 0 8 8 9 97 10 1 9 8 9 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 5 8 0 8 5 0 128 0 7 9 7 134 0 3 0 2 1 3 2 105 0 4 0 6 8 4 6 105 0 8 5 9 8 89 0 1 0 0 9 1 0 105 0 8 8 9 97 10 1 9 8 9 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
43 43 43 54 43 53 37 53 34 19 37 33 38 33 35 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmAI_Reph_Anusvara;
},
{
glyphname = dvmO_Anusvara;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,0,l),
(281,571,l),
(357,571,l),
(387,740,l),
(306,740,l),
(262,861,o),
(189,974,o),
(91,1011,o),
(0,1012,qs),
(-56,1012,l),
(-85,849,l),
(-26,849,ls),
(16,849,o),
(60,832,o),
(92,789,o),
(116,740,q),
(30,740,l),
(0,571,l),
(77,571,l),
(-23,0,l)
);
},
{
closed = 1;
nodes = (
(454,787,o),
(533,853,o),
(541,900,qs),
(550,948,o),
(494,1014,o),
(446,1014,qs),
(399,1014,o),
(322,948,o),
(313,900,qs),
(305,853,o),
(359,787,o),
(406,787,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 6 0 6 134 0 2 8 3 2 89 7 1 3 9 1 8 1 3 8 105 4 1 1 0 0 1 87 4 1 1 1 0 95 5 1 0 1 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 0 6 134 0 3 0 2 8 3 2 105 0 7 9 1 8 1 7 8 105 4 1 1 0 0 1 87 4 1 1 1 0 95 5 1 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 6 0 6 134 0 2 8 3 2 89 7 1 3 9 1 8 1 3 8 105 4 1 1 0 0 1 87 4 1 1 1 0 95 5 1 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
20 20 20 31 20 30 37 17 17 19 33 35 17 16 10 6 30 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmO_Anusvara;
},
{
glyphname = dvmO_Reph;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,0,l),
(281,571,l),
(357,571,l),
(387,740,l),
(306,740,l),
(305,742,ls),
(293,776,o),
(299,808,qs),
(303,831,o),
(330,859,o),
(352,859,qs),
(374,859,o),
(388,827,o),
(383,805,q),
(555,805,l),
(571,863,o),
(553,958,o),
(482,1014,o),
(423,1014,qs),
(352,1014,o),
(263,943,o),
(243,888,q),
(214,940,o),
(151,993,o),
(67,1011,o),
(0,1012,qs),
(-56,1012,l),
(-85,849,l),
(-26,849,ls),
(16,849,o),
(60,832,o),
(92,789,o),
(116,740,q),
(30,740,l),
(0,571,l),
(77,571,l),
(-23,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 6 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 5 2 1 6 5 114 0 9 0 9 134 0 6 2 3 6 89 4 1 3 0 2 5 3 2 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 5 2 1 6 5 114 0 9 0 9 134 0 4 0 6 2 4 6 105 0 3 0 2 5 3 2 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 5 2 1 6 5 114 0 9 0 9 134 0 6 2 3 6 89 4 1 3 0 2 5 3 2 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 5 2 1 2 5 1 128 0 9 0 9 134 0 6 2 3 6 89 4 1 3 0 2 5 3 2 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
36 35 17 36 34 19 37 33 35 17 16 10 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmO_Reph;
},
{
glyphname = dvmO_Reph_Anusvara;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(280,571,l),
(356,571,l),
(386,740,l),
(305,740,l),
(303,747,ls),
(289,787,o),
(295,822,qs),
(301,856,o),
(352,902,o),
(386,902,qs),
(428,902,o),
(462,849,o),
(454,814,q),
(590,814,l),
(607,879,o),
(581,976,o),
(500,1029,o),
(437,1029,qs),
(361,1029,o),
(259,957,o),
(234,901,q),
(207,947,o),
(145,994,o),
(63,1011,o),
(-1,1012,qs),
(-57,1012,l),
(-86,849,l),
(-27,849,ls),
(15,849,o),
(59,832,o),
(90,789,o),
(115,740,q),
(29,740,l),
(-1,571,l),
(76,571,l),
(-25,0,l),
(179,0,l)
);
},
{
closed = 1;
nodes = (
(384,770,o),
(419,799,o),
(423,819,qs),
(426,840,o),
(402,869,o),
(381,869,qs),
(361,869,o),
(326,840,o),
(323,819,qs),
(319,799,o),
(343,770,o),
(363,770,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 10 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 5 2 11 6 5 114 12 1 9 0 9 134 0 4 0 6 10 4 6 105 0 3 0 2 5 3 2 105 0 10 13 1 11 1 10 11 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 5 2 11 2 5 11 128 12 1 9 0 9 134 0 4 0 6 10 4 6 105 0 3 0 2 5 3 2 105 0 10 13 1 11 1 10 11 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
37 37 0 0 37 48 37 47 43 41 0 36 0 36 17 21 34 19 37 33 35 17 17 14 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmO_Reph_Anusvara;
},
{
glyphname = dvmAU_Anusvara;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,0,l),
(274,571,l),
(350,571,l),
(380,740,l),
(292,740,l),
(232,917,o),
(162,1053,o),
(79,1091,o),
(-12,1091,qs),
(-72,1091,l),
(-94,965,l),
(-29,965,ls),
(8,965,o),
(50,956,o),
(93,919,o),
(112,877,q),
(89,896,o),
(50,912,o),
(4,916,o),
(-47,916,qs),
(-103,916,l),
(-125,791,l),
(-64,791,ls),
(-13,791,o),
(24,788,o),
(52,776,o),
(82,758,qs),
(114,740,l),
(23,740,l),
(-7,571,l),
(70,571,l),
(-30,0,l)
);
},
{
closed = 1;
nodes = (
(445,783,o),
(524,849,o),
(532,896,qs),
(540,944,o),
(485,1010,o),
(437,1010,qs),
(390,1010,o),
(312,944,o),
(304,896,qs),
(296,849,o),
(350,783,o),
(397,783,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
15 1 2 3 1 76 0 8 0 8 134 0 5 0 4 3 5 4 105 0 3 0 2 10 3 2 105 0 9 11 1 10 1 9 10 105 6 1 1 0 0 1 87 6 1 1 1 0 95 7 1 0 1 0 79 32 32 32 43 32 42 38 36 17 17 19 33 38 33 36 17 16 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmAU_Anusvara;
},
{
glyphname = dvmAU_Reph;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,0,l),
(274,571,l),
(350,571,l),
(380,740,l),
(292,740,l),
(290,748,ls),
(281,781,o),
(285,808,qs),
(289,831,o),
(316,859,o),
(338,859,qs),
(360,859,o),
(375,827,o),
(369,805,q),
(522,805,l),
(538,863,o),
(523,958,o),
(460,1014,o),
(407,1014,qs),
(341,1014,o),
(257,951,o),
(235,901,q),
(200,991,o),
(138,1070,o),
(63,1091,o),
(-12,1091,qs),
(-72,1091,l),
(-94,965,l),
(-29,965,ls),
(8,965,o),
(50,956,o),
(93,919,o),
(112,877,q),
(89,896,o),
(50,912,o),
(4,916,o),
(-47,916,qs),
(-103,916,l),
(-125,791,l),
(-64,791,ls),
(-13,791,o),
(24,788,o),
(52,776,o),
(82,758,qs),
(114,740,l),
(23,740,l),
(-7,571,l),
(70,571,l),
(-30,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
26 15 2 8 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 7 8 2 8 7 114 0 11 0 11 134 0 5 0 4 3 5 4 105 0 6 0 8 7 6 8 105 0 3 0 2 1 3 2 105 9 1 1 0 0 1 87 9 1 1 1 0 95 10 1 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 7 8 2 8 7 2 128 0 11 0 11 134 0 5 0 4 3 5 4 105 0 6 0 8 7 6 8 105 0 3 0 2 1 3 2 105 9 1 1 0 0 1 87 9 1 1 1 0 95 10 1 0 1 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
48 47 46 45 44 43 34 19 37 33 38 33 36 17 16 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmAU_Reph;
},
{
glyphname = dvmAU_Reph_Anusvara;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,0,l),
(274,571,l),
(350,571,l),
(380,740,l),
(292,740,l),
(290,746,ls),
(283,768,o),
(279,799,o),
(282,818,qs),
(289,855,o),
(339,902,o),
(374,902,qs),
(416,902,o),
(450,849,o),
(441,814,q),
(577,814,l),
(594,876,o),
(570,974,o),
(488,1029,o),
(424,1029,qs),
(354,1029,o),
(256,963,o),
(231,912,q),
(196,996,o),
(137,1071,o),
(62,1091,o),
(-12,1091,qs),
(-72,1091,l),
(-94,965,l),
(-29,965,ls),
(8,965,o),
(50,956,o),
(93,919,o),
(112,877,q),
(89,896,o),
(50,912,o),
(4,916,o),
(-47,916,qs),
(-103,916,l),
(-125,791,l),
(-64,791,ls),
(-13,791,o),
(24,788,o),
(52,776,o),
(82,758,qs),
(114,740,l),
(23,740,l),
(-7,571,l),
(70,571,l),
(-30,0,l)
);
},
{
closed = 1;
nodes = (
(372,770,o),
(407,799,o),
(410,819,qs),
(414,840,o),
(389,869,o),
(368,869,qs),
(348,869,o),
(314,840,o),
(310,819,qs),
(307,799,o),
(331,770,o),
(351,770,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
26 1 8 3 15 1 12 8 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 7 12 2 8 7 114 0 11 0 11 134 0 5 0 4 3 5 4 105 0 6 0 8 12 6 8 105 0 3 0 2 13 3 2 105 0 12 14 1 13 1 12 13 105 9 1 1 0 0 1 87 9 1 1 1 0 95 10 1 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 65 values pushed */
0 7 12 2 12 7 2 128 0 11 0 11 134 0 5 0 4 3 5 4 105 0 6 0 8 12 6 8 105 0 3 0 2 13 3 2 105 0 12 14 1 13 1 12 13 105 9 1 1 0 0 1 87 9 1 1 1 0 95 10 1 0 1 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
50 50 50 61 50 60 56 54 49 48 47 46 45 44 34 19 37 33 38 33 36 17 16 15 6 31 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmAU_Reph_Anusvara;
},
{
glyphname = dvmEcandra_Anusvara;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-69,807,o),
(87,926,o),
(107,1040,q),
(-56,1040,l),
(-63,1000,o),
(-125,950,o),
(-171,950,qs),
(-217,950,o),
(-263,1000,o),
(-256,1040,q),
(-417,1040,l),
(-437,926,o),
(-323,807,o),
(-196,807,qs)
);
},
{
closed = 1;
nodes = (
(-134,989,o),
(-84,1031,o),
(-79,1062,qs),
(-74,1092,o),
(-108,1135,o),
(-140,1135,qs),
(-169,1135,o),
(-220,1092,o),
(-225,1062,qs),
(-230,1032,o),
(-196,989,o),
(-166,989,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
2 1 0 4 5 1 0 114 0 4 7 1 5 1 4 5 105 0 1 3 3 1 89 0 1 1 3 98 6 1 3 1 3 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
2 1 0 4 5 4 0 5 128 0 4 7 1 5 1 4 5 105 0 1 3 3 1 89 0 1 1 3 98 6 1 3 1 3 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
14 14 0 0 14 25 14 24 20 18 0 13 0 12 18 34 18 8 6 25 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmEcandra_Anusvara;
},
{
glyphname = dvmOcandra_Anusvara;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-34,0,l),
(170,0,l),
(271,571,l),
(347,571,l),
(376,740,l),
(19,740,l),
(-10,571,l),
(67,571,l)
);
},
{
closed = 1;
nodes = (
(337,807,o),
(493,926,o),
(513,1040,q),
(350,1040,l),
(343,1000,o),
(281,950,o),
(235,950,qs),
(189,950,o),
(143,1000,o),
(150,1040,q),
(-11,1040,l),
(-31,926,o),
(83,807,o),
(210,807,qs)
);
},
{
closed = 1;
nodes = (
(272,989,o),
(322,1031,o),
(327,1062,qs),
(332,1092,o),
(298,1135,o),
(266,1135,qs),
(237,1135,o),
(186,1092,o),
(181,1062,qs),
(176,1032,o),
(211,989,o),
(240,989,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
6 1 4 8 9 5 4 114 0 2 1 2 134 0 8 12 1 9 5 8 9 105 0 5 11 1 7 0 5 7 106 0 0 1 1 0 87 0 0 0 1 95 10 3 2 1 0 1 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
6 1 4 8 9 8 4 9 128 0 2 1 2 134 0 8 12 1 9 5 8 9 105 0 5 11 1 7 0 5 7 106 0 0 1 1 0 87 0 0 0 1 95 10 3 2 1 0 1 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
22 22 8 8 0 0 22 33 22 32 28 26 8 21 8 20 18 17 15 13 11 10 0 7 0 7 17 17 17 13 6 25 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmOcandra_Anusvara;
},
{
glyphname = dvRA_mU;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(25,571,l),
(308,571,l),
(304,545,ls),
(294,493,o),
(233,438,o),
(161,438,qs),
(63,438,l),
(22,209,ls),
(11,147,o),
(48,48,o),
(143,-9,o),
(217,-9,qs),
(320,-9,o),
(455,106,o),
(472,203,qs),
(475,221,l),
(280,221,l),
(275,196,ls),
(273,182,o),
(256,164,o),
(243,164,qs),
(216,164,o),
(223,199,qs),
(236,276,l),
(567,276,ls),
(585,276,o),
(601,260,o),
(599,247,qs),
(594,217,o),
(554,217,qs),
(543,217,o),
(525,219,q),
(497,58,l),
(518,54,o),
(544,54,qs),
(636,54,o),
(763,156,o),
(778,240,qs),
(813,438,o),
(579,438,qs),
(468,438,l),
(498,489,o),
(508,545,qs),
(512,571,l),
(869,571,l),
(899,740,l),
(55,740,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
14 1 3 6 13 1 2 5 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
14 1 3 4 13 1 2 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
14 1 3 6 13 1 2 5 2 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 6 4 3 5 6 114 11 1 10 9 1 0 1 10 0 103 8 1 1 0 4 6 1 4 103 0 5 2 7 5 89 0 3 0 2 7 3 2 105 0 5 5 7 98 0 7 5 7 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
11 1 10 9 1 0 1 10 0 103 8 1 1 0 4 3 1 4 103 0 5 2 7 5 89 6 1 3 0 2 7 3 2 105 0 5 5 7 98 0 7 5 7 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 6 4 3 5 6 114 11 1 10 9 1 0 1 10 0 103 8 1 1 0 4 6 1 4 103 0 5 2 7 5 89 0 3 0 2 7 3 2 105 0 5 5 7 98 0 7 5 7 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 6 4 3 4 6 3 128 11 1 10 9 1 0 1 10 0 103 8 1 1 0 4 6 1 4 103 0 5 2 7 5 89 0 3 0 2 7 3 2 105 0 5 5 7 98 0 7 5 7 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 46 0 46 45 44 36 35 19 34 35 35 35 35 17 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 821;
}
);
note = dvRA_mU;
},
{
glyphname = dvRA_mUU;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(25,571,l),
(308,571,l),
(304,545,ls),
(294,493,o),
(233,438,o),
(161,438,qs),
(63,438,l),
(22,209,ls),
(11,147,o),
(48,48,o),
(143,-9,o),
(217,-9,qs),
(320,-9,o),
(455,106,o),
(472,203,qs),
(475,221,l),
(280,221,l),
(275,196,ls),
(273,182,o),
(256,164,o),
(243,164,qs),
(216,164,o),
(223,199,qs),
(236,276,l),
(465,276,ls),
(505,276,o),
(540,233,o),
(533,198,qs),
(519,116,l),
(708,116,l),
(723,203,ls),
(743,312,o),
(639,438,o),
(516,438,qs),
(468,438,l),
(498,489,o),
(508,545,qs),
(512,571,l),
(824,571,l),
(854,740,l),
(55,740,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 5 3 4 4 5 114 0 2 4 6 4 2 6 128 10 1 9 8 1 0 1 9 0 103 7 1 1 0 3 5 1 3 103 0 4 2 6 4 89 0 4 4 6 98 0 6 4 6 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 5 3 4 3 5 4 128 0 2 4 6 4 2 6 128 10 1 9 8 1 0 1 9 0 103 7 1 1 0 3 5 1 3 103 0 4 2 6 4 89 0 4 4 6 98 0 6 4 6 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 40 0 40 19 36 35 19 34 35 19 35 17 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 777;
}
);
note = dvRA_mUU;
},
{
glyphname = dvmI.a01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,571,l),
(354,571,l),
(384,740,l),
(307,740,l),
(326,809,o),
(433,888,o),
(503,888,qs),
(552,888,o),
(623,845,o),
(655,765,o),
(645,710,qs),
(643,696,l),
(841,696,l),
(844,714,ls),
(861,808,o),
(802,962,o),
(650,1053,o),
(532,1053,qs),
(417,1053,o),
(238,971,o),
(125,829,o),
(105,740,q),
(27,740,l),
(-3,571,l),
(74,571,l),
(-27,0,l),
(177,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 26 0 26 17 18 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a01;
},
{
glyphname = dvmI.a02;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,571,l),
(354,571,l),
(384,740,l),
(307,740,l),
(326,811,o),
(444,889,o),
(531,889,qs),
(625,889,o),
(718,793,o),
(703,708,qs),
(700,694,l),
(899,694,l),
(903,713,ls),
(920,809,o),
(857,964,o),
(691,1054,o),
(560,1054,qs),
(434,1054,o),
(244,973,o),
(126,831,o),
(105,740,q),
(27,740,l),
(-3,571,l),
(74,571,l),
(-27,0,l),
(177,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 25 0 25 17 18 35 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a02;
},
{
glyphname = dvmI.a03;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,571,l),
(354,571,l),
(383,740,l),
(306,740,l),
(327,813,o),
(455,890,o),
(558,890,qs),
(671,890,o),
(776,794,o),
(760,705,qs),
(758,692,l),
(958,692,l),
(961,710,ls),
(979,809,o),
(912,965,o),
(733,1055,o),
(589,1055,qs),
(451,1055,o),
(248,974,o),
(126,832,o),
(104,740,q),
(26,740,l),
(-3,571,l),
(74,571,l),
(-27,0,l),
(177,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 25 0 25 17 18 35 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a03;
},
{
glyphname = dvmI.a04;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,571,l),
(354,571,l),
(383,740,l),
(306,740,l),
(349,891,o),
(585,891,qs),
(718,891,o),
(835,795,o),
(819,703,qs),
(817,691,l),
(1016,691,l),
(1019,708,ls),
(1037,809,o),
(966,966,o),
(774,1056,o),
(616,1056,qs),
(394,1056,o),
(139,885,o),
(104,740,q),
(26,740,l),
(-3,571,l),
(74,571,l),
(-27,0,l),
(177,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 23 0 23 17 17 35 20 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a04;
},
{
glyphname = dvmI.a05;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,571,l),
(353,571,l),
(383,740,l),
(306,740,l),
(328,815,o),
(476,892,o),
(613,892,qs),
(911,892,o),
(877,701,qs),
(875,689,l),
(1074,689,l),
(1077,706,ls),
(1095,809,o),
(1020,967,o),
(815,1057,o),
(645,1057,qs),
(405,1057,o),
(139,887,o),
(104,740,q),
(26,740,l),
(-4,571,l),
(73,571,l),
(-27,0,l),
(177,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 23 0 23 17 18 34 20 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a05;
},
{
glyphname = dvmI.a06;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,571,l),
(353,571,l),
(383,740,l),
(306,740,l),
(329,816,o),
(486,893,o),
(640,893,qs),
(811,893,o),
(951,796,o),
(934,699,qs),
(932,687,l),
(1132,687,l),
(1135,704,ls),
(1164,867,o),
(945,1058,o),
(673,1058,qs),
(416,1058,o),
(139,889,o),
(104,740,q),
(26,740,l),
(-4,571,l),
(73,571,l),
(-27,0,l),
(177,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 23 0 23 17 18 35 19 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a06;
},
{
glyphname = dvmI.a07;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,571,l),
(353,571,l),
(383,740,l),
(306,740,l),
(329,818,o),
(497,893,o),
(668,893,qs),
(859,893,o),
(1010,797,o),
(993,697,qs),
(991,685,l),
(1190,685,l),
(1193,702,ls),
(1222,868,o),
(992,1058,o),
(702,1058,qs),
(427,1058,o),
(141,892,o),
(104,740,q),
(26,740,l),
(-4,571,l),
(73,571,l),
(-27,0,l),
(177,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 23 0 23 17 18 35 19 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a07;
},
{
glyphname = dvmI.a08;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,571,l),
(353,571,l),
(383,740,l),
(306,740,l),
(321,792,o),
(406,860,o),
(568,894,o),
(696,894,qs),
(837,894,o),
(1002,851,o),
(1063,763,o),
(1051,695,qs),
(1049,684,l),
(1248,684,l),
(1251,700,ls),
(1314,1059,o),
(731,1059,qs),
(437,1059,o),
(141,894,o),
(104,740,q),
(26,740,l),
(-4,571,l),
(73,571,l),
(-27,0,l),
(177,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 24 0 24 17 19 36 18 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a08;
},
{
glyphname = dvmI.a09;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,571,l),
(353,571,l),
(383,740,l),
(306,740,l),
(321,793,o),
(410,861,o),
(582,895,o),
(722,895,qs),
(877,895,o),
(1054,851,o),
(1119,763,o),
(1107,692,qs),
(1105,682,l),
(1306,682,l),
(1308,697,ls),
(1339,870,o),
(1086,1060,o),
(758,1060,qs),
(447,1060,o),
(142,896,o),
(104,740,q),
(26,740,l),
(-4,571,l),
(73,571,l),
(-27,0,l),
(177,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 25 0 25 17 19 36 19 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a09;
},
{
glyphname = dvmI.a10;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,571,l),
(353,571,l),
(383,740,l),
(306,740,l),
(321,794,o),
(414,862,o),
(598,896,o),
(750,896,qs),
(918,896,o),
(1108,852,o),
(1178,762,o),
(1165,690,qs),
(1163,680,l),
(1363,680,l),
(1366,695,ls),
(1397,871,o),
(1135,1061,o),
(787,1061,qs),
(564,1061,o),
(277,985,o),
(128,844,o),
(104,740,q),
(26,740,l),
(-4,571,l),
(73,571,l),
(-28,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 26 0 26 17 19 36 19 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a10;
},
{
glyphname = dvmI.a11;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,571,l),
(353,571,l),
(383,740,l),
(306,740,l),
(322,794,o),
(419,863,o),
(615,897,o),
(779,897,qs),
(960,897,o),
(1162,853,o),
(1237,762,o),
(1224,688,qs),
(1222,678,l),
(1422,678,l),
(1425,693,ls),
(1445,810,o),
(1348,973,o),
(1065,1062,o),
(815,1062,qs),
(580,1062,o),
(282,987,o),
(129,845,o),
(104,740,q),
(26,740,l),
(-4,571,l),
(73,571,l),
(-28,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a11;
},
{
glyphname = dvmI.a12;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,571,l),
(353,571,l),
(383,740,l),
(306,740,l),
(322,795,o),
(422,863,o),
(631,898,o),
(806,898,qs),
(1001,898,o),
(1217,853,o),
(1295,761,o),
(1282,686,qs),
(1281,677,l),
(1481,677,l),
(1483,691,ls),
(1504,810,o),
(1402,974,o),
(1107,1063,o),
(844,1063,qs),
(596,1063,o),
(286,988,o),
(130,847,o),
(104,740,q),
(26,740,l),
(-4,571,l),
(73,571,l),
(-28,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a12;
},
{
glyphname = dvmI.a13;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,571,l),
(353,571,l),
(383,740,l),
(306,740,l),
(322,795,o),
(427,864,o),
(646,899,o),
(833,899,qs),
(1041,899,o),
(1270,854,o),
(1353,762,o),
(1339,685,qs),
(1337,675,l),
(1539,675,l),
(1542,689,ls),
(1563,810,o),
(1457,975,o),
(1149,1064,o),
(872,1064,qs),
(612,1064,o),
(291,990,o),
(130,848,o),
(104,740,q),
(26,740,l),
(-4,571,l),
(73,571,l),
(-28,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a13;
},
{
glyphname = dvmI.a14;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,571,l),
(353,571,l),
(383,740,l),
(307,740,l),
(323,796,o),
(432,865,o),
(663,900,o),
(861,900,qs),
(1082,900,o),
(1324,855,o),
(1411,761,o),
(1397,682,qs),
(1396,674,l),
(1597,673,l),
(1599,686,ls),
(1621,810,o),
(1511,976,o),
(1191,1065,o),
(901,1065,qs),
(628,1065,o),
(296,992,o),
(130,850,o),
(104,740,q),
(26,740,l),
(-4,571,l),
(73,571,l),
(-28,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a14;
},
{
glyphname = dvmI.a15;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,571,l),
(353,571,l),
(382,740,l),
(306,740,l),
(324,797,o),
(435,866,o),
(678,901,o),
(889,901,qs),
(1124,901,o),
(1378,856,o),
(1470,761,o),
(1456,680,qs),
(1455,672,l),
(1656,672,l),
(1658,685,ls),
(1680,810,o),
(1566,977,o),
(1232,1066,o),
(929,1066,qs),
(644,1066,o),
(299,993,o),
(130,851,o),
(103,740,q),
(25,740,l),
(-4,571,l),
(73,571,l),
(-28,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a15;
},
{
glyphname = dvmI.a16;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,571,l),
(353,571,l),
(382,740,l),
(306,740,l),
(324,798,o),
(440,868,o),
(694,902,o),
(916,902,qs),
(1165,902,o),
(1432,857,o),
(1527,761,o),
(1512,678,qs),
(1511,671,l),
(1714,671,l),
(1716,683,ls),
(1739,811,o),
(1621,978,o),
(1274,1067,o),
(957,1067,qs),
(660,1067,o),
(303,995,o),
(130,853,o),
(103,740,q),
(25,740,l),
(-4,571,l),
(73,571,l),
(-28,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a16;
},
{
glyphname = dvmI.a17;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,571,l),
(353,571,l),
(382,740,l),
(306,740,l),
(324,799,o),
(444,868,o),
(709,903,o),
(944,903,qs),
(1205,903,o),
(1486,857,o),
(1586,760,o),
(1571,676,qs),
(1570,669,l),
(1772,669,l),
(1774,681,ls),
(1797,811,o),
(1675,979,o),
(1315,1068,o),
(985,1068,qs),
(675,1068,o),
(307,996,o),
(130,854,o),
(103,740,q),
(25,740,l),
(-4,571,l),
(73,571,l),
(-28,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a17;
},
{
glyphname = dvmI.a18;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(276,571,l),
(352,571,l),
(382,740,l),
(306,740,l),
(325,799,o),
(448,869,o),
(725,904,o),
(972,904,qs),
(1247,904,o),
(1540,858,o),
(1645,759,o),
(1630,674,qs),
(1628,667,l),
(1829,667,l),
(1831,679,ls),
(1855,811,o),
(1731,980,o),
(1358,1069,o),
(1014,1069,qs),
(692,1069,o),
(313,998,o),
(132,856,o),
(103,740,q),
(25,740,l),
(-5,571,l),
(72,571,l),
(-28,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a18;
},
{
glyphname = dvmI.a19;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(276,571,l),
(352,571,l),
(382,740,l),
(306,740,l),
(325,800,o),
(452,870,o),
(740,905,o),
(998,905,qs),
(1286,905,o),
(1593,859,o),
(1701,759,o),
(1686,672,qs),
(1685,665,l),
(1887,665,l),
(1889,677,ls),
(1913,811,o),
(1784,981,o),
(1398,1070,o),
(1041,1070,qs),
(707,1070,o),
(317,999,o),
(132,857,o),
(103,740,q),
(25,740,l),
(-5,571,l),
(72,571,l),
(-28,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a19;
},
{
glyphname = dvmI.a20;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(276,571,l),
(352,571,l),
(382,740,l),
(306,740,l),
(326,800,o),
(457,871,o),
(756,906,o),
(1025,906,qs),
(1328,906,o),
(1647,859,o),
(1759,758,o),
(1744,669,qs),
(1743,664,l),
(1946,664,l),
(1947,674,ls),
(1972,811,o),
(1839,982,o),
(1441,1071,o),
(1070,1071,qs),
(723,1071,o),
(321,1001,o),
(132,858,o),
(103,740,q),
(25,740,l),
(-5,571,l),
(72,571,l),
(-28,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a20;
},
{
glyphname = dvmI.a21;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(276,571,l),
(352,571,l),
(382,740,l),
(306,740,l),
(326,801,o),
(460,871,o),
(771,906,o),
(1053,906,qs),
(1369,906,o),
(1701,859,o),
(1818,758,o),
(1802,667,qs),
(1801,662,l),
(2003,662,l),
(2005,672,ls),
(2029,811,o),
(1893,983,o),
(1483,1072,o),
(1099,1072,qs),
(738,1072,o),
(324,1003,o),
(132,860,o),
(103,740,q),
(25,740,l),
(-5,571,l),
(72,571,l),
(-29,0,l),
(175,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a21;
},
{
glyphname = dvmI.a22;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(276,571,l),
(352,571,l),
(382,740,l),
(306,740,l),
(326,801,o),
(464,872,o),
(787,907,o),
(1081,907,qs),
(1410,907,o),
(1755,860,o),
(1877,757,o),
(1861,665,qs),
(1860,660,l),
(2062,660,l),
(2064,670,ls),
(2088,811,o),
(1948,984,o),
(1525,1073,o),
(1127,1073,qs),
(754,1073,o),
(328,1004,o),
(132,861,o),
(103,740,q),
(25,740,l),
(-5,571,l),
(72,571,l),
(-29,0,l),
(175,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a22;
},
{
glyphname = dvmI.a23;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(276,571,l),
(352,571,l),
(382,740,l),
(306,740,l),
(326,802,o),
(468,873,o),
(802,908,o),
(1108,908,qs),
(1452,908,o),
(1809,861,o),
(1934,757,o),
(1917,663,qs),
(1916,658,l),
(2120,658,l),
(2122,668,ls),
(2147,811,o),
(2003,985,o),
(1567,1074,o),
(1155,1074,qs),
(770,1074,o),
(334,1005,o),
(132,863,o),
(103,740,q),
(25,740,l),
(-5,571,l),
(72,571,l),
(-29,0,l),
(175,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a23;
},
{
glyphname = dvmI.a24;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(276,571,l),
(352,571,l),
(382,740,l),
(306,740,l),
(326,803,o),
(472,874,o),
(818,909,o),
(1137,909,qs),
(1494,909,o),
(1863,862,o),
(1993,756,o),
(1976,661,qs),
(1975,657,l),
(2178,657,l),
(2180,666,ls),
(2205,811,o),
(2057,986,o),
(1609,1075,o),
(1184,1075,qs),
(785,1075,o),
(337,1007,o),
(133,864,o),
(103,740,q),
(25,740,l),
(-5,571,l),
(72,571,l),
(-29,0,l),
(175,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 335;
}
);
note = dvmI.a24;
},
{
glyphname = exclam;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(116,281,o),
(127,281,qs),
(297,281,ls),
(308,281,o),
(309,291,qs),
(414,745,ls),
(415,755,o),
(406,755,qs),
(184,755,ls),
(175,755,o),
(174,745,qs),
(117,291,ls)
);
},
{
closed = 1;
nodes = (
(315,149,o),
(257,212,o),
(200,212,qs),
(142,212,o),
(60,149,o),
(52,101,qs),
(44,54,o),
(103,-8,o),
(161,-8,qs),
(218,-8,o),
(299,54,o),
(307,101,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 0 0 1 3 0 1 103 0 3 3 2 97 0 2 2 35 2 78 36 35 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 455;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = quotedbl;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(27,568,o),
(38,568,qs),
(166,568,ls),
(177,568,o),
(179,578,qs),
(228,793,ls),
(230,803,o),
(221,803,qs),
(66,803,ls),
(57,803,o),
(55,793,qs),
(29,578,ls)
);
},
{
closed = 1;
nodes = (
(272,568,o),
(283,568,qs),
(411,568,ls),
(422,568,o),
(424,578,qs),
(473,793,ls),
(475,803,o),
(466,803,qs),
(311,803,ls),
(302,803,o),
(300,793,qs),
(274,578,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 51 51 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 490;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = numbersign;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(532,326,o),
(499,326,qs),
(431,326,ls),
(413,326,o),
(400,346,o),
(407,364,qs),
(417,390,ls),
(428,421,o),
(461,421,qs),
(529,421,ls),
(547,421,o),
(560,401,o),
(553,383,qs),
(544,357,ls)
);
},
{
closed = 1;
nodes = (
(404,0,o),
(415,0,qs),
(601,0,ls),
(611,0,o),
(613,9,qs),
(645,93,ls),
(657,124,o),
(690,124,qs),
(802,124,ls),
(812,124,o),
(813,134,qs),
(845,316,ls),
(847,326,o),
(837,326,qs),
(776,326,ls),
(758,326,o),
(745,346,o),
(752,364,qs),
(762,390,ls),
(773,421,o),
(806,421,qs),
(922,421,ls),
(932,421,o),
(934,431,qs),
(966,613,ls),
(968,623,o),
(958,623,qs),
(892,623,ls),
(874,623,o),
(860,643,o),
(867,661,qs),
(894,729,ls),
(898,740,o),
(887,740,qs),
(701,740,ls),
(692,740,o),
(689,731,qs),
(659,654,ls),
(648,623,o),
(615,623,qs),
(547,623,ls),
(529,623,o),
(515,643,o),
(522,661,qs),
(549,729,ls),
(553,740,o),
(542,740,qs),
(357,740,ls),
(348,740,o),
(345,731,qs),
(315,654,ls),
(304,623,o),
(271,623,qs),
(123,623,l),
(87,421,l),
(185,421,ls),
(203,421,o),
(216,401,o),
(209,383,qs),
(200,357,ls),
(188,326,o),
(155,326,qs),
(12,326,ls),
(2,326,o),
(0,316,qs),
(-32,134,ls),
(-33,124,o),
(-23,124,qs),
(69,124,ls),
(87,124,o),
(100,104,o),
(93,86,qs),
(64,11,ls),
(60,0,o),
(71,0,qs),
(256,0,ls),
(266,0,o),
(268,9,qs),
(300,93,ls),
(312,124,o),
(345,124,qs),
(413,124,ls),
(431,124,o),
(444,104,o),
(437,86,qs),
(408,11,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
10 1 8 7 7 8 112 11 9 2 7 12 6 2 0 1 7 0 104 13 5 2 1 14 4 2 2 3 1 2 103 15 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
10 1 8 7 8 133 11 9 2 7 12 6 2 0 1 7 0 104 13 5 2 1 14 4 2 2 3 1 2 103 15 1 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
98 95 92 89 86 83 79 76 73 70 66 63 60 57 51 33 36 51 52 51 52 52 50 16 8 31 
CALL[ ]	/* CallFunction */";
};
width = 933;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = dollar;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,-87,l),
(297,-7,l),
(384,-5,o),
(518,53,o),
(600,149,o),
(611,209,qs),
(623,279,o),
(568,367,o),
(479,412,o),
(408,435,qs),
(377,445,l),
(394,542,l),
(412,529,o),
(410,491,q),
(649,491,l),
(660,594,o),
(543,711,o),
(425,719,q),
(439,800,l),
(377,800,l),
(363,719,l),
(287,716,o),
(156,664,o),
(67,569,o),
(56,504,qs),
(43,429,o),
(102,338,o),
(194,294,o),
(268,273,qs),
(284,269,l),
(266,171,l),
(241,186,o),
(245,227,q),
(9,227,l),
(-2,124,o),
(121,6,o),
(235,-5,q),
(221,-87,l)
);
},
{
closed = 1;
nodes = (
(367,170,o),
(327,162,q),
(342,248,l),
(378,230,o),
(373,204,qs)
);
},
{
closed = 1;
nodes = (
(301,544,o),
(333,550,q),
(319,470,l),
(291,488,o),
(296,514,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
45 25 2 4 1 44 39 26 7 4 0 4 40 6 0 3 5 0 3 76 0 0 4 5 4 0 5 128 0 2 0 6 2 6 99 0 4 4 1 97 3 1 1 1 34 77 0 5 5 35 5 78 17 27 18 17 17 27 19 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = percent;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(38,452,o),
(122,360,o),
(203,360,qs),
(283,360,o),
(398,452,o),
(414,540,qs),
(429,628,o),
(346,721,o),
(266,721,qs),
(185,721,o),
(69,628,o),
(54,540,qs)
);
},
{
closed = 1;
nodes = (
(260,592,o),
(274,566,o),
(270,540,qs),
(265,515,o),
(242,489,o),
(224,489,qs),
(190,489,o),
(199,540,qs),
(208,592,o),
(242,592,qs)
);
},
{
closed = 1;
nodes = (
(114,0,l),
(326,0,l),
(825,711,l),
(613,711,l)
);
},
{
closed = 1;
nodes = (
(510,83,o),
(594,-10,o),
(674,-10,qs),
(755,-10,o),
(869,83,o),
(884,171,qs),
(900,259,o),
(818,352,o),
(737,352,qs),
(657,352,o),
(541,259,o),
(525,171,qs)
);
},
{
closed = 1;
nodes = (
(731,223,o),
(745,196,o),
(740,171,qs),
(736,145,o),
(712,119,o),
(695,119,qs),
(660,119,o),
(669,171,qs),
(679,223,o),
(714,223,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 0 1 6 2 1 105 0 6 12 1 9 8 6 9 106 10 1 3 3 0 97 11 5 2 0 0 34 77 0 8 8 4 97 7 1 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 2 0 1 6 2 1 105 0 6 12 1 9 8 6 9 106 11 1 5 5 28 77 10 1 3 3 0 97 0 0 0 34 77 0 4 4 29 77 0 8 8 7 97 0 7 7 35 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
38 38 22 22 12 12 38 47 38 46 42 40 35 33 29 27 22 25 22 25 24 23 12 21 12 20 37 36 33 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 938;
}
);
note = percent;
unicode = 37;
},
{
glyphname = ampersand;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(628,524,o),
(629,534,qs),
(635,584,o),
(595,669,o),
(498,721,o),
(423,721,qs),
(347,721,o),
(228,668,o),
(155,578,o),
(146,524,qs),
(135,461,o),
(171,404,q),
(103,370,o),
(21,268,o),
(10,207,qs),
(-1,143,o),
(49,44,o),
(167,-10,o),
(253,-10,qs),
(380,-10,o),
(483,46,q),
(520,5,ls),
(524,0,o),
(531,0,qs),
(750,0,ls),
(757,0,o),
(762,7,o),
(757,12,qs),
(630,162,l),
(700,240,o),
(755,340,qs),
(764,354,ls),
(767,359,o),
(763,366,o),
(758,366,qs),
(564,366,ls),
(555,366,o),
(550,358,q),
(550,357,l),
(533,323,o),
(515,296,q),
(381,452,ls),
(344,494,o),
(350,526,qs),
(353,543,o),
(379,562,o),
(395,562,qs),
(408,562,o),
(426,548,o),
(426,534,qs),
(426,524,o),
(436,524,qs),
(618,524,ls)
);
},
{
closed = 1;
nodes = (
(259,165,o),
(221,201,o),
(225,227,qs),
(228,243,o),
(251,274,o),
(270,286,q),
(368,176,l),
(335,165,o),
(299,165,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
40 1 2 0 55 54 11 3 6 2 31 23 2 3 6 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 1 5 0 0 1 114 7 1 0 0 5 98 0 5 5 34 77 0 2 2 3 97 4 1 3 3 29 77 8 1 6 6 3 97 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 1 5 0 0 1 114 7 1 0 0 5 98 0 5 5 34 77 0 2 2 3 95 0 3 3 29 77 8 1 6 6 4 97 0 4 4 35 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 1 5 0 5 1 0 128 7 1 0 0 5 98 0 5 5 34 77 0 2 2 3 95 0 3 3 29 77 8 1 6 6 4 97 0 4 4 35 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
53 53 1 0 53 61 53 60 47 45 34 32 28 26 17 15 6 4 0 52 1 51 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 831;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = quotesingle;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(37,568,o),
(48,568,qs),
(176,568,ls),
(187,568,o),
(189,578,qs),
(238,793,ls),
(240,803,o),
(231,803,qs),
(76,803,ls),
(67,803,o),
(65,793,qs),
(39,578,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 51 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 265;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = parenleft;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,-209,l),
(250,-107,o),
(189,180,o),
(216,333,qs),
(243,485,o),
(405,772,o),
(520,874,q),
(524,895,l),
(310,895,l),
(198,804,o),
(35,506,o),
(4,333,qs),
(-27,160,o),
(32,-138,o),
(112,-229,q),
(326,-229,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
14 8 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 15 0 15 22 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 463;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-58,-209,l),
(57,-107,o),
(220,180,o),
(247,333,qs),
(274,485,o),
(212,772,o),
(133,874,q),
(137,895,l),
(351,895,l),
(431,804,o),
(490,506,o),
(459,333,qs),
(428,160,o),
(265,-138,o),
(153,-229,q),
(-61,-229,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
14 8 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 15 0 15 22 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 463;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = asterisk;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(390,744,o),
(379,744,qs),
(260,744,ls),
(255,744,o),
(249,738,o),
(249,733,qs),
(254,668,ls),
(256,654,o),
(239,645,o),
(230,655,qs),
(187,700,ls),
(184,704,o),
(176,703,o),
(173,698,q),
(99,597,ls),
(96,593,o),
(98,586,o),
(103,584,qs),
(157,567,ls),
(170,563,o),
(167,547,o),
(152,542,qs),
(90,522,ls),
(79,519,o),
(82,509,qs),
(126,400,l),
(127,395,o),
(135,394,o),
(140,398,qs),
(192,443,ls),
(205,454,o),
(218,446,o),
(212,431,qs),
(187,371,ls),
(182,360,o),
(193,360,qs),
(310,360,ls),
(315,360,o),
(321,366,o),
(320,371,q),
(317,432,ls),
(316,446,o),
(333,455,o),
(341,445,qs),
(379,399,ls),
(382,395,o),
(390,396,o),
(393,401,q),
(473,508,ls),
(480,518,o),
(471,521,qs),
(415,540,ls),
(403,545,o),
(406,561,o),
(419,565,qs),
(482,585,ls),
(487,587,o),
(491,594,o),
(490,598,qs),
(451,699,ls),
(448,709,o),
(438,701,qs),
(377,654,ls),
(364,644,o),
(351,653,o),
(357,667,qs),
(385,733,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
60 26 7 3 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 65 62 31 28 2 8 22 
CALL[ ]	/* CallFunction */";
};
width = 561;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = plus;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,595,o),
(212,585,qs),
(191,466,ls),
(187,441,o),
(162,441,qs),
(48,441,ls),
(38,441,o),
(36,431,qs),
(4,248,ls),
(2,238,o),
(12,238,qs),
(126,238,ls),
(151,238,o),
(147,213,qs),
(126,95,ls),
(124,85,o),
(134,85,qs),
(327,85,ls),
(337,85,o),
(339,95,qs),
(360,213,ls),
(364,238,o),
(389,238,qs),
(503,238,ls),
(513,238,o),
(515,248,qs),
(547,431,ls),
(549,441,o),
(539,441,qs),
(425,441,ls),
(400,441,o),
(404,466,qs),
(425,585,ls),
(427,595,o),
(417,595,qs),
(224,595,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
6 1 0 1 3 0 87 5 1 1 4 1 2 3 1 2 103 6 1 0 0 3 95 0 3 0 3 79 1 0 31 28 25 22 19 16 13 10 7 4 0 35 1 34 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = plus;
unicode = 43;
},
{
glyphname = comma;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(2,-155,o),
(7,-161,o),
(11,-161,qs),
(137,-161,ls),
(146,-161,o),
(150,-153,qs),
(336,194,l),
(341,205,o),
(330,205,qs),
(131,205,ls),
(123,205,o),
(120,196,qs),
(4,-150,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 35 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 348;
}
);
note = comma;
unicode = 44;
},
{
glyphname = hyphen;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(33,270,o),
(43,270,qs),
(437,270,ls),
(447,270,o),
(449,280,qs),
(471,403,ls),
(473,413,o),
(463,413,qs),
(69,413,ls),
(59,413,o),
(57,403,qs),
(35,280,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 51 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = period;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(295,149,o),
(236,212,o),
(179,212,qs),
(121,212,o),
(40,149,o),
(32,101,qs),
(24,54,o),
(83,-8,o),
(141,-8,qs),
(198,-8,o),
(279,54,o),
(287,101,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 97 0 0 0 35 0 78 36 33 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 319;
}
);
note = period;
unicode = 46;
},
{
glyphname = slash;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-137,-198,o),
(-127,-198,qs),
(66,-198,ls),
(75,-198,o),
(79,-189,qs),
(539,944,ls),
(543,955,o),
(533,955,qs),
(341,955,ls),
(332,955,o),
(328,946,qs),
(-133,-187,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 51 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 399;
}
);
note = slash;
unicode = 47;
},
{
glyphname = zero;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(2,203,o),
(113,4,o),
(266,4,qs),
(418,4,o),
(602,203,o),
(632,376,qs),
(662,548,o),
(550,747,o),
(398,747,qs),
(245,747,o),
(63,549,o),
(32,376,qs)
);
},
{
closed = 1;
nodes = (
(399,295,o),
(353,214,o),
(304,214,qs),
(254,214,o),
(236,295,o),
(250,376,qs),
(264,456,o),
(310,537,o),
(360,537,qs),
(409,537,o),
(427,456,o),
(413,376,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 0 0 2 3 0 2 105 0 3 3 1 97 0 1 1 29 1 78 36 36 36 33 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 662;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(285,0,l),
(406,686,ls),
(409,708,o),
(390,731,o),
(368,731,qs),
(122,731,l),
(38,523,l),
(99,523,ls),
(121,523,o),
(140,500,o),
(136,478,qs),
(52,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 28 77 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 1 0 0 2 1 0 105 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
19 33 34 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 399;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,10,ls),
(480,10,o),
(482,20,qs),
(504,144,ls),
(508,166,o),
(489,189,o),
(467,189,qs),
(283,189,l),
(390,250,o),
(551,427,o),
(568,528,qs),
(585,624,o),
(488,747,o),
(360,747,qs),
(249,747,o),
(76,620,o),
(44,488,qs),
(43,478,o),
(53,478,qs),
(215,478,ls),
(235,478,o),
(258,500,o),
(268,523,qs),
(283,561,o),
(312,561,qs),
(329,561,o),
(346,535,o),
(341,511,qs),
(329,440,o),
(144,277,o),
(-8,177,q),
(-37,10,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 4 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 3 0 1 114 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 29 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 4 4 3 87 0 3 3 4 95 0 4 3 4 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 37 35 51 37 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(262,502,o),
(285,521,o),
(298,543,qs),
(310,564,o),
(332,564,qs),
(348,564,o),
(365,540,o),
(361,515,qs),
(350,457,o),
(283,461,qs),
(272,461,ls),
(247,461,o),
(243,436,qs),
(220,307,ls),
(215,282,o),
(240,282,qs),
(252,282,ls),
(296,282,o),
(328,253,o),
(323,225,qs),
(320,203,o),
(291,176,o),
(273,176,qs),
(234,176,o),
(228,207,qs),
(225,229,o),
(210,249,o),
(190,249,qs),
(26,249,ls),
(16,249,o),
(14,239,qs),
(-3,112,o),
(124,-7,o),
(251,-7,qs),
(327,-7,o),
(447,47,o),
(524,145,o),
(536,209,qs),
(556,322,o),
(462,368,qs),
(452,373,o),
(453,382,o),
(465,387,qs),
(505,405,o),
(571,482,o),
(582,543,qs),
(592,601,o),
(551,693,o),
(448,747,o),
(369,747,qs),
(250,747,o),
(96,627,o),
(70,512,qs),
(68,502,o),
(78,502,qs),
(243,502,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
8 1 0 7 6 7 0 114 0 3 5 4 4 3 114 0 1 0 7 0 1 7 105 0 6 0 5 3 6 5 105 0 4 4 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
8 1 0 7 6 7 0 114 0 3 5 4 5 3 4 128 0 1 0 7 0 1 7 105 0 6 0 5 3 6 5 105 0 4 4 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
8 1 0 7 6 7 0 6 128 0 3 5 4 5 3 4 128 0 1 0 7 0 1 7 105 0 6 0 5 3 6 5 105 0 4 4 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 51 49 46 43 40 37 33 31 28 25 22 20 6 4 0 55 1 54 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(303,10,ls),
(302,0,o),
(312,0,qs),
(516,0,ls),
(526,0,o),
(527,10,qs),
(545,110,l),
(607,110,ls),
(617,110,o),
(619,120,qs),
(649,292,ls),
(651,302,o),
(641,302,qs),
(624,302,ls),
(602,302,o),
(583,325,o),
(587,347,qs),
(651,710,ls),
(652,720,o),
(642,720,qs),
(413,720,l),
(41,295,l),
(8,110,l),
(321,110,l)
);
},
{
closed = 1;
nodes = (
(265,302,l),
(402,467,l),
(373,302,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
24 1 1 0 1 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
5 1 1 6 4 2 2 3 1 2 106 0 0 0 28 77 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 1 0 133 5 1 1 6 4 2 2 3 1 2 106 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 26 25 0 23 0 23 50 35 52 34 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,731,o),
(157,721,qs),
(79,283,l),
(295,283,l),
(298,296,o),
(323,316,o),
(344,316,qs),
(369,316,o),
(391,286,o),
(386,257,qs),
(380,226,o),
(350,190,o),
(325,190,qs),
(304,190,o),
(286,211,o),
(285,225,qs),
(286,234,o),
(277,234,qs),
(80,234,ls),
(70,234,o),
(68,224,qs),
(57,158,o),
(106,57,o),
(219,0,o),
(303,0,qs),
(421,0,o),
(579,133,o),
(600,253,qs),
(612,318,o),
(584,425,o),
(502,489,o),
(434,489,qs),
(396,489,o),
(331,469,o),
(309,452,q),
(322,526,ls),
(324,536,o),
(334,536,qs),
(569,536,ls),
(591,536,o),
(618,559,o),
(622,581,qs),
(647,721,ls),
(648,731,o),
(638,731,qs),
(168,731,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
10 1 6 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 2 1 6 1 2 6 128 0 6 7 1 6 7 126 0 7 4 1 7 4 126 0 4 5 5 4 112 0 1 1 0 95 8 1 0 0 28 77 0 5 5 3 98 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 2 1 6 1 2 6 128 0 6 7 1 6 7 126 0 7 4 1 7 4 126 0 4 5 5 4 112 8 1 0 0 1 2 0 1 103 0 5 5 3 98 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 1 6 1 2 6 128 0 6 7 1 6 7 126 0 7 4 1 7 4 126 0 4 5 1 4 5 126 8 1 0 0 1 2 0 1 103 0 5 5 3 98 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 42 41 39 37 33 31 28 25 21 19 14 12 8 5 0 45 1 44 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 660;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(592,509,o),
(598,515,o),
(598,519,q),
(606,615,o),
(508,744,o),
(392,744,qs),
(295,744,o),
(160,664,o),
(74,496,o),
(51,360,qs),
(20,186,o),
(108,-7,o),
(265,-7,qs),
(344,-7,o),
(470,53,o),
(553,164,o),
(566,239,qs),
(586,351,o),
(492,469,o),
(396,469,qs),
(353,469,o),
(279,437,o),
(256,409,q),
(270,490,o),
(309,567,o),
(347,567,qs),
(375,567,o),
(384,546,qs),
(393,526,o),
(411,509,o),
(429,509,qs),
(587,509,ls)
);
},
{
closed = 1;
nodes = (
(338,299,o),
(364,269,o),
(360,242,qs),
(354,212,o),
(318,183,o),
(290,183,qs),
(262,183,o),
(236,212,o),
(242,242,qs),
(246,269,o),
(284,299,o),
(311,299,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 6 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 0 1 2 1 0 114 0 2 8 1 6 5 2 6 105 0 1 1 4 97 0 4 4 34 77 0 5 5 3 97 0 3 3 35 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
7 1 0 1 2 1 0 114 0 4 0 1 0 4 1 105 0 2 8 1 6 5 2 6 105 0 5 5 3 97 0 3 3 35 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 0 1 2 1 0 114 0 2 8 1 6 5 2 6 105 0 1 1 4 97 0 4 4 34 77 0 5 5 3 97 0 3 3 35 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
7 1 0 1 2 1 0 114 0 4 0 1 0 4 1 105 0 2 8 1 6 5 2 6 105 0 5 5 3 97 0 3 3 35 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
7 1 0 1 2 1 0 2 128 0 4 0 1 0 4 1 105 0 2 8 1 6 5 2 6 105 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
32 32 1 0 32 43 32 42 38 36 26 24 19 17 12 10 6 4 0 31 1 30 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,731,o),
(81,721,qs),
(57,586,ls),
(53,564,o),
(72,541,o),
(94,541,qs),
(250,541,ls),
(276,541,o),
(290,513,o),
(276,489,qs),
(-11,12,ls),
(-14,7,o),
(-10,0,o),
(-5,0,qs),
(202,0,ls),
(210,0,o),
(214,8,qs),
(538,568,l),
(559,686,ls),
(562,708,o),
(543,731,o),
(521,731,qs),
(92,731,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 2 2 0 95 3 1 0 0 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
3 1 0 0 2 1 0 2 103 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
1 0 17 14 8 6 0 22 1 21 4 8 22 
CALL[ ]	/* CallFunction */";
};
width = 512;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(44,343,o),
(23,225,qs),
(9,149,o),
(67,43,o),
(185,-11,o),
(261,-11,qs),
(337,-11,o),
(475,43,o),
(569,149,o),
(583,225,qs),
(604,343,o),
(513,402,q),
(557,425,o),
(615,500,o),
(624,552,qs),
(634,606,o),
(591,694,o),
(482,747,o),
(395,747,qs),
(308,747,o),
(179,694,o),
(106,606,o),
(96,552,qs),
(87,500,o),
(119,425,o),
(155,402,q)
);
},
{
closed = 1;
nodes = (
(324,456,o),
(303,486,o),
(308,515,qs),
(313,543,o),
(345,576,o),
(365,576,qs),
(385,576,o),
(405,543,o),
(400,515,qs),
(395,486,o),
(364,456,o),
(344,456,qs)
);
},
{
closed = 1;
nodes = (
(347,307,o),
(375,268,o),
(370,238,qs),
(365,208,o),
(324,170,o),
(293,170,qs),
(262,170,o),
(235,208,o),
(240,238,qs),
(245,268,o),
(287,307,o),
(317,307,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
25 13 2 5 3 1 76 0 0 0 2 3 0 2 105 6 1 3 7 1 5 4 3 5 105 0 4 4 1 97 0 1 1 35 1 78 38 38 26 26 38 49 38 48 44 42 26 37 26 36 42 43 37 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(27,228,o),
(21,222,o),
(21,218,q),
(17,158,o),
(61,56,o),
(162,-7,o),
(239,-7,qs),
(382,-7,o),
(537,191,o),
(572,389,qs),
(603,561,o),
(512,747,o),
(354,747,qs),
(276,747,o),
(149,687,o),
(66,576,o),
(53,501,qs),
(33,388,o),
(128,268,o),
(223,268,qs),
(266,268,o),
(340,300,o),
(363,328,q),
(348,245,o),
(312,170,o),
(275,170,qs),
(245,170,o),
(236,192,qs),
(226,212,o),
(208,228,o),
(190,228,qs),
(32,228,ls)
);
},
{
closed = 1;
nodes = (
(281,438,o),
(254,468,o),
(259,495,qs),
(264,525,o),
(300,554,o),
(328,554,qs),
(356,554,o),
(382,525,o),
(377,495,qs),
(372,468,o),
(335,438,o),
(308,438,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 2 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
7 1 0 2 1 1 0 114 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 98 0 4 4 35 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
7 1 0 2 1 2 0 1 128 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 1 4 98 0 4 4 35 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
32 32 1 0 32 43 32 42 38 36 25 23 19 17 12 10 6 4 0 31 1 30 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
note = nine;
unicode = 57;
},
{
glyphname = colon;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,149,o),
(201,212,o),
(144,212,qs),
(86,212,o),
(5,149,o),
(-3,101,qs),
(-11,54,o),
(48,-8,o),
(106,-8,qs),
(163,-8,o),
(244,54,o),
(252,101,qs)
);
},
{
closed = 1;
nodes = (
(330,545,o),
(271,608,o),
(214,608,qs),
(156,608,o),
(75,545,o),
(67,497,qs),
(58,450,o),
(118,388,o),
(176,388,qs),
(233,388,o),
(313,450,o),
(322,497,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 3 0 2 1 3 2 105 0 1 1 0 97 0 0 0 35 0 78 36 36 36 33 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 319;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(378,530,o),
(319,593,o),
(262,593,qs),
(204,593,o),
(123,530,o),
(115,482,qs),
(107,435,o),
(166,373,o),
(224,373,qs),
(281,373,o),
(362,435,o),
(370,482,qs)
);
},
{
closed = 1;
nodes = (
(-12,-161,l),
(134,-161,l),
(330,205,l),
(110,205,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
4 1 3 0 2 3 2 99 0 0 0 1 97 0 1 1 37 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 0 3 1 0 105 4 1 3 2 2 3 87 4 1 3 3 2 95 0 2 3 2 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
12 12 12 15 12 15 20 36 33 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 385;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = less;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(303,330,o),
(307,350,o),
(315,358,qs),
(503,544,ls),
(508,549,o),
(505,556,o),
(499,556,qs),
(245,556,ls),
(238,556,o),
(232,550,qs),
(38,358,ls),
(30,350,o),
(26,330,o),
(32,322,qs),
(158,131,ls),
(162,125,o),
(169,125,qs),
(423,125,ls),
(429,125,o),
(434,133,o),
(431,137,qs),
(309,322,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 1 0 1 1 76 0 0 0 1 95 0 1 1 31 0 78 40 34 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 497;
}
);
note = less;
unicode = 60;
},
{
glyphname = equal;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-22,99,o),
(-12,99,qs),
(554,99,ls),
(564,99,o),
(565,109,qs),
(597,290,ls),
(599,300,o),
(589,300,qs),
(23,300,ls),
(13,300,o),
(11,290,qs),
(-21,109,ls)
);
},
{
closed = 1;
nodes = (
(27,379,o),
(37,379,qs),
(603,379,ls),
(613,379,o),
(615,389,qs),
(647,570,ls),
(648,580,o),
(638,580,qs),
(72,580,ls),
(62,580,o),
(61,570,qs),
(29,389,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 1 0 1 99 0 3 3 2 95 0 2 2 31 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 103 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
51 51 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 626;
}
);
note = equal;
unicode = 61;
},
{
glyphname = greater;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-11,133,o),
(-8,125,o),
(-2,125,qs),
(252,125,ls),
(260,125,o),
(265,131,q),
(459,322,l),
(468,330,o),
(472,350,o),
(465,358,q),
(339,550,l),
(336,556,o),
(328,556,qs),
(74,556,ls),
(68,556,o),
(63,549,o),
(66,544,qs),
(188,358,l),
(195,350,o),
(191,330,o),
(182,322,q),
(-6,137,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 31 1 78 40 38 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 497;
}
);
note = greater;
unicode = 62;
},
{
glyphname = question;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(256,548,o),
(259,558,qs),
(264,574,o),
(285,593,o),
(303,593,qs),
(318,593,o),
(334,573,o),
(332,556,qs),
(327,525,o),
(260,498,o),
(199,498,qs),
(115,498,l),
(86,296,ls),
(84,286,o),
(94,286,qs),
(270,286,ls),
(275,286,o),
(282,292,o),
(283,296,qs),
(299,357,l),
(395,359,o),
(533,467,o),
(548,555,qs),
(567,662,o),
(452,773,o),
(341,773,qs),
(257,773,o),
(133,715,o),
(58,617,o),
(49,558,qs),
(47,548,o),
(57,548,qs),
(246,548,ls)
);
},
{
closed = 1;
nodes = (
(288,149,o),
(229,212,o),
(172,212,qs),
(114,212,o),
(33,149,o),
(24,101,qs),
(16,54,o),
(75,-8,o),
(133,-8,qs),
(190,-8,o),
(271,54,o),
(279,101,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 5 1 0 0 5 114 0 2 4 3 4 2 3 128 0 1 8 1 0 4 1 0 103 0 4 0 3 7 4 3 103 0 7 7 6 97 0 6 6 35 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 5 1 0 1 5 0 128 0 2 4 3 4 2 3 128 0 1 8 1 0 4 1 0 103 0 4 0 3 7 4 3 103 0 7 7 6 97 0 6 6 35 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 42 40 36 34 28 26 22 20 18 15 12 11 7 5 0 32 1 31 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 538;
}
);
note = question;
unicode = 63;
},
{
glyphname = at;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(825,-4,o),
(964,80,o),
(1054,225,o),
(1070,315,qs),
(1089,424,o),
(1018,593,o),
(848,687,o),
(727,687,qs),
(568,687,o),
(283,546,o),
(89,295,o),
(61,136,qs),
(41,22,o),
(108,-151,o),
(272,-245,o),
(391,-245,qs),
(513,-245,o),
(623,-203,qs),
(634,-198,o),
(633,-190,qs),
(624,-105,ls),
(619,-62,o),
(573,-76,qs),
(501,-96,o),
(427,-96,qs),
(312,-96,o),
(204,38,o),
(224,152,qs),
(242,257,o),
(377,436,o),
(574,541,o),
(682,541,qs),
(762,541,o),
(871,483,o),
(918,378,o),
(906,309,qs),
(892,235,o),
(834,138,o),
(794,138,qs),
(753,138,o),
(776,201,qs),
(837,373,ls),
(845,396,o),
(828,422,o),
(805,422,qs),
(691,422,ls),
(682,422,o),
(679,413,qs),
(662,364,l),
(657,393,o),
(608,427,o),
(567,427,qs),
(505,427,o),
(392,350,o),
(314,224,o),
(301,153,qs),
(288,77,o),
(355,-7,o),
(428,-7,qs),
(481,-7,o),
(571,34,o),
(603,73,q),
(613,36,o),
(683,-4,o),
(738,-4,qs)
);
},
{
closed = 1;
nodes = (
(602,191,o),
(553,147,o),
(528,147,qs),
(508,147,o),
(490,173,o),
(493,195,qs),
(499,229,o),
(547,274,o),
(573,274,qs),
(592,274,o),
(612,247,o),
(608,224,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
15 1 9 1 2 1 0 3 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
15 1 9 2 2 1 0 3 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
2 1 1 0 9 3 1 9 105 0 5 0 6 5 6 102 0 4 4 7 97 0 7 7 28 77 10 1 3 3 0 98 11 8 2 0 0 35 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 7 0 4 1 7 4 105 2 1 1 0 9 3 1 9 105 0 5 0 6 5 6 102 10 1 3 3 0 98 11 8 2 0 0 35 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 10 9 3 9 10 3 128 0 7 0 4 1 7 4 105 2 1 1 0 9 10 1 9 105 0 5 0 6 5 6 102 0 3 3 0 98 11 8 2 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 9 1 2 9 128 0 10 9 3 9 10 3 128 0 7 0 4 1 7 4 105 0 1 0 9 10 1 9 105 0 5 0 6 5 6 102 0 3 3 0 98 11 8 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
0 0 74 72 68 66 0 64 0 63 38 39 37 37 36 52 37 36 12 8 30 
CALL[ ]	/* CallFunction */";
};
width = 1129;
}
);
note = at;
unicode = 64;
},
{
glyphname = A;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(296,273,ls),
(289,273,o),
(287,277,o),
(290,284,cs),
(377,443,ls),
(382,451,o),
(390,451,o),
(391,443,cs),
(422,284,ls),
(423,277,o),
(419,273,o),
(412,273,cs)
);
},
{
closed = 1;
nodes = (
(472,35,ls),
(477,12,o),
(491,0,o),
(517,0,cs),
(648,0,ls),
(659,0,o),
(665,6,o),
(663,16,cs),
(527,678,ls),
(522,701,o),
(508,713,o),
(482,713,cs),
(384,713,ls),
(358,713,o),
(340,701,o),
(327,678,cs),
(-45,16,ls),
(-51,6,o),
(-47,0,o),
(-36,0,cs),
(94,0,ls),
(120,0,o),
(138,11,o),
(151,35,cs),
(211,139,ls),
(214,145,o),
(219,147,o),
(224,147,cs),
(440,147,ls),
(445,147,o),
(450,145,o),
(451,139,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
7 1 5 0 2 1 5 2 103 0 4 4 0 97 0 0 0 34 77 6 3 2 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
6 3 2 1 2 1 134 7 1 5 0 2 1 5 2 103 0 4 4 0 97 0 0 0 34 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
33 33 0 0 33 44 33 43 39 38 0 32 0 31 53 53 54 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 744;
}
);
note = A;
unicode = 65;
},
{
glyphname = B;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-10,-1,o),
(-2,-10,o),
(4,-10,qs),
(321,-10,ls),
(396,-10,o),
(531,43,o),
(621,136,o),
(631,193,qs),
(642,252,o),
(570,332,o),
(513,357,q),
(570,384,o),
(658,464,o),
(667,514,qs),
(676,568,o),
(619,658,o),
(504,710,o),
(430,710,qs),
(130,710,ls),
(124,710,o),
(114,701,o),
(113,695,qs),
(-9,5,ls)
);
},
{
closed = 1;
nodes = (
(287,527,ls),
(290,542,o),
(315,563,o),
(330,563,qs),
(382,563,ls),
(416,563,o),
(452,526,o),
(446,494,qs),
(441,461,o),
(389,420,o),
(356,420,qs),
(268,420,l)
);
},
{
closed = 1;
nodes = (
(238,246,ls),
(240,261,o),
(265,282,o),
(280,282,qs),
(337,282,ls),
(373,282,o),
(424,242,o),
(418,211,qs),
(413,178,o),
(358,136,o),
(325,136,qs),
(218,136,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 1 3 0 11 1 5 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
6 1 2 0 5 4 2 5 105 0 3 3 0 95 0 0 0 28 77 7 1 4 4 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
6 1 2 0 5 4 2 5 105 7 1 4 0 1 4 1 99 0 3 3 0 95 0 0 0 28 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
36 35 24 23 43 40 35 46 36 46 31 28 23 34 24 34 44 50 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 684;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(11,250,o),
(68,86,o),
(210,-5,o),
(317,-5,qs),
(444,-5,o),
(642,124,o),
(693,235,qs),
(701,253,o),
(687,274,o),
(669,274,qs),
(503,274,ls),
(489,274,o),
(468,262,o),
(456,250,qs),
(435,226,o),
(380,200,o),
(349,200,qs),
(293,200,o),
(242,284,o),
(255,355,qs),
(268,426,o),
(347,510,o),
(403,510,qs),
(434,510,o),
(481,484,o),
(494,460,qs),
(500,448,o),
(517,436,o),
(531,436,qs),
(697,436,ls),
(715,436,o),
(737,457,o),
(735,475,qs),
(724,586,o),
(570,715,o),
(443,715,qs),
(336,715,o),
(162,624,o),
(49,460,o),
(30,355,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 114 0 4 3 3 4 112 0 2 2 0 97 0 0 0 34 77 0 3 3 5 98 0 5 5 35 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 34 77 0 3 3 5 98 0 5 5 35 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 52 36 36 52 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = C;
unicode = 67;
},
{
glyphname = D;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(11,7,o),
(28,-10,o),
(41,-10,qs),
(285,-10,ls),
(384,-10,o),
(569,88,o),
(697,254,o),
(714,351,qs),
(731,448,o),
(661,613,o),
(510,710,o),
(411,710,qs),
(167,710,ls),
(154,710,o),
(131,693,o),
(129,681,qs),
(13,19,ls)
);
},
{
closed = 1;
nodes = (
(285,508,ls),
(288,525,o),
(310,543,o),
(326,543,qs),
(372,543,ls),
(424,543,o),
(497,493,o),
(528,406,o),
(518,351,qs),
(508,296,o),
(447,208,o),
(356,158,o),
(304,158,qs),
(223,158,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 0 95 0 0 0 28 77 4 1 2 2 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
4 1 2 0 1 2 1 99 0 3 3 0 95 0 0 0 28 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
18 17 27 24 17 30 18 30 54 50 5 8 24 
CALL[ ]	/* CallFunction */";
};
width = 743;
}
);
note = D;
unicode = 68;
},
{
glyphname = E;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,-10,ls),
(462,-10,o),
(463,0,qs),
(485,122,ls),
(488,139,o),
(473,157,o),
(456,157,qs),
(215,157,ls),
(204,157,o),
(197,168,o),
(199,182,qs),
(215,272,ls),
(215,273,o),
(213,273,o),
(212,273,q),
(212,272,o),
(210,272,qs),
(428,272,ls),
(448,272,o),
(464,282,o),
(467,301,qs),
(487,410,ls),
(490,429,o),
(478,439,o),
(458,439,qs),
(240,439,ls),
(242,439,o),
(242,438,q),
(243,438,o),
(245,438,o),
(245,439,qs),
(259,518,ls),
(261,532,o),
(272,543,o),
(283,543,qs),
(524,543,ls),
(541,543,o),
(562,562,o),
(565,578,qs),
(587,700,ls),
(588,710,o),
(578,710,qs),
(116,710,ls),
(110,710,o),
(106,706,o),
(105,700,cs),
(-19,0,ls),
(-20,-6,o),
(-16,-10,o),
(-10,-10,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 28 77 0 4 4 5 95 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 2 0 3 4 2 3 103 0 4 0 5 4 5 99 0 1 1 0 95 0 0 0 28 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
52 56 37 115 52 49 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = E;
unicode = 69;
},
{
glyphname = F;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-12,0,o),
(-2,0,qs),
(200,0,ls),
(210,0,o),
(211,10,qs),
(255,257,ls),
(257,267,o),
(267,267,qs),
(447,267,ls),
(457,267,o),
(458,277,qs),
(484,424,ls),
(486,434,o),
(476,434,qs),
(296,434,ls),
(286,434,o),
(288,444,qs),
(297,497,ls),
(300,514,o),
(322,532,o),
(338,532,qs),
(546,532,ls),
(563,532,o),
(585,551,o),
(588,567,qs),
(611,698,ls),
(612,708,o),
(602,708,qs),
(147,708,ls),
(131,708,o),
(109,690,o),
(106,673,qs),
(-11,10,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 28 77 0 4 4 29 4 78 51 51 52 52 50 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,715,o),
(67,566,o),
(30,355,cs),
(-7,144,o),
(104,-5,o),
(327,-5,cs),
(510,-5,o),
(628,102,o),
(692,187,c),
(730,399,ls),
(731,405,o),
(728,409,o),
(722,409,cs),
(416,409,ls),
(387,409,o),
(368,393,o),
(363,364,cs),
(345,262,ls),
(344,256,o),
(347,252,o),
(353,252,cs),
(520,252,l),
(479,208,o),
(435,190,o),
(385,190,cs),
(276,190,o),
(236,245,o),
(255,355,cs),
(272,449,o),
(330,510,o),
(416,510,cs),
(446,510,o),
(469,503,o),
(485,490,cs),
(501,476,o),
(514,466,o),
(537,466,cs),
(727,466,ls),
(733,466,o),
(737,470,o),
(738,477,cs),
(738,622,o),
(635,715,o),
(451,715,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
28 1 3 4 1 76 0 1 2 5 2 1 5 128 0 3 4 3 134 0 5 0 4 3 5 4 103 0 2 2 0 97 0 0 0 34 2 78 52 34 38 36 24 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = G;
unicode = 71;
},
{
glyphname = H;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(453,42,ls),
(448,15,o),
(461,0,o),
(490,0,cs),
(611,0,ls),
(620,0,o),
(627,6,o),
(629,14,cs),
(749,699,ls),
(751,707,o),
(746,713,o),
(737,713,cs),
(586,713,ls),
(577,713,o),
(570,707,o),
(568,699,cs),
(527,467,ls),
(523,439,o),
(504,425,o),
(475,425,cs),
(270,425,ls),
(261,425,o),
(256,431,o),
(258,439,cs),
(298,671,ls),
(303,698,o),
(290,713,o),
(261,713,cs),
(140,713,ls),
(131,713,o),
(124,707,o),
(122,699,cs),
(2,14,ls),
(0,6,o),
(5,0,o),
(14,0,cs),
(165,0,ls),
(174,0,o),
(181,6,o),
(183,14,cs),
(225,255,ls),
(230,282,o),
(249,297,o),
(278,297,cs),
(483,297,ls),
(492,297,o),
(497,292,o),
(495,283,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 3 0 0 1 3 0 103 4 1 2 2 28 77 5 1 1 1 29 1 78 51 52 52 51 52 49 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = H;
unicode = 72;
},
{
glyphname = I;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(171,-10,ls),
(181,-10,o),
(197,1,o),
(199,10,qs),
(315,665,ls),
(318,685,o),
(295,710,o),
(272,710,qs),
(146,710,ls),
(136,710,o),
(120,699,o),
(118,690,qs),
(-5,-10,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 95 0 0 0 28 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
53 50 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = I;
unicode = 73;
},
{
glyphname = J;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,251,ls),
(313,205,o),
(293,193,o),
(269,193,cs),
(248,193,o),
(233,201,o),
(228,228,cs),
(225,256,o),
(217,271,o),
(189,271,cs),
(27,271,ls),
(18,271,o),
(11,266,o),
(9,256,cs),
(-16,80,o),
(83,-7,o),
(244,-7,cs),
(400,-7,o),
(512,78,o),
(542,251,cs),
(620,693,ls),
(622,702,o),
(617,708,o),
(608,708,cs),
(447,708,ls),
(418,708,o),
(399,692,o),
(394,663,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 2 0 2 102 0 1 1 28 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
21 53 37 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 590;
}
);
note = J;
unicode = 74;
},
{
glyphname = K;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(411,10,ls),
(414,4,o),
(420,0,o),
(428,0,cs),
(658,0,ls),
(670,0,o),
(675,8,o),
(670,18,cs),
(493,351,ls),
(488,363,o),
(491,374,o),
(501,386,cs),
(772,690,ls),
(781,700,o),
(778,708,o),
(766,708,cs),
(549,708,ls),
(541,708,o),
(534,704,o),
(529,698,cs),
(320,455,ls),
(303,435,o),
(287,440,o),
(291,464,cs),
(326,663,ls),
(332,692,o),
(318,708,o),
(289,708,cs),
(127,708,ls),
(118,708,o),
(111,702,o),
(110,693,cs),
(-4,45,ls),
(-10,16,o),
(4,0,o),
(33,0,cs),
(195,0,ls),
(204,0,o),
(211,6,o),
(212,15,cs),
(254,252,ls),
(258,276,o),
(276,282,o),
(286,262,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
32 18 2 0 1 1 76 2 1 1 1 28 77 3 1 0 0 29 0 78 41 40 52 53 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 755;
}
);
note = K;
unicode = 75;
},
{
glyphname = L;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-30,0,o),
(-20,0,qs),
(382,0,ls),
(404,0,o),
(420,13,o),
(424,35,cs),
(444,150,ls),
(445,159,o),
(440,165,o),
(431,165,cs),
(214,165,ls),
(201,165,o),
(192,177,o),
(194,189,qs),
(278,666,ls),
(282,687,o),
(263,710,o),
(241,710,qs),
(106,710,ls),
(96,710,o),
(94,700,qs),
(-28,10,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 28 77 0 1 1 2 96 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
0 1 0 2 1 2 100 0 0 0 28 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
52 53 49 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = L;
unicode = 76;
},
{
glyphname = M;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(460,28,ls),
(485,28,o),
(504,39,o),
(519,62,cs),
(660,282,ls),
(668,295,o),
(680,294,o),
(677,279,cs),
(636,42,ls),
(631,15,o),
(644,0,o),
(673,0,cs),
(794,0,ls),
(803,0,o),
(810,6,o),
(812,14,cs),
(932,699,ls),
(934,707,o),
(929,713,o),
(920,713,cs),
(796,713,ls),
(771,713,o),
(752,702,o),
(738,680,cs),
(468,264,ls),
(461,252,o),
(451,252,o),
(448,264,cs),
(324,680,ls),
(318,702,o),
(303,713,o),
(278,713,cs),
(153,713,ls),
(144,713,o),
(137,707,o),
(135,699,cs),
(15,14,ls),
(13,6,o),
(18,0,o),
(27,0,cs),
(148,0,ls),
(177,0,o),
(196,15,o),
(201,42,cs),
(243,282,ls),
(246,297,o),
(258,298,o),
(262,286,cs),
(326,62,ls),
(333,39,o),
(348,28,o),
(373,28,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
2 1 0 0 34 77 0 1 1 3 95 5 4 2 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
2 1 0 0 34 77 5 1 3 3 29 77 0 1 1 4 97 0 4 4 35 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 1 0 4 1 4 101 2 1 0 0 34 77 5 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 1 0 4 1 4 101 5 1 3 3 0 97 2 1 0 0 34 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
56 57 52 52 20 49 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 951;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(14,42,ls),
(9,15,o),
(22,0,o),
(51,0,cs),
(172,0,ls),
(181,0,o),
(188,6,o),
(190,14,cs),
(260,416,l),
(465,27,ls),
(475,9,o),
(490,0,o),
(514,0,cs),
(629,0,ls),
(638,0,o),
(645,6,o),
(647,14,cs),
(762,671,ls),
(767,698,o),
(754,713,o),
(725,713,cs),
(604,713,ls),
(595,713,o),
(588,707,o),
(586,699,cs),
(516,298,l),
(311,686,ls),
(301,704,o),
(286,713,o),
(262,713,cs),
(147,713,ls),
(138,713,o),
(131,707,o),
(129,699,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
23 9 2 1 0 1 76 3 4 2 0 0 28 77 2 1 1 1 29 1 78 1 0 20 18 15 12 6 4 0 27 1 26 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 779;
}
);
note = N;
unicode = 78;
},
{
glyphname = O;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(776,461,o),
(709,627,o),
(559,720,o),
(459,720,qs),
(359,720,o),
(176,627,o),
(48,461,o),
(30,357,qs),
(12,253,o),
(80,87,o),
(231,-7,o),
(331,-7,qs),
(430,-7,o),
(613,87,o),
(740,253,o),
(758,357,qs)
);
},
{
closed = 1;
nodes = (
(269,430,o),
(356,515,o),
(423,515,qs),
(489,515,o),
(546,430,o),
(533,357,qs),
(520,285,o),
(433,200,o),
(367,200,qs),
(300,200,o),
(243,285,o),
(256,357,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = O;
unicode = 79;
},
{
glyphname = P;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(295,485,ls),
(299,507,o),
(326,530,o),
(348,530,qs),
(366,530,ls),
(435,530,o),
(424,465,qs),
(412,400,o),
(343,400,qs),
(280,400,l)
);
},
{
closed = 1;
nodes = (
(668,576,o),
(552,708,o),
(422,708,qs),
(122,708,ls),
(112,708,o),
(111,698,qs),
(-11,10,ls),
(-12,0,o),
(-2,0,qs),
(165,0,ls),
(187,0,o),
(214,23,o),
(218,45,qs),
(247,215,ls),
(249,225,o),
(259,225,qs),
(337,225,ls),
(423,225,o),
(556,289,o),
(637,398,o),
(649,465,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 0 0 2 3 0 2 103 0 1 1 4 95 0 4 4 28 77 0 3 3 29 3 78 1 0 28 25 22 19 15 12 6 3 0 9 1 9 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 649;
}
);
note = P;
unicode = 80;
},
{
glyphname = Q;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,430,o),
(365,515,o),
(432,515,qs),
(498,515,o),
(555,430,o),
(543,357,qs),
(530,285,o),
(443,200,o),
(377,200,qs),
(310,200,o),
(253,285,o),
(266,357,qs)
);
},
{
closed = 1;
nodes = (
(786,461,o),
(718,627,o),
(569,720,o),
(469,720,qs),
(369,720,o),
(185,627,o),
(58,461,o),
(40,357,qs),
(21,253,o),
(90,87,o),
(240,-7,o),
(340,-7,qs),
(358,-7,o),
(368,-6,qs),
(395,-4,o),
(405,-28,qs),
(433,-91,ls),
(442,-115,o),
(470,-115,qs),
(689,-115,ls),
(695,-115,o),
(701,-108,o),
(697,-103,qs),
(610,52,ls),
(595,77,o),
(623,102,qs),
(679,151,o),
(754,281,o),
(768,357,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 3 2 134 0 1 1 4 97 0 4 4 34 77 0 0 0 3 97 0 3 3 35 3 78 38 37 58 36 33 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(438,431,o),
(400,402,o),
(368,402,qs),
(280,402,l),
(295,487,ls),
(298,504,o),
(321,522,o),
(337,522,qs),
(390,522,ls),
(421,522,o),
(448,490,o),
(443,462,qs)
);
},
{
closed = 1;
nodes = (
(149,708,o),
(122,685,o),
(118,663,qs),
(3,10,ls),
(2,0,o),
(12,0,qs),
(200,0,ls),
(210,0,o),
(211,10,qs),
(254,254,l),
(255,254,l),
(282,175,l),
(332,32,ls),
(343,0,o),
(380,0,qs),
(574,0,ls),
(580,0,o),
(585,7,o),
(583,12,qs),
(485,261,ls),
(481,270,o),
(492,275,q),
(567,301,o),
(658,407,o),
(671,476,qs),
(682,542,o),
(640,647,o),
(528,708,o),
(442,708,qs),
(171,708,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
30 1 3 1 1 76 0 1 0 3 0 1 3 128 0 0 0 2 95 5 1 2 2 28 77 4 1 3 3 29 3 78 13 12 36 33 27 24 12 41 13 40 35 49 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = R;
unicode = 82;
},
{
glyphname = S;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,281,o),
(534,363,o),
(455,409,o),
(393,434,qs),
(339,456,o),
(291,487,o),
(295,511,qs),
(298,528,o),
(320,547,o),
(334,547,qs),
(364,547,o),
(371,522,qs),
(375,505,o),
(389,491,o),
(404,491,qs),
(602,491,ls),
(607,491,o),
(613,497,o),
(612,501,q),
(624,606,o),
(492,720,o),
(365,720,qs),
(288,720,o),
(156,670,o),
(68,573,o),
(56,504,qs),
(43,435,o),
(91,347,o),
(172,301,o),
(236,277,qs),
(289,257,o),
(338,226,o),
(334,201,qs),
(330,183,o),
(302,166,o),
(284,166,qs),
(250,166,o),
(243,195,qs),
(239,212,o),
(225,227,o),
(210,227,qs),
(15,227,ls),
(10,227,o),
(4,221,o),
(4,217,q),
(-4,107,o),
(139,-7,o),
(263,-7,qs),
(347,-7,o),
(479,51,o),
(561,154,o),
(573,219,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
32 1 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 3 4 4 5 114 0 1 4 2 2 1 114 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 3 4 4 5 114 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 5 3 4 3 5 4 128 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
35 52 44 35 52 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = S;
unicode = 83;
},
{
glyphname = T;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(41,532,o),
(51,532,qs),
(192,532,ls),
(209,532,o),
(224,514,o),
(221,497,qs),
(135,10,ls),
(134,0,o),
(144,0,qs),
(346,0,ls),
(356,0,o),
(357,10,qs),
(443,497,ls),
(446,514,o),
(468,532,o),
(484,532,qs),
(627,532,ls),
(637,532,o),
(639,542,qs),
(667,698,ls),
(668,708,o),
(658,708,qs),
(82,708,ls),
(72,708,o),
(71,698,qs),
(43,542,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 1 1 0 95 0 0 0 28 77 0 2 2 29 2 78 52 52 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = T;
unicode = 84;
},
{
glyphname = U;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(21,207,o),
(74,65,o),
(200,-7,o),
(290,-7,qs),
(380,-7,o),
(539,65,o),
(648,208,o),
(666,309,qs),
(734,698,ls),
(736,708,o),
(726,708,qs),
(560,708,ls),
(538,708,o),
(511,685,o),
(507,663,qs),
(445,309,ls),
(436,260,o),
(380,203,o),
(332,203,qs),
(284,203,o),
(251,260,o),
(260,309,qs),
(322,663,ls),
(326,685,o),
(307,708,o),
(285,708,qs),
(119,708,ls),
(109,708,o),
(107,698,qs),
(39,309,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 28 77 0 1 1 3 97 0 3 3 35 3 78 37 53 37 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = U;
unicode = 85;
},
{
glyphname = V;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,40,ls),
(227,14,o),
(246,0,o),
(279,0,cs),
(377,0,ls),
(410,0,o),
(435,14,o),
(449,40,cs),
(834,698,ls),
(840,707,o),
(837,713,o),
(826,713,cs),
(676,713,ls),
(643,713,o),
(618,698,o),
(604,673,cs),
(399,316,ls),
(382,286,o),
(376,286,o),
(369,316,cs),
(290,673,ls),
(284,698,o),
(265,713,o),
(232,713,cs),
(81,713,ls),
(70,713,o),
(65,707,o),
(67,698,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
2 1 0 0 28 77 0 1 1 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
0 1 0 3 1 3 101 2 1 0 0 28 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
53 51 19 50 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 777;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(156,40,ls),
(160,15,o),
(176,0,o),
(206,0,cs),
(288,0,ls),
(318,0,o),
(341,15,o),
(352,40,c),
(589,494,l),
(561,494,l),
(638,39,ls),
(642,15,o),
(658,0,o),
(688,0,cs),
(770,0,ls),
(800,0,o),
(822,15,o),
(834,39,cs),
(1176,698,ls),
(1181,707,o),
(1177,713,o),
(1166,713,cs),
(1041,713,ls),
(1010,713,o),
(989,698,o),
(977,672,cs),
(795,315,ls),
(780,286,o),
(779,286,o),
(775,315,cs),
(718,672,l),
(716,696,o),
(700,710,o),
(674,713,c),
(553,713,l),
(524,710,o),
(507,696,o),
(496,673,cs),
(314,316,ls),
(299,288,o),
(299,288,o),
(293,316,cs),
(237,673,ls),
(233,698,o),
(218,713,o),
(187,713,cs),
(60,713,ls),
(49,713,o),
(43,707,o),
(44,698,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 2 0 0 28 77 4 1 3 3 29 3 78 55 51 56 56 49 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 1100;
}
);
note = W;
unicode = 87;
},
{
glyphname = X;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(438,0,o),
(466,0,qs),
(687,0,ls),
(693,0,o),
(698,8,o),
(695,12,q),
(532,319,ls),
(514,351,o),
(541,382,qs),
(797,696,ls),
(801,701,o),
(799,708,o),
(793,708,qs),
(582,708,ls),
(555,708,o),
(536,684,qs),
(458,581,ls),
(441,559,o),
(406,557,o),
(394,578,qs),
(338,686,ls),
(326,708,o),
(298,708,qs),
(77,708,ls),
(71,708,o),
(66,701,o),
(69,696,qs),
(228,396,ls),
(246,364,o),
(219,333,qs),
(-42,12,ls),
(-46,7,o),
(-44,0,o),
(-38,0,qs),
(173,0,ls),
(200,0,o),
(219,24,qs),
(302,134,ls),
(319,156,o),
(354,158,o),
(366,137,qs),
(426,22,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
35 1 1 0 1 76 4 1 2 2 28 77 0 0 0 3 97 0 3 3 31 77 5 1 1 1 29 1 78 57 35 19 57 35 17 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 764;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,10,ls),
(192,0,o),
(202,0,qs),
(404,0,ls),
(414,0,o),
(415,10,qs),
(451,215,l),
(784,696,ls),
(787,701,o),
(784,708,o),
(779,708,qs),
(579,708,ls),
(554,708,o),
(535,697,o),
(521,674,cs),
(399,479,ls),
(393,470,o),
(381,470,o),
(379,479,qs),
(324,674,ls),
(318,697,o),
(303,708,o),
(278,708,cs),
(75,708,ls),
(70,708,o),
(65,701,o),
(66,696,qs),
(229,215,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
25 18 2 3 1 1 76 2 1 0 0 28 77 0 1 1 3 95 0 3 3 29 3 78 54 35 20 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Z;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(642,708,o),
(632,708,qs),
(122,708,ls),
(112,708,o),
(111,698,qs),
(89,577,ls),
(85,555,o),
(104,532,o),
(126,532,qs),
(346,532,ls),
(352,532,o),
(355,525,o),
(350,520,qs),
(22,172,ls),
(17,167,o),
(16,160,qs),
(-11,10,ls),
(-12,0,o),
(-2,0,qs),
(508,0,ls),
(518,0,o),
(519,10,qs),
(541,132,ls),
(545,154,o),
(526,177,o),
(504,177,qs),
(280,177,ls),
(274,177,o),
(272,184,o),
(277,189,qs),
(608,536,ls),
(613,541,o),
(614,548,qs),
(641,698,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 17 1 1 0 2 76 0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 52 55 52 53 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = Z;
unicode = 90;
},
{
glyphname = bracketleft;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-4,-229,o),
(6,-229,qs),
(368,-229,ls),
(378,-229,o),
(380,-219,qs),
(408,-61,ls),
(409,-51,o),
(399,-51,qs),
(280,-51,ls),
(258,-51,o),
(239,-28,o),
(243,-6,qs),
(363,672,ls),
(367,694,o),
(394,717,o),
(416,717,qs),
(535,717,ls),
(545,717,o),
(546,727,qs),
(574,885,ls),
(576,895,o),
(566,895,qs),
(204,895,ls),
(194,895,o),
(192,885,qs),
(-2,-219,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 103 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 51 53 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 533;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = backslash;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,955,l),
(302,955,l),
(338,-198,l),
(550,-198,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 878;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = bracketright;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,895,o),
(547,895,qs),
(185,895,ls),
(175,895,o),
(173,885,qs),
(145,727,ls),
(144,717,o),
(154,717,qs),
(273,717,ls),
(295,717,o),
(314,694,o),
(310,672,qs),
(190,-6,ls),
(186,-28,o),
(159,-51,o),
(137,-51,qs),
(18,-51,ls),
(8,-51,o),
(7,-61,qs),
(-21,-219,ls),
(-23,-229,o),
(-13,-229,qs),
(349,-229,ls),
(359,-229,o),
(361,-219,qs),
(555,885,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 3 0 2 1 3 2 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 51 53 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 533;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = asciicircum;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,162,o),
(473,162,qs),
(672,162,ls),
(677,162,o),
(683,169,o),
(682,174,qs),
(546,677,ls),
(537,711,o),
(500,711,qs),
(356,711,ls),
(319,711,o),
(298,677,qs),
(-16,174,ls),
(-19,169,o),
(-15,162,o),
(-10,162,qs),
(189,162,ls),
(197,162,o),
(201,170,qs),
(342,393,ls),
(359,419,o),
(395,420,o),
(402,393,qs),
(463,170,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 0 1 134 0 2 0 0 2 87 0 2 2 0 97 0 0 2 0 81 36 53 35 17 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 758;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = underscore;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,-258,o),
(40,-258,qs),
(695,-258,ls),
(705,-258,o),
(707,-248,qs),
(741,-52,ls),
(743,-42,o),
(733,-42,qs),
(78,-42,ls),
(68,-42,o),
(66,-52,qs),
(32,-248,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 51 49 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 764;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = grave;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(4,696,o),
(11,693,qs),
(236,606,l),
(246,603,o),
(248,614,qs),
(271,742,ls),
(272,750,o),
(265,753,qs),
(44,855,ls),
(39,857,o),
(31,852,o),
(31,847,qs),
(5,705,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
8 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 324;
}
);
note = grave;
unicode = 96;
},
{
glyphname = a;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(4,193,o),
(42,62,o),
(136,-7,o),
(202,-7,qs),
(257,-7,o),
(345,38,o),
(373,77,q),
(367,46,ls),
(364,27,o),
(386,0,o),
(405,0,qs),
(570,0,ls),
(580,0,o),
(582,10,qs),
(672,518,ls),
(675,538,o),
(654,564,o),
(634,564,qs),
(469,564,ls),
(459,564,o),
(457,554,qs),
(445,487,l),
(431,526,o),
(359,571,o),
(304,571,qs),
(238,571,o),
(120,502,o),
(36,371,o),
(20,282,qs)
);
},
{
closed = 1;
nodes = (
(401,237,o),
(346,187,o),
(310,187,qs),
(274,187,o),
(237,237,o),
(245,282,qs),
(253,327,o),
(308,377,o),
(344,377,qs),
(380,377,o),
(417,327,o),
(409,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 0 21 1 2 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 1 21 1 2 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 37 37 52 52 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = a;
unicode = 97;
},
{
glyphname = b;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,740,o),
(328,740,qs),
(161,740,ls),
(139,740,o),
(112,717,o),
(108,695,qs),
(-13,10,ls),
(-15,0,o),
(-5,0,qs),
(162,0,ls),
(184,0,o),
(211,23,o),
(215,45,qs),
(221,77,l),
(235,38,o),
(306,-7,o),
(361,-7,qs),
(427,-7,o),
(545,62,o),
(629,193,o),
(645,282,qs),
(661,371,o),
(623,502,o),
(529,571,o),
(463,571,qs),
(408,571,o),
(321,526,o),
(293,487,q),
(336,730,ls)
);
},
{
closed = 1;
nodes = (
(412,237,o),
(357,187,o),
(321,187,qs),
(285,187,o),
(248,237,o),
(256,282,qs),
(264,327,o),
(319,377,o),
(355,377,qs),
(391,377,o),
(428,327,o),
(420,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
0 1 4 0 14 1 1 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 1 4 0 14 1 2 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 3 3 1 97 2 1 1 1 35 77 0 4 4 0 97 0 0 0 37 77 0 5 5 1 97 2 1 1 1 35 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 0 97 0 0 0 37 77 0 3 3 2 95 0 2 2 29 77 0 5 5 1 97 0 1 1 35 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 35 52 53 38 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(4,194,o),
(54,63,o),
(173,-7,o),
(257,-7,qs),
(357,-7,o),
(519,95,o),
(563,188,qs),
(572,206,o),
(557,227,o),
(539,227,qs),
(373,227,ls),
(360,227,o),
(340,215,o),
(328,201,qs),
(310,183,o),
(286,183,qs),
(259,183,o),
(236,233,o),
(245,282,qs),
(254,331,o),
(293,381,o),
(320,381,qs),
(344,381,o),
(356,363,qs),
(364,349,o),
(380,337,o),
(393,337,qs),
(559,337,ls),
(577,337,o),
(598,358,o),
(597,376,qs),
(585,469,o),
(459,571,o),
(359,571,qs),
(275,571,o),
(132,501,o),
(36,370,o),
(20,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 114 0 4 3 3 4 112 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 51 36 35 52 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = c;
unicode = 99;
},
{
glyphname = d;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(415,526,o),
(344,571,o),
(289,571,qs),
(223,571,o),
(105,502,o),
(21,371,o),
(5,282,qs),
(-11,193,o),
(27,62,o),
(121,-7,o),
(187,-7,qs),
(242,-7,o),
(329,38,o),
(357,77,q),
(350,35,ls),
(347,19,o),
(362,0,o),
(378,0,qs),
(555,0,ls),
(565,0,o),
(567,10,qs),
(690,705,ls),
(693,722,o),
(678,740,o),
(661,740,qs),
(484,740,ls),
(474,740,o),
(472,730,qs),
(429,487,l)
);
},
{
closed = 1;
nodes = (
(238,327,o),
(293,377,o),
(329,377,qs),
(365,377,o),
(402,327,o),
(394,282,qs),
(386,237,o),
(331,187,o),
(295,187,qs),
(259,187,o),
(222,237,o),
(230,282,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
28 1 5 3 14 1 1 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 0 0 1 97 2 1 1 1 29 77 0 5 5 3 97 0 3 3 37 77 0 4 4 1 97 2 1 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 5 5 3 97 0 3 3 37 77 0 0 0 1 95 0 1 1 29 77 0 4 4 2 97 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 36 38 37 52 49 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = d;
unicode = 100;
},
{
glyphname = e;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(353,397,o),
(385,371,o),
(382,346,qs),
(381,340,o),
(376,340,qs),
(255,340,ls),
(253,340,o),
(250,343,o),
(251,346,qs),
(272,397,o),
(328,397,qs)
);
},
{
closed = 1;
nodes = (
(313,170,o),
(277,170,qs),
(221,170,o),
(230,243,q),
(553,243,ls),
(588,243,o),
(595,276,qs),
(597,287,ls),
(612,374,o),
(562,502,o),
(443,571,o),
(359,571,qs),
(275,571,o),
(132,501,o),
(36,370,o),
(20,282,qs),
(4,194,o),
(54,63,o),
(173,-7,o),
(257,-7,qs),
(350,-7,o),
(510,88,o),
(552,164,qs),
(562,181,o),
(548,203,o),
(529,203,qs),
(335,203,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 1 2 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
8 1 2 5 6 6 2 114 0 0 0 5 2 0 5 103 7 1 1 1 4 97 0 4 4 37 77 0 6 6 3 98 0 3 3 35 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
8 1 2 5 6 5 2 6 128 0 0 0 5 2 0 5 103 7 1 1 1 4 97 0 4 4 37 77 0 6 6 3 98 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
12 11 0 0 36 34 33 31 26 24 18 16 11 37 12 37 0 10 0 9 35 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = e;
unicode = 101;
},
{
glyphname = f;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,0,o),
(10,0,qs),
(212,0,ls),
(222,0,o),
(224,10,qs),
(286,362,ls),
(288,372,o),
(298,372,qs),
(361,372,ls),
(371,372,o),
(372,382,qs),
(401,547,ls),
(403,557,o),
(393,557,qs),
(322,557,l),
(338,601,o),
(376,605,qs),
(412,608,o),
(418,639,qs),
(445,793,l),
(354,801,o),
(211,752,o),
(117,644,o),
(100,567,qs),
(98,557,o),
(88,557,qs),
(48,557,ls),
(38,557,o),
(36,547,qs),
(7,382,ls),
(6,372,o),
(16,372,qs),
(31,372,ls),
(48,372,o),
(62,354,o),
(59,337,qs),
(2,10,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
16 1 1 74 3 1 0 0 1 97 2 1 1 1 31 77 0 4 4 29 4 78 51 51 42 51 50 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 385;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(28,193,o),
(66,62,o),
(160,-7,o),
(226,-7,qs),
(281,-7,o),
(369,38,o),
(397,77,q),
(385,10,ls),
(375,-45,o),
(324,-85,o),
(285,-85,qs),
(245,-85,o),
(229,-66,qs),
(227,-63,ls),
(218,-51,o),
(205,-41,o),
(193,-41,qs),
(3,-41,l),
(-5,-150,o),
(131,-277,o),
(267,-277,qs),
(368,-277,o),
(511,-199,o),
(592,-69,o),
(606,10,qs),
(702,554,ls),
(704,564,o),
(694,564,qs),
(518,564,ls),
(502,564,o),
(479,546,o),
(476,529,qs),
(469,487,l),
(455,526,o),
(383,571,o),
(328,571,qs),
(262,571,o),
(144,502,o),
(59,371,o),
(44,282,qs)
);
},
{
closed = 1;
nodes = (
(425,237,o),
(370,187,o),
(334,187,qs),
(298,187,o),
(261,237,o),
(269,282,qs),
(277,327,o),
(332,377,o),
(368,377,qs),
(404,377,o),
(441,327,o),
(433,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 6 0 32 1 5 7 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 6 1 32 1 5 7 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 5 4 4 3 114 0 6 6 0 97 1 1 0 0 37 77 0 7 7 5 97 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 3 5 4 5 3 4 128 0 6 6 0 97 1 1 0 0 37 77 0 7 7 5 97 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 3 5 4 5 3 4 128 0 1 1 31 77 0 6 6 0 97 0 0 0 37 77 0 7 7 5 97 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 37 37 36 34 37 53 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = g;
unicode = 103;
},
{
glyphname = h;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-15,0,o),
(-5,0,qs),
(197,0,ls),
(207,0,o),
(209,10,qs),
(259,299,ls),
(267,339,o),
(317,386,o),
(354,386,qs),
(390,386,o),
(425,339,o),
(417,299,qs),
(373,45,ls),
(369,23,o),
(388,0,o),
(410,0,qs),
(576,0,ls),
(586,0,o),
(588,10,qs),
(643,327,ls),
(663,438,o),
(577,568,o),
(480,568,qs),
(420,568,o),
(324,518,o),
(291,478,q),
(329,695,ls),
(333,717,o),
(314,740,o),
(292,740,qs),
(125,740,ls),
(115,740,o),
(113,730,qs),
(-13,10,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 3 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 1 2 1 3 2 128 0 0 0 2 95 4 1 2 2 29 77 0 1 1 31 77 4 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 3 1 2 1 3 2 128 0 0 0 2 95 4 1 2 2 29 77 0 1 1 37 77 4 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
52 37 52 37 49 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = h;
unicode = 104;
},
{
glyphname = i;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,0,ls),
(199,0,o),
(201,10,qs),
(292,529,ls),
(295,546,o),
(280,564,o),
(263,564,qs),
(86,564,ls),
(76,564,o),
(75,554,qs),
(-17,35,ls),
(-21,13,o),
(-10,0,o),
(12,0,cs)
);
},
{
closed = 1;
nodes = (
(253,609,o),
(328,671,o),
(337,718,qs),
(345,766,o),
(292,829,o),
(235,829,qs),
(178,829,o),
(106,767,o),
(98,718,qs),
(89,670,o),
(139,609,o),
(196,609,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 2 4 1 3 0 2 3 105 0 0 0 31 77 0 1 1 29 1 78 13 13 13 24 13 23 38 52 49 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = i;
unicode = 105;
},
{
glyphname = j;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,564,o),
(98,554,qs),
(-7,-43,ls),
(-10,-63,o),
(-33,-81,o),
(-55,-81,qs),
(-63,-81,ls),
(-80,-81,o),
(-101,-100,o),
(-104,-116,qs),
(-131,-270,l),
(-57,-270,ls),
(175,-270,o),
(216,-39,qs),
(316,529,ls),
(319,546,o),
(304,564,o),
(287,564,qs),
(110,564,ls)
);
},
{
closed = 1;
nodes = (
(277,609,o),
(352,671,o),
(360,718,qs),
(369,766,o),
(316,829,o),
(259,829,qs),
(202,829,o),
(130,767,o),
(121,718,qs),
(113,670,o),
(163,609,o),
(220,609,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 3 6 1 4 0 3 4 105 5 1 0 0 31 77 0 2 2 1 96 0 1 1 33 1 78 19 19 1 0 19 30 19 29 25 23 13 10 7 5 0 18 1 17 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = j;
unicode = 106;
},
{
glyphname = k;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-12,19,o),
(4,0,o),
(20,0,qs),
(197,0,ls),
(207,0,o),
(209,10,qs),
(246,225,l),
(343,7,ls),
(347,0,o),
(354,0,qs),
(596,0,ls),
(602,0,o),
(607,8,o),
(604,12,q),
(453,266,ls),
(444,281,o),
(457,294,qs),
(694,552,ls),
(699,557,o),
(696,564,o),
(690,564,qs),
(474,564,ls),
(447,564,o),
(428,541,qs),
(269,353,l),
(331,705,ls),
(334,722,o),
(319,740,o),
(302,740,qs),
(125,740,ls),
(115,740,o),
(113,730,qs),
(-9,35,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
25 18 7 3 2 1 1 76 0 0 0 2 95 3 1 2 2 29 77 0 1 1 31 77 3 1 2 2 29 2 78 53 41 37 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = k;
unicode = 107;
},
{
glyphname = l;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-15,11,o),
(1,-8,o),
(17,-8,qs),
(194,-8,ls),
(204,-8,o),
(206,2,qs),
(334,727,ls),
(337,744,o),
(322,762,o),
(305,762,qs),
(128,762,ls),
(118,762,o),
(116,752,qs),
(-12,27,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 29 1 78 52 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = l;
unicode = 108;
},
{
glyphname = m;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(763,23,o),
(782,0,o),
(804,0,qs),
(970,0,ls),
(980,0,o),
(982,10,qs),
(1038,327,ls),
(1057,438,o),
(961,568,o),
(853,568,qs),
(788,568,o),
(675,528,o),
(640,488,q),
(621,534,o),
(550,568,o),
(485,568,qs),
(429,568,o),
(338,524,o),
(308,488,q),
(313,519,ls),
(317,541,o),
(298,564,o),
(276,564,qs),
(109,564,ls),
(99,564,o),
(98,554,qs),
(2,10,ls),
(0,0,o),
(10,0,qs),
(212,0,ls),
(222,0,o),
(224,10,qs),
(275,299,ls),
(281,335,o),
(330,376,o),
(367,376,qs),
(403,376,o),
(439,335,o),
(433,299,qs),
(388,45,ls),
(384,23,o),
(403,0,o),
(425,0,qs),
(591,0,ls),
(601,0,o),
(603,10,qs),
(654,299,ls),
(660,335,o),
(709,376,o),
(746,376,qs),
(782,376,o),
(818,335,o),
(812,299,qs),
(767,45,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
40 34 2 0 4 1 76 2 1 0 0 4 97 6 5 2 4 4 31 77 7 3 2 1 1 29 1 78 52 36 37 51 52 37 52 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 1076;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(384,23,o),
(403,0,o),
(425,0,qs),
(591,0,ls),
(601,0,o),
(603,10,qs),
(659,327,ls),
(678,438,o),
(592,568,o),
(495,568,qs),
(435,568,o),
(339,518,o),
(306,478,q),
(313,519,ls),
(317,541,o),
(298,564,o),
(276,564,qs),
(109,564,ls),
(99,564,o),
(98,554,qs),
(6,35,ls),
(3,19,o),
(19,0,o),
(35,0,qs),
(212,0,ls),
(222,0,o),
(224,10,qs),
(275,299,ls),
(282,339,o),
(332,386,o),
(369,386,qs),
(405,386,o),
(440,339,o),
(433,299,qs),
(388,45,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
21 1 0 2 1 76 0 0 2 1 2 0 1 128 3 1 2 2 31 77 4 1 1 1 29 1 78 52 37 52 52 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = n;
unicode = 110;
},
{
glyphname = o;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(632,370,o),
(578,501,o),
(454,571,o),
(369,571,qs),
(284,571,o),
(136,501,o),
(36,370,o),
(20,282,qs),
(4,194,o),
(58,63,o),
(182,-7,o),
(267,-7,qs),
(352,-7,o),
(500,63,o),
(600,194,o),
(616,282,qs)
);
},
{
closed = 1;
nodes = (
(253,330,o),
(304,379,o),
(335,379,qs),
(366,379,o),
(399,330,o),
(391,282,qs),
(383,234,o),
(332,185,o),
(301,185,qs),
(269,185,o),
(237,234,o),
(245,282,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = o;
unicode = 111;
},
{
glyphname = p;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(274,39,o),
(345,-6,o),
(400,-6,qs),
(466,-6,o),
(584,63,o),
(668,194,o),
(684,283,qs),
(700,372,o),
(662,503,o),
(568,572,o),
(502,572,qs),
(447,572,o),
(360,527,o),
(332,488,q),
(338,520,ls),
(342,542,o),
(323,565,o),
(301,565,qs),
(134,565,ls),
(124,565,o),
(122,555,qs),
(-17,-235,ls),
(-21,-257,o),
(-2,-280,o),
(20,-280,qs),
(187,-280,ls),
(197,-280,o),
(199,-270,qs),
(260,78,l)
);
},
{
closed = 1;
nodes = (
(451,238,o),
(396,188,o),
(360,188,qs),
(324,188,o),
(287,238,o),
(295,283,qs),
(303,328,o),
(358,378,o),
(394,378,qs),
(430,378,o),
(467,328,o),
(459,283,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
14 1 4 1 28 1 3 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 4 1 97 2 1 1 1 31 77 0 5 5 3 97 0 3 3 35 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 1 1 31 77 0 4 4 2 97 0 2 2 37 77 0 5 5 3 97 0 3 3 35 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 2 97 0 2 2 37 77 0 5 5 3 97 0 3 3 35 77 0 0 0 1 95 0 1 1 31 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 36 38 37 52 49 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = p;
unicode = 112;
},
{
glyphname = q;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,-280,o),
(373,-280,qs),
(540,-280,ls),
(562,-280,o),
(589,-257,o),
(593,-235,qs),
(732,555,ls),
(734,565,o),
(724,565,qs),
(557,565,ls),
(535,565,o),
(508,542,o),
(504,520,qs),
(498,488,l),
(484,527,o),
(413,572,o),
(358,572,qs),
(292,572,o),
(174,503,o),
(90,372,o),
(74,283,qs),
(58,194,o),
(96,63,o),
(190,-6,o),
(256,-6,qs),
(311,-6,o),
(398,39,o),
(426,78,q),
(365,-270,ls)
);
},
{
closed = 1;
nodes = (
(307,328,o),
(362,378,o),
(398,378,qs),
(434,378,o),
(471,328,o),
(463,283,qs),
(455,238,o),
(400,188,o),
(364,188,qs),
(328,188,o),
(291,238,o),
(299,283,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
14 1 5 1 0 1 0 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
14 1 5 2 0 1 0 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 5 5 1 97 2 1 1 1 37 77 0 4 4 0 97 0 0 0 35 77 0 3 3 33 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 2 31 77 0 5 5 1 97 0 1 1 37 77 0 4 4 0 97 0 0 0 35 77 0 3 3 33 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 5 5 1 97 0 1 1 37 77 0 4 4 0 97 0 0 0 35 77 0 3 3 2 95 0 2 2 31 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 35 52 53 38 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(273,287,o),
(339,331,o),
(402,331,qs),
(430,331,ls),
(447,331,o),
(469,350,o),
(471,366,qs),
(507,568,l),
(454,568,o),
(346,509,o),
(303,460,q),
(315,529,ls),
(318,546,o),
(303,564,o),
(286,564,qs),
(109,564,ls),
(99,564,o),
(98,554,qs),
(2,10,ls),
(0,0,o),
(10,0,qs),
(212,0,ls),
(222,0,o),
(224,10,qs),
(263,231,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
13 1 3 1 1 76 0 3 3 1 97 2 1 1 1 31 77 0 0 0 29 0 78 51 21 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 467;
}
);
note = r;
unicode = 114;
},
{
glyphname = s;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(532,233,o),
(483,306,o),
(405,336,o),
(346,348,qs),
(301,357,o),
(262,374,o),
(265,391,qs),
(268,404,o),
(288,417,o),
(305,417,qs),
(340,417,o),
(353,395,q),
(353,395,l),
(362,380,o),
(375,369,o),
(389,369,qs),
(518,369,ls),
(536,369,o),
(558,390,o),
(556,407,qs),
(547,481,o),
(438,571,o),
(337,571,qs),
(260,571,o),
(143,522,o),
(73,437,o),
(64,385,qs),
(54,325,o),
(101,257,o),
(175,229,o),
(234,217,qs),
(282,207,o),
(321,191,o),
(318,172,qs),
(316,161,o),
(293,146,o),
(276,146,qs),
(239,146,o),
(225,168,q),
(218,183,o),
(204,195,o),
(190,195,qs),
(45,195,ls),
(26,195,o),
(4,175,o),
(6,157,qs),
(15,84,o),
(144,-7,o),
(250,-7,qs),
(323,-7,o),
(440,39,o),
(512,119,o),
(521,169,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 5 1 5 4 114 0 1 2 2 1 112 0 5 5 3 97 0 3 3 37 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 37 77 0 2 2 0 98 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 52 44 35 52 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = s;
unicode = 115;
},
{
glyphname = t;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,231,ls),
(23,0,o),
(255,0,qs),
(329,0,ls),
(339,0,o),
(341,10,qs),
(366,154,ls),
(369,171,o),
(355,189,o),
(338,189,qs),
(320,189,ls),
(298,189,o),
(282,207,o),
(285,227,qs),
(312,379,l),
(394,379,ls),
(404,379,o),
(406,389,qs),
(435,554,ls),
(437,564,o),
(427,564,qs),
(345,564,l),
(367,690,ls),
(369,700,o),
(359,700,qs),
(157,700,ls),
(147,700,o),
(145,690,qs),
(131,609,ls),
(127,587,o),
(100,564,o),
(78,564,qs),
(63,564,ls),
(53,564,o),
(51,554,qs),
(22,389,ls),
(20,379,o),
(30,379,qs),
(90,379,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
0 2 2 28 77 4 7 2 0 0 1 97 3 1 1 1 31 77 0 5 5 6 96 0 6 6 29 6 78 1 0 36 33 29 26 23 21 18 16 14 11 7 4 0 38 1 38 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 436;
}
);
note = t;
unicode = 116;
},
{
glyphname = u;
lastChange = "2023-01-11 15:51:17 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(317,546,o),
(298,569,o),
(276,569,qs),
(110,569,ls),
(100,569,o),
(98,559,qs),
(42,242,ls),
(22,131,o),
(109,1,o),
(206,1,qs),
(266,1,o),
(362,51,o),
(395,91,q),
(388,45,ls),
(385,23,o),
(403,0,o),
(425,0,qs),
(592,0,ls),
(601,0,o),
(603,10,qs),
(699,559,ls),
(701,569,o),
(691,569,qs),
(489,569,ls),
(479,569,o),
(477,559,qs),
(426,270,ls),
(419,230,o),
(369,183,o),
(332,183,qs),
(296,183,o),
(261,230,o),
(268,270,qs),
(313,524,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
20 1 2 0 1 76 0 0 1 2 1 0 2 128 4 1 1 1 31 77 3 1 2 2 29 2 78 52 37 51 52 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = u;
unicode = 117;
},
{
glyphname = v;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,564,o),
(62,543,o),
(65,524,qs),
(141,41,ls),
(147,0,o),
(190,0,qs),
(381,0,ls),
(424,0,o),
(446,41,qs),
(692,524,ls),
(701,543,o),
(689,564,o),
(670,564,qs),
(507,564,ls),
(475,564,o),
(462,534,qs),
(344,259,ls),
(337,244,o),
(321,244,o),
(320,259,qs),
(297,534,ls),
(296,564,o),
(264,564,qs),
(101,564,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
2 4 2 0 0 31 77 0 1 1 3 96 0 3 3 29 3 78 1 0 18 15 11 8 5 4 0 23 1 22 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(67,564,o),
(61,558,o),
(61,553,qs),
(114,41,ls),
(117,0,o),
(154,0,qs),
(314,0,ls),
(351,0,o),
(370,41,qs),
(422,155,ls),
(427,166,o),
(440,166,o),
(441,155,qs),
(453,41,ls),
(457,0,o),
(493,0,qs),
(654,0,ls),
(690,0,o),
(709,41,qs),
(943,553,ls),
(945,558,o),
(941,564,o),
(936,564,qs),
(790,564,ls),
(750,564,o),
(734,524,qs),
(630,259,ls),
(624,244,o),
(610,244,o),
(610,259,qs),
(598,534,ls),
(598,549,o),
(591,557,qs),
(584,564,o),
(573,564,qs),
(434,564,ls),
(423,564,o),
(412,557,qs),
(403,549,o),
(397,534,qs),
(291,259,ls),
(284,244,o),
(271,244,o),
(270,259,qs),
(260,524,ls),
(258,564,o),
(218,564,qs),
(72,564,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
0 6 6 0 95 4 2 8 3 0 0 31 77 3 1 1 1 5 96 7 1 5 5 29 5 78 1 0 42 39 36 35 32 29 24 22 19 18 13 10 5 4 0 47 1 46 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 903;
}
);
note = w;
unicode = 119;
},
{
glyphname = x;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,0,o),
(397,0,qs),
(603,0,ls),
(609,0,o),
(615,8,o),
(611,12,q),
(466,267,ls),
(463,275,o),
(469,281,q),
(699,552,ls),
(702,557,o),
(700,564,o),
(694,564,qs),
(473,564,ls),
(466,564,o),
(459,557,q),
(378,447,ls),
(374,442,o),
(366,442,o),
(364,446,qs),
(310,543,ls),
(299,564,o),
(271,564,qs),
(65,564,ls),
(59,564,o),
(53,557,o),
(57,552,qs),
(198,304,l),
(201,297,o),
(195,290,qs),
(-30,12,ls),
(-33,7,o),
(-32,0,o),
(-26,0,qs),
(196,0,ls),
(203,0,o),
(210,7,q),
(290,116,ls),
(294,121,o),
(302,121,o),
(304,117,qs),
(358,21,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
35 1 0 1 1 76 2 1 1 1 31 77 3 1 0 0 29 0 78 57 39 57 37 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 668;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(378,302,o),
(361,301,o),
(359,314,qs),
(312,556,ls),
(311,564,o),
(303,564,qs),
(77,564,ls),
(72,564,o),
(65,557,o),
(66,552,qs),
(204,28,l),
(18,-258,ls),
(15,-263,o),
(17,-270,o),
(22,-270,qs),
(223,-270,ls),
(253,-270,o),
(269,-243,qs),
(753,552,ls),
(756,557,o),
(753,564,o),
(748,564,qs),
(546,564,ls),
(516,564,o),
(501,536,qs),
(386,315,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
14 1 1 3 1 76 0 3 0 1 0 3 1 128 2 1 0 0 31 77 0 1 1 33 1 78 20 39 37 33 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = y;
unicode = 121;
},
{
glyphname = z;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(538,564,o),
(528,564,qs),
(83,564,ls),
(73,564,o),
(71,554,qs),
(48,425,ls),
(44,403,o),
(63,380,o),
(85,380,qs),
(234,380,ls),
(241,380,o),
(243,373,o),
(237,368,qs),
(14,184,ls),
(1,173,o),
(-2,159,qs),
(-28,10,ls),
(-30,0,o),
(-20,0,qs),
(438,0,ls),
(448,0,o),
(450,10,qs),
(473,139,ls),
(477,161,o),
(458,184,o),
(436,184,qs),
(264,184,ls),
(257,184,o),
(255,191,o),
(261,196,qs),
(494,380,ls),
(507,391,o),
(510,405,qs),
(536,554,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 52 55 52 53 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = z;
unicode = 122;
},
{
glyphname = braceleft;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,153,o),
(99,94,qs),
(72,18,o),
(64,-24,qs),
(47,-123,o),
(150,-231,o),
(255,-231,qs),
(331,-231,l),
(362,-54,l),
(328,-54,ls),
(296,-54,o),
(274,-26,o),
(278,0,qs),
(281,16,o),
(301,80,qs),
(324,154,o),
(329,187,qs),
(340,246,o),
(299,321,o),
(247,331,q),
(247,333,l),
(303,343,o),
(370,418,o),
(381,477,qs),
(386,510,o),
(389,584,qs),
(393,648,o),
(396,664,qs),
(400,690,o),
(432,718,o),
(464,718,qs),
(498,718,l),
(529,895,l),
(453,895,ls),
(348,895,o),
(207,787,o),
(190,688,qs),
(182,646,o),
(183,570,qs),
(184,511,o),
(179,486,qs),
(173,453,o),
(127,423,o),
(76,423,q),
(44,242,l),
(94,242,o),
(130,209,o),
(125,178,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
26 1 0 1 1 76 0 2 0 3 1 2 3 105 0 1 0 0 4 1 0 105 0 4 5 5 4 89 0 4 4 5 95 0 5 4 5 79 41 39 38 36 33 40 17 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 484;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = bar;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(106,828,l),
(-66,-144,l),
(156,-144,l),
(328,828,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 262;
}
);
note = bar;
unicode = 124;
},
{
glyphname = braceright;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(300,153,o),
(301,94,qs),
(302,18,o),
(294,-24,qs),
(277,-123,o),
(136,-231,o),
(31,-231,qs),
(-45,-231,l),
(-14,-54,l),
(20,-54,ls),
(52,-54,o),
(84,-26,o),
(88,0,qs),
(91,16,o),
(95,80,qs),
(98,154,o),
(103,187,qs),
(114,246,o),
(181,321,o),
(237,331,q),
(237,333,l),
(185,343,o),
(144,418,o),
(155,477,qs),
(160,510,o),
(183,584,qs),
(203,648,o),
(206,664,qs),
(210,690,o),
(188,718,o),
(156,718,qs),
(122,718,l),
(153,895,l),
(229,895,ls),
(334,895,o),
(437,787,o),
(420,688,qs),
(412,646,o),
(385,570,qs),
(364,511,o),
(359,486,qs),
(353,453,o),
(389,423,o),
(440,423,q),
(408,242,l),
(358,242,o),
(310,209,o),
(305,178,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
26 1 0 1 1 76 0 2 0 3 1 2 3 105 0 1 0 0 4 1 0 105 0 4 5 5 4 89 0 4 4 5 95 0 5 4 5 79 41 39 38 36 33 40 17 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 484;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = asciitilde;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(160,181,o),
(164,190,q),
(176,222,o),
(208,250,o),
(233,250,qs),
(250,250,o),
(281,238,o),
(308,223,qs),
(341,204,o),
(396,183,o),
(432,183,qs),
(522,183,o),
(666,306,o),
(711,436,qs),
(712,441,o),
(708,447,o),
(703,447,qs),
(557,447,ls),
(549,447,o),
(546,438,qs),
(534,406,o),
(502,378,o),
(477,378,qs),
(460,378,o),
(429,391,o),
(403,405,qs),
(370,424,o),
(314,445,o),
(278,445,qs),
(189,445,o),
(46,322,o),
(0,192,qs),
(-3,181,o),
(8,181,qs),
(152,181,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
0 2 5 0 2 89 3 1 1 0 5 0 1 5 105 0 2 2 0 98 4 6 2 0 2 0 82 1 0 30 28 24 22 17 15 12 10 6 4 0 34 1 33 7 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 711;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 170;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = exclamdown;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,287,l),
(339,287,l),
(282,-187,l),
(40,-187,l)
);
},
{
closed = 1;
nodes = (
(395,419,o),
(313,356,o),
(256,356,qs),
(198,356,o),
(140,419,o),
(148,467,qs),
(156,514,o),
(237,576,o),
(295,576,qs),
(352,576,o),
(411,514,o),
(403,467,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
0 0 4 1 1 0 1 99 0 3 3 2 97 0 2 2 37 3 78 0 0 13 11 7 5 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 455;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = cent;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(341,188,o),
(304,170,o),
(286,170,qs),
(252,170,o),
(225,213,o),
(232,253,qs),
(239,293,o),
(282,337,o),
(316,337,qs),
(334,337,o),
(361,321,o),
(365,302,q),
(568,302,l),
(578,396,o),
(466,506,o),
(372,513,q),
(385,589,l),
(323,589,l),
(310,513,l),
(194,503,o),
(41,370,o),
(20,254,qs),
(0,137,o),
(106,3,o),
(218,-7,q),
(205,-83,l),
(267,-83,l),
(280,-7,l),
(342,-2,o),
(454,49,o),
(535,142,o),
(551,205,q),
(348,205,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
16 13 2 3 1 7 4 2 0 4 2 76 0 2 3 5 3 2 5 128 6 1 5 4 3 5 4 126 0 1 0 3 2 1 3 105 0 4 0 0 4 89 0 4 4 0 95 0 0 4 0 79 0 0 0 32 0 32 36 34 20 24 21 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = cent;
unicode = 162;
},
{
glyphname = sterling;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,493,o),
(115,421,q),
(38,421,l),
(12,274,l),
(115,274,l),
(100,216,o),
(38,133,o),
(-14,98,q),
(-6,-6,l),
(546,-6,l),
(577,165,l),
(242,165,l),
(295,203,o),
(323,274,q),
(473,274,l),
(499,421,l),
(331,421,l),
(330,432,ls),
(327,457,o),
(324,506,o),
(327,522,qs),
(339,591,o),
(391,591,qs),
(439,591,o),
(435,531,q),
(639,531,l),
(651,639,o),
(539,771,o),
(415,771,qs),
(340,771,o),
(215,718,o),
(133,618,o),
(120,548,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
24 1 6 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 3 2 1 114 0 0 0 2 1 0 2 105 8 1 3 7 1 4 5 3 4 103 0 5 5 6 95 0 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 1 2 3 2 1 3 128 0 0 0 2 1 0 2 105 8 1 3 7 1 4 5 3 4 103 0 5 5 6 95 0 6 6 29 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
17 20 17 18 17 21 33 18 34 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = currency;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,348,o),
(318,320,o),
(293,320,qs),
(268,320,o),
(240,348,o),
(245,377,qs),
(251,408,o),
(289,436,o),
(314,436,qs),
(339,436,o),
(367,408,o),
(361,377,qs)
);
},
{
closed = 1;
nodes = (
(515,219,l),
(474,268,l),
(521,316,o),
(532,379,qs),
(544,446,o),
(512,491,q),
(571,541,l),
(506,622,l),
(421,550,l),
(382,561,o),
(336,561,qs),
(286,561,o),
(243,549,q),
(183,622,l),
(88,541,l),
(132,488,l),
(87,443,o),
(76,379,qs),
(65,316,o),
(93,271,q),
(32,219,l),
(97,138,l),
(178,207,l),
(220,193,o),
(271,193,qs),
(323,193,o),
(364,206,q),
(420,138,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
33 32 30 26 24 23 6 0 3 38 37 19 18 16 5 2 1 2 76 31 25 2 3 74 39 17 2 2 73 0 1 0 2 1 2 101 0 0 0 3 97 0 3 3 31 0 78 44 36 36 33 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
note = currency;
unicode = 164;
},
{
glyphname = yen;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(635,128,l),
(661,272,l),
(491,272,l),
(516,308,l),
(667,308,l),
(692,452,l),
(615,452,l),
(792,708,l),
(542,708,l),
(379,424,l),
(316,708,l),
(62,708,l),
(149,452,l),
(70,452,l),
(45,308,l),
(198,308,l),
(211,272,l),
(39,272,l),
(13,128,l),
(214,128,l),
(192,0,l),
(414,0,l),
(436,128,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
12 1 3 4 1 76 7 1 4 8 1 3 2 4 3 104 9 1 2 10 1 1 0 2 1 103 6 1 5 5 28 77 0 0 0 29 0 78 22 21 20 19 17 17 18 17 17 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = yen;
unicode = 165;
},
{
glyphname = brokenbar;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(95,287,l),
(19,-144,l),
(241,-144,l),
(317,287,l)
);
},
{
closed = 1;
nodes = (
(337,398,l),
(413,828,l),
(191,828,l),
(115,398,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 3 1 2 3 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = section;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(103,494,o),
(118,420,o),
(141,388,q),
(39,348,o),
(21,244,qs),
(11,189,o),
(69,97,o),
(131,62,qs),
(187,30,o),
(240,-5,o),
(263,-36,o),
(259,-55,qs),
(255,-79,o),
(239,-79,qs),
(217,-79,o),
(225,-25,q),
(6,-25,l),
(-3,-119,o),
(99,-235,o),
(207,-235,qs),
(323,-235,o),
(470,-130,o),
(485,-44,qs),
(500,37,o),
(453,101,q),
(510,127,o),
(567,197,o),
(575,244,qs),
(594,349,o),
(464,427,qs),
(408,458,o),
(354,493,o),
(332,524,o),
(336,543,qs),
(340,567,o),
(356,567,qs),
(378,567,o),
(370,513,q),
(589,513,l),
(598,607,o),
(496,723,o),
(388,723,qs),
(272,723,o),
(125,618,o),
(110,532,qs)
);
},
{
closed = 1;
nodes = (
(335,220,o),
(306,189,o),
(287,189,qs),
(269,189,o),
(254,220,o),
(258,244,qs),
(262,268,o),
(291,299,o),
(310,299,qs),
(329,299,o),
(343,268,o),
(339,244,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
41 1 6 1 19 1 4 7 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 2 0 1 1 2 114 0 6 1 7 1 6 7 128 0 7 4 1 7 4 126 0 5 4 3 4 5 114 0 4 0 3 4 3 102 0 1 1 0 98 0 0 0 34 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 0 1 0 2 1 128 0 6 1 7 1 6 7 128 0 7 4 1 7 4 126 0 5 4 3 4 5 3 128 0 4 0 3 4 3 102 0 1 1 0 98 0 0 0 34 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 47 33 18 46 33 18 33 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = section;
unicode = 167;
},
{
glyphname = dieresis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,620,o),
(175,669,o),
(182,705,qs),
(189,743,o),
(148,792,o),
(110,792,qs),
(74,792,o),
(16,742,o),
(10,705,qs),
(3,669,o),
(44,620,o),
(80,620,qs)
);
},
{
closed = 1;
nodes = (
(342,620,o),
(400,669,o),
(407,705,qs),
(414,743,o),
(373,792,o),
(335,792,qs),
(299,792,o),
(241,742,o),
(235,705,qs),
(228,669,o),
(269,620,o),
(305,620,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 417;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = copyright;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(12,253,o),
(72,87,o),
(218,-6,o),
(322,-6,qs),
(426,-6,o),
(603,87,o),
(722,252,o),
(741,358,qs),
(760,463,o),
(700,628,o),
(554,720,o),
(450,720,qs),
(346,720,o),
(168,628,o),
(49,463,o),
(30,358,qs)
);
},
{
closed = 1;
nodes = (
(656,269,o),
(563,133,o),
(420,59,o),
(333,59,qs),
(246,59,o),
(130,133,o),
(84,268,o),
(100,358,qs),
(116,448,o),
(209,582,o),
(351,655,o),
(439,655,qs),
(526,655,o),
(642,582,o),
(688,448,o),
(672,358,qs)
);
},
{
closed = 1;
nodes = (
(421,433,o),
(393,433,qs),
(371,433,o),
(342,395,o),
(335,357,qs),
(328,319,o),
(345,281,o),
(367,281,qs),
(395,281,o),
(411,316,q),
(595,316,l),
(568,234,o),
(433,136,o),
(351,136,qs),
(284,136,o),
(191,190,o),
(152,290,o),
(164,357,qs),
(176,424,o),
(249,524,o),
(362,578,o),
(429,578,qs),
(511,578,o),
(612,480,o),
(609,398,q),
(425,398,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 4 2 8 2 4 114 0 5 7 3 3 5 114 0 0 0 2 4 0 2 105 10 1 9 0 6 7 9 6 103 0 8 0 7 5 8 7 105 0 3 1 1 3 89 0 3 3 1 98 0 1 3 1 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 4 2 8 2 4 8 128 0 5 7 3 7 5 3 128 0 0 0 2 4 0 2 105 10 1 9 0 6 7 9 6 103 0 8 0 7 5 8 7 105 0 3 1 1 3 89 0 3 3 1 98 0 1 3 1 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
32 32 32 57 32 57 36 33 18 38 38 38 38 38 34 11 8 31 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 771;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = ordfeminine;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,350,o),
(250,371,o),
(273,394,q),
(266,355,l),
(430,355,l),
(492,708,l),
(328,708,l),
(321,669,l),
(306,691,o),
(257,712,o),
(216,712,qs),
(144,712,o),
(35,616,o),
(20,530,qs),
(5,444,o),
(81,350,o),
(154,350,qs)
);
},
{
closed = 1;
nodes = (
(275,582,o),
(301,556,o),
(297,532,qs),
(293,508,o),
(257,481,o),
(234,481,qs),
(210,481,o),
(184,505,o),
(189,529,qs),
(193,554,o),
(229,582,o),
(252,582,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
8 1 5 1 13 1 2 4 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
8 1 5 0 13 1 2 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
8 1 5 1 13 1 2 4 2 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 44 77 7 1 5 5 0 97 0 0 0 44 77 0 2 2 45 77 0 4 4 3 97 6 1 3 3 45 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
7 1 5 5 0 97 1 1 0 0 44 77 0 2 2 45 77 0 4 4 3 97 6 1 3 3 45 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
12 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 44 77 7 1 5 5 0 97 0 0 0 44 77 0 2 2 45 77 0 4 4 3 97 6 1 3 3 45 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 44 77 7 1 5 5 0 97 0 0 0 44 77 0 2 2 45 77 0 4 4 3 97 6 1 3 3 47 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
17 17 0 0 17 28 17 27 23 21 0 16 0 15 17 19 36 8 9 25 
CALL[ ]	/* CallFunction */";
};
width = 481;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = guillemotleft;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(244,295,l),
(354,470,l),
(153,470,l),
(45,295,l),
(91,120,l),
(292,120,l)
);
},
{
closed = 1;
nodes = (
(346,120,l),
(547,120,l),
(499,295,l),
(609,470,l),
(408,470,l),
(300,295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 8 4 1 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 4 2 1 0 1 79 0 0 10 9 7 6 0 5 0 5 18 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = logicalnot;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(52,282,l),
(488,282,l),
(465,155,l),
(687,155,l),
(739,448,l),
(81,448,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 1 1 0 113 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 1 0 134 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 5 0 5 17 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = uni00AD;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(4,250,l),
(470,250,l),
(502,433,l),
(36,433,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 576;
}
);
note = uni00AD;
unicode = 173;
},
{
glyphname = registered;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(355,656,o),
(425,569,o),
(412,498,qs),
(400,428,o),
(299,340,o),
(228,340,qs),
(157,340,o),
(87,428,o),
(99,498,qs),
(112,570,o),
(212,656,o),
(284,656,qs)
);
},
{
closed = 1;
nodes = (
(282,275,o),
(395,332,o),
(470,434,o),
(481,498,qs),
(492,563,o),
(453,664,o),
(360,721,o),
(295,721,qs),
(230,721,o),
(117,664,o),
(41,563,o),
(30,498,qs),
(19,434,o),
(59,332,o),
(152,275,o),
(217,275,qs)
);
},
{
closed = 1;
nodes = (
(370,569,o),
(334,606,o),
(299,606,qs),
(179,606,l),
(142,396,l),
(222,396,l),
(235,469,l),
(240,469,l),
(264,396,l),
(350,396,l),
(317,478,l),
(336,487,o),
(361,518,o),
(364,538,qs)
);
},
{
closed = 1;
nodes = (
(269,543,ls),
(282,543,o),
(280,530,qs),
(277,517,o),
(264,517,qs),
(240,517,l),
(245,543,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 7 values pushed */
33 30 2 4 7 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 8 6 7 1 8 114 0 7 4 6 7 4 126 0 2 9 1 1 6 2 1 105 0 6 5 1 4 0 6 4 103 0 0 3 3 0 89 0 0 0 3 98 10 1 3 0 3 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 8 6 7 6 8 7 128 0 7 4 6 7 4 126 0 2 9 1 1 6 2 1 105 0 6 5 1 4 0 6 4 103 0 0 3 3 0 89 0 0 0 3 98 10 1 3 0 3 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
12 12 0 0 48 46 44 42 39 37 36 35 32 31 12 27 12 26 20 18 0 11 0 10 36 11 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 511;
}
);
note = registered;
unicode = 174;
},
{
glyphname = macron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-3,622,l),
(428,622,l),
(454,769,l),
(23,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 451;
}
);
note = macron;
unicode = 175;
},
{
glyphname = degree;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(13,477,o),
(57,393,o),
(154,347,o),
(221,347,qs),
(322,347,o),
(458,447,o),
(473,533,qs),
(488,618,o),
(383,715,o),
(281,715,qs),
(178,715,o),
(38,618,o),
(23,533,qs)
);
},
{
closed = 1;
nodes = (
(298,497,o),
(262,464,o),
(241,464,qs),
(218,464,o),
(186,497,o),
(192,531,qs),
(198,566,o),
(239,600,o),
(262,600,qs),
(283,600,o),
(310,566,o),
(304,531,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 31 values pushed */
0 0 0 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 36 37 36 33 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 496;
}
);
note = degree;
unicode = 176;
},
{
glyphname = plusminus;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,630,l),
(201,545,l),
(52,545,l),
(17,344,l),
(166,344,l),
(157,297,l),
(8,297,l),
(-27,96,l),
(484,96,l),
(519,297,l),
(370,297,l),
(379,344,l),
(528,344,l),
(563,545,l),
(414,545,l),
(429,630,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 7 0 7 133 4 1 2 0 3 2 3 100 5 1 1 1 0 95 6 1 0 0 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 7 0 7 133 6 1 0 5 1 1 2 0 1 103 4 1 2 3 3 2 87 4 1 2 2 3 96 0 3 2 3 80 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = uni00B2;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,603,o),
(233,603,qs),
(242,603,o),
(241,595,qs),
(236,568,o),
(185,544,qs),
(37,474,l),
(16,352,l),
(361,352,l),
(383,477,l),
(213,477,l),
(256,492,ls),
(335,520,o),
(410,573,o),
(416,609,qs),
(424,652,o),
(357,717,o),
(275,717,qs),
(185,717,o),
(63,635,o),
(46,569,q),
(209,569,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
17 1 4 3 14 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
37 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
5 1 4 3 1 3 4 114 0 3 3 0 97 0 0 0 44 77 0 1 1 2 95 0 2 2 45 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
5 1 4 3 1 3 4 1 128 0 3 3 0 97 0 0 0 44 77 0 1 1 2 95 0 2 2 45 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 21 0 21 22 17 22 34 6 9 26 
CALL[ ]	/* CallFunction */";
};
width = 422;
}
);
note = uni00B2;
unicode = 178;
},
{
glyphname = uni00B3;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,592,o),
(196,605,o),
(203,605,qs),
(215,605,o),
(212,588,qs),
(209,574,o),
(195,562,o),
(181,562,qs),
(160,562,l),
(151,508,l),
(181,508,ls),
(195,508,o),
(206,497,o),
(203,483,qs),
(199,462,o),
(186,462,qs),
(179,462,o),
(174,471,o),
(176,482,q),
(4,482,l),
(-1,417,o),
(76,349,o),
(181,349,qs),
(261,349,o),
(362,402,o),
(371,452,qs),
(376,484,o),
(344,523,o),
(301,533,q),
(302,537,l),
(379,549,o),
(390,611,qs),
(398,659,o),
(320,717,o),
(241,717,qs),
(141,717,o),
(38,636,o),
(28,577,q),
(184,577,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
8 1 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
8 1 7 6 5 6 7 114 0 2 4 3 3 2 114 0 5 0 4 2 5 4 105 0 6 6 0 97 0 0 0 44 77 0 3 3 1 98 0 1 1 47 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
8 1 7 6 5 6 7 5 128 0 2 4 3 3 2 114 0 5 0 4 2 5 4 105 0 6 6 0 97 0 0 0 44 77 0 3 3 1 98 0 1 1 47 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 38 0 38 19 33 35 34 18 42 34 9 9 29 
CALL[ ]	/* CallFunction */";
};
width = 403;
}
);
note = uni00B3;
unicode = 179;
},
{
glyphname = acute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(13,750,l),
(-13,602,l),
(263,696,l),
(292,860,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 279;
}
);
note = acute;
unicode = 180;
},
{
glyphname = uni00B5;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(650,0,l),
(750,564,l),
(528,564,l),
(475,266,ls),
(469,230,o),
(419,188,o),
(382,188,qs),
(346,188,o),
(311,230,o),
(317,266,qs),
(370,564,l),
(149,564,l),
(1,-270,l),
(222,-270,l),
(269,-4,l),
(321,-4,o),
(411,41,o),
(442,77,q),
(428,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 0 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 2 2 31 77 0 3 3 0 97 5 1 0 0 29 77 0 1 1 33 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
4 1 2 2 31 77 0 3 3 0 97 5 1 0 0 35 77 0 1 1 33 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 19 35 17 17 18 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 751;
}
);
note = uni00B5;
unicode = 181;
},
{
glyphname = paragraph;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,708,ls),
(241,708,o),
(123,645,o),
(56,544,o),
(45,486,qs),
(35,428,o),
(67,328,o),
(163,265,o),
(245,265,qs),
(276,265,l),
(230,0,l),
(406,0,l),
(501,542,l),
(559,542,l),
(464,0,l),
(641,0,l),
(765,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
0 3 1 0 1 3 0 128 0 1 1 4 95 0 4 4 28 77 2 1 0 0 29 0 78 38 33 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = periodcentered;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,344,o),
(251,407,o),
(194,407,qs),
(136,407,o),
(55,344,o),
(47,296,qs),
(39,249,o),
(98,187,o),
(156,187,qs),
(213,187,o),
(294,249,o),
(302,296,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 36 33 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 349;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = cedilla;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,7,l),
(76,-127,l),
(161,-127,ls),
(187,-127,o),
(184,-142,qs),
(183,-149,o),
(167,-158,o),
(155,-158,qs),
(5,-158,l),
(-15,-271,l),
(158,-271,ls),
(218,-271,o),
(319,-214,o),
(330,-149,qs),
(338,-105,o),
(305,-50,o),
(250,-27,o),
(222,-27,q),
(228,7,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 4 3 2 0 114 0 4 0 3 2 4 3 103 0 2 1 1 2 87 0 2 2 1 96 0 1 2 1 80 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 4 3 4 0 3 128 0 4 0 3 2 4 3 103 0 2 1 1 2 87 0 2 2 1 96 0 1 2 1 80 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 35 33 37 16 5 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 343;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = uni00B9;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(55,352,l),
(219,352,l),
(281,704,l),
(51,704,l),
(29,577,l),
(95,577,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
3 1 2 2 0 95 0 0 0 44 77 0 1 1 45 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
0 0 3 1 2 1 0 2 103 0 1 1 45 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 5 0 5 17 17 4 9 24 
CALL[ ]	/* CallFunction */";
};
width = 285;
}
);
note = uni00B9;
unicode = 185;
},
{
glyphname = ordmasculine;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(11,478,o),
(49,395,o),
(138,347,o),
(203,347,qs),
(268,347,o),
(375,395,o),
(441,478,o),
(450,529,qs),
(459,581,o),
(422,662,o),
(333,709,o),
(267,709,qs),
(201,709,o),
(96,662,o),
(29,581,o),
(20,529,qs)
);
},
{
closed = 1;
nodes = (
(278,502,o),
(246,473,o),
(225,473,qs),
(204,473,o),
(182,502,o),
(187,529,qs),
(192,556,o),
(224,584,o),
(245,584,qs),
(266,584,o),
(288,556,o),
(283,529,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 2 2 0 97 0 0 0 44 77 0 3 3 1 97 0 1 1 47 1 78 36 37 38 34 4 9 26 
CALL[ ]	/* CallFunction */";
};
width = 470;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = guillemotright;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,120,l),
(583,295,l),
(538,470,l),
(336,470,l),
(385,295,l),
(274,120,l)
);
},
{
closed = 1;
nodes = (
(221,120,l),
(328,295,l),
(283,470,l),
(81,470,l),
(130,295,l),
(19,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 618;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = onequarter;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(48,0,l),
(265,0,l),
(776,708,l),
(560,708,l)
);
},
{
closed = 1;
nodes = (
(150,577,l),
(111,352,l),
(275,352,l),
(337,704,l),
(107,704,l),
(84,577,l)
);
},
{
closed = 1;
nodes = (
(605,58,l),
(595,0,l),
(760,0,l),
(770,58,l),
(805,58,l),
(820,146,l),
(785,146,l),
(821,351,l),
(594,351,l),
(417,142,l),
(402,58,l)
);
},
{
closed = 1;
nodes = (
(648,250,l),
(630,151,l),
(571,151,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
22 1 6 5 10 1 7 6 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
22 1 10 5 10 1 7 6 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 3 4 5 4 3 5 128 0 5 6 4 5 6 126 8 1 0 7 0 134 2 11 2 1 0 4 3 1 4 103 12 10 2 6 7 7 6 87 12 10 2 6 6 7 96 9 1 7 6 7 80 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 3 4 5 4 3 5 128 0 5 10 4 5 10 126 8 1 0 7 0 134 2 11 2 1 0 4 3 1 4 103 12 1 10 6 7 10 87 0 6 7 7 6 87 0 6 6 7 95 9 1 7 6 7 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
21 21 0 0 21 23 21 23 20 19 18 17 16 15 14 13 12 11 9 8 7 6 5 4 0 3 0 3 17 13 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 879;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = onehalf;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,0,l),
(264,0,l),
(787,711,l),
(571,711,l)
);
},
{
closed = 1;
nodes = (
(110,352,l),
(274,352,l),
(337,704,l),
(107,704,l),
(84,577,l),
(150,577,l)
);
},
{
closed = 1;
nodes = (
(639,250,o),
(656,250,qs),
(665,250,o),
(664,242,qs),
(659,215,o),
(608,191,qs),
(461,121,l),
(439,-1,l),
(784,-1,l),
(806,124,l),
(636,124,l),
(679,139,ls),
(759,167,o),
(833,220,o),
(840,256,qs),
(847,299,o),
(781,364,o),
(699,364,qs),
(609,364,o),
(486,282,o),
(469,216,q),
(632,216,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 10 values pushed */
27 1 9 8 24 1 0 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 3 5 8 5 3 8 128 0 8 9 9 8 112 2 10 2 1 11 1 4 5 1 4 103 0 5 12 1 9 6 5 9 104 0 6 0 0 6 87 0 6 6 0 95 7 1 0 6 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
10 1 1 2 1 133 0 3 5 8 5 3 8 128 0 8 9 9 8 112 0 2 11 1 4 5 2 4 103 0 5 12 1 9 6 5 9 104 0 6 0 0 6 87 0 6 6 0 95 7 1 0 6 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
10 1 1 2 1 133 0 3 5 8 5 3 8 128 0 8 9 5 8 9 126 0 2 11 1 4 5 2 4 103 0 5 12 1 9 6 5 9 104 0 6 0 0 6 87 0 6 6 0 95 7 1 0 6 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
10 10 4 4 0 0 10 31 10 31 30 29 23 22 21 20 14 12 4 9 4 9 8 7 6 5 0 3 0 3 17 13 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 928;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = threequarters;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,0,l),
(414,0,l),
(909,711,l),
(692,711,l)
);
},
{
closed = 1;
nodes = (
(937,146,l),
(973,351,l),
(726,351,l),
(568,142,l),
(553,58,l),
(757,58,l),
(747,0,l),
(911,0,l),
(921,58,l),
(956,58,l),
(972,146,l)
);
},
{
closed = 1;
nodes = (
(723,146,l),
(803,270,l),
(782,146,l)
);
},
{
closed = 1;
nodes = (
(270,592,o),
(279,605,o),
(286,605,qs),
(298,605,o),
(295,588,qs),
(293,574,o),
(279,562,o),
(265,562,qs),
(244,562,l),
(234,508,l),
(264,508,ls),
(278,508,o),
(289,497,o),
(287,483,qs),
(283,462,o),
(270,462,qs),
(263,462,o),
(258,471,o),
(260,482,q),
(88,482,l),
(82,417,o),
(159,349,o),
(264,349,qs),
(344,349,o),
(446,402,o),
(454,452,qs),
(460,484,o),
(428,523,o),
(385,533,q),
(385,537,l),
(463,549,o),
(474,611,qs),
(482,659,o),
(404,717,o),
(325,717,qs),
(225,717,o),
(122,636,o),
(112,577,q),
(268,577,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 14 values pushed */
26 1 12 13 15 1 6 9 10 1 2 6 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 69 values pushed */
0 13 14 12 14 13 12 128 0 12 10 14 12 112 0 5 10 9 10 5 9 128 3 1 0 2 2 0 113 8 16 2 1 17 15 2 14 13 1 14 105 11 1 10 0 9 6 10 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 75 values pushed */
0 14 1 15 15 14 114 0 13 15 12 15 13 12 128 0 12 10 15 12 112 0 5 10 9 10 5 9 128 3 1 0 2 2 0 113 8 16 2 1 17 1 15 13 1 15 103 11 1 10 0 9 6 10 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 80 values pushed */
0 14 1 15 15 14 114 0 13 15 12 15 13 12 128 0 12 10 15 12 112 0 11 10 5 10 11 114 0 5 9 10 5 9 126 3 1 0 2 2 0 113 8 16 2 1 17 1 15 13 1 15 103 0 10 0 9 6 10 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 81 values pushed */
0 14 1 15 15 14 114 0 13 15 12 15 13 12 128 0 12 10 15 12 10 126 0 11 10 5 10 11 114 0 5 9 10 5 9 126 3 1 0 2 2 0 113 8 16 2 1 17 1 15 13 1 15 103 0 10 0 9 6 10 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 80 values pushed */
0 14 1 15 15 14 114 0 13 15 12 15 13 12 128 0 12 10 15 12 10 126 0 11 10 5 10 11 114 0 5 9 10 5 9 126 3 1 0 2 0 134 8 16 2 1 17 1 15 13 1 15 103 0 10 0 9 6 10 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 86 values pushed */
16 1 1 8 14 8 1 14 128 0 14 15 15 14 112 0 13 15 12 15 13 12 128 0 12 10 15 12 10 126 0 11 10 5 10 11 114 0 5 9 10 5 9 126 3 1 0 2 0 134 0 8 17 1 15 13 8 15 103 0 10 0 9 6 10 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 87 values pushed */
16 1 1 8 14 8 1 14 128 0 14 15 8 14 15 126 0 13 15 12 15 13 12 128 0 12 10 15 12 10 126 0 11 10 5 10 11 114 0 5 9 10 5 9 126 3 1 0 2 0 134 0 8 17 1 15 13 8 15 103 0 10 0 9 6 10 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
18 18 0 0 18 56 18 56 53 52 49 47 46 44 41 39 37 36 34 32 22 20 17 16 14 13 12 11 9 8 7 6 5 4 0 3 0 3 17 18 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 1024;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = questiondown;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(276,5,o),
(253,-20,o),
(233,-20,qs),
(218,-20,o),
(202,0,o),
(204,17,qs),
(209,48,o),
(276,75,o),
(337,75,qs),
(421,75,l),
(452,287,l),
(256,287,l),
(237,216,l),
(141,214,o),
(3,106,o),
(-12,18,qs),
(-31,-89,o),
(84,-200,o),
(195,-200,qs),
(281,-200,o),
(408,-139,o),
(481,-37,o),
(489,25,q),
(280,25,l)
);
},
{
closed = 1;
nodes = (
(248,424,o),
(307,361,o),
(364,361,qs),
(422,361,o),
(503,424,o),
(512,472,qs),
(520,519,o),
(461,581,o),
(403,581,qs),
(346,581,o),
(265,519,o),
(257,472,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 1 2 3 2 1 3 128 0 4 5 0 5 4 114 0 2 0 3 5 2 3 103 8 1 5 0 0 5 0 102 0 7 7 6 97 0 6 6 37 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 3 2 1 3 128 0 4 5 0 5 4 0 128 0 2 0 3 5 2 3 103 8 1 5 0 0 5 0 102 0 7 7 6 97 0 6 6 37 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 1 2 3 2 1 3 128 0 4 5 0 5 4 0 128 0 6 0 7 2 6 7 105 0 2 0 3 5 2 3 103 8 1 5 4 0 5 87 8 1 5 5 0 98 0 0 5 0 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 33 31 27 25 0 23 0 23 36 33 17 20 35 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 538;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = Agrave;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(450,0,l),
(684,0,l),
(551,708,l),
(295,708,l),
(-89,0,l),
(144,0,l),
(198,107,l),
(434,107,l)
);
},
{
closed = 1;
nodes = (
(558,749,l),
(584,897,l),
(345,1007,l),
(316,843,l)
);
},
{
closed = 1;
nodes = (
(380,471,l),
(410,274,l),
(282,274,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
13 1 4 1 1 76 11 10 9 8 4 1 74 6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 12 12 0 0 12 14 12 14 0 7 0 7 17 17 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Aacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(450,0,l),
(684,0,l),
(551,708,l),
(295,708,l),
(-89,0,l),
(144,0,l),
(198,107,l),
(434,107,l)
);
},
{
closed = 1;
nodes = (
(575,843,l),
(604,1007,l),
(325,897,l),
(299,749,l)
);
},
{
closed = 1;
nodes = (
(380,471,l),
(410,274,l),
(282,274,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
13 1 4 1 1 76 11 10 9 8 4 1 74 6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 12 12 0 0 12 14 12 14 0 7 0 7 17 17 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Acircumflex;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(454,0,l),
(688,0,l),
(554,708,l),
(298,708,l),
(-85,0,l),
(148,0,l),
(202,107,l),
(438,107,l)
);
},
{
closed = 1;
nodes = (
(447,827,l),
(599,749,l),
(624,893,l),
(472,968,l),
(293,893,l),
(268,749,l)
);
},
{
closed = 1;
nodes = (
(384,471,l),
(413,274,l),
(285,274,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
15 1 4 1 1 76 13 12 11 10 9 8 6 1 74 6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 14 14 0 0 14 16 14 16 0 7 0 7 17 17 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Atilde;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,0,l),
(691,0,l),
(558,708,l),
(302,708,l),
(-82,0,l),
(151,0,l),
(205,107,l),
(441,107,l)
);
},
{
closed = 1;
nodes = (
(329,796,o),
(365,796,qs),
(377,796,o),
(403,785,o),
(416,778,qs),
(437,765,o),
(477,751,o),
(501,751,qs),
(565,751,o),
(660,833,o),
(693,926,q),
(584,926,l),
(568,879,o),
(531,879,qs),
(519,879,o),
(498,888,o),
(481,898,qs),
(459,911,o),
(419,925,o),
(395,925,qs),
(331,925,o),
(236,842,o),
(203,749,q),
(311,749,l)
);
},
{
closed = 1;
nodes = (
(417,274,l),
(289,274,l),
(387,471,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
34 1 10 1 1 76 6 1 4 0 8 7 4 8 105 0 5 12 9 2 7 1 5 7 106 0 10 11 1 3 0 10 3 104 0 1 1 28 77 2 1 0 0 29 0 78 8 8 0 0 33 32 8 31 8 31 30 28 24 22 20 19 18 16 12 10 0 7 0 7 17 17 17 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = Adieresis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(456,0,l),
(690,0,l),
(557,708,l),
(301,708,l),
(-83,0,l),
(150,0,l),
(204,107,l),
(440,107,l)
);
},
{
closed = 1;
nodes = (
(362,767,o),
(421,816,o),
(427,852,qs),
(434,890,o),
(394,939,o),
(356,939,qs),
(320,939,o),
(262,889,o),
(255,852,qs),
(249,816,o),
(289,767,o),
(325,767,qs)
);
},
{
closed = 1;
nodes = (
(587,767,o),
(646,816,o),
(652,852,qs),
(659,890,o),
(619,939,o),
(581,939,qs),
(545,939,o),
(487,889,o),
(480,852,qs),
(474,816,o),
(514,767,o),
(550,767,qs)
);
},
{
closed = 1;
nodes = (
(416,274,l),
(288,274,l),
(386,471,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
34 1 8 1 1 76 6 1 4 11 7 10 3 5 1 4 5 105 0 8 9 1 3 0 8 3 104 0 1 1 28 77 2 1 0 0 29 0 78 20 20 8 8 0 0 33 32 20 31 20 30 26 24 8 19 8 18 14 12 0 7 0 7 17 17 17 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Aring;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(450,0,l),
(684,0,l),
(551,708,l),
(295,708,l),
(-89,0,l),
(144,0,l),
(198,107,l),
(434,107,l)
);
},
{
closed = 1;
nodes = (
(424,825,o),
(403,851,o),
(406,872,qs),
(410,893,o),
(441,919,o),
(461,919,qs),
(481,919,o),
(502,893,o),
(498,872,qs),
(495,851,o),
(464,825,o),
(444,825,qs)
);
},
{
closed = 1;
nodes = (
(420,1004,o),
(331,932,o),
(320,872,qs),
(310,812,o),
(373,740,o),
(429,740,qs),
(485,740,o),
(574,812,o),
(584,872,qs),
(595,932,o),
(532,1004,o),
(476,1004,qs)
);
},
{
closed = 1;
nodes = (
(410,274,l),
(282,274,l),
(381,471,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
34 1 8 1 1 76 11 1 7 0 4 5 7 4 105 10 1 5 0 6 1 5 6 105 0 8 9 1 3 0 8 3 104 0 1 1 28 77 2 1 0 0 29 0 78 20 20 8 8 0 0 33 32 20 31 20 30 26 24 8 19 8 18 14 12 0 7 0 7 17 17 17 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = AE;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,537,l),
(474,264,l),
(347,264,l)
);
},
{
closed = 1;
nodes = (
(179,0,l),
(241,97,l),
(445,97,l),
(428,0,l),
(890,0,l),
(921,177,l),
(681,177,l),
(699,280,l),
(909,280,l),
(938,447,l),
(728,447,l),
(743,532,l),
(983,532,l),
(1014,708,l),
(401,708,l),
(-62,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
1 1 2 1 1 76 0 3 0 4 0 3 4 103 9 1 0 0 7 6 0 7 103 0 2 2 1 95 0 1 1 28 77 0 5 5 6 95 8 1 6 6 29 6 78 0 0 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 0 2 0 2 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 986;
}
);
note = AE;
unicode = 198;
},
{
glyphname = Ccedilla;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(37,259,o),
(80,107,o),
(196,11,o),
(284,-1,q),
(261,-134,l),
(346,-134,ls),
(372,-134,o),
(369,-149,qs),
(368,-156,o),
(352,-165,o),
(340,-165,qs),
(190,-165,l),
(170,-278,l),
(343,-278,ls),
(403,-278,o),
(504,-221,o),
(515,-156,qs),
(523,-112,o),
(490,-57,o),
(434,-34,o),
(406,-34,q),
(412,0,l),
(407,0,l),
(522,17,o),
(694,163,o),
(733,274,q),
(499,274,l),
(477,239,o),
(411,200,o),
(373,200,qs),
(317,200,o),
(267,284,o),
(279,355,qs),
(292,426,o),
(371,510,o),
(427,510,qs),
(465,510,o),
(518,471,o),
(527,436,q),
(761,436,l),
(761,520,o),
(692,646,o),
(560,715,o),
(468,715,qs),
(361,715,o),
(187,624,o),
(73,460,o),
(54,355,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
43 1 5 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 5 3 8 7 5 114 0 3 0 8 7 3 8 103 0 2 2 0 97 0 0 0 34 77 0 7 7 6 96 0 6 6 33 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 5 3 8 3 5 8 128 0 3 0 8 7 3 8 103 0 2 2 0 97 0 0 0 34 77 0 7 7 6 96 0 6 6 33 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
35 33 37 21 18 36 34 19 34 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Egrave;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(558,708,l),
(86,708,l),
(-39,0,l),
(433,0,l),
(464,177,l),
(214,177,l),
(232,277,l),
(452,277,l),
(482,444,l),
(262,444,l),
(277,531,l),
(527,531,l)
);
},
{
closed = 1;
nodes = (
(453,749,l),
(479,897,l),
(240,1007,l),
(211,843,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
15 14 13 12 4 4 74 0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Eacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(558,708,l),
(86,708,l),
(-39,0,l),
(433,0,l),
(464,177,l),
(214,177,l),
(232,277,l),
(452,277,l),
(482,444,l),
(262,444,l),
(277,531,l),
(527,531,l)
);
},
{
closed = 1;
nodes = (
(470,843,l),
(499,1007,l),
(220,897,l),
(194,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
15 14 13 12 4 4 74 0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ecircumflex;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(561,708,l),
(89,708,l),
(-35,0,l),
(437,0,l),
(468,177,l),
(218,177,l),
(236,277,l),
(456,277,l),
(485,444,l),
(265,444,l),
(280,531,l),
(530,531,l)
);
},
{
closed = 1;
nodes = (
(342,827,l),
(494,749,l),
(519,893,l),
(367,968,l),
(188,893,l),
(163,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
17 16 15 14 13 12 6 4 74 0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(564,708,l),
(92,708,l),
(-33,0,l),
(439,0,l),
(470,177,l),
(220,177,l),
(238,277,l),
(458,277,l),
(488,444,l),
(268,444,l),
(283,531,l),
(533,531,l)
);
},
{
closed = 1;
nodes = (
(257,767,o),
(316,816,o),
(322,852,qs),
(329,890,o),
(289,939,o),
(251,939,qs),
(215,939,o),
(157,889,o),
(150,852,qs),
(144,816,o),
(184,767,o),
(220,767,qs)
);
},
{
closed = 1;
nodes = (
(482,767,o),
(541,816,o),
(547,852,qs),
(554,890,o),
(514,939,o),
(476,939,qs),
(440,939,o),
(382,889,o),
(375,852,qs),
(369,816,o),
(409,767,o),
(445,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
8 1 6 12 9 11 3 7 4 6 7 105 0 0 0 1 2 0 1 103 10 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 24 24 12 12 0 0 24 35 24 34 30 28 12 23 12 22 18 16 0 11 0 11 17 17 17 17 17 13 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Igrave;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-39,0,l),
(183,0,l),
(308,708,l),
(86,708,l)
);
},
{
closed = 1;
nodes = (
(333,749,l),
(359,897,l),
(120,1007,l),
(91,843,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
7 6 5 4 4 1 74 2 1 1 1 28 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Iacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-39,0,l),
(183,0,l),
(308,708,l),
(86,708,l)
);
},
{
closed = 1;
nodes = (
(350,843,l),
(379,1007,l),
(100,897,l),
(74,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
7 6 5 4 4 1 74 2 1 1 1 28 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Icircumflex;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-35,0,l),
(187,0,l),
(311,708,l),
(89,708,l)
);
},
{
closed = 1;
nodes = (
(222,827,l),
(374,749,l),
(399,893,l),
(247,968,l),
(68,893,l),
(43,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
9 8 7 6 5 4 6 1 74 2 1 1 1 28 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-33,0,l),
(189,0,l),
(314,708,l),
(92,708,l)
);
},
{
closed = 1;
nodes = (
(137,767,o),
(196,816,o),
(202,852,qs),
(209,890,o),
(169,939,o),
(131,939,qs),
(95,939,o),
(37,889,o),
(30,852,qs),
(24,816,o),
(64,767,o),
(100,767,qs)
);
},
{
closed = 1;
nodes = (
(362,767,o),
(421,816,o),
(427,852,qs),
(434,890,o),
(394,939,o),
(356,939,qs),
(320,939,o),
(262,889,o),
(255,852,qs),
(249,816,o),
(289,767,o),
(325,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
4 1 2 8 5 7 3 3 1 2 3 105 6 1 1 1 28 77 0 0 0 29 0 78 16 16 4 4 0 0 16 27 16 26 22 20 4 15 4 14 10 8 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Eth;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(66,444,l),
(16,444,l),
(-15,268,l),
(35,268,l),
(-12,0,l),
(283,0,ls),
(394,0,o),
(577,93,o),
(696,255,o),
(713,356,qs),
(731,458,o),
(670,618,o),
(518,708,o),
(407,708,qs),
(112,708,l)
);
},
{
closed = 1;
nodes = (
(257,268,l),
(387,268,l),
(418,444,l),
(288,444,l),
(300,514,l),
(353,514,ls),
(428,514,o),
(502,432,o),
(488,356,qs),
(475,280,o),
(372,198,o),
(297,198,qs),
(244,198,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
6 1 3 7 1 2 4 3 2 103 0 5 5 0 95 8 1 0 0 28 77 9 1 4 4 1 95 0 1 1 29 1 78 16 15 1 0 26 25 24 23 22 20 15 27 16 27 13 12 11 10 9 7 0 14 1 14 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 743;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = Ntilde;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(550,708,l),
(486,346,l),
(315,708,l),
(93,708,l),
(-32,0,l),
(190,0,l),
(253,356,l),
(425,0,l),
(647,0,l),
(772,708,l)
);
},
{
closed = 1;
nodes = (
(331,796,o),
(367,796,qs),
(379,796,o),
(405,785,o),
(418,778,qs),
(439,765,o),
(479,751,o),
(503,751,qs),
(567,751,o),
(662,833,o),
(695,926,q),
(586,926,l),
(570,879,o),
(533,879,qs),
(521,879,o),
(500,888,o),
(483,898,qs),
(461,911,o),
(421,925,o),
(397,925,qs),
(333,925,o),
(238,842,o),
(205,749,q),
(313,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
7 2 2 0 2 1 76 6 1 4 0 8 7 4 8 105 0 5 10 9 2 7 2 5 7 106 3 1 2 2 28 77 1 1 0 0 29 0 78 10 10 10 33 10 33 36 34 17 36 35 18 17 18 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 779;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Ograve;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(751,461,o),
(683,627,o),
(534,720,o),
(434,720,qs),
(334,720,o),
(150,627,o),
(23,461,o),
(5,357,qs),
(-14,253,o),
(55,87,o),
(206,-7,o),
(306,-7,qs),
(405,-7,o),
(588,87,o),
(714,253,o),
(733,357,qs)
);
},
{
closed = 1;
nodes = (
(244,430,o),
(331,515,o),
(398,515,qs),
(464,515,o),
(521,430,o),
(508,357,qs),
(495,285,o),
(408,200,o),
(342,200,qs),
(275,200,o),
(218,285,o),
(231,357,qs)
);
},
{
closed = 1;
nodes = (
(324,843,l),
(567,749,l),
(593,897,l),
(353,1007,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
31 30 29 28 4 1 74 0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Oacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(751,461,o),
(683,627,o),
(534,720,o),
(434,720,qs),
(334,720,o),
(150,627,o),
(23,461,o),
(5,357,qs),
(-14,253,o),
(55,87,o),
(206,-7,o),
(306,-7,qs),
(405,-7,o),
(588,87,o),
(714,253,o),
(733,357,qs)
);
},
{
closed = 1;
nodes = (
(244,430,o),
(331,515,o),
(398,515,qs),
(464,515,o),
(521,430,o),
(508,357,qs),
(495,285,o),
(408,200,o),
(342,200,qs),
(275,200,o),
(218,285,o),
(231,357,qs)
);
},
{
closed = 1;
nodes = (
(334,897,l),
(308,749,l),
(583,843,l),
(612,1007,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
31 30 29 28 4 1 74 0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(755,461,o),
(687,627,o),
(537,720,o),
(437,720,qs),
(337,720,o),
(154,627,o),
(27,461,o),
(8,357,qs),
(-10,253,o),
(59,87,o),
(209,-7,o),
(309,-7,qs),
(408,-7,o),
(592,87,o),
(718,253,o),
(736,357,qs)
);
},
{
closed = 1;
nodes = (
(247,430,o),
(334,515,o),
(401,515,qs),
(467,515,o),
(524,430,o),
(511,357,qs),
(499,285,o),
(412,200,o),
(346,200,qs),
(279,200,o),
(222,285,o),
(234,357,qs)
);
},
{
closed = 1;
nodes = (
(633,893,l),
(481,968,l),
(302,893,l),
(276,749,l),
(456,827,l),
(607,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
33 32 31 30 29 5 1 74 0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Otilde;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(758,461,o),
(691,627,o),
(541,720,o),
(441,720,qs),
(341,720,o),
(158,627,o),
(30,461,o),
(12,357,qs),
(-6,253,o),
(62,87,o),
(213,-7,o),
(313,-7,qs),
(412,-7,o),
(595,87,o),
(722,253,o),
(740,357,qs)
);
},
{
closed = 1;
nodes = (
(251,430,o),
(338,515,o),
(405,515,qs),
(471,515,o),
(528,430,o),
(515,357,qs),
(502,285,o),
(415,200,o),
(349,200,qs),
(282,200,o),
(225,285,o),
(238,357,qs)
);
},
{
closed = 1;
nodes = (
(337,796,o),
(373,796,qs),
(385,796,o),
(411,785,o),
(424,778,qs),
(446,765,o),
(485,751,o),
(509,751,qs),
(573,751,o),
(669,833,o),
(701,926,q),
(592,926,l),
(577,879,o),
(540,879,qs),
(528,879,o),
(507,888,o),
(489,898,qs),
(468,911,o),
(428,925,o),
(404,925,qs),
(340,925,o),
(244,842,o),
(212,749,q),
(320,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
6 1 4 0 8 7 4 8 105 0 5 10 9 2 7 1 5 7 106 0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 28 28 28 51 28 51 36 34 17 36 37 36 37 38 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = Odieresis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(757,461,o),
(689,627,o),
(540,720,o),
(440,720,qs),
(340,720,o),
(156,627,o),
(29,461,o),
(11,357,qs),
(-8,253,o),
(61,87,o),
(212,-7,o),
(312,-7,qs),
(411,-7,o),
(594,87,o),
(720,253,o),
(739,357,qs)
);
},
{
closed = 1;
nodes = (
(250,430,o),
(337,515,o),
(404,515,qs),
(470,515,o),
(527,430,o),
(514,357,qs),
(501,285,o),
(414,200,o),
(348,200,qs),
(281,200,o),
(224,285,o),
(237,357,qs)
);
},
{
closed = 1;
nodes = (
(371,767,o),
(430,816,o),
(436,852,qs),
(443,890,o),
(402,939,o),
(364,939,qs),
(328,939,o),
(271,889,o),
(264,852,qs),
(258,816,o),
(298,767,o),
(334,767,qs)
);
},
{
closed = 1;
nodes = (
(596,767,o),
(655,816,o),
(661,852,qs),
(668,890,o),
(627,939,o),
(589,939,qs),
(553,939,o),
(496,889,o),
(489,852,qs),
(483,816,o),
(523,767,o),
(559,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
6 1 4 9 7 8 3 5 1 4 5 105 0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 40 40 28 28 40 51 40 50 46 44 28 39 28 38 39 36 37 38 34 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = multiply;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(116,79,l),
(262,204,l),
(367,78,l),
(539,223,l),
(433,351,l),
(572,470,l),
(453,612,l),
(315,494,l),
(218,612,l),
(46,467,l),
(144,347,l),
(-2,221,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
8 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = Oslash;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(770,428,o),
(745,552,o),
(712,600,q),
(832,712,l),
(717,712,l),
(658,657,l),
(575,720,o),
(458,720,qs),
(358,720,o),
(175,627,o),
(47,461,o),
(29,357,qs),
(17,286,o),
(42,161,o),
(76,113,q),
(-45,1,l),
(71,1,l),
(131,56,l),
(171,26,o),
(272,-7,o),
(330,-7,qs),
(429,-7,o),
(612,87,o),
(739,253,o),
(757,357,qs)
);
},
{
closed = 1;
nodes = (
(268,430,o),
(355,515,o),
(422,515,qs),
(461,515,o),
(488,499,q),
(255,281,l),
(247,313,o),
(255,357,qs)
);
},
{
closed = 1;
nodes = (
(327,200,o),
(300,215,q),
(532,432,l),
(540,402,o),
(532,357,qs),
(519,285,o),
(432,200,o),
(366,200,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
21 18 2 4 2 38 37 27 26 4 5 4 9 6 2 0 5 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
21 18 2 4 3 38 37 27 26 4 5 4 9 6 2 1 5 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 4 2 97 3 1 2 2 34 77 6 1 5 5 0 97 1 1 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 3 28 77 0 4 4 2 97 0 2 2 34 77 0 1 1 29 77 6 1 5 5 0 97 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
33 33 33 40 33 39 40 18 39 19 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Ugrave;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(12,309,ls),
(-6,207,o),
(47,65,o),
(174,-7,o),
(264,-7,qs),
(354,-7,o),
(512,65,o),
(622,208,o),
(639,309,qs),
(710,708,l),
(489,708,l),
(418,309,ls),
(410,260,o),
(354,203,o),
(306,203,qs),
(258,203,o),
(225,260,o),
(233,309,qs),
(304,708,l),
(83,708,l)
);
},
{
closed = 1;
nodes = (
(289,843,l),
(532,749,l),
(558,897,l),
(318,1007,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
23 22 21 20 4 1 74 4 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 0 0 0 19 0 19 36 19 35 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(12,309,ls),
(-6,207,o),
(47,65,o),
(174,-7,o),
(264,-7,qs),
(354,-7,o),
(512,65,o),
(622,208,o),
(639,309,qs),
(710,708,l),
(489,708,l),
(418,309,ls),
(410,260,o),
(354,203,o),
(306,203,qs),
(258,203,o),
(225,260,o),
(233,309,qs),
(304,708,l),
(83,708,l)
);
},
{
closed = 1;
nodes = (
(299,897,l),
(273,749,l),
(548,843,l),
(577,1007,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
23 22 21 20 4 1 74 4 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 0 0 0 19 0 19 36 19 35 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ucircumflex;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(16,309,ls),
(-2,207,o),
(51,65,o),
(177,-7,o),
(267,-7,qs),
(357,-7,o),
(516,65,o),
(625,208,o),
(643,309,qs),
(713,708,l),
(492,708,l),
(422,309,ls),
(413,260,o),
(357,203,o),
(309,203,qs),
(261,203,o),
(228,260,o),
(237,309,qs),
(307,708,l),
(86,708,l)
);
},
{
closed = 1;
nodes = (
(598,893,l),
(446,968,l),
(267,893,l),
(241,749,l),
(421,827,l),
(572,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
25 24 23 22 21 5 1 74 4 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 0 0 0 19 0 19 36 19 35 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(18,309,ls),
(0,207,o),
(53,65,o),
(180,-7,o),
(270,-7,qs),
(360,-7,o),
(518,65,o),
(628,208,o),
(645,309,qs),
(716,708,l),
(495,708,l),
(424,309,ls),
(416,260,o),
(360,203,o),
(312,203,qs),
(264,203,o),
(231,260,o),
(239,309,qs),
(310,708,l),
(89,708,l)
);
},
{
closed = 1;
nodes = (
(336,767,o),
(395,816,o),
(401,852,qs),
(408,890,o),
(367,939,o),
(329,939,qs),
(293,939,o),
(236,889,o),
(229,852,qs),
(223,816,o),
(263,767,o),
(299,767,qs)
);
},
{
closed = 1;
nodes = (
(561,767,o),
(620,816,o),
(626,852,qs),
(633,890,o),
(592,939,o),
(554,939,qs),
(518,939,o),
(461,889,o),
(454,852,qs),
(448,816,o),
(488,767,o),
(524,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
6 1 4 10 7 9 3 5 1 4 5 105 8 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 32 32 20 20 0 0 32 43 32 42 38 36 20 31 20 30 26 24 0 19 0 19 36 19 35 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Yacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,215,l),
(165,0,l),
(387,0,l),
(425,215,l),
(766,708,l),
(516,708,l),
(359,457,l),
(290,708,l),
(36,708,l)
);
},
{
closed = 1;
nodes = (
(554,843,l),
(583,1007,l),
(304,897,l),
(278,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
7 4 1 3 1 0 1 76 12 11 10 9 4 0 74 3 2 2 0 0 28 77 0 1 1 29 1 78 0 0 0 8 0 8 18 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Thorn;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(284,420,l),
(347,420,ls),
(416,420,o),
(404,355,qs),
(393,290,o),
(324,290,qs),
(261,290,l)
);
},
{
closed = 1;
nodes = (
(648,461,o),
(531,588,o),
(401,588,qs),
(311,588,l),
(332,708,l),
(112,708,l),
(-12,0,l),
(210,0,l),
(232,125,l),
(320,125,ls),
(406,125,o),
(537,186,o),
(618,291,o),
(629,355,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 0 0 2 3 0 2 103 0 4 4 28 77 0 1 1 5 95 0 5 5 31 77 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 5 0 1 0 5 1 105 6 1 0 0 2 3 0 2 103 0 4 4 28 77 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 0 0 2 3 0 2 103 0 4 4 28 77 0 1 1 5 95 0 5 5 31 77 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 5 0 1 0 5 1 105 6 1 0 0 2 3 0 2 103 0 4 4 28 77 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 18 16 15 14 13 12 11 9 5 3 0 6 1 6 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 649;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = germandbls;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,0,l),
(286,499,ls),
(292,536,o),
(345,580,o),
(382,580,qs),
(413,580,o),
(446,553,o),
(442,531,qs),
(440,517,o),
(415,485,o),
(392,463,qs),
(361,430,o),
(327,384,o),
(323,358,qs),
(315,316,o),
(377,257,o),
(461,223,qs),
(505,205,o),
(530,183,o),
(527,169,qs),
(525,157,o),
(507,143,o),
(493,143,qs),
(475,143,o),
(449,168,o),
(447,188,q),
(253,188,l),
(254,91,o),
(365,-10,o),
(472,-10,qs),
(540,-10,o),
(652,37,o),
(726,123,o),
(736,179,qs),
(747,239,o),
(694,314,o),
(621,346,qs),
(572,367,o),
(548,387,o),
(550,398,qs),
(551,405,o),
(571,428,o),
(583,440,qs),
(617,473,o),
(661,532,o),
(668,572,qs),
(678,626,o),
(621,713,o),
(505,763,o),
(428,763,qs),
(338,763,o),
(184,702,o),
(81,587,o),
(67,509,qs),
(-22,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 3 2 1 2 3 114 0 0 0 4 2 0 4 105 0 2 2 1 97 5 1 1 1 35 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 2 5 2 3 114 0 0 0 4 2 0 4 105 0 5 5 29 77 0 2 2 1 97 0 1 1 35 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 2 5 2 3 5 128 0 0 0 4 2 0 4 105 0 5 5 29 77 0 2 2 1 97 0 1 1 35 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
54 53 50 48 32 30 28 27 25 23 35 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 815;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = agrave;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-21,193,o),
(17,62,o),
(111,-7,o),
(177,-7,qs),
(232,-7,o),
(319,38,o),
(347,77,q),
(334,0,l),
(555,0,l),
(654,564,l),
(433,564,l),
(420,487,l),
(406,526,o),
(333,571,o),
(278,571,qs),
(212,571,o),
(94,502,o),
(10,371,o),
(-5,282,qs)
);
},
{
closed = 1;
nodes = (
(376,237,o),
(321,187,o),
(285,187,qs),
(249,187,o),
(212,237,o),
(220,282,qs),
(227,327,o),
(282,377,o),
(318,377,qs),
(354,377,o),
(391,327,o),
(384,282,qs)
);
},
{
closed = 1;
nodes = (
(264,696,l),
(506,602,l),
(532,750,l),
(292,860,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
6 1 4 0 11 1 2 5 2 76 34 33 32 31 4 0 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
6 1 4 1 11 1 2 5 2 76 34 33 32 31 4 0 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 37 35 17 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = aacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-21,193,o),
(17,62,o),
(111,-7,o),
(177,-7,qs),
(232,-7,o),
(319,38,o),
(347,77,q),
(334,0,l),
(555,0,l),
(654,564,l),
(433,564,l),
(420,487,l),
(406,526,o),
(333,571,o),
(278,571,qs),
(212,571,o),
(94,502,o),
(10,371,o),
(-5,282,qs)
);
},
{
closed = 1;
nodes = (
(376,237,o),
(321,187,o),
(285,187,qs),
(249,187,o),
(212,237,o),
(220,282,qs),
(227,327,o),
(282,377,o),
(318,377,qs),
(354,377,o),
(391,327,o),
(384,282,qs)
);
},
{
closed = 1;
nodes = (
(273,750,l),
(247,602,l),
(523,696,l),
(551,860,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
6 1 4 0 11 1 2 5 2 76 34 33 32 31 4 0 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
6 1 4 1 11 1 2 5 2 76 34 33 32 31 4 0 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 37 35 17 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = acircumflex;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-18,193,o),
(20,62,o),
(114,-7,o),
(180,-7,qs),
(235,-7,o),
(323,38,o),
(351,77,q),
(337,0,l),
(558,0,l),
(658,564,l),
(437,564,l),
(423,487,l),
(409,526,o),
(337,571,o),
(282,571,qs),
(216,571,o),
(98,502,o),
(14,371,o),
(-2,282,qs)
);
},
{
closed = 1;
nodes = (
(379,237,o),
(324,187,o),
(288,187,qs),
(252,187,o),
(215,237,o),
(223,282,qs),
(231,327,o),
(286,377,o),
(322,377,qs),
(358,377,o),
(395,327,o),
(387,282,qs)
);
},
{
closed = 1;
nodes = (
(572,746,l),
(420,821,l),
(241,746,l),
(215,602,l),
(395,680,l),
(546,602,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
6 1 4 0 11 1 2 5 2 76 36 35 34 33 32 5 0 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
6 1 4 1 11 1 2 5 2 76 36 35 34 33 32 5 0 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 37 35 17 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = atilde;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-14,193,o),
(24,62,o),
(118,-7,o),
(184,-7,qs),
(239,-7,o),
(327,38,o),
(355,77,q),
(341,0,l),
(562,0,l),
(661,564,l),
(440,564,l),
(427,487,l),
(413,526,o),
(341,571,o),
(286,571,qs),
(220,571,o),
(101,502,o),
(17,371,o),
(2,282,qs)
);
},
{
closed = 1;
nodes = (
(383,237,o),
(328,187,o),
(292,187,qs),
(256,187,o),
(219,237,o),
(227,282,qs),
(235,327,o),
(289,377,o),
(325,377,qs),
(361,377,o),
(399,327,o),
(391,282,qs)
);
},
{
closed = 1;
nodes = (
(276,649,o),
(312,649,qs),
(324,649,o),
(350,638,o),
(363,631,qs),
(385,618,o),
(424,604,o),
(448,604,qs),
(512,604,o),
(608,686,o),
(640,779,q),
(531,779,l),
(516,732,o),
(479,732,qs),
(467,732,o),
(446,741,o),
(428,751,qs),
(407,764,o),
(367,778,o),
(343,778,qs),
(279,778,o),
(183,695,o),
(151,602,q),
(259,602,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 0 11 1 2 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 1 11 1 2 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
8 1 6 0 10 9 6 10 105 12 11 2 9 9 7 97 0 7 7 34 77 0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
8 1 6 0 10 9 6 10 105 12 11 2 9 9 7 97 0 7 7 34 77 0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
8 1 6 0 10 9 6 10 105 0 7 12 11 2 9 0 7 9 106 0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
31 31 31 54 31 54 53 51 47 45 17 36 37 36 37 35 17 19 34 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = adieresis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-15,193,o),
(23,62,o),
(117,-7,o),
(183,-7,qs),
(238,-7,o),
(325,38,o),
(353,77,q),
(340,0,l),
(561,0,l),
(660,564,l),
(439,564,l),
(426,487,l),
(412,526,o),
(339,571,o),
(284,571,qs),
(218,571,o),
(100,502,o),
(16,371,o),
(1,282,qs)
);
},
{
closed = 1;
nodes = (
(382,237,o),
(327,187,o),
(291,187,qs),
(255,187,o),
(218,237,o),
(226,282,qs),
(233,327,o),
(288,377,o),
(324,377,qs),
(360,377,o),
(397,327,o),
(390,282,qs)
);
},
{
closed = 1;
nodes = (
(310,620,o),
(369,669,o),
(375,705,qs),
(382,743,o),
(341,792,o),
(303,792,qs),
(267,792,o),
(210,742,o),
(203,705,qs),
(197,669,o),
(237,620,o),
(273,620,qs)
);
},
{
closed = 1;
nodes = (
(535,620,o),
(594,669,o),
(600,705,qs),
(607,743,o),
(566,792,o),
(528,792,qs),
(492,792,o),
(435,742,o),
(428,705,qs),
(422,669,o),
(462,620,o),
(498,620,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 0 11 1 2 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 1 11 1 2 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
8 1 6 11 9 10 3 7 0 6 7 105 0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
8 1 6 11 9 10 3 7 0 6 7 105 0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
43 43 31 31 43 54 43 53 49 47 31 42 31 41 39 36 37 35 17 19 34 12 8 29 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = aring;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-21,193,o),
(17,62,o),
(111,-7,o),
(177,-7,qs),
(232,-7,o),
(320,38,o),
(348,77,q),
(334,0,l),
(555,0,l),
(655,564,l),
(434,564,l),
(420,487,l),
(406,526,o),
(334,571,o),
(279,571,qs),
(213,571,o),
(95,502,o),
(10,371,o),
(-5,282,qs)
);
},
{
closed = 1;
nodes = (
(376,237,o),
(321,187,o),
(285,187,qs),
(249,187,o),
(212,237,o),
(220,282,qs),
(228,327,o),
(283,377,o),
(319,377,qs),
(355,377,o),
(392,327,o),
(384,282,qs)
);
},
{
closed = 1;
nodes = (
(367,857,o),
(278,785,o),
(268,725,qs),
(257,665,o),
(321,593,o),
(377,593,qs),
(433,593,o),
(521,665,o),
(532,725,qs),
(542,785,o),
(479,857,o),
(423,857,qs)
);
},
{
closed = 1;
nodes = (
(372,678,o),
(350,704,o),
(354,725,qs),
(358,746,o),
(388,772,o),
(408,772,qs),
(428,772,o),
(450,746,o),
(446,725,qs),
(442,704,o),
(412,678,o),
(392,678,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 0 11 1 2 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 1 11 1 2 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
10 1 7 0 8 9 7 8 105 11 1 9 0 6 0 9 6 105 0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
10 1 7 0 8 9 7 8 105 11 1 9 0 6 0 9 6 105 0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
43 43 31 31 43 54 43 53 49 47 31 42 31 41 39 36 37 35 17 19 34 12 8 29 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = aring;
unicode = 229;
},
{
glyphname = ae;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(781,397,o),
(824,365,o),
(818,334,q),
(648,334,l),
(672,397,o),
(744,397,qs)
);
},
{
closed = 1;
nodes = (
(751,167,o),
(697,167,qs),
(664,167,o),
(629,201,o),
(631,243,q),
(1022,243,l),
(1031,266,o),
(1035,287,qs),
(1050,374,o),
(1012,502,o),
(917,571,o),
(847,571,qs),
(787,571,o),
(693,527,o),
(666,487,q),
(680,564,l),
(459,564,l),
(445,487,l),
(431,526,o),
(359,571,o),
(304,571,qs),
(238,571,o),
(120,502,o),
(36,371,o),
(20,282,qs),
(4,193,o),
(42,62,o),
(136,-7,o),
(202,-7,qs),
(257,-7,o),
(345,38,o),
(373,77,q),
(359,0,l),
(580,0,l),
(594,77,l),
(608,37,o),
(685,-7,o),
(745,-7,qs),
(831,-7,o),
(974,111,o),
(1008,203,q),
(773,203,l)
);
},
{
closed = 1;
nodes = (
(253,327,o),
(308,377,o),
(344,377,qs),
(380,377,o),
(417,327,o),
(409,282,qs),
(401,237,o),
(346,187,o),
(310,187,qs),
(274,187,o),
(237,237,o),
(245,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
32 29 2 1 5 15 12 2 2 9 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
32 29 2 1 6 15 12 2 3 9 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 0 0 8 10 0 8 103 12 13 2 1 1 5 97 7 6 2 5 5 37 77 14 1 10 10 2 97 4 3 2 2 2 35 77 11 1 9 9 2 97 4 3 2 2 2 35 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 9 10 2 10 9 114 0 0 0 8 10 0 8 103 13 1 1 1 5 97 7 6 2 5 5 37 77 0 12 12 5 97 7 6 2 5 5 37 77 11 14 2 10 10 2 97 4 3 2 2 2 35 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
0 9 11 2 10 9 114 0 0 0 8 10 0 8 103 13 1 1 1 5 97 7 6 2 5 5 37 77 0 12 12 5 97 7 6 2 5 5 37 77 14 1 10 10 2 97 4 3 2 2 2 35 77 0 11 11 2 97 4 3 2 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
0 9 11 3 11 9 3 128 0 0 0 8 10 0 8 103 0 6 6 31 77 13 1 1 1 5 97 7 1 5 5 37 77 0 12 12 5 97 7 1 5 5 37 77 14 1 10 10 2 97 4 1 2 2 35 77 0 3 3 29 77 0 11 11 2 97 4 1 2 2 35 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
6 6 0 0 57 55 51 49 6 47 6 47 46 44 42 41 36 34 31 30 27 25 19 17 14 13 10 8 0 5 0 4 17 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 1054;
}
);
note = ae;
unicode = 230;
},
{
glyphname = ccedilla;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(23,166,o),
(119,16,o),
(219,-2,q),
(196,-134,l),
(281,-134,ls),
(307,-134,o),
(304,-149,qs),
(303,-156,o),
(287,-165,o),
(275,-165,qs),
(125,-165,l),
(105,-278,l),
(278,-278,ls),
(338,-278,o),
(438,-221,o),
(450,-156,qs),
(457,-112,o),
(425,-57,o),
(369,-34,o),
(341,-34,q),
(347,-1,l),
(435,16,o),
(570,134,o),
(603,227,q),
(368,227,l),
(347,183,o),
(309,183,qs),
(282,183,o),
(260,233,o),
(269,282,qs),
(278,331,o),
(317,381,o),
(344,381,qs),
(382,381,o),
(388,337,q),
(623,337,l),
(622,447,o),
(493,571,o),
(383,571,qs),
(299,571,o),
(156,501,o),
(59,370,o),
(44,282,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
39 21 2 5 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 1 2 4 2 1 114 0 4 3 2 4 3 126 0 5 3 8 7 5 114 0 3 0 8 7 3 8 103 0 2 2 0 97 0 0 0 37 77 0 7 7 6 96 0 6 6 33 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 114 0 4 3 2 4 3 126 0 5 3 8 3 5 8 128 0 3 0 8 7 3 8 103 0 2 2 0 97 0 0 0 37 77 0 7 7 6 96 0 6 6 33 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 5 3 8 3 5 8 128 0 3 0 8 7 3 8 103 0 2 2 0 97 0 0 0 37 77 0 7 7 6 96 0 6 6 33 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
35 33 37 20 17 36 33 18 34 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = egrave;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,397,o),
(360,368,o),
(355,340,q),
(223,340,l),
(243,397,o),
(302,397,qs)
);
},
{
closed = 1;
nodes = (
(287,170,o),
(251,170,qs),
(195,170,o),
(204,243,q),
(560,243,l),
(567,264,o),
(571,287,qs),
(586,374,o),
(536,502,o),
(417,571,o),
(333,571,qs),
(249,571,o),
(106,501,o),
(9,370,o),
(-6,282,qs),
(-22,194,o),
(28,63,o),
(147,-7,o),
(231,-7,qs),
(301,-7,o),
(428,48,o),
(521,143,o),
(544,203,q),
(309,203,l)
);
},
{
closed = 1;
nodes = (
(225,703,l),
(468,609,l),
(494,757,l),
(254,867,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
33 32 31 30 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
8 1 6 4 5 5 6 114 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
6 6 0 0 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = eacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,397,o),
(360,368,o),
(355,340,q),
(223,340,l),
(243,397,o),
(302,397,qs)
);
},
{
closed = 1;
nodes = (
(287,170,o),
(251,170,qs),
(195,170,o),
(204,243,q),
(560,243,l),
(567,264,o),
(571,287,qs),
(586,374,o),
(536,502,o),
(417,571,o),
(333,571,qs),
(249,571,o),
(106,501,o),
(9,370,o),
(-6,282,qs),
(-22,194,o),
(28,63,o),
(147,-7,o),
(231,-7,qs),
(301,-7,o),
(428,48,o),
(521,143,o),
(544,203,q),
(309,203,l)
);
},
{
closed = 1;
nodes = (
(235,757,l),
(209,609,l),
(484,703,l),
(513,867,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
33 32 31 30 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
8 1 6 4 5 5 6 114 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
6 6 0 0 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ecircumflex;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(333,397,o),
(364,368,o),
(359,340,q),
(227,340,l),
(247,397,o),
(306,397,qs)
);
},
{
closed = 1;
nodes = (
(291,170,o),
(255,170,qs),
(199,170,o),
(207,243,q),
(563,243,l),
(570,264,o),
(574,287,qs),
(590,374,o),
(539,502,o),
(420,571,o),
(336,571,qs),
(252,571,o),
(109,501,o),
(13,370,o),
(-3,282,qs),
(-18,194,o),
(32,63,o),
(150,-7,o),
(234,-7,qs),
(304,-7,o),
(431,48,o),
(525,143,o),
(547,203,q),
(312,203,l)
);
},
{
closed = 1;
nodes = (
(533,753,l),
(382,828,l),
(202,753,l),
(177,609,l),
(357,687,l),
(508,609,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
35 34 33 32 31 5 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
8 1 6 4 5 5 6 114 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
6 6 0 0 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,397,o),
(366,368,o),
(361,340,q),
(229,340,l),
(249,397,o),
(308,397,qs)
);
},
{
closed = 1;
nodes = (
(293,170,o),
(257,170,qs),
(201,170,o),
(210,243,q),
(566,243,l),
(573,264,o),
(577,287,qs),
(592,374,o),
(542,502,o),
(423,571,o),
(339,571,qs),
(255,571,o),
(112,501,o),
(15,370,o),
(0,282,qs),
(-16,194,o),
(34,63,o),
(153,-7,o),
(237,-7,qs),
(307,-7,o),
(434,48,o),
(527,143,o),
(550,203,q),
(315,203,l)
);
},
{
closed = 1;
nodes = (
(272,627,o),
(330,676,o),
(337,712,qs),
(343,750,o),
(303,799,o),
(265,799,qs),
(229,799,o),
(171,749,o),
(165,712,qs),
(158,676,o),
(199,627,o),
(235,627,qs)
);
},
{
closed = 1;
nodes = (
(497,627,o),
(555,676,o),
(562,712,qs),
(568,750,o),
(528,799,o),
(490,799,qs),
(454,799,o),
(396,749,o),
(390,712,qs),
(383,676,o),
(424,627,o),
(460,627,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
12 1 6 4 5 5 6 114 9 1 7 14 10 13 3 8 3 7 8 105 0 0 0 4 6 0 4 103 11 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
12 1 6 4 5 4 6 5 128 9 1 7 14 10 13 3 8 3 7 8 105 0 0 0 4 6 0 4 103 11 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
42 42 30 30 6 6 0 0 42 53 42 52 48 46 30 41 30 40 36 34 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = igrave;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-1,0,l),
(221,0,l),
(321,564,l),
(99,564,l)
);
},
{
closed = 1;
nodes = (
(345,602,l),
(371,750,l),
(132,860,l),
(103,696,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
7 6 5 4 4 1 74 2 1 1 1 31 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = iacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-1,0,l),
(221,0,l),
(321,564,l),
(99,564,l)
);
},
{
closed = 1;
nodes = (
(362,696,l),
(391,860,l),
(112,750,l),
(86,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
7 6 5 4 4 1 74 2 1 1 1 31 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = icircumflex;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(3,0,l),
(225,0,l),
(324,564,l),
(102,564,l)
);
},
{
closed = 1;
nodes = (
(235,680,l),
(386,602,l),
(411,746,l),
(259,821,l),
(80,746,l),
(55,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
9 8 7 6 5 4 6 1 74 2 1 1 1 31 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(5,0,l),
(227,0,l),
(327,564,l),
(105,564,l)
);
},
{
closed = 1;
nodes = (
(149,620,o),
(208,669,o),
(214,705,qs),
(221,743,o),
(181,792,o),
(143,792,qs),
(107,792,o),
(49,742,o),
(42,705,qs),
(36,669,o),
(76,620,o),
(112,620,qs)
);
},
{
closed = 1;
nodes = (
(374,620,o),
(433,669,o),
(439,705,qs),
(446,743,o),
(406,792,o),
(368,792,qs),
(332,792,o),
(274,742,o),
(267,705,qs),
(261,669,o),
(301,620,o),
(337,620,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
4 1 2 8 5 7 3 3 1 2 3 105 6 1 1 1 31 77 0 0 0 29 0 78 16 16 4 4 0 0 16 27 16 26 22 20 4 15 4 14 10 8 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = eth;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-10,197,o),
(51,65,o),
(179,-6,o),
(262,-6,qs),
(344,-6,o),
(491,69,o),
(596,215,o),
(614,317,qs),
(630,404,o),
(599,581,o),
(559,657,q),
(581,663,l),
(594,735,l),
(524,716,l),
(506,740,l),
(313,740,l),
(337,714,o),
(362,673,q),
(316,660,l),
(303,588,l),
(393,612,l),
(408,581,o),
(414,560,q),
(369,568,o),
(336,568,qs),
(257,568,o),
(117,499,o),
(21,371,o),
(5,284,qs)
);
},
{
closed = 1;
nodes = (
(240,331,o),
(295,377,o),
(326,377,qs),
(354,377,o),
(391,331,o),
(382,282,qs),
(373,232,o),
(325,186,o),
(296,186,qs),
(266,186,o),
(222,233,o),
(231,282,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
17 16 15 14 10 9 8 7 8 0 1 5 1 4 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 1 133 0 4 4 0 97 0 0 0 31 77 0 3 3 2 97 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 1 133 0 4 4 0 97 0 0 0 37 77 0 3 3 2 97 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
36 37 42 24 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = eth;
unicode = 240;
},
{
glyphname = ntilde;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(256,299,ls),
(263,339,o),
(313,386,o),
(350,386,qs),
(386,386,o),
(421,339,o),
(414,299,qs),
(361,0,l),
(582,0,l),
(640,327,ls),
(660,438,o),
(573,568,o),
(476,568,qs),
(416,568,o),
(321,518,o),
(288,478,q),
(303,564,l),
(81,564,l),
(-19,0,l),
(203,0,l)
);
},
{
closed = 1;
nodes = (
(313,649,o),
(349,649,qs),
(361,649,o),
(387,638,o),
(400,631,qs),
(421,618,o),
(461,604,o),
(485,604,qs),
(549,604,o),
(644,686,o),
(677,779,q),
(568,779,l),
(552,732,o),
(515,732,qs),
(503,732,o),
(482,741,o),
(465,751,qs),
(443,764,o),
(404,778,o),
(380,778,qs),
(316,778,o),
(220,695,o),
(187,602,q),
(295,602,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 3 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 3 0 2 0 3 2 128 7 1 5 0 9 8 5 9 105 12 10 2 8 8 6 97 0 6 6 34 77 1 1 0 0 31 77 11 4 2 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 3 0 2 0 3 2 128 7 1 5 0 9 8 5 9 105 0 6 12 10 2 8 0 6 8 106 1 1 0 0 31 77 11 4 2 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
20 20 0 0 20 43 20 43 42 40 36 34 32 31 30 28 24 22 0 19 0 19 35 19 35 17 13 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = ograve;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(606,370,o),
(552,501,o),
(428,571,o),
(343,571,qs),
(258,571,o),
(110,501,o),
(10,370,o),
(-5,282,qs),
(-21,194,o),
(33,63,o),
(157,-7,o),
(242,-7,qs),
(327,-7,o),
(475,63,o),
(575,194,o),
(591,282,qs)
);
},
{
closed = 1;
nodes = (
(228,330,o),
(279,379,o),
(310,379,qs),
(341,379,o),
(374,330,o),
(366,282,qs),
(357,234,o),
(306,185,o),
(275,185,qs),
(243,185,o),
(211,234,o),
(220,282,qs)
);
},
{
closed = 1;
nodes = (
(260,696,l),
(502,602,l),
(528,750,l),
(288,860,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
31 30 29 28 4 1 74 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = oacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(606,370,o),
(552,501,o),
(428,571,o),
(343,571,qs),
(258,571,o),
(110,501,o),
(10,370,o),
(-5,282,qs),
(-21,194,o),
(33,63,o),
(157,-7,o),
(242,-7,qs),
(327,-7,o),
(475,63,o),
(575,194,o),
(591,282,qs)
);
},
{
closed = 1;
nodes = (
(228,330,o),
(279,379,o),
(310,379,qs),
(341,379,o),
(374,330,o),
(366,282,qs),
(357,234,o),
(306,185,o),
(275,185,qs),
(243,185,o),
(211,234,o),
(220,282,qs)
);
},
{
closed = 1;
nodes = (
(269,750,l),
(243,602,l),
(519,696,l),
(547,860,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
31 30 29 28 4 1 74 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(609,370,o),
(556,501,o),
(432,571,o),
(347,571,qs),
(262,571,o),
(114,501,o),
(13,370,o),
(-2,282,qs),
(-18,194,o),
(36,63,o),
(160,-7,o),
(245,-7,qs),
(330,-7,o),
(478,63,o),
(578,194,o),
(594,282,qs)
);
},
{
closed = 1;
nodes = (
(231,330,o),
(282,379,o),
(313,379,qs),
(344,379,o),
(377,330,o),
(369,282,qs),
(360,234,o),
(310,185,o),
(279,185,qs),
(247,185,o),
(214,234,o),
(223,282,qs)
);
},
{
closed = 1;
nodes = (
(568,746,l),
(416,821,l),
(237,746,l),
(211,602,l),
(391,680,l),
(542,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
33 32 31 30 29 5 1 74 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = otilde;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(613,370,o),
(559,501,o),
(436,571,o),
(351,571,qs),
(266,571,o),
(117,501,o),
(17,370,o),
(2,282,qs),
(-14,194,o),
(40,63,o),
(164,-7,o),
(249,-7,qs),
(334,-7,o),
(482,63,o),
(582,194,o),
(598,282,qs)
);
},
{
closed = 1;
nodes = (
(235,330,o),
(286,379,o),
(317,379,qs),
(348,379,o),
(381,330,o),
(373,282,qs),
(364,234,o),
(314,185,o),
(283,185,qs),
(251,185,o),
(218,234,o),
(227,282,qs)
);
},
{
closed = 1;
nodes = (
(272,649,o),
(308,649,qs),
(320,649,o),
(346,638,o),
(359,631,qs),
(381,618,o),
(420,604,o),
(444,604,qs),
(508,604,o),
(604,686,o),
(636,779,q),
(527,779,l),
(512,732,o),
(475,732,qs),
(463,732,o),
(442,741,o),
(424,751,qs),
(403,764,o),
(363,778,o),
(339,778,qs),
(275,778,o),
(179,695,o),
(147,602,q),
(255,602,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
6 1 4 0 8 7 4 8 105 10 9 2 7 7 5 97 0 5 5 34 77 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
6 1 4 0 8 7 4 8 105 0 5 10 9 2 7 1 5 7 106 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
28 28 28 51 28 51 36 34 17 36 37 36 37 38 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = odieresis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(612,370,o),
(558,501,o),
(434,571,o),
(349,571,qs),
(264,571,o),
(116,501,o),
(16,370,o),
(1,282,qs),
(-15,194,o),
(39,63,o),
(163,-7,o),
(248,-7,qs),
(333,-7,o),
(481,63,o),
(581,194,o),
(597,282,qs)
);
},
{
closed = 1;
nodes = (
(234,330,o),
(285,379,o),
(316,379,qs),
(347,379,o),
(380,330,o),
(372,282,qs),
(363,234,o),
(312,185,o),
(281,185,qs),
(249,185,o),
(217,234,o),
(226,282,qs)
);
},
{
closed = 1;
nodes = (
(306,620,o),
(365,669,o),
(371,705,qs),
(378,743,o),
(337,792,o),
(299,792,qs),
(263,792,o),
(206,742,o),
(199,705,qs),
(193,669,o),
(233,620,o),
(269,620,qs)
);
},
{
closed = 1;
nodes = (
(531,620,o),
(590,669,o),
(596,705,qs),
(603,743,o),
(562,792,o),
(524,792,qs),
(488,792,o),
(431,742,o),
(424,705,qs),
(418,669,o),
(458,620,o),
(494,620,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
6 1 4 9 7 8 3 5 1 4 5 105 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 40 40 28 28 40 51 40 50 46 44 28 39 28 38 39 36 37 38 34 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = divide;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(2,240,l),
(513,240,l),
(549,441,l),
(38,441,l)
);
},
{
closed = 1;
nodes = (
(373,149,o),
(315,212,o),
(258,212,qs),
(200,212,o),
(118,149,o),
(110,101,qs),
(102,54,o),
(161,-8,o),
(219,-8,qs),
(276,-8,o),
(357,54,o),
(365,101,qs)
);
},
{
closed = 1;
nodes = (
(457,624,o),
(398,687,o),
(341,687,qs),
(283,687,o),
(202,624,o),
(194,576,qs),
(185,529,o),
(244,467,o),
(302,467,qs),
(359,467,o),
(440,529,o),
(449,576,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 1 0 0 3 1 0 103 0 4 4 5 97 0 5 5 28 77 0 3 3 2 97 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 5 0 4 1 5 4 105 6 1 1 0 0 3 1 0 103 0 3 3 2 97 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 25 23 19 17 13 11 7 5 0 3 0 3 17 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = divide;
unicode = 247;
},
{
glyphname = oslash;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(629,399,o),
(574,476,q),
(671,564,l),
(568,564,l),
(525,525,l),
(459,571,o),
(361,571,qs),
(276,571,o),
(128,501,o),
(28,370,o),
(12,282,qs),
(-9,164,o),
(46,87,q),
(-50,0,l),
(53,0,l),
(95,39,l),
(161,-7,o),
(259,-7,qs),
(344,-7,o),
(492,63,o),
(592,194,o),
(608,282,qs)
);
},
{
closed = 1;
nodes = (
(245,330,o),
(296,379,o),
(327,379,qs),
(345,379,o),
(357,372,q),
(234,260,l),
(234,266,o),
(237,282,qs)
);
},
{
closed = 1;
nodes = (
(276,185,o),
(263,192,q),
(386,303,l),
(386,297,o),
(383,282,qs),
(375,234,o),
(324,185,o),
(293,185,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
19 16 2 4 2 35 24 2 5 4 8 5 2 0 5 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
19 16 2 4 3 35 24 2 5 4 8 5 2 1 5 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 4 2 97 3 1 2 2 37 77 6 1 5 5 0 97 1 1 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 3 31 77 0 4 4 2 97 0 2 2 37 77 0 1 1 29 77 6 1 5 5 0 97 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
30 30 30 37 30 36 39 18 38 18 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 621;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = ugrave;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(671,564,l),
(449,564,l),
(396,265,ls),
(389,225,o),
(339,178,o),
(302,178,qs),
(266,178,o),
(231,225,o),
(238,265,qs),
(291,564,l),
(70,564,l),
(12,237,ls),
(-7,126,o),
(79,-4,o),
(176,-4,qs),
(236,-4,o),
(332,46,o),
(365,86,q),
(350,0,l),
(572,0,l)
);
},
{
closed = 1;
nodes = (
(265,696,l),
(508,602,l),
(534,750,l),
(294,860,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
1 1 0 2 1 76 23 22 21 20 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 1 0 1 2 0 128 3 1 1 1 31 77 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 2 1 0 1 2 0 128 3 1 1 1 31 77 5 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 19 0 19 19 35 19 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(671,564,l),
(449,564,l),
(396,265,ls),
(389,225,o),
(339,178,o),
(302,178,qs),
(266,178,o),
(231,225,o),
(238,265,qs),
(291,564,l),
(70,564,l),
(12,237,ls),
(-7,126,o),
(79,-4,o),
(176,-4,qs),
(236,-4,o),
(332,46,o),
(365,86,q),
(350,0,l),
(572,0,l)
);
},
{
closed = 1;
nodes = (
(275,750,l),
(249,602,l),
(524,696,l),
(553,860,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
1 1 0 2 1 76 23 22 21 20 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 1 0 1 2 0 128 3 1 1 1 31 77 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 2 1 0 1 2 0 128 3 1 1 1 31 77 5 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 19 0 19 19 35 19 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ucircumflex;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(674,564,l),
(452,564,l),
(400,265,ls),
(393,225,o),
(342,178,o),
(305,178,qs),
(269,178,o),
(235,225,o),
(242,265,qs),
(294,564,l),
(73,564,l),
(16,237,ls),
(-4,126,o),
(82,-4,o),
(179,-4,qs),
(239,-4,o),
(335,46,o),
(368,86,q),
(353,0,l),
(575,0,l)
);
},
{
closed = 1;
nodes = (
(574,746,l),
(422,821,l),
(243,746,l),
(217,602,l),
(397,680,l),
(548,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 1 0 2 1 76 25 24 23 22 21 5 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 1 0 1 2 0 128 3 1 1 1 31 77 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 2 1 0 1 2 0 128 3 1 1 1 31 77 5 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 19 0 19 19 35 19 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(677,564,l),
(455,564,l),
(402,265,ls),
(395,225,o),
(345,178,o),
(308,178,qs),
(272,178,o),
(237,225,o),
(244,265,qs),
(297,564,l),
(76,564,l),
(18,237,ls),
(-1,126,o),
(85,-4,o),
(182,-4,qs),
(242,-4,o),
(338,46,o),
(371,86,q),
(356,0,l),
(578,0,l)
);
},
{
closed = 1;
nodes = (
(312,620,o),
(370,669,o),
(377,705,qs),
(384,743,o),
(343,792,o),
(305,792,qs),
(269,792,o),
(211,742,o),
(205,705,qs),
(198,669,o),
(239,620,o),
(275,620,qs)
);
},
{
closed = 1;
nodes = (
(537,620,o),
(595,669,o),
(602,705,qs),
(609,743,o),
(568,792,o),
(530,792,qs),
(494,792,o),
(436,742,o),
(430,705,qs),
(423,669,o),
(464,620,o),
(500,620,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 1 0 1 2 0 128 7 1 5 11 8 10 3 6 1 5 6 105 3 1 1 1 31 77 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 1 0 1 2 0 128 7 1 5 11 8 10 3 6 1 5 6 105 3 1 1 1 31 77 9 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
32 32 20 20 0 0 32 43 32 42 38 36 20 31 20 30 26 24 0 19 0 19 19 35 19 35 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = yacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(340,278,l),
(284,564,l),
(37,564,l),
(178,28,l),
(-17,-270,l),
(226,-270,l),
(734,564,l),
(489,564,l)
);
},
{
closed = 1;
nodes = (
(538,696,l),
(567,860,l),
(288,750,l),
(262,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
6 3 2 0 1 1 76 11 10 9 8 4 1 74 3 2 2 1 1 31 77 0 0 0 33 0 78 0 0 0 7 0 7 18 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = thorn;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(139,740,l),
(-39,-270,l),
(183,-270,l),
(241,62,l),
(264,27,o),
(325,-6,o),
(369,-6,qs),
(436,-6,o),
(562,66,o),
(653,195,o),
(668,278,qs),
(682,361,o),
(637,493,o),
(537,568,o),
(470,568,qs),
(424,568,o),
(353,543,o),
(321,514,q),
(361,740,l)
);
},
{
closed = 1;
nodes = (
(434,229,o),
(377,187,o),
(346,187,qs),
(315,187,o),
(272,233,o),
(280,282,qs),
(289,331,o),
(348,376,o),
(379,376,qs),
(409,376,o),
(451,327,o),
(443,278,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
0 1 4 0 14 1 1 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 0 97 0 0 0 31 77 0 5 5 1 97 0 1 1 35 77 0 3 3 2 95 0 2 2 33 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 0 97 0 0 0 37 77 0 5 5 1 97 0 1 1 35 77 0 3 3 2 95 0 2 2 33 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 34 17 19 38 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = ydieresis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(346,278,l),
(290,564,l),
(43,564,l),
(184,28,l),
(-11,-270,l),
(232,-270,l),
(740,564,l),
(495,564,l)
);
},
{
closed = 1;
nodes = (
(325,620,o),
(384,669,o),
(390,705,qs),
(397,743,o),
(357,792,o),
(319,792,qs),
(283,792,o),
(225,742,o),
(218,705,qs),
(212,669,o),
(252,620,o),
(288,620,qs)
);
},
{
closed = 1;
nodes = (
(550,620,o),
(609,669,o),
(615,705,qs),
(622,743,o),
(582,792,o),
(544,792,qs),
(508,792,o),
(450,742,o),
(443,705,qs),
(437,669,o),
(477,620,o),
(513,620,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
6 3 2 0 1 1 76 5 1 3 9 6 8 3 4 1 3 4 105 7 2 2 1 1 31 77 0 0 0 33 0 78 20 20 8 8 0 0 20 31 20 30 26 24 8 19 8 18 14 12 0 7 0 7 18 17 10 8 24 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = Amacron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(458,0,l),
(692,0,l),
(559,708,l),
(303,708,l),
(-81,0,l),
(152,0,l),
(206,107,l),
(442,107,l)
);
},
{
closed = 1;
nodes = (
(658,769,l),
(684,916,l),
(253,916,l),
(227,769,l)
);
},
{
closed = 1;
nodes = (
(388,471,l),
(418,274,l),
(290,274,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
13 1 6 1 1 76 0 4 0 5 1 4 5 103 8 1 6 7 1 3 0 6 3 104 0 1 1 28 77 2 1 0 0 29 0 78 12 12 0 0 12 14 12 14 11 10 9 8 0 7 0 7 17 17 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = amacron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-13,193,o),
(25,62,o),
(119,-7,o),
(185,-7,qs),
(240,-7,o),
(328,38,o),
(355,77,q),
(342,0,l),
(563,0,l),
(662,564,l),
(441,564,l),
(428,487,l),
(414,526,o),
(342,571,o),
(287,571,qs),
(221,571,o),
(102,502,o),
(18,371,o),
(3,282,qs)
);
},
{
closed = 1;
nodes = (
(384,237,o),
(329,187,o),
(293,187,qs),
(257,187,o),
(220,237,o),
(228,282,qs),
(235,327,o),
(290,377,o),
(326,377,qs),
(362,377,o),
(399,327,o),
(392,282,qs)
);
},
{
closed = 1;
nodes = (
(174,622,l),
(605,622,l),
(631,769,l),
(200,769,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 0 11 1 2 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 1 11 1 2 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
8 1 7 0 6 0 7 6 103 0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
8 1 7 0 6 0 7 6 103 0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 97 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
31 31 31 34 31 34 20 36 37 35 17 19 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = Abreve;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(454,0,l),
(688,0,l),
(555,708,l),
(299,708,l),
(-85,0,l),
(148,0,l),
(202,107,l),
(438,107,l)
);
},
{
closed = 1;
nodes = (
(557,967,l),
(552,936,o),
(508,905,o),
(461,905,qs),
(414,905,o),
(382,936,o),
(387,967,q),
(284,967,l),
(281,950,ls),
(264,851,o),
(350,747,o),
(433,747,qs),
(516,747,o),
(640,851,o),
(657,950,qs),
(660,967,l)
);
},
{
closed = 1;
nodes = (
(413,274,l),
(285,274,l),
(384,471,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
26 1 8 1 1 76 7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 8 9 1 3 0 8 3 104 0 1 1 28 77 2 1 0 0 29 0 78 0 0 25 24 23 22 20 18 16 15 12 10 0 7 0 7 17 17 17 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = abreve;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-18,193,o),
(20,62,o),
(114,-7,o),
(180,-7,qs),
(235,-7,o),
(323,38,o),
(351,77,q),
(337,0,l),
(558,0,l),
(658,564,l),
(437,564,l),
(423,487,l),
(409,526,o),
(337,571,o),
(282,571,qs),
(216,571,o),
(98,502,o),
(14,371,o),
(-2,282,qs)
);
},
{
closed = 1;
nodes = (
(379,237,o),
(324,187,o),
(288,187,qs),
(252,187,o),
(215,237,o),
(223,282,qs),
(231,327,o),
(286,377,o),
(322,377,qs),
(358,377,o),
(395,327,o),
(387,282,qs)
);
},
{
closed = 1;
nodes = (
(505,820,l),
(499,789,o),
(456,758,o),
(409,758,qs),
(362,758,o),
(329,789,o),
(335,820,q),
(232,820,l),
(229,803,ls),
(211,704,o),
(298,600,o),
(381,600,qs),
(464,600,o),
(587,704,o),
(605,803,qs),
(608,820,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 0 11 1 2 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 4 1 11 1 2 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
9 1 7 8 7 133 0 8 0 6 0 8 6 105 0 4 4 0 97 1 1 0 0 37 77 0 5 5 2 98 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
9 1 7 8 7 133 0 8 0 6 0 8 6 105 0 1 1 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 29 77 0 5 5 3 98 0 3 3 35 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
46 45 34 19 37 36 37 35 17 19 34 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = Aogonek;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(341,708,l),
(-43,0,l),
(190,0,l),
(244,107,l),
(480,107,l),
(496,0,l),
(470,-22,o),
(444,-69,o),
(439,-97,qs),
(429,-157,o),
(502,-223,o),
(577,-223,qs),
(638,-223,o),
(694,-207,q),
(714,-91,l),
(663,-107,o),
(629,-107,qs),
(592,-107,o),
(597,-82,qs),
(599,-68,o),
(637,-38,o),
(683,-19,qs),
(730,0,l),
(597,708,l)
);
},
{
closed = 1;
nodes = (
(456,274,l),
(328,274,l),
(426,471,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
26 1 5 4 8 1 0 3 9 1 1 0 3 76 17 1 3 1 75 0 5 0 2 3 5 2 104 0 0 0 1 0 1 101 0 4 4 28 77 0 3 3 29 3 78 17 17 17 22 35 37 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = aogonek;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(23,193,o),
(61,62,o),
(155,-7,o),
(221,-7,qs),
(276,-7,o),
(364,38,o),
(392,77,q),
(379,2,l),
(345,-23,o),
(312,-73,o),
(307,-103,qs),
(297,-159,o),
(372,-223,o),
(447,-223,qs),
(507,-223,o),
(563,-207,q),
(583,-91,l),
(532,-107,o),
(495,-107,qs),
(479,-107,o),
(464,-95,o),
(465,-86,qs),
(468,-71,o),
(508,-41,o),
(553,-21,qs),
(599,0,l),
(699,564,l),
(478,564,l),
(464,487,l),
(450,526,o),
(378,571,o),
(323,571,qs),
(257,571,o),
(139,502,o),
(55,371,o),
(39,282,qs)
);
},
{
closed = 1;
nodes = (
(420,237,o),
(365,187,o),
(329,187,qs),
(293,187,o),
(256,237,o),
(264,282,qs),
(272,327,o),
(327,377,o),
(363,377,qs),
(399,377,o),
(436,327,o),
(428,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
6 1 5 0 28 27 9 3 4 6 18 1 2 4 19 1 3 2 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
6 1 5 1 28 27 9 3 4 6 18 1 2 4 19 1 3 2 4 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 0 3 2 3 102 0 5 5 0 97 1 1 0 0 37 77 0 6 6 4 97 0 4 4 35 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 0 3 2 3 102 0 1 1 31 77 0 5 5 0 97 0 0 0 37 77 0 6 6 4 97 0 4 4 35 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
36 37 40 35 39 19 34 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = Cacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-14,250,o),
(42,86,o),
(184,-5,o),
(291,-5,qs),
(383,-5,o),
(540,64,o),
(653,190,o),
(683,274,q),
(449,274,l),
(427,239,o),
(361,200,o),
(323,200,qs),
(267,200,o),
(217,284,o),
(229,355,qs),
(242,426,o),
(322,510,o),
(378,510,qs),
(416,510,o),
(468,471,o),
(478,436,q),
(712,436,l),
(711,520,o),
(643,646,o),
(510,715,o),
(418,715,qs),
(311,715,o),
(137,624,o),
(23,460,o),
(4,355,qs)
);
},
{
closed = 1;
nodes = (
(316,897,l),
(290,749,l),
(565,843,l),
(594,1007,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
33 32 31 30 4 0 74 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 34 77 0 3 3 5 97 0 5 5 35 5 78 35 18 36 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = cacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-21,194,o),
(29,63,o),
(148,-7,o),
(232,-7,qs),
(342,-7,o),
(514,117,o),
(554,227,q),
(319,227,l),
(298,183,o),
(260,183,qs),
(233,183,o),
(211,233,o),
(220,282,qs),
(228,331,o),
(268,381,o),
(295,381,qs),
(333,381,o),
(338,337,q),
(573,337,l),
(573,447,o),
(443,571,o),
(333,571,qs),
(249,571,o),
(106,501,o),
(10,370,o),
(-5,282,qs)
);
},
{
closed = 1;
nodes = (
(225,750,l),
(199,602,l),
(475,696,l),
(503,860,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
29 28 27 26 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 114 0 4 3 3 4 112 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 17 36 33 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = Cdotaccent;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-8,250,o),
(48,86,o),
(190,-5,o),
(297,-5,qs),
(389,-5,o),
(546,64,o),
(659,190,o),
(689,274,q),
(455,274,l),
(433,239,o),
(367,200,o),
(329,200,qs),
(273,200,o),
(223,284,o),
(235,355,qs),
(248,426,o),
(328,510,o),
(384,510,qs),
(422,510,o),
(474,471,o),
(484,436,q),
(718,436,l),
(717,520,o),
(649,646,o),
(516,715,o),
(424,715,qs),
(317,715,o),
(143,624,o),
(29,460,o),
(10,355,qs)
);
},
{
closed = 1;
nodes = (
(465,767,o),
(524,816,o),
(530,852,qs),
(537,890,o),
(496,939,o),
(458,939,qs),
(422,939,o),
(364,889,o),
(358,852,qs),
(352,816,o),
(392,767,o),
(428,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 6 8 1 7 0 6 7 105 0 2 2 0 97 0 0 0 34 77 0 3 3 5 97 0 5 5 35 5 78 30 30 30 41 30 40 40 35 18 36 34 19 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = cdotaccent;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-15,194,o),
(35,63,o),
(154,-7,o),
(238,-7,qs),
(348,-7,o),
(520,117,o),
(560,227,q),
(325,227,l),
(304,183,o),
(266,183,qs),
(239,183,o),
(217,233,o),
(226,282,qs),
(234,331,o),
(274,381,o),
(301,381,qs),
(339,381,o),
(344,337,q),
(579,337,l),
(579,447,o),
(449,571,o),
(339,571,qs),
(255,571,o),
(112,501,o),
(16,370,o),
(1,282,qs)
);
},
{
closed = 1;
nodes = (
(374,620,o),
(433,669,o),
(439,705,qs),
(446,743,o),
(405,792,o),
(367,792,qs),
(331,792,o),
(274,742,o),
(267,705,qs),
(261,669,o),
(301,620,o),
(337,620,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 4 2 1 114 0 4 3 3 4 112 0 6 8 1 7 0 6 7 105 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 6 8 1 7 0 6 7 105 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
26 26 26 37 26 36 40 34 17 36 33 18 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = Ccaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-11,250,o),
(45,86,o),
(187,-5,o),
(294,-5,qs),
(386,-5,o),
(543,64,o),
(657,190,o),
(686,274,q),
(452,274,l),
(430,239,o),
(364,200,o),
(326,200,qs),
(270,200,o),
(220,284,o),
(233,355,qs),
(245,426,o),
(325,510,o),
(381,510,qs),
(419,510,o),
(471,471,o),
(481,436,q),
(715,436,l),
(715,520,o),
(646,646,o),
(513,715,o),
(421,715,qs),
(314,715,o),
(140,624,o),
(26,460,o),
(8,355,qs)
);
},
{
closed = 1;
nodes = (
(447,880,l),
(297,968,l),
(271,824,l),
(424,749,l),
(602,824,l),
(628,968,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
35 34 33 32 31 30 6 0 74 0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 34 77 0 3 3 5 97 0 5 5 35 5 78 35 18 36 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = ccaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-18,194,o),
(32,63,o),
(151,-7,o),
(235,-7,qs),
(345,-7,o),
(518,117,o),
(557,227,q),
(322,227,l),
(302,183,o),
(264,183,qs),
(237,183,o),
(214,233,o),
(223,282,qs),
(232,331,o),
(271,381,o),
(298,381,qs),
(336,381,o),
(342,337,q),
(577,337,l),
(576,447,o),
(447,571,o),
(337,571,qs),
(253,571,o),
(110,501,o),
(13,370,o),
(-2,282,qs)
);
},
{
closed = 1;
nodes = (
(356,733,l),
(206,821,l),
(181,677,l),
(333,602,l),
(512,677,l),
(537,821,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
31 30 29 28 27 26 6 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 114 0 4 3 3 4 112 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 37 77 0 3 3 5 98 0 5 5 35 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 17 36 33 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = Dcaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-35,0,l),
(260,0,ls),
(371,0,o),
(554,93,o),
(673,255,o),
(690,356,qs),
(708,458,o),
(647,618,o),
(495,708,o),
(384,708,qs),
(89,708,l)
);
},
{
closed = 1;
nodes = (
(277,514,l),
(330,514,ls),
(405,514,o),
(479,432,o),
(465,356,qs),
(452,280,o),
(350,198,o),
(275,198,qs),
(222,198,l)
);
},
{
closed = 1;
nodes = (
(429,880,l),
(278,968,l),
(253,824,l),
(406,749,l),
(584,824,l),
(609,968,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
25 24 23 22 21 20 6 0 74 0 3 3 0 95 4 1 0 0 28 77 5 1 2 2 1 95 0 1 1 29 1 78 12 11 1 0 18 16 11 19 12 19 9 7 0 10 1 10 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 743;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = dcaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(730,594,l),
(802,594,l),
(800,582,ls),
(787,508,o),
(732,508,q),
(718,429,l),
(799,429,o),
(900,528,o),
(914,606,qs),
(926,674,o),
(912,740,q),
(756,740,l)
);
},
{
closed = 1;
nodes = (
(-11,193,o),
(27,62,o),
(121,-7,o),
(187,-7,qs),
(242,-7,o),
(329,38,o),
(357,77,q),
(343,0,l),
(565,0,l),
(696,740,l),
(474,740,l),
(429,487,l),
(415,526,o),
(344,571,o),
(289,571,qs),
(223,571,o),
(105,502,o),
(21,371,o),
(5,282,qs)
);
},
{
closed = 1;
nodes = (
(386,237,o),
(331,187,o),
(295,187,qs),
(259,187,o),
(222,237,o),
(230,282,qs),
(238,327,o),
(293,377,o),
(329,377,qs),
(365,377,o),
(402,327,o),
(394,282,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
18 1 0 1 23 1 6 9 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
5 10 2 3 0 2 4 3 2 103 0 1 0 0 8 1 0 105 0 8 8 4 97 0 4 4 37 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 2 4 3 2 87 0 1 0 0 8 1 0 105 0 8 8 4 97 0 4 4 37 77 5 10 2 3 3 6 95 0 6 6 29 77 0 9 9 7 97 0 7 7 35 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 40 38 34 32 27 25 22 21 20 19 16 14 0 11 0 11 18 17 20 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 882;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = Dcroat;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(66,444,l),
(16,444,l),
(-15,268,l),
(35,268,l),
(-12,0,l),
(283,0,ls),
(394,0,o),
(577,93,o),
(696,255,o),
(713,356,qs),
(731,458,o),
(670,618,o),
(518,708,o),
(407,708,qs),
(112,708,l)
);
},
{
closed = 1;
nodes = (
(257,268,l),
(387,268,l),
(418,444,l),
(288,444,l),
(300,514,l),
(353,514,ls),
(428,514,o),
(502,432,o),
(488,356,qs),
(475,280,o),
(372,198,o),
(297,198,qs),
(244,198,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
6 1 3 7 1 2 4 3 2 103 0 5 5 0 95 8 1 0 0 28 77 9 1 4 4 1 95 0 1 1 29 1 78 16 15 1 0 26 25 24 23 22 20 15 27 16 27 13 12 11 10 9 7 0 14 1 14 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 743;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = dcroat;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-11,193,o),
(27,62,o),
(121,-7,o),
(187,-7,qs),
(242,-7,o),
(329,38,o),
(357,77,q),
(343,0,l),
(565,0,l),
(670,592,l),
(734,592,l),
(751,688,l),
(687,688,l),
(696,740,l),
(474,740,l),
(465,688,l),
(406,688,l),
(389,592,l),
(448,592,l),
(429,487,l),
(415,526,o),
(344,571,o),
(289,571,qs),
(223,571,o),
(105,502,o),
(21,371,o),
(5,282,qs)
);
},
{
closed = 1;
nodes = (
(386,237,o),
(331,187,o),
(295,187,qs),
(259,187,o),
(222,237,o),
(230,282,qs),
(238,327,o),
(293,377,o),
(329,377,qs),
(365,377,o),
(402,327,o),
(394,282,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
6 1 8 0 19 1 6 9 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 3 3 6 97 7 1 6 6 29 77 5 1 1 1 2 95 4 1 2 2 28 77 0 8 8 0 97 0 0 0 37 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 6 97 7 1 6 6 29 77 0 8 8 0 97 0 0 0 37 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
4 1 2 5 1 1 0 2 1 103 0 8 8 0 97 0 0 0 37 77 0 3 3 6 95 0 6 6 29 77 0 9 9 7 97 0 7 7 35 7 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
36 34 37 35 17 17 17 17 17 19 34 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 704;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = Emacron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(566,708,l),
(94,708,l),
(-31,0,l),
(441,0,l),
(472,177,l),
(222,177,l),
(240,277,l),
(460,277,l),
(490,444,l),
(270,444,l),
(285,531,l),
(535,531,l)
);
},
{
closed = 1;
nodes = (
(553,769,l),
(579,916,l),
(148,916,l),
(122,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 6 0 7 4 6 7 103 0 0 0 1 2 0 1 103 8 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 0 0 15 14 13 12 0 11 0 11 17 17 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = emacron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,397,o),
(368,368,o),
(363,340,q),
(231,340,l),
(251,397,o),
(310,397,qs)
);
},
{
closed = 1;
nodes = (
(295,170,o),
(259,170,qs),
(203,170,o),
(212,243,q),
(568,243,l),
(575,264,o),
(579,287,qs),
(594,374,o),
(544,502,o),
(425,571,o),
(341,571,qs),
(257,571,o),
(114,501,o),
(17,370,o),
(2,282,qs),
(-14,194,o),
(36,63,o),
(155,-7,o),
(239,-7,qs),
(309,-7,o),
(436,48,o),
(529,143,o),
(552,203,q),
(317,203,l)
);
},
{
closed = 1;
nodes = (
(136,629,l),
(567,629,l),
(593,776,l),
(162,776,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
10 1 6 4 5 5 6 114 11 1 8 0 7 3 8 7 103 0 0 0 4 6 0 4 103 9 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
10 1 6 4 5 4 6 5 128 11 1 8 0 7 3 8 7 103 0 0 0 4 6 0 4 103 9 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
30 30 6 6 0 0 30 33 30 33 32 31 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = Ebreve;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,708,l),
(90,708,l),
(-35,0,l),
(437,0,l),
(468,177,l),
(218,177,l),
(236,277,l),
(456,277,l),
(485,444,l),
(265,444,l),
(280,531,l),
(530,531,l)
);
},
{
closed = 1;
nodes = (
(452,967,l),
(447,936,o),
(403,905,o),
(356,905,qs),
(309,905,o),
(277,936,o),
(282,967,q),
(179,967,l),
(176,950,ls),
(159,851,o),
(245,747,o),
(328,747,qs),
(411,747,o),
(535,851,o),
(552,950,qs),
(555,967,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
9 1 7 8 7 133 0 8 0 6 4 8 6 105 0 0 0 1 2 0 1 103 10 1 5 5 4 95 0 4 4 28 77 0 2 2 3 96 0 3 3 29 3 78 0 0 27 26 24 22 20 19 16 14 0 11 0 11 17 17 17 17 17 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = ebreve;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(333,397,o),
(364,368,o),
(359,340,q),
(227,340,l),
(247,397,o),
(306,397,qs)
);
},
{
closed = 1;
nodes = (
(291,170,o),
(255,170,qs),
(199,170,o),
(208,243,q),
(564,243,l),
(570,264,o),
(574,287,qs),
(590,374,o),
(539,502,o),
(420,571,o),
(336,571,qs),
(252,571,o),
(109,501,o),
(13,370,o),
(-3,282,qs),
(-18,194,o),
(32,63,o),
(150,-7,o),
(234,-7,qs),
(304,-7,o),
(431,48,o),
(525,143,o),
(548,203,q),
(313,203,l)
);
},
{
closed = 1;
nodes = (
(467,827,l),
(461,796,o),
(418,765,o),
(371,765,qs),
(324,765,o),
(291,796,o),
(297,827,q),
(194,827,l),
(191,810,ls),
(173,711,o),
(260,607,o),
(343,607,qs),
(426,607,o),
(549,711,o),
(567,810,qs),
(570,827,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
10 1 8 9 8 133 12 1 6 4 5 5 6 114 0 9 0 7 3 9 7 105 0 0 0 4 6 0 4 104 11 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
10 1 8 9 8 133 12 1 6 4 5 4 6 5 128 0 9 0 7 3 9 7 105 0 0 0 4 6 0 4 104 11 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
6 6 0 0 45 44 42 40 38 37 34 32 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 13 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = Edotaccent;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(564,708,l),
(92,708,l),
(-33,0,l),
(439,0,l),
(470,177,l),
(220,177,l),
(238,277,l),
(458,277,l),
(488,444,l),
(268,444,l),
(283,531,l),
(533,531,l)
);
},
{
closed = 1;
nodes = (
(369,767,o),
(428,816,o),
(434,852,qs),
(441,890,o),
(401,939,o),
(363,939,qs),
(327,939,o),
(269,889,o),
(262,852,qs),
(256,816,o),
(296,767,o),
(332,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
0 6 9 1 7 4 6 7 105 0 0 0 1 2 0 1 103 8 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 12 12 0 0 12 23 12 22 18 16 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = edotaccent;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(335,397,o),
(366,368,o),
(361,340,q),
(229,340,l),
(249,397,o),
(308,397,qs)
);
},
{
closed = 1;
nodes = (
(293,170,o),
(257,170,qs),
(201,170,o),
(210,243,q),
(566,243,l),
(573,264,o),
(577,287,qs),
(592,374,o),
(542,502,o),
(423,571,o),
(339,571,qs),
(255,571,o),
(112,501,o),
(15,370,o),
(0,282,qs),
(-16,194,o),
(34,63,o),
(153,-7,o),
(237,-7,qs),
(307,-7,o),
(434,48,o),
(527,143,o),
(550,203,q),
(315,203,l)
);
},
{
closed = 1;
nodes = (
(384,627,o),
(442,676,o),
(449,712,qs),
(455,750,o),
(415,799,o),
(377,799,qs),
(341,799,o),
(283,749,o),
(277,712,qs),
(270,676,o),
(311,627,o),
(347,627,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
10 1 6 4 5 5 6 114 0 7 11 1 8 3 7 8 105 0 0 0 4 6 0 4 103 9 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
10 1 6 4 5 4 6 5 128 0 7 11 1 8 3 7 8 105 0 0 0 4 6 0 4 103 9 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
30 30 6 6 0 0 30 41 30 40 36 34 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = Eogonek;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(604,708,l),
(132,708,l),
(7,0,l),
(256,0,l),
(224,-24,o),
(192,-73,o),
(187,-103,qs),
(177,-159,o),
(252,-223,o),
(327,-223,qs),
(387,-223,o),
(443,-207,q),
(463,-91,l),
(412,-107,o),
(375,-107,qs),
(359,-107,o),
(343,-95,o),
(345,-86,qs),
(348,-71,o),
(388,-41,o),
(433,-21,qs),
(479,0,l),
(510,177,l),
(260,177,l),
(278,277,l),
(498,277,l),
(528,444,l),
(308,444,l),
(323,531,l),
(573,531,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
16 1 3 5 17 1 4 3 2 76 7 1 5 1 75 0 0 0 1 2 0 1 103 0 3 0 4 3 4 101 8 1 7 7 6 95 0 6 6 28 77 0 2 2 5 95 0 5 5 29 5 78 0 0 0 29 0 29 17 21 35 39 17 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = eogonek;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,397,o),
(405,368,o),
(400,340,q),
(268,340,l),
(288,397,o),
(347,397,qs)
);
},
{
closed = 1;
nodes = (
(306,-99,o),
(269,-99,qs),
(253,-99,o),
(237,-87,o),
(239,-78,qs),
(242,-63,o),
(282,-33,o),
(326,-13,qs),
(370,6,l),
(446,28,o),
(562,133,o),
(588,203,q),
(353,203,l),
(332,170,o),
(296,170,qs),
(240,170,o),
(248,243,q),
(604,243,l),
(611,264,o),
(615,287,qs),
(631,374,o),
(580,502,o),
(461,571,o),
(377,571,qs),
(293,571,o),
(150,501,o),
(54,370,o),
(38,282,qs),
(21,184,o),
(86,45,o),
(159,14,q),
(123,-11,o),
(86,-64,o),
(81,-95,qs),
(71,-151,o),
(146,-215,o),
(221,-215,qs),
(281,-215,o),
(337,-199,q),
(357,-83,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
45 14 2 7 5 6 1 2 7 2 76 0 6 4 5 4 6 5 128 0 5 7 4 5 7 126 0 0 0 4 6 0 4 103 0 7 0 2 7 2 102 8 1 1 1 3 97 0 3 3 37 1 78 0 0 44 42 33 32 31 29 28 27 22 20 9 7 0 5 0 4 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = Ecaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(561,708,l),
(89,708,l),
(-35,0,l),
(437,0,l),
(468,177,l),
(218,177,l),
(236,277,l),
(456,277,l),
(485,444,l),
(265,444,l),
(280,531,l),
(530,531,l)
);
},
{
closed = 1;
nodes = (
(329,749,l),
(507,824,l),
(532,968,l),
(352,880,l),
(201,968,l),
(176,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
17 16 15 14 13 12 6 4 74 0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = ecaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(333,397,o),
(364,368,o),
(359,340,q),
(227,340,l),
(247,397,o),
(306,397,qs)
);
},
{
closed = 1;
nodes = (
(291,170,o),
(255,170,qs),
(199,170,o),
(207,243,q),
(563,243,l),
(570,264,o),
(574,287,qs),
(590,374,o),
(539,502,o),
(420,571,o),
(336,571,qs),
(252,571,o),
(109,501,o),
(13,370,o),
(-3,282,qs),
(-18,194,o),
(32,63,o),
(150,-7,o),
(234,-7,qs),
(304,-7,o),
(431,48,o),
(525,143,o),
(547,203,q),
(312,203,l)
);
},
{
closed = 1;
nodes = (
(366,740,l),
(216,828,l),
(190,684,l),
(343,609,l),
(521,684,l),
(547,828,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
35 34 33 32 31 30 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
8 1 6 4 5 5 6 114 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
6 6 0 0 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = Gbreve;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(320,715,o),
(142,624,o),
(26,460,o),
(8,355,qs),
(-11,250,o),
(47,86,o),
(194,-5,o),
(304,-5,qs),
(428,-5,o),
(610,108,o),
(670,187,q),
(709,409,l),
(348,409,l),
(321,252,l),
(498,252,l),
(441,190,o),
(363,190,qs),
(282,190,o),
(218,272,o),
(233,355,qs),
(245,427,o),
(330,510,o),
(394,510,qs),
(428,510,o),
(472,487,o),
(481,466,q),
(715,466,l),
(720,581,o),
(568,715,o),
(429,715,qs)
);
},
{
closed = 1;
nodes = (
(548,967,l),
(542,936,o),
(499,905,o),
(452,905,qs),
(405,905,o),
(372,936,o),
(378,967,q),
(275,967,l),
(272,950,ls),
(254,851,o),
(341,747,o),
(424,747,qs),
(507,747,o),
(630,851,o),
(648,950,qs),
(651,967,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
18 1 5 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
10 1 8 9 8 133 0 0 1 4 1 0 114 0 9 0 7 6 9 7 105 0 4 0 3 2 4 3 103 0 1 1 6 97 11 1 6 6 34 77 0 2 2 5 98 0 5 5 35 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
10 1 8 9 8 133 0 0 1 4 1 0 4 128 0 9 0 7 6 9 7 105 0 4 0 3 2 4 3 103 0 1 1 6 97 11 1 6 6 34 77 0 2 2 5 98 0 5 5 35 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
0 0 45 44 42 40 38 37 34 32 0 29 0 28 35 17 17 36 34 18 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = gbreve;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(6,193,o),
(44,62,o),
(138,-7,o),
(204,-7,qs),
(259,-7,o),
(347,38,o),
(375,77,q),
(363,10,ls),
(353,-45,o),
(302,-85,o),
(263,-85,qs),
(200,-85,o),
(199,-41,q),
(-19,-41,l),
(-27,-150,o),
(109,-277,o),
(245,-277,qs),
(346,-277,o),
(489,-199,o),
(570,-69,o),
(584,10,qs),
(682,564,l),
(461,564,l),
(447,487,l),
(433,526,o),
(361,571,o),
(306,571,qs),
(240,571,o),
(122,502,o),
(38,371,o),
(22,282,qs)
);
},
{
closed = 1;
nodes = (
(403,237,o),
(348,187,o),
(312,187,qs),
(276,187,o),
(239,237,o),
(247,282,qs),
(255,327,o),
(310,377,o),
(346,377,qs),
(382,377,o),
(419,327,o),
(411,282,qs)
);
},
{
closed = 1;
nodes = (
(529,820,l),
(523,789,o),
(480,758,o),
(433,758,qs),
(386,758,o),
(353,789,o),
(359,820,q),
(256,820,l),
(253,803,ls),
(235,704,o),
(322,600,o),
(405,600,qs),
(488,600,o),
(611,704,o),
(629,803,qs),
(632,820,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 6 0 23 1 5 7 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 6 1 23 1 5 7 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
11 1 9 10 9 133 0 3 5 4 4 3 114 0 10 0 8 0 10 8 105 0 6 6 0 97 1 1 0 0 37 77 0 7 7 5 98 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
11 1 9 10 9 133 0 3 5 4 5 3 4 128 0 10 0 8 0 10 8 105 0 6 6 0 97 1 1 0 0 37 77 0 7 7 5 98 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
11 1 9 10 9 133 0 3 5 4 5 3 4 128 0 10 0 8 0 10 8 105 0 1 1 31 77 0 6 6 0 97 0 0 0 37 77 0 7 7 5 98 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
58 57 55 53 51 50 37 36 37 37 33 18 36 19 34 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = Gdotaccent;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,715,o),
(145,624,o),
(29,460,o),
(10,355,qs),
(-8,250,o),
(50,86,o),
(197,-5,o),
(307,-5,qs),
(431,-5,o),
(613,108,o),
(673,187,q),
(712,409,l),
(351,409,l),
(323,252,l),
(500,252,l),
(443,190,o),
(365,190,qs),
(284,190,o),
(221,272,o),
(235,355,qs),
(248,427,o),
(333,510,o),
(397,510,qs),
(431,510,o),
(475,487,o),
(484,466,q),
(718,466,l),
(722,581,o),
(571,715,o),
(432,715,qs)
);
},
{
closed = 1;
nodes = (
(465,767,o),
(524,816,o),
(530,852,qs),
(537,890,o),
(496,939,o),
(458,939,qs),
(422,939,o),
(364,889,o),
(358,852,qs),
(352,816,o),
(392,767,o),
(428,767,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
18 1 5 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 0 1 4 1 0 114 0 7 10 1 8 6 7 8 105 0 4 0 3 2 4 3 103 0 1 1 6 97 9 1 6 6 34 77 0 2 2 5 97 0 5 5 35 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 0 1 4 1 0 4 128 0 7 10 1 8 6 7 8 105 0 4 0 3 2 4 3 103 0 1 1 6 97 9 1 6 6 34 77 0 2 2 5 97 0 5 5 35 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
30 30 0 0 30 41 30 40 36 34 0 29 0 28 35 17 17 36 34 18 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = gdotaccent;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(9,193,o),
(47,62,o),
(140,-7,o),
(206,-7,qs),
(261,-7,o),
(349,38,o),
(377,77,q),
(365,10,ls),
(356,-45,o),
(305,-85,o),
(266,-85,qs),
(203,-85,o),
(201,-41,q),
(-17,-41,l),
(-25,-150,o),
(112,-277,o),
(248,-277,qs),
(349,-277,o),
(492,-199,o),
(572,-69,o),
(586,10,qs),
(684,564,l),
(463,564,l),
(449,487,l),
(435,526,o),
(363,571,o),
(308,571,qs),
(242,571,o),
(124,502,o),
(40,371,o),
(24,282,qs)
);
},
{
closed = 1;
nodes = (
(405,237,o),
(351,187,o),
(315,187,qs),
(279,187,o),
(241,237,o),
(249,282,qs),
(257,327,o),
(312,377,o),
(348,377,qs),
(384,377,o),
(421,327,o),
(413,282,qs)
);
},
{
closed = 1;
nodes = (
(446,620,o),
(505,669,o),
(511,705,qs),
(518,743,o),
(477,792,o),
(439,792,qs),
(403,792,o),
(345,742,o),
(339,705,qs),
(333,669,o),
(373,620,o),
(409,620,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
6 1 6 0 23 1 5 7 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
6 1 6 1 23 1 5 7 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 3 5 4 4 3 114 0 8 10 1 9 0 8 9 105 0 6 6 0 97 1 1 0 0 37 77 0 7 7 5 97 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 3 5 4 5 3 4 128 0 8 10 1 9 0 8 9 105 0 6 6 0 97 1 1 0 0 37 77 0 7 7 5 97 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 3 5 4 5 3 4 128 0 8 10 1 9 0 8 9 105 0 1 1 31 77 0 6 6 0 97 0 0 0 37 77 0 7 7 5 97 0 5 5 35 77 0 4 4 2 98 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
43 43 43 54 43 53 39 36 37 37 33 18 36 19 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = uni0122;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(233,-182,l),
(305,-182,l),
(303,-193,ls),
(290,-268,o),
(235,-268,q),
(221,-346,l),
(302,-346,o),
(404,-247,o),
(417,-170,qs),
(429,-103,o),
(415,-35,q),
(259,-35,l)
);
},
{
closed = 1;
nodes = (
(373,715,o),
(194,624,o),
(79,460,o),
(60,355,qs),
(42,250,o),
(100,86,o),
(247,-5,o),
(357,-5,qs),
(481,-5,o),
(663,108,o),
(722,187,q),
(762,409,l),
(401,409,l),
(373,252,l),
(550,252,l),
(493,190,o),
(415,190,qs),
(334,190,o),
(270,272,o),
(285,355,qs),
(298,427,o),
(382,510,o),
(446,510,qs),
(480,510,o),
(524,487,o),
(534,466,q),
(768,466,l),
(772,581,o),
(621,715,o),
(482,715,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
30 1 9 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 4 5 8 5 4 114 0 8 0 7 6 8 7 103 11 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 5 5 10 97 12 1 10 10 34 77 0 6 6 9 97 0 9 9 35 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 4 5 8 5 4 8 128 0 8 0 7 6 8 7 103 11 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 5 5 10 97 12 1 10 10 34 77 0 6 6 9 97 0 9 9 35 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
12 12 0 0 12 41 12 40 34 32 29 28 27 26 25 23 19 17 15 14 0 11 0 11 18 17 20 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 756;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = uni0123;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,746,l),
(442,746,l),
(444,757,ls),
(457,832,o),
(512,832,q),
(526,910,l),
(445,910,o),
(344,811,o),
(331,734,qs),
(318,664,o),
(332,599,q),
(488,599,l)
);
},
{
closed = 1;
nodes = (
(-2,193,o),
(36,62,o),
(130,-7,o),
(196,-7,qs),
(251,-7,o),
(339,38,o),
(367,77,q),
(355,10,ls),
(345,-45,o),
(294,-85,o),
(255,-85,qs),
(192,-85,o),
(191,-41,q),
(-27,-41,l),
(-35,-150,o),
(101,-277,o),
(237,-277,qs),
(338,-277,o),
(481,-199,o),
(562,-69,o),
(576,10,qs),
(674,564,l),
(453,564,l),
(439,487,l),
(425,526,o),
(353,571,o),
(298,571,qs),
(232,571,o),
(114,502,o),
(30,371,o),
(14,282,qs)
);
},
{
closed = 1;
nodes = (
(395,237,o),
(340,187,o),
(304,187,qs),
(268,187,o),
(231,237,o),
(239,282,qs),
(247,327,o),
(302,377,o),
(338,377,qs),
(374,377,o),
(411,327,o),
(403,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
18 1 10 4 35 1 9 11 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
18 1 10 5 35 1 9 11 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 7 9 8 8 7 114 0 0 0 1 2 0 1 105 0 2 12 1 3 4 2 3 103 0 10 10 4 97 5 1 4 4 37 77 0 11 11 9 97 0 9 9 35 77 0 8 8 6 98 0 6 6 39 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 7 9 8 9 7 8 128 0 0 0 1 2 0 1 105 0 2 12 1 3 4 2 3 103 0 10 10 4 97 5 1 4 4 37 77 0 11 11 9 97 0 9 9 35 77 0 8 8 6 98 0 6 6 39 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
0 7 9 8 9 7 8 128 0 0 0 1 2 0 1 105 0 2 12 1 3 4 2 3 103 0 5 5 31 77 0 10 10 4 97 0 4 4 37 77 0 11 11 9 97 0 9 9 35 77 0 8 8 6 98 0 6 6 39 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
0 0 52 50 46 44 39 37 32 30 29 28 26 24 20 19 16 14 0 11 0 11 18 17 20 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = Itilde;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-32,0,l),
(190,0,l),
(315,708,l),
(93,708,l)
);
},
{
closed = 1;
nodes = (
(104,796,o),
(140,796,qs),
(152,796,o),
(178,785,o),
(191,778,qs),
(212,765,o),
(252,751,o),
(276,751,qs),
(340,751,o),
(435,833,o),
(468,926,q),
(359,926,l),
(343,879,o),
(306,879,qs),
(294,879,o),
(273,888,o),
(256,898,qs),
(234,911,o),
(194,925,o),
(170,925,qs),
(106,925,o),
(11,842,o),
(-22,749,q),
(86,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
4 1 2 0 6 5 2 6 105 0 3 9 7 2 5 1 3 5 106 8 1 1 1 28 77 0 0 0 29 0 78 4 4 0 0 4 27 4 27 26 24 20 18 16 15 14 12 8 6 0 3 0 3 17 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = itilde;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(6,0,l),
(228,0,l),
(328,564,l),
(106,564,l)
);
},
{
closed = 1;
nodes = (
(116,649,o),
(152,649,qs),
(164,649,o),
(190,638,o),
(203,631,qs),
(224,618,o),
(264,604,o),
(288,604,qs),
(352,604,o),
(447,686,o),
(480,779,q),
(371,779,l),
(355,732,o),
(318,732,qs),
(306,732,o),
(285,741,o),
(268,751,qs),
(246,764,o),
(207,778,o),
(183,778,qs),
(119,778,o),
(23,695,o),
(-10,602,q),
(98,602,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
4 1 2 0 6 5 2 6 105 9 7 2 5 5 3 97 0 3 3 34 77 8 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
4 1 2 0 6 5 2 6 105 0 3 9 7 2 5 1 3 5 106 8 1 1 1 31 77 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
4 4 0 0 4 27 4 27 26 24 20 18 16 15 14 12 8 6 0 3 0 3 17 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = Imacron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-31,0,l),
(191,0,l),
(316,708,l),
(94,708,l)
);
},
{
closed = 1;
nodes = (
(433,769,l),
(459,916,l),
(28,916,l),
(2,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 0 3 1 2 3 103 4 1 1 1 28 77 0 0 0 29 0 78 0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = imacron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(7,0,l),
(229,0,l),
(329,564,l),
(107,564,l)
);
},
{
closed = 1;
nodes = (
(445,622,l),
(471,769,l),
(40,769,l),
(14,622,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 0 3 1 2 3 103 4 1 1 1 31 77 0 0 0 29 0 78 0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = uni012C;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-35,0,l),
(187,0,l),
(312,708,l),
(90,708,l)
);
},
{
closed = 1;
nodes = (
(332,967,l),
(327,936,o),
(283,905,o),
(236,905,qs),
(189,905,o),
(157,936,o),
(162,967,q),
(59,967,l),
(56,950,ls),
(39,851,o),
(125,747,o),
(208,747,qs),
(291,747,o),
(415,851,o),
(432,950,qs),
(435,967,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
5 1 3 4 3 133 0 4 0 2 1 4 2 105 6 1 1 1 28 77 0 0 0 29 0 78 0 0 19 18 16 14 12 11 8 6 0 3 0 3 17 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = uni012C;
unicode = 300;
},
{
glyphname = uni012D;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(3,0,l),
(225,0,l),
(324,564,l),
(102,564,l)
);
},
{
closed = 1;
nodes = (
(344,820,l),
(339,789,o),
(295,758,o),
(248,758,qs),
(201,758,o),
(169,789,o),
(174,820,q),
(71,820,l),
(68,803,ls),
(51,704,o),
(138,600,o),
(221,600,qs),
(304,600,o),
(427,704,o),
(444,803,qs),
(447,820,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
5 1 3 4 3 133 0 4 0 2 1 4 2 105 6 1 1 1 31 77 0 0 0 29 0 78 0 0 19 18 16 14 12 11 8 6 0 3 0 3 17 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = uni012D;
unicode = 301;
},
{
glyphname = Iogonek;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,-107,o),
(125,-107,qs),
(109,-107,o),
(93,-95,o),
(95,-86,qs),
(98,-71,o),
(138,-41,o),
(183,-21,qs),
(229,0,l),
(354,708,l),
(132,708,l),
(7,1,l),
(-25,-23,o),
(-58,-74,o),
(-63,-103,qs),
(-73,-159,o),
(2,-223,o),
(77,-223,qs),
(137,-223,o),
(193,-207,q),
(213,-91,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
20 11 8 3 2 1 0 1 0 2 2 76 0 2 0 0 2 0 102 0 1 1 28 1 78 39 22 33 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = iogonek;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-3,0,l),
(-36,-24,o),
(-69,-75,o),
(-74,-104,qs),
(-84,-160,o),
(-9,-224,o),
(66,-224,qs),
(126,-224,o),
(182,-208,q),
(202,-92,l),
(152,-108,o),
(115,-108,qs),
(99,-108,o),
(83,-96,o),
(84,-87,qs),
(87,-72,o),
(127,-42,o),
(172,-22,qs),
(218,-1,l),
(219,0,l),
(318,564,l),
(96,564,l)
);
},
{
closed = 1;
nodes = (
(273,609,o),
(354,671,o),
(362,718,qs),
(371,766,o),
(312,829,o),
(255,829,qs),
(197,829,o),
(116,766,o),
(107,718,qs),
(99,671,o),
(158,609,o),
(216,609,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
20 11 1 3 0 2 12 1 1 0 2 76 0 3 6 1 4 2 3 4 105 0 0 0 1 0 1 102 5 1 2 2 31 2 78 22 22 0 0 22 33 22 32 28 26 0 21 0 21 35 40 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = Idotaccent;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-33,0,l),
(189,0,l),
(314,708,l),
(92,708,l)
);
},
{
closed = 1;
nodes = (
(249,767,o),
(308,816,o),
(314,852,qs),
(321,890,o),
(281,939,o),
(243,939,qs),
(207,939,o),
(149,889,o),
(142,852,qs),
(136,816,o),
(176,767,o),
(212,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 2 5 1 3 1 2 3 105 4 1 1 1 28 77 0 0 0 29 0 78 4 4 0 0 4 15 4 14 10 8 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = dotlessi;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(25,0,l),
(247,0,l),
(347,564,l),
(125,564,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 31 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = uni0136;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(255,-182,l),
(327,-182,l),
(325,-193,ls),
(312,-268,o),
(257,-268,q),
(243,-346,l),
(324,-346,o),
(425,-247,o),
(438,-170,qs),
(450,-100,o),
(437,-35,q),
(281,-35,l)
);
},
{
closed = 1;
nodes = (
(446,0,l),
(710,0,l),
(515,369,l),
(819,708,l),
(568,708,l),
(312,410,l),
(365,708,l),
(143,708,l),
(18,0,l),
(240,0,l),
(294,307,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
22 19 16 3 4 5 1 76 8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 6 1 5 5 28 77 7 1 4 4 29 4 78 0 0 21 20 18 17 15 14 13 12 0 11 0 11 18 17 20 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 798;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = uni0137;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(195,-182,l),
(267,-182,l),
(265,-193,ls),
(252,-268,o),
(197,-268,q),
(183,-346,l),
(264,-346,o),
(365,-247,o),
(378,-170,qs),
(391,-100,o),
(377,-35,q),
(221,-35,l)
);
},
{
closed = 1;
nodes = (
(15,0,l),
(237,0,l),
(277,225,l),
(376,0,l),
(641,0,l),
(475,280,l),
(736,564,l),
(478,564,l),
(300,353,l),
(368,740,l),
(146,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
19 16 13 3 5 4 1 76 8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 9 1 7 7 5 95 6 1 5 5 29 77 0 4 4 31 77 6 1 5 5 29 5 78 12 12 0 0 12 22 12 22 21 20 18 17 15 14 0 11 0 11 18 17 20 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = Lacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(86,708,l),
(-39,0,l),
(397,0,l),
(427,168,l),
(213,168,l),
(308,708,l)
);
},
{
closed = 1;
nodes = (
(419,843,l),
(448,1007,l),
(169,897,l),
(143,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
9 8 7 6 4 2 74 0 2 2 28 77 0 0 0 1 96 0 1 1 29 1 78 17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = lacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-41,0,l),
(181,0,l),
(311,740,l),
(89,740,l)
);
},
{
closed = 1;
nodes = (
(352,872,l),
(381,1036,l),
(103,926,l),
(77,778,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
7 6 5 4 4 1 74 2 1 1 1 0 95 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = uni013B;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,-182,l),
(218,-182,l),
(216,-193,ls),
(203,-268,o),
(148,-268,q),
(134,-346,l),
(215,-346,o),
(317,-247,o),
(330,-170,qs),
(342,-103,o),
(328,-35,q),
(172,-35,l)
);
},
{
closed = 1;
nodes = (
(143,708,l),
(18,0,l),
(454,0,l),
(484,168,l),
(270,168,l),
(365,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
7 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 28 77 0 4 4 5 96 0 5 5 29 5 78 0 0 17 16 15 14 13 12 0 11 0 11 18 17 20 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 511;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = uni013C;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,-182,l),
(92,-182,l),
(90,-193,ls),
(77,-268,o),
(22,-268,q),
(8,-346,l),
(89,-346,o),
(190,-247,o),
(203,-170,qs),
(216,-100,o),
(202,-35,q),
(46,-35,l)
);
},
{
closed = 1;
nodes = (
(15,0,l),
(237,0,l),
(368,740,l),
(146,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
6 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 5 5 4 95 0 4 4 29 4 78 12 12 0 0 12 15 12 15 14 13 0 11 0 11 18 17 20 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = Lcaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(406,562,l),
(478,562,l),
(476,550,ls),
(469,513,o),
(434,476,o),
(408,476,q),
(394,397,l),
(475,397,o),
(575,496,o),
(589,574,qs),
(601,644,o),
(587,708,q),
(431,708,l)
);
},
{
closed = 1;
nodes = (
(112,708,l),
(-12,0,l),
(424,0,l),
(453,168,l),
(239,168,l),
(334,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
0 1 0 0 4 1 0 105 0 2 2 3 95 6 7 2 3 3 28 77 0 4 4 5 96 0 5 5 29 5 78 0 0 18 17 16 15 14 13 0 12 0 12 19 17 20 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 577;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = lcaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(364,594,l),
(436,594,l),
(434,582,ls),
(428,545,o),
(392,508,o),
(366,508,q),
(352,429,l),
(433,429,o),
(534,528,o),
(548,606,qs),
(560,676,o),
(546,740,q),
(390,740,l)
);
},
{
closed = 1;
nodes = (
(-15,0,l),
(207,0,l),
(337,740,l),
(115,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
0 2 1 3 2 87 0 1 0 0 4 1 0 105 7 5 6 3 3 3 4 95 0 4 4 29 4 78 13 13 0 0 13 16 13 16 15 14 0 12 0 12 19 17 20 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 516;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = Ldot;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(92,708,l),
(-33,0,l),
(403,0,l),
(433,168,l),
(219,168,l),
(314,708,l)
);
},
{
closed = 1;
nodes = (
(318,767,o),
(377,816,o),
(383,852,qs),
(390,890,o),
(350,939,o),
(312,939,qs),
(276,939,o),
(218,889,o),
(211,852,qs),
(205,816,o),
(245,767,o),
(281,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 3 5 1 4 2 3 4 105 0 2 2 28 77 0 0 0 1 96 0 1 1 29 1 78 6 6 6 17 6 16 37 17 17 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = ldot;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(252,796,o),
(311,845,o),
(317,881,qs),
(324,919,o),
(283,968,o),
(245,968,qs),
(209,968,o),
(152,918,o),
(145,881,qs),
(139,845,o),
(179,796,o),
(215,796,qs)
);
},
{
closed = 1;
nodes = (
(-35,0,l),
(187,0,l),
(317,740,l),
(95,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 0 4 1 1 3 0 1 105 5 1 3 3 2 95 0 2 2 29 2 78 12 12 0 0 12 15 12 15 14 13 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = Lslash;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,708,l),
(82,452,l),
(25,437,l),
(-10,241,l),
(48,256,l),
(3,0,l),
(439,0,l),
(468,168,l),
(254,168,l),
(280,317,l),
(359,338,l),
(394,534,l),
(315,513,l),
(349,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
11 10 9 8 3 2 1 0 8 0 2 1 76 0 2 2 28 77 0 0 0 1 96 0 1 1 29 1 78 21 17 20 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 521;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = lslash;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(10,0,l),
(232,0,l),
(288,320,l),
(356,338,l),
(391,534,l),
(323,516,l),
(362,740,l),
(140,740,l),
(90,455,l),
(22,437,l),
(-13,241,l),
(55,259,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
11 8 7 6 5 2 1 0 8 1 0 1 76 0 0 0 1 95 0 1 1 29 1 78 21 19 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 372;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = Nacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(543,708,l),
(479,346,l),
(308,708,l),
(86,708,l),
(-39,0,l),
(183,0,l),
(246,356,l),
(418,0,l),
(640,0,l),
(765,708,l)
);
},
{
closed = 1;
nodes = (
(577,843,l),
(606,1007,l),
(327,897,l),
(301,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
7 2 2 0 2 1 76 13 12 11 10 4 2 74 3 1 2 2 28 77 1 1 0 0 29 0 78 18 17 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 779;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = nacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(309,750,l),
(283,602,l),
(559,696,l),
(588,860,l)
);
},
{
closed = 1;
nodes = (
(575,0,l),
(633,327,ls),
(652,438,o),
(566,568,o),
(469,568,qs),
(409,568,o),
(314,518,o),
(280,478,q),
(296,564,l),
(74,564,l),
(-26,0,l),
(196,0,l),
(249,299,ls),
(256,339,o),
(306,386,o),
(343,386,qs),
(379,386,o),
(414,339,o),
(407,299,qs),
(354,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
15 1 0 2 1 76 3 2 1 0 4 2 74 0 0 2 1 2 0 1 128 3 1 2 2 31 77 4 1 1 1 29 1 78 19 35 17 19 38 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = uni0145;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,-182,l),
(342,-182,l),
(340,-193,ls),
(327,-268,o),
(272,-268,q),
(258,-346,l),
(339,-346,o),
(441,-247,o),
(454,-170,qs),
(466,-103,o),
(452,-35,q),
(296,-35,l)
);
},
{
closed = 1;
nodes = (
(600,708,l),
(536,346,l),
(365,708,l),
(143,708,l),
(18,0,l),
(240,0,l),
(303,356,l),
(475,0,l),
(697,0,l),
(822,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
19 14 2 4 6 1 76 8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 6 6 28 77 5 1 4 4 29 4 78 0 0 21 20 18 17 16 15 13 12 0 11 0 11 18 17 20 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 829;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = uni0146;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,-182,l),
(313,-182,l),
(311,-193,ls),
(298,-268,o),
(243,-268,q),
(229,-346,l),
(310,-346,o),
(411,-247,o),
(424,-170,qs),
(437,-100,o),
(423,-35,q),
(267,-35,l)
);
},
{
closed = 1;
nodes = (
(631,0,l),
(689,327,ls),
(709,438,o),
(623,568,o),
(526,568,qs),
(466,568,o),
(370,518,o),
(337,478,q),
(352,564,l),
(130,564,l),
(30,0,l),
(252,0,l),
(305,299,ls),
(312,339,o),
(362,386,o),
(399,386,qs),
(435,386,o),
(470,339,o),
(463,299,qs),
(410,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
23 1 4 6 1 76 0 4 6 5 6 4 5 128 9 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 6 6 31 77 8 1 5 5 29 5 78 0 0 31 30 27 25 22 21 20 19 16 14 0 11 0 11 18 17 20 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = Ncaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,708,l),
(483,346,l),
(311,708,l),
(89,708,l),
(-35,0,l),
(187,0,l),
(249,356,l),
(422,0,l),
(644,0,l),
(768,708,l)
);
},
{
closed = 1;
nodes = (
(436,749,l),
(614,824,l),
(639,968,l),
(459,880,l),
(308,968,l),
(283,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
7 2 2 0 2 1 76 15 14 13 12 11 10 6 2 74 3 1 2 2 28 77 1 1 0 0 29 0 78 18 17 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 779;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = ncaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(579,0,l),
(636,327,ls),
(656,438,o),
(570,568,o),
(473,568,qs),
(413,568,o),
(317,518,o),
(284,478,q),
(299,564,l),
(77,564,l),
(-22,0,l),
(200,0,l),
(252,299,ls),
(259,339,o),
(310,386,o),
(347,386,qs),
(383,386,o),
(417,339,o),
(410,299,qs),
(358,0,l)
);
},
{
closed = 1;
nodes = (
(441,733,l),
(290,821,l),
(265,677,l),
(418,602,l),
(596,677,l),
(621,821,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
11 1 0 2 1 76 25 24 23 22 21 20 6 2 74 0 0 2 1 2 0 1 128 3 1 2 2 31 77 4 1 1 1 29 1 78 19 35 17 19 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = Omacron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(759,461,o),
(691,627,o),
(542,720,o),
(442,720,qs),
(342,720,o),
(158,627,o),
(31,461,o),
(13,357,qs),
(-6,253,o),
(63,87,o),
(214,-7,o),
(314,-7,qs),
(413,-7,o),
(596,87,o),
(722,253,o),
(741,357,qs)
);
},
{
closed = 1;
nodes = (
(252,430,o),
(339,515,o),
(406,515,qs),
(472,515,o),
(529,430,o),
(516,357,qs),
(503,285,o),
(416,200,o),
(350,200,qs),
(283,200,o),
(226,285,o),
(239,357,qs)
);
},
{
closed = 1;
nodes = (
(235,769,l),
(666,769,l),
(692,916,l),
(261,916,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
6 1 5 0 4 1 5 4 103 0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 28 28 28 31 28 31 20 36 37 38 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = omacron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(614,370,o),
(560,501,o),
(437,571,o),
(352,571,qs),
(267,571,o),
(118,501,o),
(18,370,o),
(3,282,qs),
(-13,194,o),
(41,63,o),
(165,-7,o),
(250,-7,qs),
(335,-7,o),
(483,63,o),
(583,194,o),
(599,282,qs)
);
},
{
closed = 1;
nodes = (
(236,330,o),
(287,379,o),
(318,379,qs),
(349,379,o),
(382,330,o),
(374,282,qs),
(365,234,o),
(314,185,o),
(283,185,qs),
(251,185,o),
(219,234,o),
(228,282,qs)
);
},
{
closed = 1;
nodes = (
(170,622,l),
(601,622,l),
(627,769,l),
(196,769,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
6 1 5 0 4 1 5 4 103 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 28 28 28 31 28 31 20 36 37 38 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = uni014E;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(755,461,o),
(687,627,o),
(537,720,o),
(437,720,qs),
(337,720,o),
(154,627,o),
(27,461,o),
(8,357,qs),
(-10,253,o),
(59,87,o),
(209,-7,o),
(309,-7,qs),
(408,-7,o),
(592,87,o),
(718,253,o),
(736,357,qs)
);
},
{
closed = 1;
nodes = (
(247,430,o),
(334,515,o),
(401,515,qs),
(467,515,o),
(524,430,o),
(511,357,qs),
(499,285,o),
(412,200,o),
(346,200,qs),
(279,200,o),
(222,285,o),
(234,357,qs)
);
},
{
closed = 1;
nodes = (
(566,967,l),
(560,936,o),
(517,905,o),
(470,905,qs),
(423,905,o),
(390,936,o),
(396,967,q),
(293,967,l),
(290,950,ls),
(272,851,o),
(359,747,o),
(442,747,qs),
(525,747,o),
(648,851,o),
(666,950,qs),
(669,967,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 3 3 1 97 0 1 1 34 77 0 2 2 0 98 0 0 0 35 0 78 18 34 19 37 36 37 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = uni014E;
unicode = 334;
},
{
glyphname = uni014F;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(610,370,o),
(556,501,o),
(432,571,o),
(347,571,qs),
(262,571,o),
(114,501,o),
(14,370,o),
(-2,282,qs),
(-17,194,o),
(36,63,o),
(160,-7,o),
(245,-7,qs),
(330,-7,o),
(478,63,o),
(579,194,o),
(594,282,qs)
);
},
{
closed = 1;
nodes = (
(232,330,o),
(282,379,o),
(313,379,qs),
(344,379,o),
(378,330,o),
(369,282,qs),
(361,234,o),
(310,185,o),
(279,185,qs),
(247,185,o),
(215,234,o),
(223,282,qs)
);
},
{
closed = 1;
nodes = (
(501,820,l),
(495,789,o),
(452,758,o),
(405,758,qs),
(358,758,o),
(325,789,o),
(331,820,q),
(228,820,l),
(225,803,ls),
(207,704,o),
(294,600,o),
(377,600,qs),
(460,600,o),
(583,704,o),
(601,803,qs),
(604,820,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 3 3 1 97 0 1 1 37 77 0 2 2 0 98 0 0 0 35 0 78 18 34 19 37 36 37 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = uni014F;
unicode = 335;
},
{
glyphname = Ohungarumlaut;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(752,461,o),
(685,627,o),
(535,720,o),
(435,720,qs),
(335,720,o),
(152,627,o),
(24,461,o),
(6,357,qs),
(-12,253,o),
(56,87,o),
(207,-7,o),
(307,-7,qs),
(406,-7,o),
(589,87,o),
(716,253,o),
(734,357,qs)
);
},
{
closed = 1;
nodes = (
(245,430,o),
(332,515,o),
(399,515,qs),
(465,515,o),
(522,430,o),
(509,357,qs),
(496,285,o),
(409,200,o),
(343,200,qs),
(276,200,o),
(219,285,o),
(232,357,qs)
);
},
{
closed = 1;
nodes = (
(371,992,l),
(248,748,l),
(381,748,l),
(539,992,l)
);
},
{
closed = 1;
nodes = (
(617,992,l),
(471,748,l),
(604,748,l),
(785,992,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 5 6 1 4 1 5 4 103 0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 35 0 78 17 17 17 19 36 37 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = ohungarumlaut;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(607,370,o),
(553,501,o),
(430,571,o),
(345,571,qs),
(260,571,o),
(111,501,o),
(11,370,o),
(-4,282,qs),
(-20,194,o),
(34,63,o),
(158,-7,o),
(243,-7,qs),
(328,-7,o),
(476,63,o),
(576,194,o),
(592,282,qs)
);
},
{
closed = 1;
nodes = (
(229,330,o),
(280,379,o),
(311,379,qs),
(342,379,o),
(375,330,o),
(367,282,qs),
(358,234,o),
(308,185,o),
(277,185,qs),
(245,185,o),
(212,234,o),
(221,282,qs)
);
},
{
closed = 1;
nodes = (
(306,845,l),
(183,601,l),
(316,601,l),
(474,845,l)
);
},
{
closed = 1;
nodes = (
(552,845,l),
(406,601,l),
(539,601,l),
(720,845,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
7 1 5 6 1 4 1 5 4 103 0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 35 0 78 17 17 17 19 36 37 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 636;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = OE;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1046,532,l),
(1077,708,l),
(605,708,l),
(599,671,l),
(571,695,o),
(489,720,o),
(443,720,qs),
(343,720,o),
(167,627,o),
(49,460,o),
(30,354,qs),
(11,248,o),
(71,81,o),
(213,-12,o),
(313,-12,qs),
(421,-7,o),
(487,37,q),
(481,0,l),
(953,0,l),
(984,177,l),
(734,177,l),
(751,277,l),
(971,277,l),
(1001,444,l),
(781,444,l),
(796,532,l)
);
},
{
closed = 1;
nodes = (
(489,515,o),
(546,429,o),
(533,354,qs),
(520,279,o),
(433,193,o),
(367,193,qs),
(300,193,o),
(243,279,o),
(256,354,qs),
(269,429,o),
(356,515,o),
(423,515,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
21 1 7 5 8 1 3 2 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
21 1 7 6 8 1 3 2 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 0 0 1 2 0 1 103 10 9 2 7 7 5 97 6 1 5 5 34 77 8 1 2 2 3 97 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 0 0 1 8 0 1 103 0 7 7 5 97 6 1 5 5 34 77 10 1 9 9 5 97 6 1 5 5 34 77 0 8 8 3 97 4 1 3 3 29 77 0 2 2 3 97 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 0 0 1 8 0 1 103 0 7 7 6 95 0 6 6 28 77 10 1 9 9 5 97 0 5 5 34 77 0 8 8 3 97 4 1 3 3 29 77 0 2 2 3 97 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 0 0 1 8 0 1 103 0 7 7 6 95 0 6 6 28 77 10 1 9 9 5 97 0 5 5 34 77 0 2 2 3 95 0 3 3 29 77 0 8 8 4 97 0 4 4 35 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
26 26 26 37 26 36 37 17 19 38 34 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 1049;
}
);
note = OE;
unicode = 338;
},
{
glyphname = oe;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(383,234,o),
(332,185,o),
(301,185,qs),
(269,185,o),
(237,234,o),
(245,282,qs),
(253,330,o),
(304,379,o),
(335,379,qs),
(366,379,o),
(399,330,o),
(391,282,qs)
);
},
{
closed = 1;
nodes = (
(735,397,o),
(766,366,o),
(760,334,q),
(627,334,l),
(647,397,o),
(708,397,qs)
);
},
{
closed = 1;
nodes = (
(4,194,o),
(58,63,o),
(182,-7,o),
(267,-7,qs),
(321,-7,o),
(421,22,o),
(464,49,q),
(530,-7,o),
(637,-7,qs),
(707,-7,o),
(834,48,o),
(927,143,o),
(950,203,q),
(715,203,l),
(693,170,o),
(657,170,qs),
(631,170,o),
(605,202,o),
(609,243,q),
(964,243,l),
(973,266,o),
(977,287,qs),
(992,374,o),
(942,502,o),
(823,571,o),
(739,571,qs),
(632,571,o),
(546,515,q),
(513,542,o),
(423,571,o),
(369,571,qs),
(284,571,o),
(136,501,o),
(36,370,o),
(20,282,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
24 1 0 4 45 1 9 1 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
24 1 3 4 45 1 9 1 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
24 1 3 4 45 1 9 7 2 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 2 0 6 1 2 6 103 11 3 2 0 0 4 97 5 1 4 4 37 77 8 7 2 1 1 9 97 10 1 9 9 35 9 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
17 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 8 6 1 1 8 114 0 2 0 6 8 2 6 103 11 1 3 3 4 97 5 1 4 4 37 77 0 0 0 4 97 5 1 4 4 37 77 7 1 1 1 9 98 10 1 9 9 35 9 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
0 8 6 1 7 8 114 0 2 0 6 8 2 6 103 11 1 3 3 4 97 5 1 4 4 37 77 0 0 0 4 97 5 1 4 4 37 77 0 1 1 9 97 10 1 9 9 35 77 0 7 7 9 98 10 1 9 9 35 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 62 values pushed */
0 8 6 1 6 8 1 128 0 2 0 6 8 2 6 103 11 1 3 3 4 97 5 1 4 4 37 77 0 0 0 4 97 5 1 4 4 37 77 0 1 1 9 97 10 1 9 9 35 77 0 7 7 9 98 10 1 9 9 35 9 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
12 12 49 47 44 42 39 38 37 35 33 32 27 25 22 20 12 17 12 16 20 36 33 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 1022;
}
);
note = oe;
unicode = 339;
},
{
glyphname = Racute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(411,431,o),
(374,402,o),
(342,402,qs),
(254,402,l),
(275,522,l),
(363,522,ls),
(394,522,o),
(422,490,o),
(417,462,qs)
);
},
{
closed = 1;
nodes = (
(-39,0,l),
(183,0,l),
(228,254,l),
(229,254,l),
(317,0,l),
(561,0,l),
(455,271,l),
(533,295,o),
(632,405,o),
(644,476,qs),
(656,542,o),
(613,647,o),
(502,708,o),
(416,708,qs),
(86,708,l)
);
},
{
closed = 1;
nodes = (
(263,897,l),
(237,749,l),
(513,843,l),
(542,1007,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
19 16 2 3 1 1 76 27 26 25 24 4 2 74 0 1 0 3 0 1 3 128 0 0 0 2 95 5 1 2 2 28 77 4 1 3 3 29 3 78 10 9 22 21 18 17 9 23 10 23 33 33 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = racute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,231,ls),
(247,287,o),
(314,331,o),
(377,331,qs),
(440,331,l),
(481,568,l),
(428,568,o),
(320,509,o),
(277,460,q),
(296,564,l),
(74,564,l),
(-26,0,l),
(196,0,l)
);
},
{
closed = 1;
nodes = (
(200,750,l),
(174,602,l),
(450,696,l),
(479,860,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
3 1 2 0 1 76 16 15 14 13 4 0 74 0 2 2 0 97 1 1 0 0 31 77 4 1 3 3 29 3 78 0 0 0 12 0 12 33 19 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 467;
}
);
note = racute;
unicode = 341;
},
{
glyphname = uni0156;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,-182,l),
(278,-182,l),
(276,-193,ls),
(263,-268,o),
(208,-268,q),
(194,-346,l),
(275,-346,o),
(377,-247,o),
(390,-170,qs),
(402,-103,o),
(388,-35,q),
(232,-35,l)
);
},
{
closed = 1;
nodes = (
(240,0,l),
(285,254,l),
(286,254,l),
(374,0,l),
(618,0,l),
(512,271,l),
(590,295,o),
(688,405,o),
(701,476,qs),
(713,542,o),
(670,647,o),
(559,708,o),
(473,708,qs),
(143,708,l),
(18,0,l)
);
},
{
closed = 1;
nodes = (
(468,431,o),
(431,402,o),
(399,402,qs),
(311,402,l),
(332,522,l),
(420,522,ls),
(451,522,o),
(478,490,o),
(474,462,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
23 20 2 5 8 1 76 0 8 7 5 7 8 5 128 9 1 3 0 2 1 3 2 104 0 1 0 0 1 0 101 0 7 7 4 95 0 4 4 28 77 6 1 5 5 29 5 78 0 0 33 31 30 28 26 25 22 21 14 12 0 11 0 11 18 17 20 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 701;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = uni0157;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(28,-182,l),
(100,-182,l),
(98,-193,ls),
(85,-268,o),
(30,-268,q),
(16,-346,l),
(97,-346,o),
(198,-247,o),
(211,-170,qs),
(224,-100,o),
(210,-35,q),
(54,-35,l)
);
},
{
closed = 1;
nodes = (
(293,231,ls),
(303,287,o),
(370,331,o),
(433,331,qs),
(496,331,l),
(538,568,l),
(485,568,o),
(376,509,o),
(334,460,q),
(352,564,l),
(130,564,l),
(30,0,l),
(252,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
15 1 6 4 1 76 8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 4 97 5 1 4 4 31 77 9 1 7 7 29 7 78 12 12 0 0 12 24 12 24 21 19 18 17 14 13 0 11 0 11 18 17 20 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 467;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = Rcaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(415,431,o),
(378,402,o),
(346,402,qs),
(258,402,l),
(279,522,l),
(367,522,ls),
(398,522,o),
(425,490,o),
(420,462,qs)
);
},
{
closed = 1;
nodes = (
(-35,0,l),
(187,0,l),
(231,254,l),
(232,254,l),
(321,0,l),
(565,0,l),
(458,271,l),
(537,295,o),
(635,405,o),
(648,476,qs),
(659,542,o),
(617,647,o),
(505,708,o),
(419,708,qs),
(89,708,l)
);
},
{
closed = 1;
nodes = (
(395,880,l),
(244,968,l),
(219,824,l),
(372,749,l),
(550,824,l),
(575,968,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
19 16 2 3 1 1 76 29 28 27 26 25 24 6 2 74 0 1 0 3 0 1 3 128 0 0 0 2 95 5 1 2 2 28 77 4 1 3 3 29 3 78 10 9 22 21 18 17 9 23 10 23 33 33 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = rcaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(240,231,ls),
(250,287,o),
(317,331,o),
(380,331,qs),
(443,331,l),
(485,568,l),
(432,568,o),
(323,509,o),
(281,460,q),
(299,564,l),
(77,564,l),
(-22,0,l),
(200,0,l)
);
},
{
closed = 1;
nodes = (
(332,733,l),
(181,821,l),
(156,677,l),
(309,602,l),
(487,677,l),
(512,821,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
3 1 2 0 1 76 18 17 16 15 14 13 6 0 74 0 2 2 0 97 1 1 0 0 31 77 4 1 3 3 29 3 78 0 0 0 12 0 12 33 19 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 467;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = Sacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(558,281,o),
(509,363,o),
(430,409,o),
(367,434,qs),
(313,456,o),
(266,487,o),
(270,511,qs),
(273,528,o),
(294,547,o),
(308,547,qs),
(328,547,o),
(352,521,o),
(347,491,q),
(586,491,l),
(602,600,o),
(470,720,o),
(340,720,qs),
(263,720,o),
(131,670,o),
(43,573,o),
(31,504,qs),
(18,435,o),
(66,347,o),
(147,301,o),
(211,277,qs),
(264,257,o),
(313,226,o),
(308,201,qs),
(305,183,o),
(277,166,o),
(259,166,qs),
(210,166,o),
(216,227,q),
(-20,227,l),
(-33,112,o),
(111,-7,o),
(238,-7,qs),
(322,-7,o),
(454,51,o),
(536,154,o),
(547,219,qs)
);
},
{
closed = 1;
nodes = (
(252,897,l),
(226,749,l),
(501,843,l),
(530,1007,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
44 43 42 41 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 3 4 4 5 114 0 1 4 2 2 1 114 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 3 4 4 5 114 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 5 3 4 3 5 4 128 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 44 33 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = sacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(507,233,o),
(458,306,o),
(379,336,o),
(320,348,qs),
(276,357,o),
(237,374,o),
(240,391,qs),
(242,404,o),
(262,417,o),
(279,417,qs),
(306,417,o),
(334,392,o),
(335,369,q),
(532,369,l),
(535,459,o),
(425,571,o),
(311,571,qs),
(234,571,o),
(118,522,o),
(48,437,o),
(39,385,qs),
(28,325,o),
(75,257,o),
(149,229,o),
(208,217,qs),
(256,207,o),
(295,191,o),
(292,172,qs),
(290,161,o),
(268,146,o),
(251,146,qs),
(224,146,o),
(193,170,o),
(193,195,q),
(-20,195,l),
(-25,137,o),
(31,45,o),
(145,-7,o),
(225,-7,qs),
(298,-7,o),
(415,39,o),
(487,119,o),
(496,169,qs)
);
},
{
closed = 1;
nodes = (
(228,750,l),
(202,602,l),
(478,696,l),
(506,860,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
46 45 44 43 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 3 4 4 5 114 0 1 4 2 2 1 114 0 4 4 3 98 0 3 3 37 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 5 3 4 3 5 4 128 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 37 77 0 2 2 0 98 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 44 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = uni015E;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(608,281,o),
(558,363,o),
(479,409,o),
(417,434,qs),
(362,456,o),
(315,487,o),
(319,511,qs),
(322,528,o),
(343,547,o),
(357,547,qs),
(377,547,o),
(401,521,o),
(397,491,q),
(636,491,l),
(651,600,o),
(519,720,o),
(389,720,qs),
(312,720,o),
(180,670,o),
(92,573,o),
(80,504,qs),
(67,435,o),
(115,347,o),
(196,301,o),
(260,277,qs),
(313,257,o),
(362,226,o),
(357,201,qs),
(354,183,o),
(326,166,o),
(308,166,qs),
(259,166,o),
(265,227,q),
(29,227,l),
(19,129,o),
(122,13,o),
(220,-2,q),
(196,-134,l),
(281,-134,ls),
(307,-134,o),
(305,-149,qs),
(304,-156,o),
(288,-165,o),
(276,-165,qs),
(126,-165,l),
(106,-278,l),
(279,-278,ls),
(339,-278,o),
(439,-221,o),
(451,-156,qs),
(458,-112,o),
(426,-57,o),
(370,-34,o),
(342,-34,q),
(348,-3,l),
(449,12,o),
(581,132,o),
(597,219,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
20 2 2 0 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 8 6 7 7 8 114 0 4 7 5 5 4 114 0 0 5 3 2 0 114 0 5 0 3 2 5 3 104 0 7 7 6 98 0 6 6 34 77 0 2 2 1 96 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 8 6 7 7 8 114 0 4 7 5 5 4 114 0 0 5 3 5 0 3 128 0 5 0 3 2 5 3 104 0 7 7 6 98 0 6 6 34 77 0 2 2 1 96 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 8 6 7 7 8 114 0 4 7 5 7 4 5 128 0 0 5 3 5 0 3 128 0 5 0 3 2 5 3 104 0 7 7 6 98 0 6 6 34 77 0 2 2 1 96 0 1 1 33 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 8 6 7 6 8 7 128 0 4 7 5 7 4 5 128 0 0 5 3 5 0 3 128 0 5 0 3 2 5 3 104 0 7 7 6 98 0 6 6 34 77 0 2 2 1 96 0 1 1 33 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
34 18 44 33 20 35 33 37 19 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = uni015E;
unicode = 350;
},
{
glyphname = uni015F;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,233,o),
(507,306,o),
(428,336,o),
(370,348,qs),
(325,357,o),
(286,374,o),
(289,391,qs),
(291,404,o),
(312,417,o),
(329,417,qs),
(356,417,o),
(383,392,o),
(384,369,q),
(581,369,l),
(584,459,o),
(475,571,o),
(361,571,qs),
(284,571,o),
(167,522,o),
(97,437,o),
(88,385,qs),
(77,325,o),
(124,257,o),
(199,229,o),
(257,217,qs),
(306,207,o),
(345,191,o),
(341,172,qs),
(340,161,o),
(317,146,o),
(300,146,qs),
(273,146,o),
(242,170,o),
(243,195,q),
(30,195,l),
(23,117,o),
(126,9,o),
(221,-4,q),
(199,-134,l),
(284,-134,ls),
(310,-134,o),
(307,-149,qs),
(306,-156,o),
(290,-165,o),
(278,-165,qs),
(128,-165,l),
(108,-278,l),
(281,-278,ls),
(341,-278,o),
(441,-221,o),
(453,-156,qs),
(460,-112,o),
(428,-57,o),
(372,-34,o),
(344,-34,q),
(350,0,l),
(430,16,o),
(534,107,o),
(545,169,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
20 2 2 0 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 8 6 7 7 8 114 0 4 7 5 7 4 5 128 0 0 5 3 2 0 114 0 5 0 3 2 5 3 103 0 7 7 6 98 0 6 6 37 77 0 2 2 1 96 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 8 6 7 7 8 114 0 4 7 5 7 4 5 128 0 0 5 3 5 0 3 128 0 5 0 3 2 5 3 103 0 7 7 6 98 0 6 6 37 77 0 2 2 1 96 0 1 1 33 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 8 6 7 6 8 7 128 0 4 7 5 7 4 5 128 0 0 5 3 5 0 3 128 0 5 0 3 2 5 3 103 0 7 7 6 98 0 6 6 37 77 0 2 2 1 96 0 1 1 33 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
34 18 44 34 20 35 33 37 19 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = uni015F;
unicode = 351;
},
{
glyphname = Scaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,281,o),
(512,363,o),
(433,409,o),
(371,434,qs),
(317,456,o),
(269,487,o),
(273,511,qs),
(276,528,o),
(298,547,o),
(312,547,qs),
(332,547,o),
(355,521,o),
(351,491,q),
(590,491,l),
(605,600,o),
(473,720,o),
(343,720,qs),
(266,720,o),
(134,670,o),
(46,573,o),
(34,504,qs),
(21,435,o),
(69,347,o),
(150,301,o),
(214,277,qs),
(268,257,o),
(316,226,o),
(312,201,qs),
(309,183,o),
(281,166,o),
(263,166,qs),
(214,166,o),
(219,227,q),
(-17,227,l),
(-30,112,o),
(114,-7,o),
(241,-7,qs),
(325,-7,o),
(457,51,o),
(539,154,o),
(551,219,qs)
);
},
{
closed = 1;
nodes = (
(383,880,l),
(233,968,l),
(208,824,l),
(360,749,l),
(539,824,l),
(564,968,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
46 45 44 43 42 41 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 3 4 4 5 114 0 1 4 2 2 1 114 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 3 4 4 5 114 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 5 3 4 3 5 4 128 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 34 77 0 2 2 0 98 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 44 33 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 625;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = scaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(510,233,o),
(461,306,o),
(382,336,o),
(324,348,qs),
(279,357,o),
(240,374,o),
(243,391,qs),
(245,404,o),
(266,417,o),
(283,417,qs),
(310,417,o),
(337,392,o),
(338,369,q),
(535,369,l),
(538,459,o),
(429,571,o),
(315,571,qs),
(238,571,o),
(121,522,o),
(51,437,o),
(42,385,qs),
(32,325,o),
(79,257,o),
(153,229,o),
(211,217,qs),
(260,207,o),
(299,191,o),
(296,172,qs),
(294,161,o),
(271,146,o),
(254,146,qs),
(227,146,o),
(196,170,o),
(197,195,q),
(-16,195,l),
(-22,137,o),
(34,45,o),
(148,-7,o),
(228,-7,qs),
(301,-7,o),
(418,39,o),
(490,119,o),
(499,169,qs)
);
},
{
closed = 1;
nodes = (
(359,733,l),
(209,821,l),
(184,677,l),
(336,602,l),
(515,677,l),
(540,821,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
48 47 46 45 44 43 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 5 3 4 4 5 114 0 1 4 2 2 1 114 0 4 4 3 98 0 3 3 37 77 0 2 2 0 98 0 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 5 3 4 3 5 4 128 0 1 4 2 4 1 2 128 0 4 4 3 98 0 3 3 37 77 0 2 2 0 98 0 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 44 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = uni0162;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(66,532,l),
(252,532,l),
(158,0,l),
(211,0,l),
(187,-134,l),
(272,-134,ls),
(298,-134,o),
(296,-149,qs),
(295,-156,o),
(279,-165,o),
(267,-165,qs),
(117,-165,l),
(97,-278,l),
(270,-278,ls),
(330,-278,o),
(430,-221,o),
(442,-156,qs),
(449,-112,o),
(417,-57,o),
(361,-34,o),
(333,-34,q),
(339,0,l),
(380,0,l),
(474,532,l),
(662,532,l),
(693,708,l),
(97,708,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 2 1 5 4 2 114 0 5 4 1 5 4 126 7 1 0 0 8 95 9 1 8 8 28 77 6 1 1 1 29 77 0 4 4 3 96 0 3 3 33 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 2 1 5 1 2 5 128 0 5 4 1 5 4 126 7 1 0 0 8 95 9 1 8 8 28 77 6 1 1 1 29 77 0 4 4 3 96 0 3 3 33 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 26 0 26 17 17 35 33 37 17 17 17 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni0163;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,231,ls),
(61,80,o),
(151,28,q),
(124,-127,l),
(209,-127,ls),
(235,-127,o),
(232,-142,qs),
(231,-149,o),
(215,-158,o),
(203,-158,qs),
(53,-158,l),
(33,-271,l),
(206,-271,ls),
(266,-271,o),
(366,-214,o),
(378,-149,qs),
(386,-105,o),
(353,-50,o),
(297,-27,o),
(269,-27,q),
(274,0,l),
(279,0,l),
(363,0,l),
(397,189,l),
(344,189,ls),
(322,189,o),
(306,207,o),
(309,227,qs),
(336,379,l),
(428,379,l),
(461,564,l),
(369,564,l),
(393,700,l),
(171,700,l),
(147,564,l),
(77,564,l),
(44,379,l),
(114,379,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
34 1 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 6 5 9 8 6 114 11 10 2 3 3 0 95 2 1 0 0 31 77 0 4 4 5 95 0 5 5 29 77 0 9 9 1 95 0 1 1 28 77 0 8 8 7 96 0 7 7 33 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 6 5 9 5 6 9 128 11 10 2 3 3 0 95 2 1 0 0 31 77 0 4 4 5 95 0 5 5 29 77 0 9 9 1 95 0 1 1 28 77 0 8 8 7 96 0 7 7 33 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 37 0 37 33 31 33 37 18 17 35 17 17 17 17 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 436;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = Tcaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(18,532,l),
(204,532,l),
(111,0,l),
(333,0,l),
(426,532,l),
(614,532,l),
(645,708,l),
(49,708,l)
);
},
{
closed = 1;
nodes = (
(350,749,l),
(528,824,l),
(553,968,l),
(373,880,l),
(222,968,l),
(197,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
13 12 11 10 9 8 6 3 74 2 1 0 0 3 95 4 1 3 3 28 77 0 1 1 29 1 78 0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = tcaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(391,744,l),
(463,744,l),
(460,727,ls),
(453,688,o),
(398,688,q),
(384,609,l),
(466,609,o),
(564,696,o),
(577,766,qs),
(582,797,o),
(580,855,o),
(572,890,q),
(416,890,l)
);
},
{
closed = 1;
nodes = (
(47,231,ls),
(7,0,o),
(239,0,qs),
(323,0,l),
(356,189,l),
(303,189,ls),
(281,189,o),
(265,207,o),
(269,227,qs),
(295,379,l),
(387,379,l),
(420,564,l),
(328,564,l),
(352,700,l),
(130,700,l),
(106,564,l),
(36,564,l),
(3,379,l),
(73,379,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
11 1 3 0 2 1 3 2 103 0 0 0 1 97 5 1 1 1 28 77 12 10 2 7 7 4 95 6 1 4 4 31 77 0 8 8 9 96 0 9 9 29 9 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
11 1 3 0 2 5 3 2 103 0 5 5 28 77 0 0 0 1 97 0 1 1 28 77 12 10 2 7 7 4 95 6 1 4 4 31 77 0 8 8 9 96 0 9 9 29 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
11 1 3 0 2 5 3 2 103 0 1 0 0 4 1 0 105 0 5 5 28 77 12 10 2 7 7 4 95 6 1 4 4 31 77 0 8 8 9 96 0 9 9 29 9 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
13 13 0 0 13 31 13 31 29 27 26 24 21 20 19 18 17 16 15 14 0 12 0 12 18 17 21 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 436;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = Utilde;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(19,309,ls),
(1,207,o),
(54,65,o),
(181,-7,o),
(271,-7,qs),
(361,-7,o),
(519,65,o),
(629,208,o),
(646,309,qs),
(717,708,l),
(496,708,l),
(425,309,ls),
(417,260,o),
(361,203,o),
(313,203,qs),
(265,203,o),
(232,260,o),
(240,309,qs),
(311,708,l),
(90,708,l)
);
},
{
closed = 1;
nodes = (
(302,796,o),
(338,796,qs),
(350,796,o),
(376,785,o),
(389,778,qs),
(411,765,o),
(450,751,o),
(474,751,qs),
(538,751,o),
(634,833,o),
(666,926,q),
(557,926,l),
(542,879,o),
(505,879,qs),
(493,879,o),
(472,888,o),
(454,898,qs),
(433,911,o),
(393,925,o),
(369,925,qs),
(305,925,o),
(209,842,o),
(177,749,q),
(285,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
6 1 4 0 8 7 4 8 105 0 5 11 9 2 7 1 5 7 106 10 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 20 20 0 0 20 43 20 43 42 40 36 34 32 31 30 28 24 22 0 19 0 19 36 19 35 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = utilde;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(579,0,l),
(678,564,l),
(456,564,l),
(403,265,ls),
(396,225,o),
(346,178,o),
(309,178,qs),
(273,178,o),
(238,225,o),
(245,265,qs),
(298,564,l),
(77,564,l),
(19,237,ls),
(0,126,o),
(86,-4,o),
(183,-4,qs),
(243,-4,o),
(339,46,o),
(372,86,q),
(357,0,l)
);
},
{
closed = 1;
nodes = (
(278,649,o),
(314,649,qs),
(326,649,o),
(352,638,o),
(365,631,qs),
(387,618,o),
(426,604,o),
(450,604,qs),
(514,604,o),
(610,686,o),
(642,779,q),
(533,779,l),
(518,732,o),
(481,732,qs),
(469,732,o),
(447,741,o),
(430,751,qs),
(408,764,o),
(369,778,o),
(345,778,qs),
(281,778,o),
(185,695,o),
(153,602,q),
(261,602,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 1 0 1 2 0 128 7 1 5 0 9 8 5 9 105 11 10 2 8 8 6 97 0 6 6 34 77 3 1 1 1 31 77 4 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 1 0 1 2 0 128 7 1 5 0 9 8 5 9 105 11 10 2 8 8 6 97 0 6 6 34 77 3 1 1 1 31 77 4 1 0 0 35 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 0 1 2 0 128 7 1 5 0 9 8 5 9 105 0 6 11 10 2 8 1 6 8 106 3 1 1 1 31 77 4 1 0 0 35 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
20 20 20 43 20 43 42 40 34 17 36 35 17 19 35 19 34 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = Umacron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,309,ls),
(2,207,o),
(55,65,o),
(182,-7,o),
(272,-7,qs),
(362,-7,o),
(520,65,o),
(630,208,o),
(647,309,qs),
(718,708,l),
(497,708,l),
(426,309,ls),
(418,260,o),
(362,203,o),
(314,203,qs),
(266,203,o),
(233,260,o),
(241,309,qs),
(312,708,l),
(91,708,l)
);
},
{
closed = 1;
nodes = (
(200,769,l),
(631,769,l),
(657,916,l),
(226,916,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
7 1 5 0 4 1 5 4 103 6 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 20 20 0 0 20 23 20 23 22 21 0 19 0 19 36 19 35 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = umacron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(679,564,l),
(457,564,l),
(404,265,ls),
(397,225,o),
(347,178,o),
(310,178,qs),
(274,178,o),
(239,225,o),
(246,265,qs),
(299,564,l),
(78,564,l),
(20,237,ls),
(1,126,o),
(87,-4,o),
(184,-4,qs),
(244,-4,o),
(340,46,o),
(373,86,q),
(358,0,l),
(580,0,l)
);
},
{
closed = 1;
nodes = (
(176,622,l),
(607,622,l),
(633,769,l),
(202,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 1 0 1 2 0 128 8 1 6 0 5 1 6 5 103 3 1 1 1 31 77 7 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 2 1 0 1 2 0 128 8 1 6 0 5 1 6 5 103 3 1 1 1 31 77 7 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
20 20 0 0 20 23 20 23 22 21 0 19 0 19 19 35 19 35 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = Ubreve;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(16,309,ls),
(-2,207,o),
(51,65,o),
(177,-7,o),
(267,-7,qs),
(357,-7,o),
(516,65,o),
(625,208,o),
(643,309,qs),
(713,708,l),
(492,708,l),
(422,309,ls),
(413,260,o),
(357,203,o),
(309,203,qs),
(261,203,o),
(228,260,o),
(237,309,qs),
(307,708,l),
(86,708,l)
);
},
{
closed = 1;
nodes = (
(531,967,l),
(525,936,o),
(482,905,o),
(435,905,qs),
(388,905,o),
(355,936,o),
(361,967,q),
(258,967,l),
(255,950,ls),
(237,851,o),
(324,747,o),
(407,747,qs),
(490,747,o),
(613,851,o),
(631,950,qs),
(634,967,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 8 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 0 0 35 34 32 30 28 27 24 22 0 19 0 19 36 19 35 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = ubreve;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(675,564,l),
(453,564,l),
(400,265,ls),
(393,225,o),
(342,178,o),
(305,178,qs),
(269,178,o),
(235,225,o),
(242,265,qs),
(295,564,l),
(74,564,l),
(16,237,ls),
(-4,126,o),
(82,-4,o),
(179,-4,qs),
(239,-4,o),
(335,46,o),
(368,86,q),
(353,0,l),
(575,0,l)
);
},
{
closed = 1;
nodes = (
(507,820,l),
(501,789,o),
(458,758,o),
(411,758,qs),
(364,758,o),
(331,789,o),
(337,820,q),
(234,820,l),
(231,803,ls),
(213,704,o),
(300,600,o),
(383,600,qs),
(466,600,o),
(589,704,o),
(607,803,qs),
(610,820,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
8 1 6 7 6 133 0 2 1 0 1 2 0 128 0 7 0 5 1 7 5 105 3 1 1 1 31 77 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
8 1 6 7 6 133 0 2 1 0 1 2 0 128 0 7 0 5 1 7 5 105 3 1 1 1 31 77 9 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
0 0 35 34 32 30 28 27 24 22 0 19 0 19 19 35 19 35 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = Uring;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(13,309,ls),
(-5,207,o),
(48,65,o),
(174,-7,o),
(264,-7,qs),
(354,-7,o),
(513,65,o),
(622,208,o),
(640,309,qs),
(710,708,l),
(489,708,l),
(419,309,ls),
(410,260,o),
(354,203,o),
(306,203,qs),
(258,203,o),
(225,260,o),
(234,309,qs),
(304,708,l),
(83,708,l)
);
},
{
closed = 1;
nodes = (
(393,1004,o),
(304,932,o),
(294,872,qs),
(283,812,o),
(347,740,o),
(403,740,qs),
(459,740,o),
(547,812,o),
(558,872,qs),
(568,932,o),
(505,1004,o),
(449,1004,qs)
);
},
{
closed = 1;
nodes = (
(398,825,o),
(376,851,o),
(380,872,qs),
(384,893,o),
(414,919,o),
(434,919,qs),
(454,919,o),
(476,893,o),
(472,872,qs),
(468,851,o),
(438,825,o),
(418,825,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
9 1 5 0 6 7 5 6 105 10 1 7 0 4 1 7 4 105 8 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 32 32 20 20 0 0 32 43 32 42 38 36 20 31 20 30 26 24 0 19 0 19 36 19 35 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = uring;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(671,564,l),
(449,564,l),
(397,265,ls),
(389,225,o),
(339,178,o),
(302,178,qs),
(266,178,o),
(231,225,o),
(239,265,qs),
(291,564,l),
(70,564,l),
(13,237,ls),
(-7,126,o),
(79,-4,o),
(176,-4,qs),
(236,-4,o),
(332,46,o),
(365,86,q),
(350,0,l),
(572,0,l)
);
},
{
closed = 1;
nodes = (
(373,678,o),
(352,704,o),
(356,725,qs),
(359,746,o),
(390,772,o),
(410,772,qs),
(430,772,o),
(451,746,o),
(448,725,qs),
(444,704,o),
(413,678,o),
(393,678,qs)
);
},
{
closed = 1;
nodes = (
(369,857,o),
(280,785,o),
(270,725,qs),
(259,665,o),
(322,593,o),
(378,593,qs),
(434,593,o),
(523,665,o),
(534,725,qs),
(544,785,o),
(481,857,o),
(425,857,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 0 1 2 0 128 11 1 8 0 5 6 8 5 105 10 1 6 0 7 1 6 7 105 3 1 1 1 31 77 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 2 1 0 1 2 0 128 11 1 8 0 5 6 8 5 105 10 1 6 0 7 1 6 7 105 3 1 1 1 31 77 9 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
32 32 20 20 0 0 32 43 32 42 38 36 20 31 20 30 26 24 0 19 0 19 19 35 19 35 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uring;
unicode = 367;
},
{
glyphname = Uhungarumlaut;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(14,309,ls),
(-4,207,o),
(49,65,o),
(175,-7,o),
(265,-7,qs),
(355,-7,o),
(514,65,o),
(623,208,o),
(641,309,qs),
(711,708,l),
(490,708,l),
(420,309,ls),
(411,260,o),
(355,203,o),
(307,203,qs),
(259,203,o),
(226,260,o),
(235,309,qs),
(305,708,l),
(84,708,l)
);
},
{
closed = 1;
nodes = (
(336,992,l),
(213,748,l),
(346,748,l),
(504,992,l)
);
},
{
closed = 1;
nodes = (
(582,992,l),
(436,748,l),
(569,748,l),
(750,992,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
7 1 5 6 1 4 1 5 4 103 8 3 2 1 1 28 77 0 0 0 2 98 0 2 2 35 2 78 0 0 27 26 25 24 23 22 21 20 0 19 0 19 36 19 35 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = uhungarumlaut;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(672,564,l),
(450,564,l),
(398,265,ls),
(391,225,o),
(340,178,o),
(303,178,qs),
(267,178,o),
(233,225,o),
(240,265,qs),
(292,564,l),
(71,564,l),
(14,237,ls),
(-6,126,o),
(80,-4,o),
(177,-4,qs),
(237,-4,o),
(333,46,o),
(366,86,q),
(351,0,l),
(573,0,l)
);
},
{
closed = 1;
nodes = (
(312,845,l),
(189,601,l),
(322,601,l),
(480,845,l)
);
},
{
closed = 1;
nodes = (
(558,845,l),
(412,601,l),
(545,601,l),
(726,845,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 1 0 1 2 0 128 8 1 6 7 1 5 1 6 5 103 3 1 1 1 31 77 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 2 1 0 1 2 0 128 8 1 6 7 1 5 1 6 5 103 3 1 1 1 31 77 9 4 2 0 0 35 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
0 0 27 26 25 24 23 22 21 20 0 19 0 19 19 35 19 35 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = Uogonek;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(57,309,ls),
(37,193,o),
(111,41,o),
(195,11,q),
(156,-15,o),
(120,-68,o),
(114,-100,qs),
(104,-156,o),
(179,-220,o),
(254,-220,qs),
(314,-220,o),
(370,-204,q),
(390,-88,l),
(340,-104,o),
(303,-104,qs),
(287,-104,o),
(271,-92,o),
(272,-83,qs),
(275,-68,o),
(315,-38,o),
(360,-18,qs),
(407,3,l),
(406,4,l),
(513,30,o),
(663,186,o),
(684,309,qs),
(755,708,l),
(534,708,l),
(463,309,ls),
(455,260,o),
(399,203,o),
(351,203,qs),
(303,203,o),
(270,260,o),
(278,309,qs),
(349,708,l),
(128,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
32 23 2 2 0 24 1 3 2 2 76 0 0 1 2 1 0 2 128 0 2 0 3 2 3 102 5 4 2 1 1 28 1 78 0 0 0 36 0 36 35 43 19 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = uogonek;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(717,564,l),
(495,564,l),
(442,265,ls),
(435,225,o),
(385,178,o),
(348,178,qs),
(312,178,o),
(277,225,o),
(284,265,qs),
(337,564,l),
(116,564,l),
(58,237,ls),
(38,126,o),
(124,-4,o),
(221,-4,qs),
(281,-4,o),
(377,46,o),
(410,86,q),
(395,0,l),
(397,0,l),
(364,-24,o),
(330,-76,o),
(325,-106,qs),
(315,-162,o),
(389,-226,o),
(464,-226,qs),
(524,-226,o),
(580,-210,q),
(601,-94,l),
(550,-110,o),
(513,-110,qs),
(497,-110,o),
(481,-98,o),
(483,-89,qs),
(485,-74,o),
(525,-44,o),
(570,-24,qs),
(617,-3,l),
(616,0,l),
(617,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
39 21 19 3 2 4 10 1 0 2 11 1 1 0 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 3 2 3 4 2 128 0 0 0 1 0 1 102 5 1 3 3 31 77 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 4 3 2 3 4 2 128 0 0 0 1 0 1 102 5 1 3 3 31 77 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
19 35 19 41 35 39 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 697;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = Wcircumflex;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(107,0,l),
(383,0,l),
(536,402,l),
(547,0,l),
(823,0,l),
(1110,708,l),
(871,708,l),
(728,262,l),
(711,708,l),
(469,708,l),
(294,262,l),
(309,708,l),
(70,708,l)
);
},
{
closed = 1;
nodes = (
(611,824,l),
(762,746,l),
(788,890,l),
(636,965,l),
(457,890,l),
(431,746,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
9 4 1 3 2 0 1 76 18 17 16 15 14 13 6 0 74 5 4 1 3 0 0 28 77 3 1 2 2 29 2 78 0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 1100;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = wcircumflex;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(60,0,l),
(310,0,l),
(438,318,l),
(450,0,l),
(700,0,l),
(933,564,l),
(728,564,l),
(619,217,l),
(603,564,l),
(366,564,l),
(233,221,l),
(246,564,l),
(26,564,l)
);
},
{
closed = 1;
nodes = (
(501,680,l),
(652,602,l),
(677,746,l),
(525,821,l),
(346,746,l),
(321,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
9 4 1 3 2 0 1 76 18 17 16 15 14 13 6 0 74 5 4 1 3 0 0 31 77 3 1 2 2 29 2 78 0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 903;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = Ycircumflex;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(207,215,l),
(169,0,l),
(391,0,l),
(429,215,l),
(769,708,l),
(519,708,l),
(362,457,l),
(293,708,l),
(39,708,l)
);
},
{
closed = 1;
nodes = (
(426,827,l),
(578,749,l),
(603,893,l),
(451,968,l),
(272,893,l),
(247,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
7 4 1 3 1 0 1 76 14 13 12 11 10 9 6 0 74 3 2 2 0 0 28 77 0 1 1 29 1 78 0 0 0 8 0 8 18 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = ycircumflex;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(343,278,l),
(288,564,l),
(41,564,l),
(181,28,l),
(-13,-270,l),
(230,-270,l),
(738,564,l),
(493,564,l)
);
},
{
closed = 1;
nodes = (
(410,680,l),
(562,602,l),
(587,746,l),
(435,821,l),
(256,746,l),
(231,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
6 3 2 0 1 1 76 13 12 11 10 9 8 6 1 74 3 2 2 1 1 31 77 0 0 0 33 0 78 0 0 0 7 0 7 18 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = Ydieresis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(209,215,l),
(171,0,l),
(393,0,l),
(431,215,l),
(772,708,l),
(522,708,l),
(365,457,l),
(296,708,l),
(42,708,l)
);
},
{
closed = 1;
nodes = (
(341,767,o),
(400,816,o),
(406,852,qs),
(413,890,o),
(373,939,o),
(335,939,qs),
(299,939,o),
(241,889,o),
(234,852,qs),
(228,816,o),
(268,767,o),
(304,767,qs)
);
},
{
closed = 1;
nodes = (
(566,767,o),
(625,816,o),
(631,852,qs),
(638,890,o),
(598,939,o),
(560,939,qs),
(524,939,o),
(466,889,o),
(459,852,qs),
(453,816,o),
(493,767,o),
(529,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
7 4 1 3 1 0 1 76 5 1 3 9 6 8 3 4 0 3 4 105 7 2 2 0 0 28 77 0 1 1 29 1 78 21 21 9 9 0 0 21 32 21 31 27 25 9 20 9 19 15 13 0 8 0 8 18 18 10 8 24 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Zacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(616,708,l),
(86,708,l),
(55,532,l),
(335,532,l),
(-9,167,l),
(-39,0,l),
(491,0,l),
(522,177,l),
(238,177,l),
(587,541,l)
);
},
{
closed = 1;
nodes = (
(503,843,l),
(532,1007,l),
(253,897,l),
(227,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
9 1 2 3 4 1 1 0 2 76 13 12 11 10 4 3 74 0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = zacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(512,564,l),
(47,564,l),
(14,380,l),
(226,380,l),
(-25,174,l),
(-56,0,l),
(422,0,l),
(455,184,l),
(220,184,l),
(481,390,l)
);
},
{
closed = 1;
nodes = (
(441,696,l),
(470,860,l),
(191,750,l),
(165,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
9 1 2 3 4 1 1 0 2 76 13 12 11 10 4 3 74 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = Zdotaccent;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(622,708,l),
(92,708,l),
(61,532,l),
(341,532,l),
(-3,167,l),
(-33,0,l),
(497,0,l),
(528,177,l),
(244,177,l),
(593,541,l)
);
},
{
closed = 1;
nodes = (
(402,767,o),
(461,816,o),
(467,852,qs),
(474,890,o),
(434,939,o),
(396,939,qs),
(360,939,o),
(302,889,o),
(295,852,qs),
(289,816,o),
(329,767,o),
(365,767,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
9 1 2 3 4 1 1 0 2 76 0 4 6 1 5 3 4 5 105 0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 10 10 10 21 10 20 38 17 18 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = zdotaccent;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(518,564,l),
(53,564,l),
(20,380,l),
(232,380,l),
(-19,174,l),
(-50,0,l),
(428,0,l),
(461,184,l),
(226,184,l),
(487,390,l)
);
},
{
closed = 1;
nodes = (
(340,620,o),
(399,669,o),
(405,705,qs),
(412,743,o),
(372,792,o),
(334,792,qs),
(298,792,o),
(240,742,o),
(233,705,qs),
(227,669,o),
(267,620,o),
(303,620,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
9 1 2 3 4 1 1 0 2 76 0 4 6 1 5 3 4 5 105 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 10 10 10 21 10 20 38 17 18 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = Zcaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(619,708,l),
(89,708,l),
(58,532,l),
(338,532,l),
(-6,167,l),
(-35,0,l),
(495,0,l),
(526,177,l),
(242,177,l),
(590,541,l)
);
},
{
closed = 1;
nodes = (
(362,749,l),
(540,824,l),
(565,968,l),
(385,880,l),
(234,968,l),
(209,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
9 1 2 3 4 1 1 0 2 76 15 14 13 12 11 10 6 3 74 0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = zcaron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(515,564,l),
(50,564,l),
(18,380,l),
(230,380,l),
(-22,174,l),
(-52,0,l),
(426,0,l),
(458,184,l),
(223,184,l),
(484,390,l)
);
},
{
closed = 1;
nodes = (
(300,602,l),
(478,677,l),
(503,821,l),
(323,733,l),
(172,821,l),
(147,677,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
9 1 2 3 4 1 1 0 2 76 15 14 13 12 11 10 6 3 74 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 518;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = uni018F;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(301,196,o),
(239,247,o),
(243,287,q),
(501,287,l),
(484,244,o),
(399,196,o),
(351,196,qs)
);
},
{
closed = 1;
nodes = (
(427,-9,o),
(605,81,o),
(723,248,o),
(743,359,qs),
(763,471,o),
(703,637,o),
(557,727,o),
(450,727,qs),
(362,727,o),
(205,657,o),
(90,536,o),
(62,460,q),
(295,460,l),
(310,492,o),
(379,529,o),
(419,529,qs),
(470,529,o),
(532,468,o),
(526,409,q),
(43,409,l),
(32,373,o),
(29,353,qs),
(10,243,o),
(69,79,o),
(213,-9,o),
(320,-9,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
0 4 3 2 3 4 2 128 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 34 77 7 1 1 1 6 97 8 1 6 6 35 6 78 7 7 0 0 7 32 7 31 25 23 20 19 17 15 13 12 0 6 0 5 18 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 773;
}
);
note = uni018F;
unicode = 399;
},
{
glyphname = florin;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(94,564,l),
(42,379,l),
(83,379,l),
(-52,-98,l),
(-60,-120,o),
(-78,-120,qs),
(-116,-120,l),
(-167,-310,l),
(-134,-310,ls),
(-21,-310,o),
(136,-216,o),
(170,-98,qs),
(304,379,l),
(367,379,l),
(419,564,l),
(356,564,l),
(358,569,ls),
(363,589,o),
(395,604,o),
(423,604,q),
(475,793,l),
(334,793,o),
(170,685,o),
(137,569,qs),
(135,564,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
7 1 6 1 1 76 9 1 6 1 75 0 0 0 1 6 0 1 105 0 4 0 3 4 3 101 5 1 2 2 6 95 0 6 6 31 2 78 17 18 33 35 21 17 18 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 340;
}
);
note = florin;
unicode = 402;
},
{
glyphname = uni01FC;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(416,894,l),
(390,746,l),
(666,840,l),
(695,1004,l)
);
},
{
closed = 1;
nodes = (
(152,0,l),
(215,97,l),
(419,97,l),
(401,0,l),
(863,0,l),
(895,177,l),
(655,177,l),
(673,280,l),
(883,280,l),
(912,447,l),
(702,447,l),
(717,532,l),
(957,532,l),
(988,708,l),
(375,708,l),
(-89,0,l)
);
},
{
closed = 1;
nodes = (
(496,537,l),
(448,264,l),
(321,264,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
21 1 1 0 1 76 3 2 1 0 4 0 74 0 2 0 3 8 2 3 103 9 1 8 0 6 5 8 6 103 0 1 1 0 95 0 0 0 28 77 0 4 4 5 95 7 1 5 5 29 5 78 20 20 20 22 20 22 17 17 17 17 17 17 17 20 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 986;
}
);
note = uni01FC;
unicode = 508;
},
{
glyphname = uni01FD;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(756,397,o),
(798,365,o),
(793,334,q),
(623,334,l),
(647,397,o),
(719,397,qs)
);
},
{
closed = 1;
nodes = (
(725,167,o),
(671,167,qs),
(638,167,o),
(603,201,o),
(606,243,q),
(997,243,l),
(1006,266,o),
(1009,287,qs),
(1025,374,o),
(986,502,o),
(891,571,o),
(821,571,qs),
(761,571,o),
(668,527,o),
(641,487,q),
(654,564,l),
(433,564,l),
(420,487,l),
(406,526,o),
(333,571,o),
(278,571,qs),
(212,571,o),
(94,502,o),
(10,371,o),
(-5,282,qs),
(-21,193,o),
(17,62,o),
(111,-7,o),
(177,-7,qs),
(232,-7,o),
(319,38,o),
(347,77,q),
(334,0,l),
(555,0,l),
(568,77,l),
(582,37,o),
(660,-7,o),
(720,-7,qs),
(806,-7,o),
(948,111,o),
(983,203,q),
(748,203,l)
);
},
{
closed = 1;
nodes = (
(227,327,o),
(282,377,o),
(318,377,qs),
(354,377,o),
(391,327,o),
(384,282,qs),
(376,237,o),
(321,187,o),
(285,187,qs),
(249,187,o),
(212,237,o),
(220,282,qs)
);
},
{
closed = 1;
nodes = (
(455,750,l),
(429,602,l),
(705,696,l),
(733,860,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
32 29 2 1 5 15 12 2 2 9 2 76 63 62 61 60 4 5 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
32 29 2 1 6 15 12 2 3 9 2 76 63 62 61 60 4 5 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 0 0 8 10 0 8 103 12 13 2 1 1 5 97 7 6 2 5 5 37 77 14 1 10 10 2 97 4 3 2 2 2 35 77 11 1 9 9 2 97 4 3 2 2 2 35 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 9 10 2 10 9 114 0 0 0 8 10 0 8 103 13 1 1 1 5 97 7 6 2 5 5 37 77 0 12 12 5 97 7 6 2 5 5 37 77 11 14 2 10 10 2 97 4 3 2 2 2 35 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
0 9 11 2 10 9 114 0 0 0 8 10 0 8 103 13 1 1 1 5 97 7 6 2 5 5 37 77 0 12 12 5 97 7 6 2 5 5 37 77 14 1 10 10 2 97 4 3 2 2 2 35 77 0 11 11 2 97 4 3 2 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
0 9 11 3 11 9 3 128 0 0 0 8 10 0 8 103 0 6 6 31 77 13 1 1 1 5 97 7 1 5 5 37 77 0 12 12 5 97 7 1 5 5 37 77 14 1 10 10 2 97 4 1 2 2 35 77 0 3 3 29 77 0 11 11 2 97 4 1 2 2 35 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
6 6 0 0 57 55 51 49 6 47 6 47 46 44 42 41 36 34 31 30 27 25 19 17 14 13 10 8 0 5 0 4 17 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 1054;
}
);
note = uni01FD;
unicode = 509;
},
{
glyphname = uni0218;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,-182,l),
(270,-182,l),
(268,-193,ls),
(255,-268,o),
(200,-268,q),
(186,-346,l),
(267,-346,o),
(368,-247,o),
(382,-170,qs),
(394,-103,o),
(380,-35,q),
(224,-35,l)
);
},
{
closed = 1;
nodes = (
(614,281,o),
(564,363,o),
(485,409,o),
(423,434,qs),
(368,456,o),
(321,487,o),
(325,511,qs),
(328,528,o),
(349,547,o),
(363,547,qs),
(383,547,o),
(407,521,o),
(403,491,q),
(642,491,l),
(657,600,o),
(525,720,o),
(395,720,qs),
(318,720,o),
(186,670,o),
(98,573,o),
(86,504,qs),
(73,435,o),
(121,347,o),
(202,301,o),
(266,277,qs),
(319,257,o),
(368,226,o),
(363,201,qs),
(360,183,o),
(332,166,o),
(314,166,qs),
(265,166,o),
(271,227,q),
(35,227,l),
(22,112,o),
(166,-7,o),
(293,-7,qs),
(377,-7,o),
(509,51,o),
(591,154,o),
(603,219,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 9 7 8 8 9 114 0 5 8 6 6 5 114 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 8 8 7 98 0 7 7 34 77 0 6 6 4 98 0 4 4 35 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 9 7 8 8 9 114 0 5 8 6 8 5 6 128 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 8 8 7 98 0 7 7 34 77 0 6 6 4 98 0 4 4 35 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 9 7 8 7 9 8 128 0 5 8 6 8 5 6 128 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 8 8 7 98 0 7 7 34 77 0 6 6 4 98 0 4 4 35 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 43 41 39 38 36 34 22 20 19 18 16 14 0 11 0 11 18 17 20 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 685;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni0219;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(156,-182,l),
(228,-182,l),
(226,-193,ls),
(213,-268,o),
(158,-268,q),
(144,-346,l),
(225,-346,o),
(326,-247,o),
(339,-170,qs),
(352,-100,o),
(338,-35,q),
(182,-35,l)
);
},
{
closed = 1;
nodes = (
(562,233,o),
(513,306,o),
(434,336,o),
(376,348,qs),
(331,357,o),
(292,374,o),
(295,391,qs),
(297,404,o),
(318,417,o),
(335,417,qs),
(362,417,o),
(389,392,o),
(390,369,q),
(587,369,l),
(590,459,o),
(481,571,o),
(367,571,qs),
(290,571,o),
(173,522,o),
(103,437,o),
(94,385,qs),
(83,325,o),
(130,257,o),
(205,229,o),
(263,217,qs),
(312,207,o),
(351,191,o),
(347,172,qs),
(346,161,o),
(323,146,o),
(306,146,qs),
(279,146,o),
(248,170,o),
(249,195,q),
(36,195,l),
(30,137,o),
(86,45,o),
(200,-7,o),
(280,-7,qs),
(353,-7,o),
(470,39,o),
(542,119,o),
(551,169,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 9 7 8 8 9 114 0 5 8 6 6 5 114 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 8 8 7 98 0 7 7 37 77 0 6 6 4 98 0 4 4 35 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 9 7 8 7 9 8 128 0 5 8 6 8 5 6 128 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 8 8 7 98 0 7 7 37 77 0 6 6 4 98 0 4 4 35 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 45 43 41 40 38 36 24 22 20 19 16 14 0 11 0 11 18 17 20 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = uni021A;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,-182,l),
(237,-182,l),
(235,-193,ls),
(222,-268,o),
(167,-268,q),
(153,-346,l),
(234,-346,o),
(335,-247,o),
(348,-170,qs),
(360,-100,o),
(347,-35,q),
(191,-35,l)
);
},
{
closed = 1;
nodes = (
(72,532,l),
(258,532,l),
(164,0,l),
(386,0,l),
(480,532,l),
(668,532,l),
(699,708,l),
(103,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 6 1 4 4 7 95 9 1 7 7 28 77 0 5 5 29 5 78 12 12 0 0 12 19 12 19 18 17 16 15 14 13 0 11 0 11 18 17 20 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = uni021B;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(84,-182,l),
(156,-182,l),
(154,-193,ls),
(141,-268,o),
(86,-268,q),
(72,-346,l),
(153,-346,o),
(254,-247,o),
(268,-170,qs),
(280,-103,o),
(266,-35,q),
(110,-35,l)
);
},
{
closed = 1;
nodes = (
(95,231,ls),
(54,0,o),
(286,0,qs),
(370,0,l),
(403,189,l),
(350,189,ls),
(328,189,o),
(312,207,o),
(316,227,qs),
(343,379,l),
(435,379,l),
(467,564,l),
(375,564,l),
(399,700,l),
(177,700,l),
(153,564,l),
(83,564,l),
(51,379,l),
(121,379,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
11 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 5 5 28 77 12 10 2 7 7 4 95 6 1 4 4 31 77 0 8 8 9 96 0 9 9 29 9 78 12 12 0 0 12 30 12 30 28 26 25 23 20 19 18 17 16 15 14 13 0 11 0 11 18 17 20 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 436;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = uni0259;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,167,o),
(230,196,o),
(235,224,q),
(367,224,l),
(347,167,o),
(288,167,qs)
);
},
{
closed = 1;
nodes = (
(341,-7,o),
(484,63,o),
(580,194,o),
(596,282,qs),
(612,370,o),
(562,501,o),
(443,571,o),
(359,571,qs),
(289,571,o),
(162,516,o),
(69,421,o),
(46,361,q),
(281,361,l),
(303,394,o),
(339,394,qs),
(395,394,o),
(386,321,q),
(30,321,l),
(23,300,o),
(19,277,qs),
(4,190,o),
(54,62,o),
(173,-7,o),
(257,-7,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 4 3 2 3 4 114 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 37 77 7 1 1 1 6 97 8 1 6 6 35 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 2 3 4 2 128 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 37 77 7 1 1 1 6 97 8 1 6 6 35 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
6 6 0 0 6 29 6 28 22 20 17 16 15 13 12 11 0 5 0 4 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = uni0259;
unicode = 601;
},
{
glyphname = uni02BC;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,413,l),
(354,708,l),
(134,708,l),
(38,413,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 378;
}
);
note = uni02BC;
unicode = 700;
},
{
glyphname = circumflex;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,746,l),
(195,821,l),
(16,746,l),
(-9,602,l),
(170,680,l),
(322,602,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 351;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(180,733,l),
(29,821,l),
(4,677,l),
(157,602,l),
(335,677,l),
(360,821,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 351;
}
);
note = caron;
unicode = 711;
},
{
glyphname = uni02C9;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-3,622,l),
(428,622,l),
(454,769,l),
(23,769,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 451;
}
);
note = uni02C9;
unicode = 713;
},
{
glyphname = breve;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(302,820,l),
(297,789,o),
(253,758,o),
(206,758,qs),
(159,758,o),
(127,789,o),
(132,820,q),
(29,820,l),
(26,803,ls),
(9,704,o),
(96,600,o),
(179,600,qs),
(262,600,o),
(385,704,o),
(402,803,qs),
(405,820,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 2 1 133 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 18 34 19 34 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 395;
}
);
note = breve;
unicode = 728;
},
{
glyphname = dotaccent;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(117,620,o),
(175,669,o),
(182,705,qs),
(189,743,o),
(148,792,o),
(110,792,qs),
(74,792,o),
(16,742,o),
(10,705,qs),
(3,669,o),
(44,620,o),
(80,620,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 192;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = ring;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(109,857,o),
(21,785,o),
(10,725,qs),
(-1,665,o),
(63,593,o),
(119,593,qs),
(175,593,o),
(263,665,o),
(274,725,qs),
(285,785,o),
(221,857,o),
(165,857,qs)
);
},
{
closed = 1;
nodes = (
(114,678,o),
(92,704,o),
(96,725,qs),
(100,746,o),
(130,772,o),
(150,772,qs),
(170,772,o),
(192,746,o),
(188,725,qs),
(184,704,o),
(154,678,o),
(134,678,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 1 0 2 3 1 2 105 5 1 3 0 0 3 89 5 1 3 3 0 97 0 0 3 0 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 283;
}
);
note = ring;
unicode = 730;
},
{
glyphname = ogonek;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(238,79,ls),
(119,34,o),
(21,-50,o),
(11,-103,qs),
(1,-159,o),
(76,-223,o),
(151,-223,qs),
(211,-223,o),
(267,-207,q),
(287,-91,l),
(237,-107,o),
(200,-107,qs),
(184,-107,o),
(168,-95,o),
(169,-86,qs),
(172,-71,o),
(212,-41,o),
(257,-21,qs),
(303,0,l),
(278,94,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 32 values pushed */
10 1 1 0 1 76 19 9 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 35 38 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 302;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = tilde;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(110,649,o),
(146,649,qs),
(158,649,o),
(184,638,o),
(197,631,qs),
(218,618,o),
(258,604,o),
(282,604,qs),
(346,604,o),
(441,686,o),
(474,779,q),
(365,779,l),
(349,732,o),
(312,732,qs),
(300,732,o),
(279,741,o),
(262,751,qs),
(240,764,o),
(200,778,o),
(176,778,qs),
(112,778,o),
(17,695,o),
(-16,602,q),
(92,602,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 1 4 3 1 89 2 1 0 0 4 3 0 4 105 0 1 1 3 98 6 5 2 3 1 3 82 0 0 0 23 0 23 36 34 17 36 34 7 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 458;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = hungarumlaut;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(112,845,l),
(-12,601,l),
(121,601,l),
(280,845,l)
);
},
{
closed = 1;
nodes = (
(344,601,l),
(526,845,l),
(358,845,l),
(211,601,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 26 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 3 1 0 1 0 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 513;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = Wgrave;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(103,0,l),
(379,0,l),
(532,402,l),
(543,0,l),
(819,0,l),
(1106,708,l),
(867,708,l),
(725,262,l),
(707,708,l),
(465,708,l),
(291,262,l),
(305,708,l),
(66,708,l)
);
},
{
closed = 1;
nodes = (
(723,746,l),
(749,894,l),
(510,1004,l),
(481,840,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 5 4 1 3 0 0 28 77 3 1 2 2 29 2 78 0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 1100;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = wgrave;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,0,l),
(306,0,l),
(434,318,l),
(446,0,l),
(696,0,l),
(930,564,l),
(725,564,l),
(615,217,l),
(600,564,l),
(363,564,l),
(229,221,l),
(243,564,l),
(23,564,l)
);
},
{
closed = 1;
nodes = (
(612,602,l),
(638,750,l),
(399,860,l),
(370,696,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 5 4 1 3 0 0 31 77 3 1 2 2 29 2 78 0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 903;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = Wacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(103,0,l),
(379,0,l),
(532,402,l),
(543,0,l),
(819,0,l),
(1106,708,l),
(867,708,l),
(725,262,l),
(707,708,l),
(465,708,l),
(291,262,l),
(305,708,l),
(66,708,l)
);
},
{
closed = 1;
nodes = (
(740,840,l),
(769,1004,l),
(490,894,l),
(464,746,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 5 4 1 3 0 0 28 77 3 1 2 2 29 2 78 0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 1100;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = wacute;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(56,0,l),
(306,0,l),
(434,318,l),
(446,0,l),
(696,0,l),
(930,564,l),
(725,564,l),
(615,217,l),
(600,564,l),
(363,564,l),
(229,221,l),
(243,564,l),
(23,564,l)
);
},
{
closed = 1;
nodes = (
(629,696,l),
(658,860,l),
(379,750,l),
(353,602,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 5 4 1 3 0 0 31 77 3 1 2 2 29 2 78 0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 903;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = Wdieresis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(109,0,l),
(385,0,l),
(538,402,l),
(549,0,l),
(825,0,l),
(1112,708,l),
(873,708,l),
(731,262,l),
(713,708,l),
(471,708,l),
(297,262,l),
(311,708,l),
(72,708,l)
);
},
{
closed = 1;
nodes = (
(526,764,o),
(585,813,o),
(591,849,qs),
(598,887,o),
(558,936,o),
(520,936,qs),
(484,936,o),
(426,886,o),
(419,849,qs),
(413,813,o),
(453,764,o),
(489,764,qs)
);
},
{
closed = 1;
nodes = (
(751,764,o),
(810,813,o),
(816,849,qs),
(823,887,o),
(783,936,o),
(745,936,qs),
(709,936,o),
(651,886,o),
(644,849,qs),
(638,813,o),
(678,764,o),
(714,764,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
9 4 1 3 2 0 1 76 7 1 5 11 8 10 3 6 0 5 6 105 9 4 1 3 0 0 28 77 3 1 2 2 29 2 78 25 25 13 13 0 0 25 36 25 35 31 29 13 24 13 23 19 17 0 12 0 12 18 17 18 18 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 1100;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = wdieresis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,0,l),
(312,0,l),
(440,318,l),
(452,0,l),
(702,0,l),
(936,564,l),
(731,564,l),
(621,217,l),
(606,564,l),
(369,564,l),
(235,221,l),
(249,564,l),
(29,564,l)
);
},
{
closed = 1;
nodes = (
(415,620,o),
(474,669,o),
(480,705,qs),
(487,743,o),
(447,792,o),
(409,792,qs),
(373,792,o),
(315,742,o),
(308,705,qs),
(302,669,o),
(342,620,o),
(378,620,qs)
);
},
{
closed = 1;
nodes = (
(640,620,o),
(699,669,o),
(705,705,qs),
(712,743,o),
(672,792,o),
(634,792,qs),
(598,792,o),
(540,742,o),
(533,705,qs),
(527,669,o),
(567,620,o),
(603,620,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */
9 4 1 3 2 0 1 76 7 1 5 11 8 10 3 6 0 5 6 105 9 4 1 3 0 0 31 77 3 1 2 2 29 2 78 25 25 13 13 0 0 25 36 25 35 31 29 13 24 13 23 19 17 0 12 0 12 18 17 18 18 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 903;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = uni1EBC;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(565,708,l),
(93,708,l),
(-32,0,l),
(440,0,l),
(472,177,l),
(222,177,l),
(239,277,l),
(459,277,l),
(489,444,l),
(269,444,l),
(284,531,l),
(534,531,l)
);
},
{
closed = 1;
nodes = (
(224,796,o),
(260,796,qs),
(272,796,o),
(298,785,o),
(311,778,qs),
(332,765,o),
(372,751,o),
(396,751,qs),
(460,751,o),
(555,833,o),
(588,926,q),
(479,926,l),
(463,879,o),
(426,879,qs),
(414,879,o),
(393,888,o),
(376,898,qs),
(354,911,o),
(314,925,o),
(290,925,qs),
(226,925,o),
(131,842,o),
(98,749,q),
(206,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
8 1 6 0 10 9 6 10 105 0 7 13 11 2 9 4 7 9 106 0 0 0 1 2 0 1 103 12 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 12 12 0 0 12 35 12 35 34 32 28 26 24 23 22 20 16 14 0 11 0 11 17 17 17 17 17 14 8 27 
CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
note = uni1EBC;
unicode = 7868;
},
{
glyphname = uni1EBD;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(336,397,o),
(367,368,o),
(362,340,q),
(230,340,l),
(250,397,o),
(309,397,qs)
);
},
{
closed = 1;
nodes = (
(294,170,o),
(258,170,qs),
(202,170,o),
(211,243,q),
(567,243,l),
(574,264,o),
(578,287,qs),
(593,374,o),
(543,502,o),
(424,571,o),
(340,571,qs),
(256,571,o),
(113,501,o),
(17,370,o),
(1,282,qs),
(-14,194,o),
(35,63,o),
(154,-7,o),
(238,-7,qs),
(308,-7,o),
(435,48,o),
(529,143,o),
(551,203,q),
(316,203,l)
);
},
{
closed = 1;
nodes = (
(238,656,o),
(274,656,qs),
(286,656,o),
(312,645,o),
(325,638,qs),
(347,625,o),
(386,611,o),
(410,611,qs),
(474,611,o),
(570,693,o),
(602,786,q),
(493,786,l),
(478,739,o),
(441,739,qs),
(429,739,o),
(407,748,o),
(390,758,qs),
(368,771,o),
(329,785,o),
(305,785,qs),
(241,785,o),
(145,702,o),
(113,609,q),
(221,609,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
26 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
14 1 6 4 5 5 6 114 9 1 7 0 11 10 7 11 105 0 0 0 4 6 0 4 103 15 12 2 10 10 8 97 0 8 8 34 77 13 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
14 1 6 4 5 5 6 114 9 1 7 0 11 10 7 11 105 0 8 15 12 2 10 3 8 10 106 0 0 0 4 6 0 4 103 13 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
14 1 6 4 5 4 6 5 128 9 1 7 0 11 10 7 11 105 0 8 15 12 2 10 3 8 10 106 0 0 0 4 6 0 4 103 13 1 1 1 3 97 0 3 3 37 77 0 5 5 2 98 0 2 2 35 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
30 30 6 6 0 0 30 53 30 53 52 50 46 44 42 41 40 38 34 32 6 29 6 29 28 26 25 24 19 17 11 9 0 5 0 4 17 16 8 23 
CALL[ ]	/* CallFunction */";
};
width = 616;
}
);
note = uni1EBD;
unicode = 7869;
},
{
glyphname = Ygrave;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(203,215,l),
(165,0,l),
(387,0,l),
(425,215,l),
(766,708,l),
(516,708,l),
(359,457,l),
(290,708,l),
(36,708,l)
);
},
{
closed = 1;
nodes = (
(537,749,l),
(563,897,l),
(324,1007,l),
(295,843,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
7 4 1 3 1 0 1 76 12 11 10 9 4 0 74 3 2 2 0 0 28 77 0 1 1 29 1 78 0 0 0 8 0 8 18 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = ygrave;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(340,278,l),
(284,564,l),
(37,564,l),
(178,28,l),
(-17,-270,l),
(226,-270,l),
(734,564,l),
(489,564,l)
);
},
{
closed = 1;
nodes = (
(521,602,l),
(547,750,l),
(308,860,l),
(279,696,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
6 3 2 0 1 1 76 11 10 9 8 4 1 74 3 2 2 1 1 31 77 0 0 0 33 0 78 0 0 0 7 0 7 18 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni1EF8;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,215,l),
(172,0,l),
(394,0,l),
(432,215,l),
(773,708,l),
(523,708,l),
(366,457,l),
(297,708,l),
(43,708,l)
);
},
{
closed = 1;
nodes = (
(308,796,o),
(344,796,qs),
(356,796,o),
(382,785,o),
(395,778,qs),
(416,765,o),
(456,751,o),
(480,751,qs),
(544,751,o),
(639,833,o),
(672,926,q),
(563,926,l),
(547,879,o),
(510,879,qs),
(498,879,o),
(477,888,o),
(460,898,qs),
(438,911,o),
(398,925,o),
(374,925,qs),
(310,925,o),
(215,842,o),
(182,749,q),
(290,749,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
7 4 1 3 1 0 1 76 5 1 3 0 7 6 3 7 105 0 4 10 8 2 6 0 4 6 106 9 2 2 0 0 28 77 0 1 1 29 1 78 9 9 0 0 9 32 9 32 31 29 25 23 21 20 19 17 13 11 0 8 0 8 18 18 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = uni1EF8;
unicode = 7928;
},
{
glyphname = uni1EF9;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,278,l),
(292,564,l),
(45,564,l),
(185,28,l),
(-9,-270,l),
(234,-270,l),
(742,564,l),
(497,564,l)
);
},
{
closed = 1;
nodes = (
(292,649,o),
(328,649,qs),
(340,649,o),
(366,638,o),
(378,631,qs),
(400,618,o),
(440,604,o),
(464,604,qs),
(528,604,o),
(623,686,o),
(655,779,q),
(546,779,l),
(531,732,o),
(494,732,qs),
(482,732,o),
(461,741,o),
(444,751,qs),
(422,764,o),
(382,778,o),
(358,778,qs),
(294,778,o),
(199,695,o),
(166,602,q),
(274,602,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
6 3 2 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
5 1 3 0 7 6 3 7 105 10 8 2 6 6 4 97 0 4 4 34 77 9 2 2 1 1 31 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
5 1 3 0 7 6 3 7 105 0 4 10 8 2 6 1 4 6 106 9 2 2 1 1 31 77 0 0 0 33 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
8 8 0 0 8 31 8 31 30 28 24 22 20 19 18 16 12 10 0 7 0 7 18 17 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = uni1EF9;
unicode = 7929;
},
{
glyphname = endash;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,250,l),
(612,250,l),
(644,433,l),
(71,433,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 683;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,250,l),
(865,250,l),
(897,433,l),
(71,433,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 936;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = quoteleft;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,708,l),
(24,413,l),
(244,413,l),
(340,708,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 28 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 378;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,413,l),
(354,708,l),
(134,708,l),
(38,413,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 0 95 0 0 0 28 1 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 378;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = quotesinglbase;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,-161,l),
(146,-161,l),
(342,205,l),
(122,205,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 276;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblleft;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,708,l),
(24,413,l),
(244,413,l),
(340,708,l)
);
},
{
closed = 1;
nodes = (
(514,413,l),
(610,708,l),
(464,708,l),
(294,413,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 0 0 1 95 2 1 1 1 28 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(454,413,l),
(624,708,l),
(404,708,l),
(308,413,l)
);
},
{
closed = 1;
nodes = (
(184,413,l),
(354,708,l),
(134,708,l),
(38,413,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 0 95 2 1 0 0 28 1 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quotedblbase;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,-161,l),
(146,-161,l),
(342,205,l),
(122,205,l)
);
},
{
closed = 1;
nodes = (
(494,-161,l),
(690,205,l),
(470,205,l),
(348,-161,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
2 4 2 1 0 0 1 87 2 4 2 1 1 0 95 3 1 0 1 0 79 0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 696;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = dagger;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(498,549,l),
(563,794,l),
(341,794,l),
(319,549,l),
(104,564,l),
(75,398,l),
(295,413,l),
(153,-270,l),
(375,-270,l),
(474,413,l),
(690,398,l),
(719,564,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 4 3 4 133 2 1 0 0 3 95 5 1 3 3 31 77 0 1 1 33 1 78 17 17 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 717;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = daggerdbl;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(719,564,l),
(498,549,l),
(562,794,l),
(340,794,l),
(319,549,l),
(103,564,l),
(74,398,l),
(295,413,l),
(241,111,l),
(26,127,l),
(-3,-40,l),
(217,-25,l),
(152,-270,l),
(374,-270,l),
(396,-25,l),
(613,-40,l),
(642,127,l),
(420,111,l),
(474,413,l),
(690,398,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
10 9 2 1 4 0 3 1 76 0 5 4 5 133 2 1 0 3 1 3 0 1 128 8 7 2 3 3 4 95 6 1 4 4 31 77 0 1 1 33 1 78 0 0 0 19 0 19 17 17 17 19 17 17 19 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 716;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = bullet;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(285,166,o),
(370,210,o),
(428,287,o),
(436,333,qs),
(444,380,o),
(414,457,o),
(345,502,o),
(298,502,qs),
(252,502,o),
(167,457,o),
(108,380,o),
(100,333,qs),
(92,287,o),
(123,210,o),
(192,166,o),
(238,166,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 15 0 14 38 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = ellipsis;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(570,149,o),
(511,212,o),
(454,212,qs),
(396,212,o),
(315,149,o),
(307,101,qs),
(299,54,o),
(358,-8,o),
(416,-8,qs),
(473,-8,o),
(554,54,o),
(562,101,qs)
);
},
{
closed = 1;
nodes = (
(845,149,o),
(786,212,o),
(729,212,qs),
(671,212,o),
(590,149,o),
(582,101,qs),
(574,54,o),
(633,-8,o),
(691,-8,qs),
(748,-8,o),
(829,54,o),
(837,101,qs)
);
},
{
closed = 1;
nodes = (
(295,149,o),
(236,212,o),
(179,212,qs),
(121,212,o),
(40,149,o),
(32,101,qs),
(24,54,o),
(83,-8,o),
(141,-8,qs),
(198,-8,o),
(279,54,o),
(287,101,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
5 3 2 1 1 0 97 4 2 2 0 0 35 0 78 36 36 36 36 36 33 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 869;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = perthousand;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(37,452,o),
(121,360,o),
(202,360,qs),
(282,360,o),
(397,452,o),
(413,540,qs),
(428,628,o),
(345,721,o),
(265,721,qs),
(184,721,o),
(68,628,o),
(53,540,qs)
);
},
{
closed = 1;
nodes = (
(259,592,o),
(273,566,o),
(269,540,qs),
(264,515,o),
(241,489,o),
(223,489,qs),
(189,489,o),
(198,540,qs),
(207,592,o),
(241,592,qs)
);
},
{
closed = 1;
nodes = (
(93,0,l),
(305,0,l),
(804,711,l),
(592,711,l)
);
},
{
closed = 1;
nodes = (
(469,83,o),
(553,-10,o),
(633,-10,qs),
(714,-10,o),
(828,83,o),
(843,171,qs),
(859,259,o),
(777,352,o),
(696,352,qs),
(616,352,o),
(500,259,o),
(484,171,qs)
);
},
{
closed = 1;
nodes = (
(690,223,o),
(704,196,o),
(699,171,qs),
(695,145,o),
(671,119,o),
(654,119,qs),
(619,119,o),
(628,171,qs),
(638,223,o),
(673,223,qs)
);
},
{
closed = 1;
nodes = (
(856,83,o),
(940,-10,o),
(1021,-10,qs),
(1101,-10,o),
(1216,83,o),
(1231,171,qs),
(1247,259,o),
(1164,352,o),
(1084,352,qs),
(1003,352,o),
(887,259,o),
(871,171,qs)
);
},
{
closed = 1;
nodes = (
(1077,223,o),
(1092,196,o),
(1087,171,qs),
(1083,145,o),
(1059,119,o),
(1041,119,qs),
(1007,119,o),
(1016,171,qs),
(1026,223,o),
(1060,223,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 2 0 1 6 2 1 105 10 1 6 17 13 16 3 9 8 6 9 106 14 1 3 3 0 97 15 5 2 0 0 34 77 12 1 8 8 4 97 11 7 2 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 2 0 1 6 2 1 105 10 1 6 17 13 16 3 9 8 6 9 106 15 1 5 5 28 77 14 1 3 3 0 97 0 0 0 34 77 0 4 4 29 77 12 1 8 8 7 97 11 1 7 7 35 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 44 values pushed */
60 60 38 38 22 22 12 12 60 69 60 68 64 62 57 55 51 49 38 47 38 46 42 40 35 33 29 27 22 25 22 25 24 23 12 21 12 20 37 36 33 18 8 25 
CALL[ ]	/* CallFunction */";
};
width = 1284;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = guilsinglleft;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(244,295,l),
(354,470,l),
(153,470,l),
(45,295,l),
(91,120,l),
(292,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 5 0 5 18 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,120,l),
(328,295,l),
(283,470,l),
(81,470,l),
(130,295,l),
(19,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = fraction;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-90,0,l),
(122,0,l),
(621,711,l),
(409,711,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 28 77 0 0 0 29 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = Euro;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,343,l),
(13,343,l),
(-5,244,l),
(61,244,l),
(71,129,o),
(224,-5,o),
(354,-5,qs),
(446,-5,o),
(603,64,o),
(716,190,o),
(746,274,q),
(512,274,l),
(490,239,o),
(424,200,o),
(386,200,qs),
(329,200,o),
(303,244,q),
(431,244,l),
(449,343,l),
(290,343,l),
(292,355,l),
(295,371,l),
(454,371,l),
(471,471,l),
(347,471,l),
(387,510,o),
(440,510,qs),
(478,510,o),
(530,471,o),
(540,436,q),
(774,436,l),
(774,520,o),
(705,646,o),
(572,715,o),
(480,715,qs),
(351,715,o),
(153,584,o),
(102,471,q),
(35,471,l),
(18,371,l),
(70,371,l),
(67,355,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 79 values pushed */
0 3 1 0 1 3 0 128 0 10 7 8 7 10 8 128 5 1 1 6 1 0 7 1 0 103 13 1 7 12 1 8 9 7 8 103 0 4 4 2 97 0 2 2 34 77 0 9 9 11 97 0 11 11 35 11 78 40 39 38 37 35 33 30 29 27 25 17 18 17 17 34 19 34 17 16 14 8 31 
CALL[ ]	/* CallFunction */";
};
width = 790;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = uni20BA;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(402,712,l),
(177,712,l),
(146,538,l),
(39,522,l),
(17,397,l),
(124,412,l),
(118,379,l),
(12,364,l),
(-11,235,l),
(95,249,l),
(57,31,l),
(237,-2,o),
(356,-2,qs),
(500,-2,o),
(687,96,o),
(801,307,o),
(831,481,q),
(606,481,l),
(605,476,ls),
(590,388,o),
(554,281,o),
(469,206,o),
(391,206,qs),
(346,206,o),
(314,213,q),
(326,281,l),
(441,296,l),
(464,426,l),
(349,410,l),
(355,444,l),
(465,459,l),
(488,588,l),
(377,572,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
32 29 28 0 4 1 3 27 26 25 24 23 22 7 6 5 4 3 2 1 13 0 1 21 1 2 0 3 76 0 1 3 0 3 1 0 128 0 3 3 28 77 0 0 0 2 98 0 2 2 29 2 78 26 35 35 40 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 819;
}
);
note = uni20BA;
unicode = 8378;
},
{
glyphname = uni20BD;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,542,l),
(439,542,ls),
(466,542,o),
(491,509,o),
(487,487,qs),
(483,462,o),
(448,432,o),
(420,432,qs),
(346,432,l)
);
},
{
closed = 1;
nodes = (
(-6,264,l),
(94,264,l),
(87,223,l),
(-13,223,l),
(-42,58,l),
(58,58,l),
(48,0,l),
(270,0,l),
(280,58,l),
(394,58,l),
(423,223,l),
(309,223,l),
(316,264,l),
(404,264,ls),
(534,264,o),
(695,386,o),
(712,486,qs),
(730,586,o),
(612,708,o),
(482,708,qs),
(172,708,l),
(124,432,l),
(24,432,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
12 10 11 3 0 9 1 3 4 0 3 103 8 1 4 7 1 5 6 4 5 103 0 1 1 2 95 0 2 2 28 77 0 6 6 29 6 78 9 9 1 0 9 31 9 31 30 29 28 27 26 25 24 23 22 21 20 19 18 16 12 10 7 5 0 8 1 8 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 709;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni2113;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-15,0,l),
(207,0,l),
(337,740,l),
(115,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 322;
}
);
note = uni2113;
unicode = 8467;
},
{
glyphname = trademark;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(38,581,l),
(124,581,l),
(85,358,l),
(239,358,l),
(278,581,l),
(364,581,l),
(387,708,l),
(61,708,l)
);
},
{
closed = 1;
nodes = (
(504,358,l),
(536,538,l),
(571,358,l),
(674,358,l),
(772,525,l),
(745,358,l),
(886,358,l),
(948,708,l),
(756,708,l),
(665,552,l),
(643,708,l),
(432,708,l),
(370,358,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
18 15 10 3 1 0 1 76 8 7 6 3 1 0 1 134 5 4 9 3 3 0 0 3 87 5 4 9 3 3 3 0 95 2 1 0 3 0 79 0 0 20 19 17 16 14 13 12 11 9 8 0 7 0 7 17 17 17 10 6 25 
CALL[ ]	/* CallFunction */";
};
width = 947;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = uni2126;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(25,317,o),
(42,209,o),
(80,167,q),
(-1,167,l),
(-30,0,l),
(237,0,l),
(267,172,l),
(254,226,o),
(248,306,o),
(257,355,qs),
(271,434,o),
(356,515,o),
(423,515,qs),
(490,515,o),
(546,434,o),
(532,355,qs),
(523,306,o),
(489,224,o),
(459,172,q),
(429,0,l),
(696,0,l),
(725,167,l),
(644,167,l),
(696,209,o),
(751,317,o),
(764,387,qs),
(782,491,o),
(713,642,o),
(561,720,o),
(459,720,qs),
(356,720,o),
(178,642,o),
(56,491,o),
(38,387,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
26 14 2 1 3 1 76 0 0 0 3 1 0 3 105 5 1 1 2 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 17 22 38 17 22 34 6 6 28 
CALL[ ]	/* CallFunction */";
};
width = 791;
}
);
note = uni2126;
unicode = 8486;
},
{
glyphname = estimated;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(472,117,o),
(337,117,qs),
(278,117,o),
(215,140,q),
(247,324,l),
(707,324,l),
(718,388,ls),
(734,476,o),
(679,628,o),
(540,721,o),
(434,721,qs),
(327,721,o),
(155,622,o),
(44,449,o),
(25,340,qs),
(6,232,o),
(69,75,o),
(214,-7,o),
(315,-7,qs),
(488,-7,o),
(644,133,q),
(588,216,l)
);
},
{
closed = 1;
nodes = (
(265,427,l),
(293,582,l),
(295,583,l),
(335,594,o),
(380,603,o),
(413,603,qs),
(489,603,o),
(530,586,q),
(502,427,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
27 22 2 5 4 21 17 2 3 2 2 76 0 1 0 4 5 1 4 105 0 5 0 2 3 5 2 103 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 20 35 34 20 38 33 6 6 28 
CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
note = estimated;
unicode = 8494;
},
{
glyphname = partialdiff;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(357,250,o),
(314,186,o),
(279,186,qs),
(255,186,o),
(230,226,o),
(237,267,qs),
(257,377,o),
(328,377,qs),
(350,377,o),
(374,344,o),
(368,311,qs)
);
},
{
closed = 1;
nodes = (
(-4,177,o),
(45,54,o),
(153,-6,o),
(225,-6,qs),
(379,-6,o),
(584,209,o),
(618,401,qs),
(646,560,o),
(535,740,o),
(399,740,qs),
(337,740,o),
(261,721,q),
(243,614,l),
(272,617,o),
(296,617,qs),
(363,617,o),
(426,573,o),
(435,527,q),
(406,561,o),
(337,561,qs),
(261,561,o),
(125,492,o),
(28,358,o),
(12,266,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
22 1 3 4 21 1 2 3 16 1 0 2 3 76 0 4 0 3 2 4 3 105 0 2 0 0 1 2 0 105 0 1 5 5 1 89 0 1 1 5 97 0 5 1 5 81 36 35 35 37 35 33 6 6 28 
CALL[ ]	/* CallFunction */";
};
width = 642;
}
);
note = partialdiff;
unicode = 8706;
},
{
glyphname = uni2206;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-13,168,l),
(-43,0,l),
(687,0,l),
(717,168,l),
(538,711,l),
(359,711,l)
);
},
{
closed = 1;
nodes = (
(404,460,l),
(488,168,l),
(216,168,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
7 1 2 1 1 76 4 1 2 2 1 75 3 1 1 2 1 133 4 1 2 0 0 2 87 4 1 2 2 0 95 0 0 2 0 79 6 6 0 0 6 8 6 8 0 5 0 5 18 5 6 23 
CALL[ ]	/* CallFunction */";
};
width = 770;
}
);
note = uni2206;
unicode = 8710;
},
{
glyphname = product;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,545,l),
(108,545,l),
(12,0,l),
(234,0,l),
(330,545,l),
(489,545,l),
(393,0,l),
(615,0,l),
(711,545,l),
(776,545,l),
(806,711,l),
(73,711,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
3 1 1 0 1 134 6 1 5 0 0 5 87 6 1 5 5 0 95 4 2 2 0 5 0 79 0 0 0 11 0 11 17 17 17 17 17 7 6 27 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = product;
unicode = 8719;
},
{
glyphname = summation;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(61,453,l),
(260,346,l),
(19,214,l),
(-27,-45,l),
(479,-45,l),
(509,123,l),
(217,123,l),
(462,268,l),
(491,435,l),
(312,544,l),
(583,544,l),
(613,711,l),
(107,711,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
11 10 9 4 3 5 1 0 1 76 4 1 3 0 0 1 3 0 103 0 1 2 2 1 87 0 1 1 2 95 0 2 1 2 79 0 0 0 12 0 12 17 19 17 5 6 25 
CALL[ ]	/* CallFunction */";
};
width = 586;
}
);
note = summation;
unicode = 8721;
},
{
glyphname = minus;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(4,250,l),
(470,250,l),
(502,433,l),
(36,433,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = uni2215;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-138,-198,l),
(75,-198,l),
(544,955,l),
(332,955,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 399;
}
);
note = uni2215;
unicode = 8725;
},
{
glyphname = uni2219;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,344,o),
(251,407,o),
(194,407,qs),
(136,407,o),
(55,344,o),
(47,296,qs),
(39,249,o),
(98,187,o),
(156,187,qs),
(213,187,o),
(294,249,o),
(302,296,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 36 33 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 349;
}
);
note = uni2219;
unicode = 8729;
},
{
glyphname = radical;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,-40,l),
(1078,927,l),
(954,927,l),
(415,206,l),
(314,472,l),
(-6,301,l),
(37,201,l),
(140,255,l),
(253,-40,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
4 3 2 1 4 1 0 1 76 0 0 1 0 133 0 1 1 118 17 21 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1020;
}
);
note = radical;
unicode = 8730;
},
{
glyphname = infinity;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(220,303,o),
(200,326,o),
(204,347,qs),
(208,369,o),
(236,393,o),
(255,393,qs),
(275,393,o),
(307,365,o),
(325,338,q),
(285,303,o),
(239,303,qs)
);
},
{
closed = 1;
nodes = (
(562,303,o),
(524,326,o),
(508,347,q),
(529,370,o),
(580,393,o),
(605,393,qs),
(625,393,o),
(645,370,o),
(641,348,qs),
(637,327,o),
(608,303,o),
(589,303,qs)
);
},
{
closed = 1;
nodes = (
(17,259,o),
(104,161,o),
(198,160,qs),
(253,159,o),
(353,203,o),
(392,242,q),
(428,204,o),
(519,160,o),
(585,160,qs),
(639,160,o),
(735,205,o),
(802,291,o),
(812,348,qs),
(828,437,o),
(741,534,o),
(646,535,qs),
(589,536,o),
(486,488,o),
(445,446,q),
(416,487,o),
(329,535,o),
(259,535,qs),
(206,535,o),
(110,490,o),
(43,405,o),
(33,347,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
29 1 0 4 19 1 2 1 0 42 1 6 1 3 76 5 1 4 2 1 0 1 4 0 105 9 3 8 3 1 6 6 1 89 9 3 8 3 1 1 6 97 7 1 6 1 6 81 11 11 0 0 46 44 40 38 33 31 27 25 11 22 11 21 17 15 0 10 0 9 35 10 6 23 
CALL[ ]	/* CallFunction */";
};
width = 844;
}
);
note = infinity;
unicode = 8734;
},
{
glyphname = integral;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-81,-120,o),
(-100,-120,qs),
(-117,-120,l),
(-169,-310,l),
(-156,-310,ls),
(-44,-310,o),
(115,-216,o),
(148,-98,qs),
(380,746,l),
(388,768,o),
(406,768,qs),
(424,768,l),
(476,958,l),
(463,958,ls),
(351,958,o),
(192,864,o),
(159,746,qs),
(-73,-98,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 3 0 1 105 0 3 2 2 3 89 0 3 3 2 97 0 2 3 2 81 33 36 33 34 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 312;
}
);
note = integral;
unicode = 8747;
},
{
glyphname = approxequal;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,107,o),
(181,139,o),
(208,139,qs),
(225,139,o),
(256,127,o),
(284,112,qs),
(316,93,o),
(372,72,o),
(408,72,qs),
(499,72,o),
(645,201,o),
(690,336,q),
(524,336,l),
(513,298,o),
(480,267,o),
(453,267,qs),
(436,267,o),
(404,280,o),
(379,294,qs),
(346,313,o),
(290,334,o),
(254,334,qs),
(163,334,o),
(18,206,o),
(-28,70,q),
(136,70,l)
);
},
{
closed = 1;
nodes = (
(197,382,o),
(230,414,o),
(257,414,qs),
(274,414,o),
(305,402,o),
(332,387,qs),
(365,368,o),
(420,347,o),
(456,347,qs),
(547,347,o),
(694,476,o),
(739,611,q),
(573,611,l),
(561,573,o),
(529,542,o),
(502,542,qs),
(485,542,o),
(453,555,o),
(427,569,qs),
(395,588,o),
(338,609,o),
(302,609,qs),
(211,609,o),
(67,481,o),
(21,345,q),
(185,345,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
8 1 6 0 10 9 6 10 105 0 7 13 11 2 9 0 7 9 105 0 1 4 3 1 89 2 1 0 0 4 3 0 4 105 0 1 1 3 97 12 5 2 3 1 3 81 26 26 0 0 26 51 26 51 49 47 43 41 39 38 36 34 30 28 0 25 0 25 36 34 18 36 34 14 6 27 
CALL[ ]	/* CallFunction */";
};
width = 711;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = notequal;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-39,-1,l),
(68,-1,l),
(156,99,l),
(564,99,l),
(599,300,l),
(332,300,l),
(402,379,l),
(613,379,l),
(648,580,l),
(578,580,l),
(666,680,l),
(560,680,l),
(472,580,l),
(62,580,l),
(27,379,l),
(295,379,l),
(226,300,l),
(13,300,l),
(-22,99,l),
(49,99,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 3 2 3 133 0 8 7 8 134 4 1 2 5 1 1 0 2 1 103 6 1 0 7 7 0 87 6 1 0 0 7 95 10 9 2 7 0 7 79 0 0 0 19 0 19 17 17 17 17 17 17 17 17 17 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 626;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = lessequal;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-6,-60,l),
(418,-60,l),
(448,111,l),
(24,111,l)
);
},
{
closed = 1;
nodes = (
(191,195,l),
(463,195,l),
(315,375,l),
(526,556,l),
(254,556,l),
(42,375,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
9 6 2 3 2 1 76 0 2 3 2 133 0 3 1 3 133 4 1 1 0 0 1 87 4 1 1 1 0 95 0 0 1 0 79 0 0 8 7 5 4 0 3 0 3 17 5 6 23 
CALL[ ]	/* CallFunction */";
};
width = 492;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = greaterequal;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,195,l),
(494,375,l),
(346,556,l),
(74,556,l),
(221,375,l),
(11,195,l)
);
},
{
closed = 1;
nodes = (
(390,-60,l),
(420,111,l),
(-4,111,l),
(-34,-60,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 492;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lozenge;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(10,355,l),
(238,79,l),
(562,355,l),
(336,630,l)
);
},
{
closed = 1;
nodes = (
(299,423,l),
(355,355,l),
(275,286,l),
(218,355,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
6 4 3 1 2 50 
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = lozenge;
unicode = 9674;
},
{
glyphname = fi;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,0,l),
(222,0,l),
(288,379,l),
(411,379,l),
(345,0,l),
(567,0,l),
(666,564,l),
(323,564,l),
(332,590,o),
(366,608,o),
(397,604,q),
(430,793,l),
(297,805,o),
(122,684,o),
(99,564,q),
(39,564,l),
(6,379,l),
(66,379,l)
);
},
{
closed = 1;
nodes = (
(618,589,o),
(698,647,o),
(706,694,qs),
(714,740,o),
(655,799,o),
(597,799,qs),
(539,799,o),
(459,740,o),
(451,694,qs),
(443,647,o),
(501,589,o),
(560,589,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
6 5 2 7 6 1 76 0 6 9 1 7 0 6 7 105 8 5 2 3 3 0 95 1 1 0 0 31 77 4 1 2 2 29 2 78 18 18 0 0 18 29 18 28 24 22 0 17 0 17 17 17 17 23 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 712;
}
);
note = fi;
unicode = 64257;
},
{
glyphname = fl;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,0,l),
(222,0,l),
(289,379,l),
(372,379,l),
(404,564,l),
(323,564,l),
(333,591,o),
(373,609,o),
(411,604,q),
(445,793,l),
(304,806,o),
(122,684,o),
(99,564,q),
(39,564,l),
(7,379,l),
(67,379,l)
);
},
{
closed = 1;
nodes = (
(365,0,l),
(587,0,l),
(717,740,l),
(495,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
6 1 0 6 1 76 5 1 6 74 7 4 2 2 2 0 95 1 1 0 0 31 77 8 1 6 6 3 95 5 1 3 3 29 3 78 16 16 0 0 16 19 16 19 18 17 0 15 0 15 17 17 23 17 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 707;
}
);
note = fl;
unicode = 64258;
},
{
glyphname = exclam.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(109,281,l),
(299,281,l),
(409,755,l),
(167,755,l)
);
},
{
closed = 1;
nodes = (
(264,0,l),
(302,212,l),
(82,212,l),
(44,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 2 0 1 131 4 1 1 1 132 0 2 2 3 95 0 3 3 21 2 78 0 0 7 6 5 4 0 3 0 3 17 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 442;
}
);
note = exclam.ss01;
},
{
glyphname = comma.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(21,-61,l),
(108,-61,l),
(106,-72,ls),
(100,-108,o),
(70,-132,o),
(41,-132,q),
(27,-210,l),
(119,-210,o),
(226,-103,o),
(240,-23,qs),
(247,18,o),
(240,100,o),
(226,131,q),
(55,131,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 0 0 1 2 0 1 109 0 2 3 3 2 91 0 2 2 3 95 4 1 3 2 3 79 0 0 0 13 0 13 19 17 21 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 276;
}
);
note = comma.ss01;
},
{
glyphname = period.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(9,0,l),
(229,0,l),
(267,212,l),
(47,212,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 0 95 0 0 0 21 1 78 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 277;
}
);
note = period.ss01;
},
{
glyphname = colon.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(9,0,l),
(229,0,l),
(266,212,l),
(46,212,l)
);
},
{
closed = 1;
nodes = (
(298,391,l),
(335,603,l),
(115,603,l),
(78,391,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
0 3 0 2 3 2 99 4 1 1 1 0 95 0 0 0 21 1 78 0 0 7 6 5 4 0 3 0 3 17 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 332;
}
);
note = colon.ss01;
},
{
glyphname = semicolon.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(78,-61,l),
(165,-61,l),
(164,-72,ls),
(157,-108,o),
(127,-132,o),
(98,-132,q),
(84,-210,l),
(176,-210,o),
(283,-103,o),
(297,-23,qs),
(304,18,o),
(297,100,o),
(283,131,q),
(112,131,l)
);
},
{
closed = 1;
nodes = (
(144,370,l),
(364,370,l),
(402,582,l),
(182,582,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 0 0 1 2 0 1 109 0 2 6 1 3 4 2 3 107 0 4 5 5 4 91 0 4 4 5 95 7 1 5 4 5 79 14 14 0 0 14 17 14 17 16 15 0 13 0 13 19 17 21 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 431;
}
);
note = semicolon.ss01;
},
{
glyphname = question.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(22,0,l),
(242,0,l),
(279,212,l),
(59,212,l)
);
},
{
closed = 1;
nodes = (
(261,568,o),
(284,593,o),
(303,593,qs),
(318,593,o),
(334,573,o),
(331,556,qs),
(325,525,o),
(259,498,o),
(199,498,qs),
(115,498,l),
(77,286,l),
(285,286,l),
(298,357,l),
(361,358,o),
(468,409,o),
(538,498,o),
(548,557,qs),
(567,664,o),
(454,773,o),
(343,773,qs),
(257,773,o),
(129,712,o),
(56,609,o),
(48,548,q),
(257,548,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 3 4 5 4 3 5 131 9 1 7 5 6 6 7 117 0 4 0 5 7 4 5 107 0 6 0 2 6 2 102 8 1 1 1 0 95 0 0 0 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 3 4 5 4 3 5 131 9 1 7 5 6 5 7 6 131 0 4 0 5 7 4 5 107 0 6 0 2 6 2 102 8 1 1 1 0 95 0 0 0 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
4 4 0 0 4 28 4 28 26 24 20 18 17 16 15 14 9 7 0 3 0 3 17 10 7 23 
CALL[ ]	/* CallFunction */";
};
width = 538;
}
);
note = question.ss01;
},
{
glyphname = exclamdown.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,284,l),
(333,284,l),
(275,-190,l),
(33,-190,l)
);
},
{
closed = 1;
nodes = (
(178,565,l),
(398,565,l),
(360,353,l),
(140,353,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
4 1 1 0 1 136 0 0 3 0 136 5 1 3 2 2 3 91 5 1 3 3 2 95 0 2 3 2 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23 
CALL[ ]	/* CallFunction */";
};
width = 442;
}
);
note = exclamdown.ss01;
},
{
glyphname = periodcentered.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,190,l),
(251,190,l),
(289,402,l),
(69,402,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 91 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = periodcentered.ss01;
},
{
glyphname = questiondown.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(516,564,l),
(296,564,l),
(259,352,l),
(479,352,l)
);
},
{
closed = 1;
nodes = (
(277,-4,o),
(254,-29,o),
(235,-29,qs),
(220,-29,o),
(204,-9,o),
(207,8,qs),
(213,39,o),
(279,66,o),
(339,66,qs),
(423,66,l),
(461,278,l),
(253,278,l),
(240,207,l),
(177,206,o),
(70,155,o),
(0,66,o),
(-10,7,qs),
(-29,-100,o),
(84,-209,o),
(195,-209,qs),
(281,-209,o),
(409,-148,o),
(482,-45,o),
(490,16,q),
(281,16,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
9 1 7 6 5 6 7 117 0 3 5 4 5 3 4 131 0 2 0 6 7 2 6 109 0 5 0 4 1 5 4 107 8 1 1 1 0 95 0 0 0 20 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
9 1 7 6 5 6 7 117 0 3 5 4 5 3 4 131 0 2 0 6 7 2 6 109 0 5 0 4 1 5 4 107 8 1 1 0 0 1 91 8 1 1 1 0 95 0 0 1 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
9 1 7 6 5 6 7 117 0 3 5 4 5 3 4 131 0 2 0 6 7 2 6 109 0 5 0 4 1 5 4 107 8 1 1 1 0 95 0 0 0 20 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
9 1 7 6 5 6 7 117 0 3 5 4 5 3 4 131 0 2 0 6 7 2 6 109 0 5 0 4 1 5 4 107 8 1 1 0 0 1 91 8 1 1 1 0 95 0 0 1 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
9 1 7 6 5 6 7 117 0 3 5 4 5 3 4 131 0 2 0 6 7 2 6 109 0 5 0 4 1 5 4 107 8 1 1 1 0 95 0 0 0 20 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
28 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
9 1 7 6 5 6 7 117 0 3 5 4 5 3 4 131 0 2 0 6 7 2 6 109 0 5 0 4 1 5 4 107 8 1 1 0 0 1 91 8 1 1 1 0 95 0 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
9 1 7 6 5 6 7 5 131 0 3 5 4 5 3 4 131 0 2 0 6 7 2 6 109 0 5 0 4 1 5 4 107 8 1 1 0 0 1 91 8 1 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
4 4 0 0 4 28 4 28 26 24 20 18 17 16 15 14 9 7 0 3 0 3 17 10 7 23 
CALL[ ]	/* CallFunction */";
};
width = 536;
}
);
note = questiondown.ss01;
},
{
glyphname = divide.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(2,240,l),
(513,240,l),
(549,441,l),
(38,441,l)
);
},
{
closed = 1;
nodes = (
(324,0,l),
(361,212,l),
(141,212,l),
(104,0,l)
);
},
{
closed = 1;
nodes = (
(407,469,l),
(444,681,l),
(224,681,l),
(187,469,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 0 6 1 1 5 0 1 107 0 5 0 4 5 4 99 0 2 2 3 95 0 3 3 21 2 78 0 0 11 10 9 8 7 6 5 4 0 3 0 3 17 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = divide.ss01;
},
{
glyphname = uni02BC.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(52,730,l),
(124,730,l),
(122,718,ls),
(115,681,o),
(80,644,o),
(54,644,q),
(40,565,l),
(121,565,o),
(221,664,o),
(235,742,qs),
(247,812,o),
(233,876,q),
(77,876,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 0 2 1 3 2 103 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 0 0 0 12 0 12 19 17 20 5 6 25 
CALL[ ]	/* CallFunction */";
};
width = 281;
}
);
note = uni02BC.ss01;
},
{
glyphname = quoteleft.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,712,l),
(159,712,l),
(160,723,ls),
(174,798,o),
(229,798,q),
(242,876,l),
(161,876,o),
(60,777,o),
(46,700,qs),
(35,633,o),
(49,565,q),
(205,565,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 0 2 1 3 2 107 0 1 0 0 1 93 0 1 1 0 97 0 0 1 0 81 0 0 0 11 0 11 18 17 20 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 281;
}
);
note = quoteleft.ss01;
},
{
glyphname = quoteright.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(52,730,l),
(124,730,l),
(122,718,ls),
(115,681,o),
(80,644,o),
(54,644,q),
(40,565,l),
(121,565,o),
(221,664,o),
(235,742,qs),
(247,812,o),
(233,876,q),
(77,876,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 0 0 1 2 0 1 109 0 2 3 3 2 91 0 2 2 3 95 4 1 3 2 3 79 0 0 0 12 0 12 19 17 20 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 281;
}
);
note = quoteright.ss01;
},
{
glyphname = quotedblleft.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(455,712,l),
(383,712,l),
(384,723,ls),
(398,798,o),
(453,798,q),
(466,876,l),
(385,876,o),
(285,777,o),
(271,700,qs),
(259,630,o),
(273,565,q),
(429,565,l)
);
},
{
closed = 1;
nodes = (
(231,712,l),
(159,712,l),
(160,723,ls),
(174,798,o),
(229,798,q),
(242,876,l),
(161,876,o),
(60,777,o),
(46,700,qs),
(35,633,o),
(49,565,q),
(205,565,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
9 7 8 3 3 6 1 2 1 3 2 107 5 1 1 0 0 1 93 5 1 1 1 0 97 4 1 0 1 0 81 12 12 0 0 12 23 12 23 22 21 19 18 17 16 0 11 0 11 18 17 20 10 7 25 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = quotedblleft.ss01;
},
{
glyphname = quotedblright.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(276,730,l),
(348,730,l),
(346,718,ls),
(333,644,o),
(278,644,q),
(264,565,l),
(345,565,o),
(446,664,o),
(460,742,qs),
(472,810,o),
(457,876,q),
(301,876,l)
);
},
{
closed = 1;
nodes = (
(52,730,l),
(124,730,l),
(122,718,ls),
(115,681,o),
(80,644,o),
(54,644,q),
(40,565,l),
(121,565,o),
(221,664,o),
(235,742,qs),
(247,812,o),
(233,876,q),
(77,876,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
4 1 0 5 1 1 2 0 1 109 6 1 2 3 3 2 91 6 1 2 2 3 95 9 7 8 3 3 2 3 79 12 12 0 0 12 24 12 24 23 22 19 18 17 16 0 11 0 11 18 17 20 10 7 25 
CALL[ ]	/* CallFunction */";
};
width = 506;
}
);
note = quotedblright.ss01;
},
{
glyphname = ellipsis.ss01;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(23,0,l),
(243,0,l),
(281,212,l),
(61,212,l)
);
},
{
closed = 1;
nodes = (
(523,0,l),
(561,212,l),
(341,212,l),
(303,0,l)
);
},
{
closed = 1;
nodes = (
(793,0,l),
(831,212,l),
(611,212,l),
(573,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 2 6 3 1 1 0 95 5 3 2 0 0 21 1 78 0 0 11 10 9 8 7 6 5 4 0 3 0 3 17 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 854;
}
);
note = ellipsis.ss01;
},
{
glyphname = a.ss02;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(544,0,l),
(602,332,ls),
(615,403,o),
(565,512,o),
(448,572,o),
(364,572,qs),
(292,572,o),
(163,516,o),
(66,417,o),
(40,354,q),
(264,354,l),
(274,371,o),
(309,394,o),
(332,394,qs),
(360,394,o),
(385,358,o),
(378,323,q),
(281,323,ls),
(153,323,o),
(11,230,o),
(-3,151,qs),
(-16,75,o),
(70,-11,o),
(146,-11,qs),
(203,-11,o),
(309,36,o),
(336,76,q),
(323,0,l)
);
},
{
closed = 1;
nodes = (
(231,207,o),
(270,233,o),
(300,233,qs),
(362,233,l),
(360,221,ls),
(354,190,o),
(299,143,o),
(266,143,qs),
(245,143,o),
(224,165,o),
(227,186,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
0 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 2 3 117 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
35 34 20 35 18 34 36 34 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = a.ss02;
},
{
glyphname = aacute.ss02;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(273,750,l),
(247,602,l),
(523,696,l),
(552,860,l)
);
},
{
closed = 1;
nodes = (
(518,0,l),
(577,332,ls),
(589,403,o),
(539,512,o),
(423,572,o),
(339,572,qs),
(267,572,o),
(137,516,o),
(41,417,o),
(15,354,q),
(239,354,l),
(249,371,o),
(284,394,o),
(307,394,qs),
(335,394,o),
(359,358,o),
(353,323,q),
(256,323,ls),
(128,323,o),
(-14,230,o),
(-28,151,qs),
(-42,75,o),
(44,-11,o),
(120,-11,qs),
(177,-11,o),
(283,36,o),
(311,76,q),
(297,0,l)
);
},
{
closed = 1;
nodes = (
(206,207,o),
(244,233,o),
(274,233,qs),
(336,233,l),
(334,221,ls),
(329,190,o),
(273,143,o),
(240,143,qs),
(219,143,o),
(198,165,o),
(202,186,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 2 1 0 4 0 74 4 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 2 3 117 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
35 34 20 35 18 34 36 38 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = aacute.ss02;
},
{
glyphname = abreve.ss02;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(505,820,l),
(500,789,o),
(456,758,o),
(409,758,qs),
(362,758,o),
(330,789,o),
(335,820,q),
(232,820,l),
(229,803,ls),
(212,704,o),
(298,600,o),
(381,600,qs),
(464,600,o),
(588,704,o),
(605,803,qs),
(608,820,l)
);
},
{
closed = 1;
nodes = (
(522,0,l),
(580,332,ls),
(593,403,o),
(543,512,o),
(427,572,o),
(343,572,qs),
(271,572,o),
(141,516,o),
(44,417,o),
(18,354,q),
(242,354,l),
(252,371,o),
(287,394,o),
(310,394,qs),
(338,394,o),
(363,358,o),
(357,323,q),
(260,323,ls),
(132,323,o),
(-11,230,o),
(-25,151,qs),
(-38,75,o),
(48,-11,o),
(124,-11,qs),
(181,-11,o),
(287,36,o),
(314,76,q),
(301,0,l)
);
},
{
closed = 1;
nodes = (
(209,207,o),
(248,233,o),
(278,233,qs),
(340,233,l),
(338,221,ls),
(332,190,o),
(277,143,o),
(244,143,qs),
(223,143,o),
(202,165,o),
(205,186,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
16 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 10 9 11 9 10 11 131 0 7 5 6 6 7 117 3 1 1 2 1 137 0 11 0 5 7 11 5 107 0 6 0 8 0 6 8 110 0 0 0 2 1 0 2 109 0 4 4 21 77 0 9 9 21 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 10 9 11 9 10 11 131 0 7 5 6 5 7 6 131 3 1 1 2 1 137 0 11 0 5 7 11 5 107 0 6 0 8 0 6 8 110 0 0 0 2 1 0 2 109 0 4 4 21 77 0 9 9 21 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
52 50 47 45 43 42 35 18 34 36 35 18 34 19 34 12 7 31 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = abreve.ss02;
},
{
glyphname = acircumflex.ss02;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(572,746,l),
(420,821,l),
(241,746,l),
(216,602,l),
(395,680,l),
(547,602,l)
);
},
{
closed = 1;
nodes = (
(522,0,l),
(580,332,ls),
(593,403,o),
(543,512,o),
(426,572,o),
(342,572,qs),
(270,572,o),
(141,516,o),
(44,417,o),
(18,354,q),
(242,354,l),
(252,371,o),
(287,394,o),
(310,394,qs),
(338,394,o),
(363,358,o),
(357,323,q),
(260,323,ls),
(132,323,o),
(-11,230,o),
(-25,151,qs),
(-38,75,o),
(48,-11,o),
(124,-11,qs),
(181,-11,o),
(287,36,o),
(314,76,q),
(301,0,l)
);
},
{
closed = 1;
nodes = (
(209,207,o),
(248,233,o),
(278,233,qs),
(340,233,l),
(338,221,ls),
(332,190,o),
(277,143,o),
(244,143,qs),
(223,143,o),
(202,165,o),
(205,186,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
5 4 3 2 1 5 0 74 6 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 2 3 117 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
35 34 20 35 18 34 36 40 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = acircumflex.ss02;
},
{
glyphname = adieresis.ss02;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,620,o),
(369,669,o),
(375,705,qs),
(382,743,o),
(342,792,o),
(304,792,qs),
(268,792,o),
(210,742,o),
(203,705,qs),
(197,669,o),
(237,620,o),
(273,620,qs)
);
},
{
closed = 1;
nodes = (
(535,620,o),
(594,669,o),
(600,705,qs),
(607,743,o),
(567,792,o),
(529,792,qs),
(493,792,o),
(435,742,o),
(428,705,qs),
(422,669,o),
(462,620,o),
(498,620,qs)
);
},
{
closed = 1;
nodes = (
(524,0,l),
(583,332,ls),
(595,403,o),
(545,512,o),
(429,572,o),
(345,572,qs),
(273,572,o),
(143,516,o),
(47,417,o),
(21,354,q),
(245,354,l),
(255,371,o),
(290,394,o),
(313,394,qs),
(341,394,o),
(365,358,o),
(359,323,q),
(262,323,ls),
(134,323,o),
(-8,230,o),
(-22,151,qs),
(-36,75,o),
(50,-11,o),
(126,-11,qs),
(183,-11,o),
(289,36,o),
(317,76,q),
(303,0,l)
);
},
{
closed = 1;
nodes = (
(212,207,o),
(250,233,o),
(280,233,qs),
(342,233,l),
(340,221,ls),
(335,190,o),
(279,143,o),
(246,143,qs),
(225,143,o),
(204,165,o),
(208,186,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
24 1 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 10 9 11 9 10 11 131 0 7 5 6 6 7 117 0 11 0 5 7 11 5 107 0 6 0 8 1 6 8 110 13 3 12 3 1 2 1 0 1 0 101 0 4 4 21 77 0 9 9 21 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 10 9 11 9 10 11 131 0 7 5 6 5 7 6 131 0 11 0 5 7 11 5 107 0 6 0 8 1 6 8 110 13 3 12 3 1 2 1 0 1 0 101 0 4 4 21 77 0 9 9 21 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
12 12 0 0 60 58 55 53 51 50 46 44 41 40 38 36 34 32 28 26 12 23 12 22 18 16 0 11 0 10 36 14 7 23 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = adieresis.ss02;
},
{
glyphname = agrave.ss02;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(264,696,l),
(506,602,l),
(532,750,l),
(293,860,l)
);
},
{
closed = 1;
nodes = (
(518,0,l),
(577,332,ls),
(589,403,o),
(539,512,o),
(423,572,o),
(339,572,qs),
(267,572,o),
(137,516,o),
(41,417,o),
(15,354,q),
(239,354,l),
(249,371,o),
(284,394,o),
(307,394,qs),
(335,394,o),
(359,358,o),
(353,323,q),
(256,323,ls),
(128,323,o),
(-14,230,o),
(-28,151,qs),
(-42,75,o),
(44,-11,o),
(120,-11,qs),
(177,-11,o),
(283,36,o),
(311,76,q),
(297,0,l)
);
},
{
closed = 1;
nodes = (
(206,207,o),
(244,233,o),
(274,233,qs),
(336,233,l),
(334,221,ls),
(329,190,o),
(273,143,o),
(240,143,qs),
(219,143,o),
(198,165,o),
(202,186,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 2 1 0 4 0 74 4 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 2 3 117 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 6 5 7 5 6 7 131 0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 102 0 0 0 21 77 0 5 5 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
35 34 20 35 18 34 36 38 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = agrave.ss02;
},
{
glyphname = amacron.ss02;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,622,l),
(606,622,l),
(632,769,l),
(201,769,l)
);
},
{
closed = 1;
nodes = (
(526,0,l),
(585,332,ls),
(597,403,o),
(547,512,o),
(431,572,o),
(347,572,qs),
(275,572,o),
(145,516,o),
(49,417,o),
(23,354,q),
(247,354,l),
(257,371,o),
(292,394,o),
(315,394,qs),
(343,394,o),
(367,358,o),
(361,323,q),
(264,323,ls),
(136,323,o),
(-6,230,o),
(-20,151,qs),
(-34,75,o),
(52,-11,o),
(128,-11,qs),
(185,-11,o),
(292,36,o),
(319,76,q),
(305,0,l)
);
},
{
closed = 1;
nodes = (
(214,207,o),
(252,233,o),
(282,233,qs),
(344,233,l),
(342,221,ls),
(337,190,o),
(281,143,o),
(248,143,qs),
(227,143,o),
(206,165,o),
(210,186,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 8 7 9 7 8 9 131 0 5 3 4 4 5 117 0 9 0 3 5 9 3 107 0 4 0 6 0 4 6 110 0 0 10 1 1 0 1 99 0 2 2 21 77 0 7 7 21 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 8 7 9 7 8 9 131 0 5 3 4 3 5 4 131 0 9 0 3 5 9 3 107 0 4 0 6 0 4 6 110 0 0 10 1 1 0 1 99 0 2 2 21 77 0 7 7 21 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
0 0 40 38 35 33 31 30 26 24 21 20 18 16 14 12 8 6 0 3 0 3 17 11 7 23 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = amacron.ss02;
},
{
glyphname = aogonek.ss02;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(495,-107,o),
(458,-107,qs),
(442,-107,o),
(426,-95,o),
(428,-86,qs),
(431,-71,o),
(471,-41,o),
(516,-21,qs),
(562,0,l),
(621,332,ls),
(633,403,o),
(584,512,o),
(467,572,o),
(383,572,qs),
(311,572,o),
(181,516,o),
(85,417,o),
(59,354,q),
(283,354,l),
(293,371,o),
(328,394,o),
(351,394,qs),
(379,394,o),
(403,358,o),
(397,323,q),
(300,323,ls),
(172,323,o),
(30,230,o),
(16,151,qs),
(2,75,o),
(88,-11,o),
(164,-11,qs),
(221,-11,o),
(328,36,o),
(355,76,q),
(342,2,l),
(308,-23,o),
(275,-73,o),
(270,-103,qs),
(260,-159,o),
(335,-223,o),
(410,-223,qs),
(470,-223,o),
(526,-207,q),
(546,-91,l)
);
},
{
closed = 1;
nodes = (
(250,207,o),
(288,233,o),
(318,233,qs),
(380,233,l),
(378,221,ls),
(373,190,o),
(317,143,o),
(284,143,qs),
(263,143,o),
(242,165,o),
(246,186,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
44 35 9 8 0 5 5 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 7 1 8 1 7 8 131 0 4 2 3 3 4 117 0 0 0 6 1 0 6 109 0 8 0 2 4 8 2 107 0 3 0 5 3 5 102 0 1 1 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 7 1 8 1 7 8 131 0 4 2 3 2 4 3 131 0 0 0 6 1 0 6 109 0 8 0 2 4 8 2 107 0 3 0 5 3 5 102 0 1 1 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
35 35 42 35 18 34 36 40 33 9 7 31 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = aogonek.ss02;
},
{
glyphname = aring.ss02;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(368,857,o),
(279,785,o),
(268,725,qs),
(258,665,o),
(321,593,o),
(377,593,qs),
(433,593,o),
(522,665,o),
(532,725,qs),
(543,785,o),
(480,857,o),
(424,857,qs)
);
},
{
closed = 1;
nodes = (
(372,678,o),
(351,704,o),
(354,725,qs),
(358,746,o),
(389,772,o),
(409,772,qs),
(429,772,o),
(450,746,o),
(446,725,qs),
(443,704,o),
(412,678,o),
(392,678,qs)
);
},
{
closed = 1;
nodes = (
(518,0,l),
(577,332,ls),
(589,403,o),
(540,512,o),
(423,572,o),
(339,572,qs),
(267,572,o),
(137,516,o),
(41,417,o),
(15,354,q),
(239,354,l),
(249,371,o),
(284,394,o),
(307,394,qs),
(335,394,o),
(360,358,o),
(353,323,q),
(256,323,ls),
(128,323,o),
(-14,230,o),
(-28,151,qs),
(-41,75,o),
(44,-11,o),
(120,-11,qs),
(177,-11,o),
(284,36,o),
(311,76,q),
(297,0,l)
);
},
{
closed = 1;
nodes = (
(206,207,o),
(244,233,o),
(274,233,qs),
(336,233,l),
(334,221,ls),
(329,190,o),
(274,143,o),
(241,143,qs),
(220,143,o),
(199,165,o),
(202,186,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
24 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 10 9 11 9 10 11 131 0 7 5 6 6 7 117 0 11 0 5 7 11 5 107 0 6 0 8 0 6 8 110 0 0 13 1 3 2 0 3 109 0 2 12 1 1 2 1 101 0 4 4 21 77 0 9 9 21 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
0 10 9 11 9 10 11 131 0 7 5 6 5 7 6 131 0 11 0 5 7 11 5 107 0 6 0 8 0 6 8 110 0 0 13 1 3 2 0 3 109 0 2 12 1 1 2 1 101 0 4 4 21 77 0 9 9 21 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
12 12 0 0 60 58 55 53 51 50 46 44 41 40 38 36 34 32 28 26 12 23 12 22 18 16 0 11 0 10 36 14 7 23 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = aring.ss02;
},
{
glyphname = atilde.ss02;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,649,o),
(313,649,qs),
(325,649,o),
(351,638,o),
(364,631,qs),
(385,618,o),
(425,604,o),
(449,604,qs),
(513,604,o),
(608,686,o),
(641,779,q),
(532,779,l),
(516,732,o),
(479,732,qs),
(467,732,o),
(446,741,o),
(429,751,qs),
(407,764,o),
(367,778,o),
(343,778,qs),
(279,778,o),
(184,695,o),
(151,602,q),
(259,602,l)
);
},
{
closed = 1;
nodes = (
(525,0,l),
(584,332,ls),
(596,403,o),
(547,512,o),
(430,572,o),
(346,572,qs),
(274,572,o),
(144,516,o),
(48,417,o),
(22,354,q),
(246,354,l),
(256,371,o),
(291,394,o),
(314,394,qs),
(342,394,o),
(366,358,o),
(360,323,q),
(263,323,ls),
(135,323,o),
(-7,230,o),
(-21,151,qs),
(-34,75,o),
(51,-11,o),
(127,-11,qs),
(184,-11,o),
(291,36,o),
(318,76,q),
(304,0,l)
);
},
{
closed = 1;
nodes = (
(213,207,o),
(251,233,o),
(281,233,qs),
(343,233,l),
(341,221,ls),
(336,190,o),
(281,143,o),
(248,143,qs),
(227,143,o),
(205,165,o),
(209,186,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
24 1 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 12 11 13 11 12 13 131 0 9 7 8 8 9 117 0 13 0 7 9 13 7 107 0 8 0 10 3 8 10 110 14 5 2 3 0 1 0 3 1 109 0 4 2 1 0 4 0 102 0 6 6 21 77 0 11 11 21 11 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 61 values pushed */
0 12 11 13 11 12 13 131 0 9 7 8 7 9 8 131 0 13 0 7 9 13 7 107 0 8 0 10 3 8 10 110 14 5 2 3 0 1 0 3 1 109 0 4 2 1 0 4 0 102 0 6 6 21 77 0 11 11 21 11 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
0 0 60 58 55 53 51 50 46 44 41 40 38 36 34 32 28 26 0 23 0 23 36 34 17 36 34 15 7 27 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = atilde.ss02;
},
{
glyphname = ampersand.ss03;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,473,o),
(180,426,q),
(113,408,o),
(15,297,o),
(1,218,qs),
(-10,156,o),
(26,54,o),
(123,-7,o),
(200,-7,qs),
(307,-7,o),
(386,56,q),
(417,0,l),
(638,0,l),
(386,468,ls),
(377,486,o),
(371,504,o),
(373,512,qs),
(374,521,o),
(387,532,o),
(396,532,qs),
(408,532,o),
(418,519,o),
(418,505,qs),
(418,489,o),
(413,464,q),
(619,464,l),
(634,531,o),
(625,584,qs),
(597,715,o),
(425,715,qs),
(355,715,o),
(245,665,o),
(179,584,o),
(170,537,qs)
);
},
{
closed = 1;
nodes = (
(195,245,o),
(228,270,o),
(251,270,qs),
(274,270,o),
(299,245,o),
(295,224,qs),
(291,202,o),
(258,176,o),
(235,176,qs),
(212,176,o),
(187,202,o),
(191,224,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
31 22 16 3 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 6 5 1 5 6 1 131 0 1 2 2 1 115 0 2 0 0 2 0 102 0 3 3 21 77 0 5 5 4 97 0 4 4 21 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 6 5 1 5 6 1 131 0 1 2 5 1 2 129 0 2 0 0 2 0 102 0 3 3 21 77 0 5 5 4 97 0 4 4 21 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
36 42 34 22 36 19 34 7 7 29 
CALL[ ]	/* CallFunction */";
};
width = 700;
}
);
note = ampersand.ss03;
},
{
glyphname = two.ss04;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-36,0,l),
(481,0,l),
(513,179,l),
(284,179,l),
(388,266,ls),
(450,317,o),
(520,392,o),
(556,464,o),
(564,510,qs),
(574,566,o),
(542,661,o),
(443,721,o),
(357,721,qs),
(283,721,o),
(152,666,o),
(59,550,o),
(43,462,q),
(258,462,l),
(265,499,o),
(293,535,o),
(310,535,qs),
(343,535,o),
(336,494,qs),
(329,459,o),
(270,390,o),
(191,324,qs),
(-7,160,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
26 1 2 73 0 1 3 0 3 1 0 131 0 0 0 2 0 2 101 0 3 3 4 95 0 4 4 21 3 78 17 24 35 18 36 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 566;
}
);
note = two.ss04;
},
{
glyphname = three.ss04;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(318,-7,o),
(443,49,o),
(525,150,o),
(536,215,qs),
(551,299,o),
(479,404,o),
(401,420,q),
(573,551,l),
(602,717,l),
(138,717,l),
(104,527,l),
(300,527,l),
(188,441,l),
(164,302,l),
(259,302,ls),
(299,302,o),
(339,263,o),
(333,229,qs),
(329,205,o),
(297,176,o),
(275,176,qs),
(244,176,o),
(226,213,o),
(234,249,q),
(18,249,l),
(-3,117,o),
(120,-7,o),
(243,-7,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
20 19 14 3 4 73 0 0 1 2 1 0 2 131 0 2 3 1 2 3 129 0 3 0 4 3 4 99 0 1 1 5 97 6 1 5 5 21 1 78 0 0 0 27 0 26 17 18 36 34 18 7 7 27 
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = three.ss04;
},
{
glyphname = six.ss04;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(564,312,o),
(529,413,o),
(446,463,o),
(390,463,qs),
(379,463,o),
(361,461,q),
(582,717,l),
(339,717,l),
(132,468,ls),
(80,405,o),
(25,297,o),
(16,245,qs),
(2,170,o),
(50,56,o),
(161,-7,o),
(241,-7,qs),
(315,-7,o),
(448,52,o),
(538,163,o),
(552,240,qs)
);
},
{
closed = 1;
nodes = (
(320,295,o),
(348,263,o),
(343,237,qs),
(339,211,o),
(300,179,o),
(274,179,qs),
(248,179,o),
(221,211,o),
(225,237,qs),
(230,263,o),
(268,295,o),
(294,295,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
13 1 1 73 5 1 4 3 2 3 4 2 131 0 2 1 3 2 1 129 0 1 1 132 0 3 3 0 97 0 0 0 21 3 78 20 20 20 31 20 30 40 34 23 34 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = six.ss04;
},
{
glyphname = nine.ss04;
lastChange = "2022-10-20 15:49:47 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(27,402,o),
(64,302,o),
(148,252,o),
(204,252,qs),
(214,252,o),
(235,254,q),
(12,-6,l),
(257,-6,l),
(464,247,ls),
(517,310,o),
(572,418,o),
(581,470,qs),
(594,545,o),
(545,659,o),
(433,722,o),
(353,722,qs),
(279,722,o),
(145,662,o),
(53,550,o),
(39,473,qs)
);
},
{
closed = 1;
nodes = (
(346,536,o),
(374,504,o),
(369,478,qs),
(365,452,o),
(326,420,o),
(300,420,qs),
(274,420,o),
(247,452,o),
(251,478,qs),
(256,504,o),
(294,536,o),
(320,536,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
13 1 0 73 0 2 1 3 1 2 3 131 0 3 4 1 3 4 129 5 1 4 0 0 4 0 101 0 1 1 21 1 78 20 20 20 31 20 30 40 34 23 34 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = nine.ss04;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
isItalic = 1;
linkStyle = "Amoeba Sans - Black";
name = "Black Italic";
properties = (
{
key = postscriptFullName;
value = "Amoeba Sans-Black Italic";
},
{
key = postscriptFontName;
value = "AmoebaSans-BlackItalic";
}
);
weightClass = 900;
widthClass = 6;
}
);
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2020 The Poppins Project Authors (https://github.com/itfoundry/Poppins)";
}
);
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Indian Type Foundry & Digital Amoeba";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Ninad Kale (Devanagari), Jonny Pinhorn (Latin), M Vidiantara Saputra";
}
);
},
{
key = licenseURL;
value = "http://scripts.sil.org/OFL";
},
{
key = sampleTexts;
values = (
{
language = ENG;
value = ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789;
}
);
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = "https://indiantypefoundry.com";
},
{
key = postscriptFontName;
value = "Amoeba Sans - Black Italic";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 3;
versionMinor = 200;
}
