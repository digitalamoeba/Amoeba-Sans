{
.appVersion = "3134";
.formatVersion = 3;
DisplayStrings = (
"abcdefghijklmnopqrstuvwxyz
lorem ipsum
xavier yves
virgo

asked
similar"
);
customParameters = (
{
name = vendorID;
value = ITFO;
},
{
name = panose;
value = (
0,
0,
5,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
15
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1254",
"1257",
"bit 29"
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
.null,
CR,
space,
dvR,
dvKx,
dvGx,
dvJx,
uni20A8,
uni20B9,
uni200C,
uni200D,
uni25CC,
dvEyelash,
dvRashtrasign,
dvKx_RA,
dvGx_RA,
dvJx_RA,
dvKx_R,
dvGx_R,
dvJx_R,
dvKx_KxA,
dvKx_TA,
dvKx_PHA,
dvKx_PHxA,
dvKx_BA,
dvKx_MA,
dvJx_JxA,
dvJx_YA,
dvEyelash_YA,
dvEyelash_HA,
dvmII.aLong,
dvmII_Anusvara,
dvmII_Reph,
dvmII_Reph_Anusvara,
dvmII_Anusvara.aLong,
dvmII_Reph.aLong,
dvmII_Reph_Anusvara.aLong,
dvmE_Anusvara,
dvmE_Reph,
dvmE_Reph_Anusvara,
dvmAI_Anusvara,
dvmAI_Reph,
dvmAI_Reph_Anusvara,
dvmO_Anusvara,
dvmO_Reph,
dvmO_Reph_Anusvara,
dvmAU_Anusvara,
dvmAU_Reph,
dvmAU_Reph_Anusvara,
dvmEcandra_Anusvara,
dvmOcandra_Anusvara,
dvRA_mU,
dvRA_mUU,
dvmI.a01,
dvmI.a02,
dvmI.a03,
dvmI.a04,
dvmI.a05,
dvmI.a06,
dvmI.a07,
dvmI.a08,
dvmI.a09,
dvmI.a10,
dvmI.a11,
dvmI.a12,
dvmI.a13,
dvmI.a14,
dvmI.a15,
dvmI.a16,
dvmI.a17,
dvmI.a18,
dvmI.a19,
dvmI.a20,
dvmI.a21,
dvmI.a22,
dvmI.a23,
dvmI.a24,
exclam,
quotedbl,
numbersign,
dollar,
percent,
ampersand,
quotesingle,
parenleft,
parenright,
asterisk,
plus,
comma,
hyphen,
period,
slash,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
colon,
semicolon,
less,
equal,
greater,
question,
at,
A,
B,
C,
D,
E,
F,
G,
H,
I,
J,
K,
L,
M,
N,
O,
P,
Q,
R,
S,
T,
U,
V,
W,
X,
Y,
Z,
bracketleft,
backslash,
bracketright,
asciicircum,
underscore,
grave,
a,
b,
c,
d,
e,
f,
g,
h,
i,
j,
k,
l,
m,
n,
o,
p,
q,
r,
s,
t,
u,
v,
w,
x,
y,
z,
braceleft,
bar,
braceright,
asciitilde,
uni00A0,
exclamdown,
cent,
sterling,
currency,
yen,
brokenbar,
section,
dieresis,
copyright,
ordfeminine,
guillemotleft,
logicalnot,
uni00AD,
registered,
macron,
degree,
plusminus,
uni00B2,
uni00B3,
acute,
uni00B5,
paragraph,
periodcentered,
cedilla,
uni00B9,
ordmasculine,
guillemotright,
onequarter,
onehalf,
threequarters,
questiondown,
Agrave,
Aacute,
Acircumflex,
Atilde,
Adieresis,
Aring,
AE,
Ccedilla,
Egrave,
Eacute,
Ecircumflex,
Edieresis,
Igrave,
Iacute,
Icircumflex,
Idieresis,
Eth,
Ntilde,
Ograve,
Oacute,
Ocircumflex,
Otilde,
Odieresis,
multiply,
Oslash,
Ugrave,
Uacute,
Ucircumflex,
Udieresis,
Yacute,
Thorn,
germandbls,
agrave,
aacute,
acircumflex,
atilde,
adieresis,
aring,
ae,
ccedilla,
egrave,
eacute,
ecircumflex,
edieresis,
igrave,
iacute,
icircumflex,
idieresis,
eth,
ntilde,
ograve,
oacute,
ocircumflex,
otilde,
odieresis,
divide,
oslash,
ugrave,
uacute,
ucircumflex,
udieresis,
yacute,
thorn,
ydieresis,
Amacron,
amacron,
Abreve,
abreve,
Aogonek,
aogonek,
Cacute,
cacute,
Cdotaccent,
cdotaccent,
Ccaron,
ccaron,
Dcaron,
dcaron,
Dcroat,
dcroat,
Emacron,
emacron,
Ebreve,
ebreve,
Edotaccent,
edotaccent,
Eogonek,
eogonek,
Ecaron,
ecaron,
Gbreve,
gbreve,
Gdotaccent,
gdotaccent,
uni0122,
uni0123,
Itilde,
itilde,
Imacron,
imacron,
uni012C,
uni012D,
Iogonek,
iogonek,
Idotaccent,
dotlessi,
uni0136,
uni0137,
Lacute,
lacute,
uni013B,
uni013C,
Lcaron,
lcaron,
Ldot,
ldot,
Lslash,
lslash,
Nacute,
nacute,
uni0145,
uni0146,
Ncaron,
ncaron,
Omacron,
omacron,
uni014E,
uni014F,
Ohungarumlaut,
ohungarumlaut,
OE,
oe,
Racute,
racute,
uni0156,
uni0157,
Rcaron,
rcaron,
Sacute,
sacute,
uni015E,
uni015F,
Scaron,
scaron,
uni0162,
uni0163,
Tcaron,
tcaron,
Utilde,
utilde,
Umacron,
umacron,
Ubreve,
ubreve,
Uring,
uring,
Uhungarumlaut,
uhungarumlaut,
Uogonek,
uogonek,
Wcircumflex,
wcircumflex,
Ycircumflex,
ycircumflex,
Ydieresis,
Zacute,
zacute,
Zdotaccent,
zdotaccent,
Zcaron,
zcaron,
uni018F,
florin,
uni01FC,
uni01FD,
uni0218,
uni0219,
uni021A,
uni021B,
uni0259,
uni02BC,
circumflex,
caron,
uni02C9,
breve,
dotaccent,
ring,
ogonek,
tilde,
hungarumlaut,
Wgrave,
wgrave,
Wacute,
wacute,
Wdieresis,
wdieresis,
uni1EBC,
uni1EBD,
Ygrave,
ygrave,
uni1EF8,
uni1EF9,
endash,
emdash,
quoteleft,
quoteright,
quotesinglbase,
quotedblleft,
quotedblright,
quotedblbase,
dagger,
daggerdbl,
bullet,
ellipsis,
perthousand,
guilsinglleft,
guilsinglright,
fraction,
Euro,
uni20BA,
uni20BD,
uni2113,
trademark,
uni2126,
estimated,
partialdiff,
uni2206,
product,
summation,
minus,
uni2215,
uni2219,
radical,
infinity,
integral,
approxequal,
notequal,
lessequal,
greaterequal,
lozenge,
fi,
fl,
exclam.ss01,
comma.ss01,
period.ss01,
colon.ss01,
semicolon.ss01,
question.ss01,
exclamdown.ss01,
periodcentered.ss01,
questiondown.ss01,
divide.ss01,
uni02BC.ss01,
quoteleft.ss01,
quoteright.ss01,
quotedblleft.ss01,
quotedblright.ss01,
ellipsis.ss01,
a.ss02,
aacute.ss02,
abreve.ss02,
acircumflex.ss02,
adieresis.ss02,
agrave.ss02,
amacron.ss02,
aogonek.ss02,
aring.ss02,
atilde.ss02,
ampersand.ss03,
two.ss04,
three.ss04,
six.ss04,
nine.ss04
);
}
);
date = "2017-12-22 01:45:05 +0000";
familyName = "Amoeba Sans";
featurePrefixes = (
{
code = "lookup SUB_0 {
	sub L periodcentered by Ldot;
	sub l periodcentered by ldot;
} SUB_0;
lookup SUB_1 {
	sub A by ordfeminine;
	sub O by ordmasculine;
	sub a by ordfeminine;
	sub o by ordmasculine;
} SUB_1;
";
name = Prefix;
}
);
features = (
{
code = "script DFLT;
language dflt;
lookup SUB_2 {
	sub exclam by exclam.ss01;
	sub comma by comma.ss01;
	sub period by period.ss01;
	sub colon by colon.ss01;
	sub semicolon by semicolon.ss01;
	sub question by question.ss01;
	sub exclamdown by exclamdown.ss01;
	sub periodcentered by periodcentered.ss01;
	sub questiondown by questiondown.ss01;
	sub divide by divide.ss01;
	sub quoteleft by quoteleft.ss01;
	sub quoteright by quoteright.ss01;
	sub quotedblleft by quotedblleft.ss01;
	sub quotedblright by quotedblright.ss01;
	sub ellipsis by ellipsis.ss01;
} SUB_2;
script dev2;
language dflt;
lookup SUB_2;
script deva;
language dflt;
lookup SUB_2;
";
tag = ss01;
},
{
code = "script DFLT;
language dflt;
lookup SUB_3 {
	sub a by a.ss02;
	sub agrave by agrave.ss02;
	sub aacute by aacute.ss02;
	sub acircumflex by acircumflex.ss02;
	sub atilde by atilde.ss02;
	sub adieresis by adieresis.ss02;
	sub aring by aring.ss02;
	sub amacron by amacron.ss02;
	sub abreve by abreve.ss02;
	sub aogonek by aogonek.ss02;
} SUB_3;
script dev2;
language dflt;
lookup SUB_3;
script deva;
language dflt;
lookup SUB_3;
";
tag = ss02;
},
{
code = "script DFLT;
language dflt;
lookup SUB_4 {
	sub ampersand by ampersand.ss03;
} SUB_4;
script dev2;
language dflt;
lookup SUB_4;
script deva;
language dflt;
lookup SUB_4;
";
tag = ss03;
},
{
code = "script DFLT;
language dflt;
lookup SUB_5 {
	sub two by two.ss04;
	sub three by three.ss04;
	sub six by six.ss04;
	sub nine by nine.ss04;
} SUB_5;
script dev2;
language dflt;
lookup SUB_5;
script deva;
language dflt;
lookup SUB_5;
";
tag = ss04;
},
{
code = "script DFLT;
language dflt;
lookup SUB_6 {
	sub fi by f i;
	sub fl by f l;
} SUB_6;
script dev2;
language dflt;
lookup SUB_6;
script deva;
language dflt;
lookup SUB_6;
script latn;
language dflt;
lookup SUB_6;
language CAT;
lookup SUB_6;
";
tag = ccmp;
},
{
code = "script latn;
language CAT;
lookup SUB_7 {
	sub L' lookup SUB_0 periodcentered' L;
	sub l' lookup SUB_0 periodcentered' l;
} SUB_7;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_8 {
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
} SUB_8;
script dev2;
language dflt;
lookup SUB_8;
script deva;
language dflt;
lookup SUB_8;
script latn;
language dflt;
lookup SUB_8;
language CAT;
lookup SUB_8;
";
tag = sups;
},
{
code = "script DFLT;
language dflt;
lookup SUB_9 {
	sub one slash two by onehalf;
	sub one slash four by onequarter;
	sub three slash four by threequarters;
} SUB_9;
script dev2;
language dflt;
lookup SUB_9;
script deva;
language dflt;
lookup SUB_9;
script latn;
language dflt;
lookup SUB_9;
language CAT;
lookup SUB_9;
";
tag = frac;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	@SUB_10_0_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_10_0_BT_0 [A a]' lookup SUB_1;
	@SUB_10_1_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_10_1_BT_0 [O o]' lookup SUB_1;
} SUB_10;
script dev2;
language dflt;
lookup SUB_10;
script deva;
language dflt;
lookup SUB_10;
script latn;
language dflt;
lookup SUB_10;
language CAT;
lookup SUB_10;
";
tag = ordn;
},
{
code = "script DFLT;
language dflt;
lookup SUB_11 {
	sub f i by fi;
	sub f l by fl;
} SUB_11;
script dev2;
language dflt;
lookup SUB_11;
script deva;
language dflt;
lookup SUB_11;
script latn;
language dflt;
lookup SUB_11;
language CAT;
lookup SUB_11;
";
tag = liga;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 1050;
},
{
name = typoDescender;
value = -350;
},
{
name = typoLineGap;
value = 100;
},
{
name = winAscent;
value = 1135;
},
{
name = winDescent;
value = 627;
},
{
name = hheaAscender;
value = 1050;
},
{
name = hheaDescender;
value = -350;
},
{
name = strikeoutPosition;
value = 328;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 5 values pushed */\0120 37 0 3 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01242 4 26 8 18 4 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01246 2 34 6 22 2 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 10 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\0122752 1728 1216 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 13 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\01264 64 64 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01244 2 28 6 20 2 3 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    24,\012    24,\012    24,\012    24,\012    540,\012    \"-9\",\012    540,\012    \"-9\",\012    153,\012    153,\012    113,\012    113,\012    717,\012    0,\012    760,\012    568,\012    0,\012    \"-279\",\012    726,\012    0,\012    785,\012    577,\012    0,\012    \"-279\",\012    24,\012    24,\012    24,\012    24,\012    710,\012    352,\012    710,\012    347\012)";
}
);
id = m01;
metricValues = (
{
pos = 1050;
},
{
pos = 698;
},
{
pos = 548;
},
{
},
{
pos = -350;
},
{
}
);
name = SemiBold;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,0,l),
(500,0,l),
(500,700,l),
(0,700,l)
);
},
{
closed = 1;
nodes = (
(50,605,l),
(220,350,l),
(50,95,l)
);
},
{
closed = 1;
nodes = (
(250,305,l),
(420,50,l),
(80,50,l)
);
},
{
closed = 1;
nodes = (
(420,650,l),
(250,395,l),
(80,650,l)
);
},
{
closed = 1;
nodes = (
(450,605,l),
(450,95,l),
(280,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
15 14 13 8 6 5 6 2 3 1 76 4 1 1 0 3 2 1 3 103 5 1 2 0 0 2 87 5 1 2 2 0 95 0 0 2 0 79 7 7 0 0 12 11 7 9 7 9 0 3 0 3 17 6 6 23 
CALL[ ]	/* CallFunction */";
};
width = 500;
}
);
note = ".notdef";
},
{
glyphname = .null;
layers = (
{
layerId = m01;
width = 0;
}
);
note = ".null";
unicode = 0;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 267;
}
);
note = CR;
unicode = 13;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 267;
}
);
note = space;
unicode = 32;
},
{
glyphname = dvR;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(354,-290,l),
(440,-290,l),
(316,-91,l),
(232,-91,l)
);
},
{
closed = 1;
nodes = (
(-27,670,l),
(359,670,l),
(359,574,ls),
(359,407,o),
(188,407,qs),
(83,407,l),
(83,207,ls),
(83,109,o),
(184,-9,o),
(281,-9,qs),
(370,-9,o),
(473,101,o),
(473,194,qs),
(473,211,l),
(393,211,l),
(393,192,ls),
(393,134,o),
(332,63,o),
(279,63,qs),
(223,63,o),
(165,139,o),
(165,202,qs),
(165,339,l),
(216,339,ls),
(330,339,o),
(442,460,o),
(442,574,qs),
(442,670,l),
(562,670,l),
(562,740,l),
(-27,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
0 5 3 4 3 5 4 128 10 1 1 6 0 6 1 0 128 0 0 0 132 11 1 9 8 1 2 7 9 2 103 0 7 0 3 5 7 3 105 0 4 6 6 4 89 0 4 4 6 97 0 6 4 6 81 4 4 0 0 4 34 4 34 33 32 30 28 25 23 20 19 16 14 11 9 6 5 0 3 0 3 17 12 6 23 
CALL[ ]	/* CallFunction */";
};
width = 535;
}
);
note = dvR;
},
{
glyphname = dvKx;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(543,0,l),
(543,322,ls),
(543,389,o),
(619,487,o),
(693,487,qs),
(756,487,o),
(840,401,o),
(840,330,q),
(925,330,l),
(925,397,o),
(872,501,o),
(776,559,o),
(716,559,qs),
(653,559,o),
(565,501,o),
(543,453,q),
(543,670,l),
(925,670,l),
(925,740,l),
(-27,740,l),
(-27,670,l),
(463,670,l),
(463,457,l),
(440,503,o),
(350,559,o),
(286,559,qs),
(223,559,o),
(125,503,o),
(70,399,o),
(70,330,qs),
(70,260,o),
(124,155,o),
(221,98,o),
(283,98,qs),
(349,98,o),
(440,155,o),
(463,202,q),
(463,0,l)
);
},
{
closed = 1;
nodes = (
(293,-95,o),
(325,-63,o),
(325,-40,qs),
(325,-16,o),
(293,17,o),
(269,17,qs),
(245,17,o),
(213,-16,o),
(213,-40,qs),
(213,-63,o),
(245,-95,o),
(269,-95,qs)
);
},
{
closed = 1;
nodes = (
(241,168,o),
(154,255,o),
(154,330,qs),
(154,401,o),
(243,487,o),
(309,487,qs),
(360,487,o),
(430,441,o),
(463,368,o),
(463,328,qs),
(463,289,o),
(429,216,o),
(360,168,o),
(309,168,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 100 values pushed */
21 14 2 6 7 0 1 12 6 2 76 0 6 7 12 7 6 12 128 0 8 9 10 9 8 10 128 0 3 4 1 2 1 3 2 103 5 1 1 11 1 7 6 1 7 105 14 1 12 0 0 9 12 0 105 0 9 8 10 9 89 0 9 9 10 97 13 1 10 9 10 81 50 50 38 38 50 63 50 62 58 56 38 49 38 48 44 42 19 34 19 35 17 17 19 38 34 15 6 31 
CALL[ ]	/* CallFunction */";
};
width = 738;
}
);
note = dvKx;
},
{
glyphname = dvGx;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-27,670,l),
(295,670,l),
(295,397,ls),
(295,353,o),
(258,296,o),
(212,296,qs),
(169,296,o),
(130,353,o),
(130,394,qs),
(130,425,l),
(48,425,l),
(48,395,ls),
(48,317,o),
(134,224,o),
(215,224,qs),
(298,224,o),
(379,322,o),
(379,400,qs),
(379,670,l),
(506,670,l),
(506,740,l),
(-27,740,l)
);
},
{
closed = 1;
nodes = (
(243,28,o),
(275,60,o),
(275,83,qs),
(275,107,o),
(243,140,o),
(219,140,qs),
(195,140,o),
(163,107,o),
(163,83,qs),
(163,60,o),
(195,28,o),
(219,28,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
0 2 0 3 0 2 3 128 8 1 5 4 1 0 2 5 0 103 0 3 0 1 6 3 1 105 0 6 7 7 6 89 0 6 6 7 97 9 1 7 6 7 81 22 22 0 0 22 33 22 32 28 26 0 21 0 21 19 35 19 35 17 10 6 27 
CALL[ ]	/* CallFunction */";
};
width = 480;
}
);
note = dvGx;
},
{
glyphname = dvJx;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(357,131,o),
(462,242,o),
(462,332,qs),
(462,427,l),
(694,427,l),
(694,499,l),
(381,499,l),
(381,334,ls),
(381,276,o),
(320,204,o),
(268,204,qs),
(218,204,o),
(159,276,o),
(159,334,qs),
(159,499,l),
(75,499,l),
(75,332,ls),
(75,242,o),
(177,131,o),
(267,131,qs)
);
},
{
closed = 1;
nodes = (
(-27,670,l),
(694,670,l),
(694,740,l),
(-27,740,l)
);
},
{
closed = 1;
nodes = (
(295,-60,o),
(327,-28,o),
(327,-5,qs),
(327,19,o),
(295,52,o),
(271,52,qs),
(247,52,o),
(215,19,o),
(215,-5,qs),
(215,-28,o),
(247,-60,o),
(271,-60,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
10 1 6 0 5 0 6 5 103 2 1 0 0 3 1 0 3 103 0 1 9 1 4 7 1 4 105 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81 24 24 20 20 0 0 24 35 24 34 30 28 20 23 20 23 22 21 0 19 0 18 17 19 35 19 12 6 26 
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = dvJx;
},
{
glyphname = uni20A8;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(450,431,o),
(377,360,o),
(302,360,qs),
(168,360,l),
(168,625,l),
(302,625,ls),
(378,625,o),
(450,555,o),
(450,492,qs)
);
},
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,288,l),
(258,288,l),
(442,0,l),
(553,0,l),
(362,292,l),
(454,307,o),
(543,417,o),
(543,492,qs),
(543,582,o),
(420,697,o),
(302,697,qs),
(77,697,l)
);
},
{
closed = 1;
nodes = (
(612,346,o),
(663,287,o),
(735,261,o),
(795,247,qs),
(844,236,o),
(900,217,o),
(937,180,o),
(937,150,qs),
(937,111,o),
(879,64,o),
(826,64,qs),
(772,64,o),
(707,120,o),
(703,166,q),
(609,166,l),
(616,83,o),
(732,-9,o),
(826,-9,qs),
(884,-9,o),
(975,31,o),
(1027,103,o),
(1027,148,qs),
(1027,201,o),
(975,263,o),
(900,291,o),
(840,304,qs),
(791,315,o),
(737,333,o),
(701,369,o),
(701,399,qs),
(701,437,o),
(759,484,o),
(810,484,qs),
(864,484,o),
(923,429,o),
(927,383,q),
(1020,383,l),
(1015,464,o),
(905,557,o),
(816,557,qs),
(754,557,o),
(661,514,o),
(612,441,o),
(612,396,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 4 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 7 8 1 8 7 1 128 0 10 4 11 4 10 11 128 0 1 0 4 10 1 4 103 0 0 0 2 95 12 1 2 2 28 77 0 8 8 6 97 0 6 6 31 77 0 11 11 3 95 9 5 2 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 7 8 1 8 7 1 128 0 10 4 11 4 10 11 128 12 1 2 0 0 6 2 0 103 0 1 0 4 10 1 4 103 0 8 8 6 97 0 6 6 31 77 0 11 11 3 95 9 5 2 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 7 8 1 8 7 1 128 0 10 4 11 4 10 11 128 12 1 2 0 0 6 2 0 103 0 1 0 4 10 1 4 103 0 8 8 6 97 0 6 6 31 77 5 1 3 3 29 77 0 11 11 9 97 0 9 9 29 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 7 8 1 8 7 1 128 0 10 4 11 4 10 11 128 12 1 2 0 0 6 2 0 103 0 6 0 8 7 6 8 105 0 1 0 4 10 1 4 103 5 1 3 3 29 77 0 11 11 9 97 0 9 9 29 9 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
10 9 56 54 52 51 49 47 34 32 30 29 27 25 21 20 19 18 17 16 9 22 10 22 33 33 13 8 24 
CALL[ ]	/* CallFunction */";
};
width = 1109;
}
);
note = uni20A8;
unicode = 8360;
},
{
glyphname = uni20B9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(51,631,l),
(380,631,l),
(380,541,l),
(380,523,l),
(51,523,l),
(51,457,l),
(376,457,l),
(369,404,o),
(319,355,o),
(210,340,o),
(96,340,q),
(96,199,ls),
(96,100,o),
(199,-10,o),
(298,-10,qs),
(394,-10,o),
(498,92,o),
(499,192,q),
(415,192,l),
(415,62,o),
(299,62,qs),
(181,62,o),
(181,197,qs),
(181,276,l),
(276,276,o),
(391,310,o),
(452,388,o),
(461,457,q),
(595,457,l),
(595,523,l),
(466,523,l),
(466,540,l),
(466,631,l),
(595,631,l),
(595,698,l),
(51,698,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 5 4 3 4 5 3 131 0 3 0 7 2 3 7 109 10 1 0 12 1 11 0 11 99 0 4 4 6 97 0 6 6 21 77 8 1 2 2 1 95 9 1 1 1 20 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 5 4 3 4 5 3 131 0 3 0 7 2 3 7 109 8 1 2 9 1 1 0 2 1 107 10 1 0 12 1 11 0 11 99 0 4 4 6 97 0 6 6 21 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 35 0 35 34 33 31 30 19 19 34 17 34 19 17 18 17 13 7 31 
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = uni20B9;
unicode = 8377;
},
{
glyphname = uni200C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(24,-230,l),
(24,811,l),
(-23,811,l),
(-23,-230,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni200C;
unicode = 8204;
},
{
glyphname = uni200D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,593,l),
(32,688,l),
(128,784,l),
(96,816,l),
(0,721,l),
(-95,816,l),
(-128,783,l),
(-33,688,l),
(-126,595,l),
(-93,562,l),
(-24,635,l),
(-24,-230,l),
(23,-230,l),
(23,635,l),
(95,560,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
14 13 12 11 10 9 8 7 6 5 4 3 0 13 0 74 0 0 0 118 17 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni200D;
unicode = 8205;
},
{
glyphname = uni25CC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(557,428,o),
(533,451,o),
(514,451,qs),
(495,451,o),
(471,428,o),
(471,409,qs),
(471,390,o),
(495,367,o),
(514,367,qs),
(533,367,o),
(557,390,o),
(557,409,qs)
);
},
{
closed = 1;
nodes = (
(181,142,o),
(157,165,o),
(138,165,qs),
(119,165,o),
(95,142,o),
(95,123,qs),
(95,104,o),
(119,81,o),
(138,81,qs),
(157,81,o),
(181,104,o),
(181,123,qs)
);
},
{
closed = 1;
nodes = (
(279,66,o),
(255,89,o),
(236,89,qs),
(217,89,o),
(193,66,o),
(193,47,qs),
(193,28,o),
(217,5,o),
(236,5,qs),
(255,5,o),
(279,28,o),
(279,47,qs)
);
},
{
closed = 1;
nodes = (
(136,255,o),
(112,278,o),
(93,278,qs),
(74,278,o),
(50,255,o),
(50,236,qs),
(50,217,o),
(74,194,o),
(93,194,qs),
(112,194,o),
(136,217,o),
(136,236,qs)
);
},
{
closed = 1;
nodes = (
(403,52,o),
(379,75,o),
(360,75,qs),
(341,75,o),
(317,52,o),
(317,33,qs),
(317,14,o),
(341,-9,o),
(360,-9,qs),
(379,-9,o),
(403,14,o),
(403,33,qs)
);
},
{
closed = 1;
nodes = (
(151,376,o),
(127,399,o),
(108,399,qs),
(89,399,o),
(65,376,o),
(65,357,qs),
(65,338,o),
(89,315,o),
(108,315,qs),
(127,315,o),
(151,338,o),
(151,357,qs)
);
},
{
closed = 1;
nodes = (
(518,98,o),
(494,121,o),
(475,121,qs),
(456,121,o),
(432,98,o),
(432,79,qs),
(432,60,o),
(456,37,o),
(475,37,qs),
(494,37,o),
(518,60,o),
(518,79,qs)
);
},
{
closed = 1;
nodes = (
(227,475,o),
(203,498,o),
(184,498,qs),
(165,498,o),
(141,475,o),
(141,456,qs),
(141,437,o),
(165,414,o),
(184,414,qs),
(203,414,o),
(227,437,o),
(227,456,qs)
);
},
{
closed = 1;
nodes = (
(591,194,o),
(567,217,o),
(548,217,qs),
(529,217,o),
(505,194,o),
(505,175,qs),
(505,156,o),
(529,133,o),
(548,133,qs),
(567,133,o),
(591,156,o),
(591,175,qs)
);
},
{
closed = 1;
nodes = (
(344,517,o),
(320,540,o),
(301,540,qs),
(282,540,o),
(258,517,o),
(258,498,qs),
(258,479,o),
(282,456,o),
(301,456,qs),
(320,456,o),
(344,479,o),
(344,498,qs)
);
},
{
closed = 1;
nodes = (
(601,314,o),
(577,337,o),
(558,337,qs),
(539,337,o),
(515,314,o),
(515,295,qs),
(515,276,o),
(539,253,o),
(558,253,qs),
(577,253,o),
(601,276,o),
(601,295,qs)
);
},
{
closed = 1;
nodes = (
(465,502,o),
(441,525,o),
(422,525,qs),
(403,525,o),
(379,502,o),
(379,483,qs),
(379,464,o),
(403,441,o),
(422,441,qs),
(441,441,o),
(465,464,o),
(465,483,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 146 values pushed */
0 19 0 18 1 19 18 105 0 23 0 22 14 23 22 105 0 15 0 14 11 15 14 105 0 1 0 0 21 1 0 105 0 11 0 10 7 11 10 105 0 21 0 20 17 21 20 105 0 7 0 6 3 7 6 105 0 17 0 16 13 17 16 105 0 3 0 2 9 3 2 105 0 9 12 8 9 89 0 13 0 12 4 13 12 105 0 5 0 4 8 5 4 105 0 9 9 8 97 0 8 9 8 81 141 139 135 133 129 127 123 121 117 115 111 109 105 103 99 97 93 91 87 85 81 79 75 73 69 67 63 61 57 55 36 36 36 36 36 36 36 36 33 24 6 31 
CALL[ ]	/* CallFunction */";
};
width = 651;
}
);
note = uni25CC;
unicode = 9676;
},
{
glyphname = dvEyelash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,435,ls),
(311,424,o),
(277,424,qs),
(209,424,o),
(111,488,o),
(110,558,q),
(30,558,l),
(32,457,o),
(169,362,o),
(265,362,qs),
(300,362,o),
(364,376,o),
(384,387,q),
(354,436,l)
);
},
{
closed = 1;
nodes = (
(-27,670,l),
(366,670,l),
(366,740,l),
(-27,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
12 1 2 1 1 76 0 1 3 2 3 1 2 128 5 1 4 0 3 1 4 3 103 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 14 14 14 17 14 17 20 34 18 34 6 6 26 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvEyelash;
},
{
glyphname = dvRashtrasign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-462,-97,l),
(-375,-97,l),
(-240,50,l),
(-105,-97,l),
(-18,-97,l),
(-184,82,l),
(-296,82,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
3 1 0 2 1 76 3 1 2 0 2 133 1 1 0 0 118 0 0 0 6 0 6 18 17 4 6 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvRashtrasign;
},
{
glyphname = dvKx_RA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(591,0,l),
(591,322,ls),
(591,364,o),
(623,439,o),
(690,487,o),
(740,487,qs),
(804,487,o),
(888,401,o),
(888,330,qs),
(888,256,o),
(806,171,o),
(743,171,qs),
(717,171,o),
(701,175,q),
(701,109,l),
(726,102,o),
(763,102,qs),
(823,102,o),
(918,157,o),
(972,261,o),
(972,332,qs),
(972,398,o),
(919,501,o),
(823,559,o),
(763,559,qs),
(700,559,o),
(614,503,o),
(591,456,q),
(591,670,l),
(1068,670,l),
(1068,740,l),
(-27,740,l),
(-27,670,l),
(510,670,l),
(510,458,l),
(487,504,o),
(397,559,o),
(333,559,qs),
(270,559,o),
(172,503,o),
(117,399,o),
(117,330,qs),
(117,262,o),
(172,160,o),
(269,104,o),
(330,104,qs),
(332,104,l),
(177,-46,l),
(268,-46,l),
(468,151,l),
(494,172,o),
(510,205,q),
(510,0,l)
);
},
{
closed = 1;
nodes = (
(288,168,o),
(201,255,o),
(201,330,qs),
(201,401,o),
(290,487,o),
(356,487,qs),
(407,487,o),
(477,441,o),
(510,368,o),
(510,328,qs),
(510,282,o),
(465,200,o),
(421,181,q),
(414,184,l),
(404,175,l),
(384,168,o),
(356,168,qs)
);
},
{
closed = 1;
nodes = (
(109,9,o),
(139,39,o),
(139,61,qs),
(139,84,o),
(109,114,o),
(87,114,qs),
(65,114,o),
(34,84,o),
(34,61,qs),
(34,39,o),
(65,9,o),
(87,9,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
55 38 24 17 0 5 8 9 37 1 1 13 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 10 14 0 14 10 0 128 0 0 0 132 0 4 5 1 3 2 4 3 103 6 1 2 11 1 9 8 2 9 105 0 13 1 14 13 89 15 12 2 8 7 1 1 14 8 1 105 0 13 13 14 97 16 1 14 13 14 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 10 14 0 14 10 0 128 0 0 0 132 0 4 5 1 3 2 4 3 103 6 1 2 11 1 9 8 2 9 105 0 8 12 1 8 89 0 13 1 14 13 89 15 1 12 7 1 1 14 12 1 105 0 13 13 14 97 16 1 14 13 14 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
0 10 14 0 14 10 0 128 0 0 0 132 0 4 5 1 3 2 4 3 103 6 1 2 11 1 9 8 2 9 105 0 13 1 14 13 89 15 12 2 8 7 1 1 14 8 1 105 0 13 13 14 97 16 1 14 13 14 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
70 70 53 53 70 81 70 80 76 74 53 69 53 68 64 62 52 51 47 45 35 38 35 17 17 19 38 33 19 17 6 31 
CALL[ ]	/* CallFunction */";
};
width = 1042;
}
);
note = dvKx_RA;
},
{
glyphname = dvGx_RA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(559,0,l),
(640,0,l),
(640,670,l),
(772,670,l),
(772,740,l),
(-27,740,l),
(-27,670,l),
(295,670,l),
(295,449,ls),
(295,406,o),
(258,349,o),
(212,349,qs),
(169,349,o),
(130,406,o),
(130,448,qs),
(130,479,l),
(48,479,l),
(48,448,ls),
(48,371,o),
(134,278,o),
(215,278,qs),
(298,278,o),
(379,375,o),
(379,453,qs),
(379,670,l),
(557,670,l),
(557,337,l),
(193,-20,l),
(289,-20,l),
(559,251,l)
);
},
{
closed = 1;
nodes = (
(120,56,o),
(150,86,o),
(150,108,qs),
(150,131,o),
(120,161,o),
(98,161,qs),
(76,161,o),
(45,131,o),
(45,108,qs),
(45,86,o),
(76,56,o),
(98,56,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
2 1 2 4 29 1 9 2 2 76 0 3 1 4 1 3 4 128 0 8 10 0 10 8 0 128 0 0 0 132 0 6 7 5 2 1 3 6 1 103 0 4 0 2 9 4 2 105 0 9 10 10 9 89 0 9 9 10 97 11 1 10 9 10 81 30 30 30 41 30 40 36 34 17 17 17 19 35 19 35 18 16 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = dvGx_RA;
},
{
glyphname = dvJx_RA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-27,670,l),
(656,670,l),
(656,501,l),
(381,501,l),
(381,404,ls),
(381,345,o),
(320,274,o),
(268,274,qs),
(217,274,o),
(159,345,o),
(159,404,qs),
(159,501,l),
(75,501,l),
(75,402,ls),
(75,311,o),
(177,200,o),
(267,200,qs),
(356,200,o),
(459,312,o),
(459,402,qs),
(459,433,l),
(656,433,l),
(656,327,l),
(303,-34,l),
(396,-34,l),
(657,242,l),
(657,0,l),
(735,0,l),
(735,670,l),
(867,670,l),
(867,740,l),
(-27,740,l)
);
},
{
closed = 1;
nodes = (
(166,-9,o),
(196,21,o),
(196,43,qs),
(196,66,o),
(166,96,o),
(144,96,qs),
(122,96,o),
(91,66,o),
(91,43,qs),
(91,21,o),
(122,-9,o),
(144,-9,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 93 values pushed */
8 1 6 3 5 1 4 6 2 76 0 1 10 11 10 1 11 128 0 2 11 2 134 12 1 9 8 1 0 5 9 0 103 7 1 5 0 3 6 5 3 103 0 6 0 4 10 6 4 105 0 10 1 11 10 89 0 10 10 11 97 13 1 11 10 11 81 32 32 0 0 32 43 32 42 38 36 0 31 0 31 17 19 35 19 35 18 18 17 17 14 6 31 
CALL[ ]	/* CallFunction */";
};
width = 840;
}
);
note = dvJx_RA;
},
{
glyphname = dvKx_R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(591,0,l),
(591,322,ls),
(591,364,o),
(623,439,o),
(690,487,o),
(740,487,qs),
(804,487,o),
(888,401,o),
(888,330,q),
(972,330,l),
(972,397,o),
(919,501,o),
(823,559,o),
(763,559,qs),
(700,559,o),
(614,503,o),
(591,456,q),
(591,670,l),
(972,670,l),
(972,740,l),
(-27,740,l),
(-27,670,l),
(510,670,l),
(510,458,l),
(487,504,o),
(397,559,o),
(333,559,qs),
(270,559,o),
(172,503,o),
(117,399,o),
(117,330,qs),
(117,262,o),
(172,160,o),
(269,104,o),
(330,104,qs),
(332,104,l),
(177,-46,l),
(268,-46,l),
(468,151,l),
(494,172,o),
(510,205,q),
(510,0,l)
);
},
{
closed = 1;
nodes = (
(288,168,o),
(201,255,o),
(201,330,qs),
(201,401,o),
(290,487,o),
(356,487,qs),
(407,487,o),
(477,441,o),
(510,368,o),
(510,328,qs),
(510,282,o),
(465,200,o),
(421,181,q),
(414,184,l),
(404,175,l),
(384,168,o),
(356,168,qs)
);
},
{
closed = 1;
nodes = (
(109,9,o),
(139,39,o),
(139,61,qs),
(139,84,o),
(109,114,o),
(87,114,qs),
(65,114,o),
(34,84,o),
(34,61,qs),
(34,39,o),
(65,9,o),
(87,9,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 107 values pushed */
24 17 2 7 8 44 0 2 11 7 2 76 0 7 8 11 8 7 11 128 0 9 13 0 13 9 0 128 0 0 0 132 0 4 5 1 3 2 4 3 103 6 1 2 10 1 8 7 2 8 105 0 12 1 13 12 89 14 1 11 0 1 13 11 1 105 0 12 12 13 97 15 1 13 12 13 81 59 59 42 42 59 70 59 69 65 63 42 58 42 57 53 51 41 40 34 19 35 17 17 19 38 33 19 16 6 31 
CALL[ ]	/* CallFunction */";
};
width = 785;
}
);
note = dvKx_R;
},
{
glyphname = dvGx_R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(573,265,l),
(573,353,l),
(193,-20,l),
(289,-20,l)
);
},
{
closed = 1;
nodes = (
(-27,670,l),
(295,670,l),
(295,449,ls),
(295,406,o),
(258,349,o),
(212,349,qs),
(169,349,o),
(130,406,o),
(130,448,qs),
(130,479,l),
(48,479,l),
(48,448,ls),
(48,371,o),
(134,278,o),
(215,278,qs),
(298,278,o),
(379,375,o),
(379,453,qs),
(379,670,l),
(573,670,l),
(573,740,l),
(-27,740,l)
);
},
{
closed = 1;
nodes = (
(120,56,o),
(150,86,o),
(150,108,qs),
(150,131,o),
(120,161,o),
(98,161,qs),
(76,161,o),
(45,131,o),
(45,108,qs),
(45,86,o),
(76,56,o),
(98,56,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
1 1 4 3 2 1 7 2 2 76 0 3 1 4 1 3 4 128 9 1 0 8 0 134 10 1 6 5 1 1 3 6 1 103 0 4 0 2 7 4 2 105 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81 26 26 4 4 0 0 26 37 26 36 32 30 4 25 4 25 24 23 20 18 15 14 11 9 6 5 0 3 0 3 12 6 22 
CALL[ ]	/* CallFunction */";
};
width = 480;
}
);
note = dvGx_R;
},
{
glyphname = dvJx_R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(303,-34,l),
(396,-34,l),
(694,281,l),
(694,366,l)
);
},
{
closed = 1;
nodes = (
(-27,670,l),
(694,670,l),
(694,740,l),
(-27,740,l)
);
},
{
closed = 1;
nodes = (
(356,200,o),
(459,312,o),
(459,402,qs),
(459,430,l),
(694,430,l),
(694,501,l),
(381,501,l),
(381,404,ls),
(381,345,o),
(320,274,o),
(268,274,qs),
(217,274,o),
(159,345,o),
(159,404,qs),
(159,501,l),
(75,501,l),
(75,402,ls),
(75,311,o),
(177,200,o),
(267,200,qs)
);
},
{
closed = 1;
nodes = (
(166,-9,o),
(196,21,o),
(196,43,qs),
(196,66,o),
(166,96,o),
(144,96,qs),
(122,96,o),
(91,66,o),
(91,43,qs),
(91,21,o),
(122,-9,o),
(144,-9,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 89 values pushed */
3 0 2 4 6 1 76 0 0 9 0 134 10 1 2 0 1 3 2 1 103 5 1 3 0 6 4 3 6 103 0 4 11 1 7 8 4 7 105 0 8 9 9 8 89 0 8 8 9 97 12 1 9 8 9 81 28 28 8 8 4 4 28 39 28 38 34 32 8 27 8 26 23 22 21 20 17 15 12 11 4 7 4 7 19 17 13 6 24 
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = dvJx_R;
},
{
glyphname = dvKx_KxA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(293,-95,o),
(325,-63,o),
(325,-40,qs),
(325,-16,o),
(293,17,o),
(269,17,qs),
(245,17,o),
(213,-16,o),
(213,-40,qs),
(213,-63,o),
(245,-95,o),
(269,-95,qs)
);
},
{
closed = 1;
nodes = (
(1051,-95,o),
(1083,-63,o),
(1083,-40,qs),
(1083,-16,o),
(1051,17,o),
(1027,17,qs),
(1003,17,o),
(971,-16,o),
(971,-40,qs),
(971,-63,o),
(1003,-95,o),
(1027,-95,qs)
);
},
{
closed = 1;
nodes = (
(241,168,o),
(154,255,o),
(154,330,qs),
(154,401,o),
(243,487,o),
(309,487,qs),
(360,487,o),
(430,441,o),
(463,368,o),
(463,328,qs),
(463,289,o),
(429,216,o),
(360,168,o),
(309,168,qs)
);
},
{
closed = 1;
nodes = (
(998,168,o),
(911,255,o),
(911,330,qs),
(911,401,o),
(1000,487,o),
(1066,487,qs),
(1117,487,o),
(1187,441,o),
(1220,368,o),
(1220,328,qs),
(1220,289,o),
(1186,216,o),
(1117,168,o),
(1066,168,qs)
);
},
{
closed = 1;
nodes = (
(1220,670,l),
(1220,457,l),
(1197,503,o),
(1107,559,o),
(1043,559,qs),
(986,559,o),
(895,513,o),
(866,470,q),
(842,513,o),
(762,559,o),
(710,559,qs),
(647,559,o),
(564,504,o),
(543,458,q),
(543,670,l)
);
},
{
closed = 1;
nodes = (
(1300,0,l),
(1300,322,ls),
(1300,389,o),
(1376,487,o),
(1450,487,qs),
(1513,487,o),
(1597,401,o),
(1597,330,qs),
(1597,256,o),
(1516,171,o),
(1453,171,qs),
(1427,171,o),
(1411,175,q),
(1411,109,l),
(1436,102,o),
(1473,102,qs),
(1533,102,o),
(1628,157,o),
(1682,261,o),
(1682,332,qs),
(1682,398,o),
(1629,501,o),
(1533,559,o),
(1473,559,qs),
(1410,559,o),
(1322,501,o),
(1300,453,q),
(1300,670,l),
(1778,670,l),
(1778,740,l),
(-27,740,l),
(-27,670,l),
(463,670,l),
(463,457,l),
(440,503,o),
(350,559,o),
(286,559,qs),
(223,559,o),
(125,503,o),
(70,399,o),
(70,330,qs),
(70,260,o),
(124,155,o),
(221,98,o),
(283,98,qs),
(349,98,o),
(440,155,o),
(463,202,q),
(463,0,l),
(543,0,l),
(543,322,ls),
(543,390,o),
(613,487,o),
(686,487,qs),
(749,487,o),
(827,401,o),
(827,330,qs),
(827,260,o),
(881,155,o),
(978,98,o),
(1040,98,qs),
(1106,98,o),
(1197,155,o),
(1220,202,q),
(1220,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
118 104 97 83 67 64 58 52 8 5 4 117 1 20 5 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
118 104 97 83 67 64 58 52 8 21 4 117 1 20 5 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
118 104 97 83 67 64 58 52 8 5 4 117 1 11 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
118 104 97 83 67 64 58 52 8 5 4 117 1 20 5 2 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
23 1 13 0 1 0 13 1 128 0 17 18 16 2 10 8 17 10 103 19 15 9 3 8 22 12 6 3 4 5 8 4 105 0 20 11 5 20 89 21 27 7 26 4 5 14 1 11 0 5 11 105 2 1 0 13 1 0 89 2 1 0 0 1 97 25 3 24 3 1 0 1 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
23 1 13 0 1 0 13 1 128 0 17 18 16 2 10 8 17 10 103 19 15 9 3 8 22 12 6 3 4 21 8 4 105 0 21 0 20 11 21 20 105 27 7 26 3 5 14 1 11 0 5 11 105 2 1 0 13 1 0 89 2 1 0 0 1 97 25 3 24 3 1 0 1 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 68 values pushed */
23 1 13 0 1 0 13 1 128 0 17 18 16 2 10 8 17 10 103 19 15 9 3 8 22 12 6 3 4 5 8 4 105 21 27 7 26 4 5 20 14 2 11 0 5 11 105 2 1 0 13 1 0 89 2 1 0 0 1 97 25 3 24 3 1 0 1 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
23 1 13 0 1 0 13 1 128 0 17 18 16 2 10 8 17 10 103 19 15 9 3 8 22 12 6 3 4 5 8 4 105 0 20 11 5 20 89 21 27 7 26 4 5 14 1 11 0 5 11 105 2 1 0 13 1 0 89 2 1 0 0 1 97 25 3 24 3 1 0 1 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 66 values pushed */
38 38 24 24 12 12 0 0 131 130 127 125 121 119 116 114 108 106 103 102 101 100 99 98 95 93 87 85 82 81 78 76 71 69 66 65 62 60 56 54 38 51 38 50 46 44 24 37 24 36 32 30 12 23 12 22 18 16 0 11 0 10 36 28 6 23 
CALL[ ]	/* CallFunction */";
};
width = 1752;
}
);
note = dvKx_KxA;
},
{
glyphname = dvKx_TA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(642,552,o),
(563,501,o),
(543,457,q),
(543,670,l),
(1237,670,l),
(1237,498,l),
(1087,498,ls),
(945,498,o),
(871,428,q),
(853,489,o),
(763,552,o),
(701,552,qs)
);
},
{
closed = 1;
nodes = (
(293,-95,o),
(325,-63,o),
(325,-40,qs),
(325,-16,o),
(293,17,o),
(269,17,qs),
(245,17,o),
(213,-16,o),
(213,-40,qs),
(213,-63,o),
(245,-95,o),
(269,-95,qs)
);
},
{
closed = 1;
nodes = (
(241,168,o),
(154,255,o),
(154,330,qs),
(154,401,o),
(243,487,o),
(309,487,qs),
(360,487,o),
(430,441,o),
(463,368,o),
(463,328,qs),
(463,289,o),
(429,216,o),
(360,168,o),
(309,168,qs)
);
},
{
closed = 1;
nodes = (
(543,322,ls),
(543,388,o),
(609,484,o),
(679,484,qs),
(740,484,o),
(813,391,o),
(806,301,q),
(802,280,o),
(802,249,qs),
(802,129,o),
(943,2,o),
(1062,2,qs),
(1095,2,l),
(1095,69,l),
(1073,69,ls),
(982,69,o),
(886,163,o),
(886,248,qs),
(886,336,o),
(995,426,o),
(1091,426,qs),
(1237,426,l),
(1237,0,l),
(1321,0,l),
(1321,670,l),
(1453,670,l),
(1453,740,l),
(-27,740,l),
(-27,670,l),
(463,670,l),
(463,457,l),
(440,503,o),
(350,559,o),
(286,559,qs),
(223,559,o),
(125,503,o),
(70,399,o),
(70,330,qs),
(70,260,o),
(124,155,o),
(221,98,o),
(283,98,qs),
(349,98,o),
(440,155,o),
(463,202,q),
(463,0,l),
(543,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
53 8 2 3 13 5 39 1 6 13 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
53 8 2 3 13 16 39 1 6 13 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
53 8 2 3 13 5 39 1 6 13 2 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
0 10 11 9 2 1 8 10 1 103 0 8 2 5 8 89 18 1 2 16 1 5 13 2 5 105 0 0 0 13 6 0 13 103 20 1 6 0 7 14 6 7 105 0 3 12 4 3 89 0 14 21 17 15 3 12 4 14 12 103 0 3 3 4 97 19 1 4 3 4 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
0 10 11 9 2 1 8 10 1 103 0 8 0 5 16 8 5 105 18 1 2 0 16 13 2 16 105 0 0 0 13 6 0 13 103 20 1 6 0 7 14 6 7 105 0 3 12 4 3 89 0 14 21 17 15 3 12 4 14 12 103 0 3 3 4 97 19 1 4 3 4 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
0 10 11 9 2 1 8 10 1 103 0 8 2 5 8 89 18 1 2 16 1 5 13 2 5 105 0 0 0 13 6 0 13 103 20 1 6 0 7 14 6 7 105 0 3 12 4 3 89 0 14 21 17 15 3 12 4 14 12 103 0 3 3 4 97 19 1 4 3 4 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 53 values pushed */
38 38 24 24 12 12 0 0 38 84 38 84 81 79 73 71 70 68 64 62 61 60 59 58 57 56 55 54 51 49 43 41 24 37 24 36 32 30 12 23 12 22 18 16 0 11 0 10 17 35 22 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1426;
}
);
note = dvKx_TA;
},
{
glyphname = dvKx_PHA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(815,670,l),
(815,527,l),
(770,555,o),
(710,555,qs),
(647,555,o),
(564,502,o),
(543,456,q),
(543,670,l)
);
},
{
closed = 1;
nodes = (
(968,268,o),
(898,359,o),
(898,441,qs),
(898,670,l),
(1178,670,l),
(1178,419,ls),
(1178,355,o),
(1104,268,o),
(1039,268,qs)
);
},
{
closed = 1;
nodes = (
(543,322,ls),
(543,390,o),
(613,487,o),
(686,487,qs),
(733,487,o),
(804,436,o),
(818,392,q),
(829,301,o),
(932,197,o),
(1020,197,qs),
(1074,197,o),
(1154,241,o),
(1178,281,q),
(1178,0,l),
(1261,0,l),
(1261,313,ls),
(1261,384,o),
(1338,487,o),
(1414,487,qs),
(1478,487,o),
(1562,401,o),
(1562,330,qs),
(1562,257,o),
(1481,170,o),
(1418,170,qs),
(1395,170,o),
(1373,175,q),
(1373,110,l),
(1400,102,o),
(1437,102,qs),
(1497,102,o),
(1592,157,o),
(1646,262,o),
(1646,334,qs),
(1646,400,o),
(1593,502,o),
(1498,559,o),
(1438,559,qs),
(1373,559,o),
(1283,502,o),
(1261,454,q),
(1261,670,l),
(1742,670,l),
(1742,740,l),
(-27,740,l),
(-27,670,l),
(463,670,l),
(463,457,l),
(440,503,o),
(350,559,o),
(286,559,qs),
(223,559,o),
(125,503,o),
(70,399,o),
(70,330,qs),
(70,260,o),
(124,155,o),
(221,98,o),
(283,98,qs),
(349,98,o),
(440,155,o),
(463,202,q),
(463,0,l),
(543,0,l)
);
},
{
closed = 1;
nodes = (
(293,-95,o),
(325,-63,o),
(325,-40,qs),
(325,-16,o),
(293,17,o),
(269,17,qs),
(245,17,o),
(213,-16,o),
(213,-40,qs),
(213,-63,o),
(245,-95,o),
(269,-95,qs)
);
},
{
closed = 1;
nodes = (
(241,168,o),
(154,255,o),
(154,330,qs),
(154,401,o),
(243,487,o),
(309,487,qs),
(360,487,o),
(430,441,o),
(463,368,o),
(463,328,qs),
(463,289,o),
(429,216,o),
(360,168,o),
(309,168,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 12 0 67 39 32 0 4 3 12 18 1 14 3 53 1 11 14 52 1 10 11 5 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 12 0 67 39 32 0 4 3 12 18 1 14 3 53 1 11 14 52 1 4 11 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
5 1 12 0 67 39 32 0 4 3 12 18 1 14 3 53 1 11 14 52 1 10 11 5 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 80 values pushed */
22 16 2 13 17 18 17 13 18 128 0 7 8 6 2 3 1 5 7 1 103 9 1 5 0 12 5 89 0 0 19 15 2 12 3 0 12 105 21 1 3 0 14 11 3 14 105 0 10 4 11 10 89 24 20 2 11 0 4 17 11 4 105 0 17 13 18 17 89 0 17 17 18 97 23 1 18 17 18 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 70 values pushed */
22 16 2 13 17 18 17 13 18 128 0 7 8 6 2 3 1 0 7 1 103 9 5 2 0 19 15 2 12 3 0 12 105 21 1 3 0 14 11 3 14 105 24 20 2 11 10 1 4 17 11 4 105 0 17 13 18 17 89 0 17 17 18 97 23 1 18 17 18 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 80 values pushed */
22 16 2 13 17 18 17 13 18 128 0 7 8 6 2 3 1 5 7 1 103 9 1 5 0 12 5 89 0 0 19 15 2 12 3 0 12 105 21 1 3 0 14 11 3 14 105 0 10 4 11 10 89 24 20 2 11 0 4 17 11 4 105 0 17 13 18 17 89 0 17 17 18 97 23 1 18 17 18 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 58 values pushed */
93 93 81 81 17 17 8 8 93 106 93 105 101 99 81 92 81 91 87 85 17 80 17 80 77 75 71 69 66 65 62 60 56 54 51 49 43 41 38 37 36 35 34 33 30 28 22 20 8 16 8 15 20 18 34 25 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1716;
}
);
note = dvKx_PHA;
},
{
glyphname = dvKx_PHxA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(816,670,l),
(816,526,l),
(770,555,o),
(710,555,qs),
(647,555,o),
(564,502,o),
(543,456,q),
(543,670,l)
);
},
{
closed = 1;
nodes = (
(293,-95,o),
(325,-63,o),
(325,-40,qs),
(325,-16,o),
(293,17,o),
(269,17,qs),
(245,17,o),
(213,-16,o),
(213,-40,qs),
(213,-63,o),
(245,-95,o),
(269,-95,qs)
);
},
{
closed = 1;
nodes = (
(1015,9,o),
(1047,41,o),
(1047,64,qs),
(1047,88,o),
(1015,121,o),
(991,121,qs),
(967,121,o),
(935,88,o),
(935,64,qs),
(935,41,o),
(967,9,o),
(991,9,qs)
);
},
{
closed = 1;
nodes = (
(241,168,o),
(154,255,o),
(154,330,qs),
(154,401,o),
(243,487,o),
(309,487,qs),
(360,487,o),
(430,441,o),
(463,368,o),
(463,328,qs),
(463,289,o),
(429,216,o),
(360,168,o),
(309,168,qs)
);
},
{
closed = 1;
nodes = (
(969,268,o),
(899,359,o),
(899,441,qs),
(899,670,l),
(1179,670,l),
(1179,419,ls),
(1179,355,o),
(1105,268,o),
(1040,268,qs)
);
},
{
closed = 1;
nodes = (
(543,322,ls),
(543,390,o),
(613,487,o),
(686,487,qs),
(735,487,o),
(807,433,o),
(820,386,q),
(832,297,o),
(934,197,o),
(1021,197,qs),
(1075,197,o),
(1155,241,o),
(1179,281,q),
(1179,0,l),
(1262,0,l),
(1262,313,ls),
(1262,384,o),
(1339,487,o),
(1415,487,qs),
(1479,487,o),
(1563,401,o),
(1563,330,qs),
(1563,257,o),
(1482,170,o),
(1419,170,qs),
(1396,170,o),
(1374,175,q),
(1374,110,l),
(1401,102,o),
(1438,102,qs),
(1498,102,o),
(1593,157,o),
(1647,262,o),
(1647,334,qs),
(1647,400,o),
(1594,502,o),
(1499,559,o),
(1439,559,qs),
(1374,559,o),
(1284,502,o),
(1262,454,q),
(1262,670,l),
(1743,670,l),
(1743,740,l),
(-27,740,l),
(-27,670,l),
(463,670,l),
(463,457,l),
(440,503,o),
(350,559,o),
(286,559,qs),
(223,559,o),
(125,503,o),
(70,399,o),
(70,330,qs),
(70,260,o),
(124,155,o),
(221,98,o),
(283,98,qs),
(349,98,o),
(440,155,o),
(463,202,q),
(463,0,l),
(543,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 6 0 105 77 70 0 4 9 6 56 1 20 9 91 1 7 20 90 1 16 4 5 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 6 0 105 77 70 0 4 9 6 56 1 20 9 91 1 7 20 90 1 10 4 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
5 1 6 0 105 77 70 0 4 9 6 56 1 20 9 91 1 7 20 90 1 16 4 5 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
27 22 2 19 5 3 5 19 3 128 0 13 14 12 8 3 1 11 13 1 103 15 1 11 0 6 11 89 0 0 21 18 2 6 9 0 6 105 26 1 9 0 20 7 9 20 105 0 16 10 7 16 89 17 25 2 7 0 10 2 7 10 105 0 2 5 3 2 89 0 4 24 1 5 19 4 5 105 0 2 2 3 97 23 1 3 2 3 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 79 values pushed */
27 22 2 19 5 3 5 19 3 128 0 13 14 12 8 3 1 0 13 1 103 15 11 2 0 21 18 2 6 9 0 6 105 26 1 9 0 20 7 9 20 105 17 25 2 7 16 1 10 2 7 10 105 0 2 5 3 2 89 0 4 24 1 5 19 4 5 105 0 2 2 3 97 23 1 3 2 3 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 89 values pushed */
27 22 2 19 5 3 5 19 3 128 0 13 14 12 8 3 1 11 13 1 103 15 1 11 0 6 11 89 0 0 21 18 2 6 9 0 6 105 26 1 9 0 20 7 9 20 105 0 16 10 7 16 89 17 25 2 7 0 10 2 7 10 105 0 2 5 3 2 89 0 4 24 1 5 19 4 5 105 0 2 2 3 97 23 1 3 2 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 66 values pushed */
55 55 46 46 32 32 20 20 8 8 55 118 55 118 115 113 109 107 104 103 100 98 94 92 89 87 81 79 76 75 74 73 72 71 68 66 60 58 46 54 46 53 50 49 32 45 32 44 40 38 20 31 20 30 26 24 8 19 8 18 37 18 34 28 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1717;
}
);
note = dvKx_PHxA;
},
{
glyphname = dvKx_BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1261,670,l),
(1261,463,l),
(1234,510,o),
(1135,569,o),
(1067,569,qs),
(1004,569,o),
(899,517,o),
(867,469,q),
(843,512,o),
(762,559,o),
(710,559,qs),
(647,559,o),
(564,504,o),
(543,458,q),
(543,670,l)
);
},
{
closed = 1;
nodes = (
(1341,0,l),
(1341,670,l),
(1472,670,l),
(1472,740,l),
(-27,740,l),
(-27,670,l),
(463,670,l),
(463,457,l),
(440,503,o),
(350,559,o),
(286,559,qs),
(223,559,o),
(125,503,o),
(70,399,o),
(70,330,qs),
(70,260,o),
(124,155,o),
(221,98,o),
(283,98,qs),
(349,98,o),
(440,155,o),
(463,202,q),
(463,0,l),
(543,0,l),
(543,322,ls),
(543,390,o),
(613,487,o),
(686,487,qs),
(749,487,o),
(827,401,o),
(827,330,qs),
(827,259,o),
(891,150,o),
(1002,91,o),
(1070,91,qs),
(1138,91,o),
(1236,149,o),
(1261,196,q),
(1261,0,l)
);
},
{
closed = 1;
nodes = (
(293,-95,o),
(325,-63,o),
(325,-40,qs),
(325,-16,o),
(293,17,o),
(269,17,qs),
(245,17,o),
(213,-16,o),
(213,-40,qs),
(213,-63,o),
(245,-95,o),
(269,-95,qs)
);
},
{
closed = 1;
nodes = (
(241,168,o),
(154,255,o),
(154,330,qs),
(154,401,o),
(243,487,o),
(309,487,qs),
(360,487,o),
(430,441,o),
(463,368,o),
(463,328,qs),
(463,289,o),
(429,216,o),
(360,168,o),
(309,168,qs)
);
},
{
closed = 1;
nodes = (
(1141,512,o),
(1223,460,o),
(1264,377,o),
(1264,332,qs),
(1264,274,o),
(1233,228,q),
(960,468,l),
(984,489,o),
(1048,512,o),
(1083,512,qs)
);
},
{
closed = 1;
nodes = (
(1034,153,o),
(950,195,o),
(901,276,o),
(901,330,qs),
(901,392,o),
(933,438,q),
(1208,198,l),
(1160,153,o),
(1085,153,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 134 values pushed */
92 91 83 82 45 31 15 12 6 0 10 15 4 1 76 11 1 5 12 13 12 5 13 128 0 9 10 8 2 2 1 9 2 103 0 1 20 1 16 4 1 16 105 7 1 0 14 1 4 15 0 4 105 19 1 15 0 6 3 15 6 105 21 1 17 0 3 12 17 3 105 0 12 5 13 12 89 0 12 12 13 97 18 1 13 12 13 81 90 90 80 80 66 66 54 54 90 98 90 97 80 89 80 88 66 79 66 78 74 72 54 65 54 64 60 58 53 52 51 50 49 48 19 38 35 19 37 35 19 36 34 22 6 31 
CALL[ ]	/* CallFunction */";
};
width = 1446;
}
);
note = dvKx_BA;
},
{
glyphname = dvKx_MA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(647,555,o),
(564,501,o),
(543,456,q),
(543,670,l),
(1104,670,l),
(1104,454,l),
(1009,454,ls),
(938,454,o),
(891,423,q),
(871,485,o),
(777,555,o),
(710,555,qs)
);
},
{
closed = 1;
nodes = (
(293,-95,o),
(325,-63,o),
(325,-40,qs),
(325,-16,o),
(293,17,o),
(269,17,qs),
(245,17,o),
(213,-16,o),
(213,-40,qs),
(213,-63,o),
(245,-95,o),
(269,-95,qs)
);
},
{
closed = 1;
nodes = (
(241,168,o),
(154,255,o),
(154,330,qs),
(154,401,o),
(243,487,o),
(309,487,qs),
(360,487,o),
(430,441,o),
(463,368,o),
(463,328,qs),
(463,289,o),
(429,216,o),
(360,168,o),
(309,168,qs)
);
},
{
closed = 1;
nodes = (
(954,172,o),
(894,230,o),
(894,278,qs),
(894,327,o),
(959,385,o),
(1011,385,qs),
(1104,385,l),
(1104,304,ls),
(1104,242,o),
(1049,172,o),
(1000,172,qs)
);
},
{
closed = 1;
nodes = (
(1365,454,l),
(1182,454,l),
(1182,670,l),
(1365,670,l)
);
},
{
closed = 1;
nodes = (
(543,322,ls),
(543,390,o),
(613,487,o),
(686,487,qs),
(746,487,o),
(823,409,o),
(827,343,q),
(816,313,o),
(816,278,qs),
(816,198,o),
(917,101,o),
(1000,101,qs),
(1088,101,o),
(1182,208,o),
(1182,308,qs),
(1182,385,l),
(1365,385,l),
(1365,0,l),
(1449,0,l),
(1449,670,l),
(1580,670,l),
(1580,740,l),
(-27,740,l),
(-27,670,l),
(463,670,l),
(463,457,l),
(440,503,o),
(350,559,o),
(286,559,qs),
(223,559,o),
(125,503,o),
(70,399,o),
(70,330,qs),
(70,260,o),
(124,155,o),
(221,98,o),
(283,98,qs),
(349,98,o),
(440,155,o),
(463,202,q),
(463,0,l),
(543,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
68 8 2 0 5 2 1 7 0 87 54 2 8 7 3 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
68 8 2 0 5 2 1 7 0 87 54 2 6 7 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
68 8 2 0 5 2 1 7 0 87 54 2 8 7 3 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
26 20 2 16 3 4 3 16 4 128 0 14 15 13 25 10 4 1 12 14 1 103 0 12 2 5 12 89 21 1 2 19 1 5 0 2 5 105 9 1 0 17 1 7 8 0 7 103 24 1 8 6 11 8 89 23 1 6 18 1 11 3 6 11 105 0 3 16 4 3 89 0 3 3 4 97 22 1 4 3 4 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
26 20 2 16 3 4 3 16 4 128 0 14 15 13 25 10 4 1 12 14 1 103 0 12 2 5 12 89 21 1 2 19 1 5 0 2 5 105 9 1 0 17 1 7 8 0 7 103 24 1 8 0 18 11 8 18 105 23 1 6 0 11 3 6 11 105 0 3 16 4 3 89 0 3 3 4 97 22 1 4 3 4 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
26 20 2 16 3 4 3 16 4 128 0 14 15 13 25 10 4 1 2 14 1 103 12 21 2 2 19 1 5 0 2 5 105 9 1 0 17 1 7 6 0 7 103 24 8 23 3 6 18 1 11 3 6 11 105 0 3 16 4 3 89 0 3 3 4 97 22 1 4 3 4 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
26 20 2 16 3 4 3 16 4 128 0 14 15 13 25 10 4 1 12 14 1 103 0 12 2 5 12 89 21 1 2 19 1 5 0 2 5 105 9 1 0 17 1 7 8 0 7 103 24 1 8 6 11 8 89 23 1 6 18 1 11 3 6 11 105 0 3 16 4 3 89 0 3 3 4 97 22 1 4 3 4 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 67 values pushed */
53 53 49 49 38 38 24 24 12 12 0 0 53 94 53 94 91 89 83 81 78 77 76 75 74 73 72 71 70 69 66 64 58 56 49 52 49 52 51 50 38 48 38 47 43 41 24 37 24 36 32 30 12 23 12 22 18 16 0 11 0 10 17 35 27 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1549;
}
);
note = dvKx_MA;
},
{
glyphname = dvJx_JxA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(295,-60,o),
(327,-28,o),
(327,-5,qs),
(327,19,o),
(295,52,o),
(271,52,qs),
(247,52,o),
(215,19,o),
(215,-5,qs),
(215,-28,o),
(247,-60,o),
(271,-60,qs)
);
},
{
closed = 1;
nodes = (
(864,-60,o),
(896,-28,o),
(896,-5,qs),
(896,19,o),
(864,52,o),
(840,52,qs),
(816,52,o),
(784,19,o),
(784,-5,qs),
(784,-28,o),
(816,-60,o),
(840,-60,qs)
);
},
{
closed = 1;
nodes = (
(1304,0,l),
(1304,670,l),
(1436,670,l),
(1436,740,l),
(-27,740,l),
(-27,670,l),
(1221,670,l),
(1221,499,l),
(950,499,l),
(950,334,ls),
(950,276,o),
(889,204,o),
(837,204,qs),
(787,204,o),
(728,276,o),
(728,334,qs),
(728,499,l),
(381,499,l),
(381,334,ls),
(381,276,o),
(320,204,o),
(268,204,qs),
(218,204,o),
(159,276,o),
(159,334,qs),
(159,499,l),
(75,499,l),
(75,332,ls),
(75,242,o),
(177,131,o),
(267,131,qs),
(357,131,o),
(462,242,o),
(462,332,qs),
(462,427,l),
(644,427,l),
(644,332,ls),
(644,242,o),
(746,131,o),
(836,131,qs),
(926,131,o),
(1031,242,o),
(1031,332,qs),
(1031,427,l),
(1221,427,l),
(1221,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
0 16 0 1 0 16 1 128 0 14 15 1 13 8 14 13 103 12 10 2 8 6 1 4 9 8 4 103 11 1 9 7 1 5 0 9 5 105 2 1 0 16 1 0 89 2 1 0 0 1 97 18 3 17 3 1 0 1 81 12 12 0 0 69 68 67 66 65 64 63 62 61 60 57 55 52 51 48 46 43 42 39 37 34 33 30 28 25 24 12 23 12 22 18 16 0 11 0 10 36 19 6 23 
CALL[ ]	/* CallFunction */";
};
width = 1409;
}
);
note = dvJx_JxA;
},
{
glyphname = dvJx_YA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(815,182,o),
(710,299,o),
(710,400,qs),
(710,405,l),
(804,410,o),
(907,501,o),
(907,587,qs),
(907,670,l),
(1108,670,l),
(1108,370,ls),
(1108,315,o),
(1056,229,o),
(965,182,o),
(909,182,qs)
);
},
{
closed = 1;
nodes = (
(1192,0,l),
(1192,670,l),
(1323,670,l),
(1323,740,l),
(-27,740,l),
(-27,670,l),
(824,670,l),
(824,601,ls),
(824,527,o),
(734,464,o),
(645,464,qs),
(381,464,l),
(381,334,ls),
(381,276,o),
(320,204,o),
(268,204,qs),
(218,204,o),
(159,276,o),
(159,334,qs),
(159,464,l),
(75,464,l),
(75,332,ls),
(75,242,o),
(177,131,o),
(267,131,qs),
(357,131,o),
(462,242,o),
(462,332,qs),
(462,394,l),
(593,394,l),
(628,394,l),
(633,263,o),
(772,112,o),
(893,112,qs),
(969,112,o),
(1078,170,o),
(1108,218,q),
(1108,0,l)
);
},
{
closed = 1;
nodes = (
(295,-60,o),
(327,-28,o),
(327,-5,qs),
(327,19,o),
(295,52,o),
(271,52,qs),
(247,52,o),
(215,19,o),
(215,-5,qs),
(215,-28,o),
(247,-60,o),
(271,-60,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 113 values pushed */
14 1 7 4 1 76 0 4 1 7 1 4 114 0 12 13 14 13 12 14 128 0 10 11 9 2 0 6 10 0 103 8 1 6 0 1 4 6 1 105 0 7 0 5 3 7 5 105 15 1 2 0 3 13 2 3 105 0 13 12 14 13 89 0 13 13 14 97 16 1 14 13 14 81 52 52 0 0 52 63 52 62 58 56 51 50 49 48 47 46 45 44 41 39 36 34 31 30 27 25 22 20 18 16 0 13 0 12 19 20 17 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1297;
}
);
note = dvJx_YA;
},
{
glyphname = dvEyelash_YA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(448,182,o),
(343,291,o),
(343,386,qs),
(343,393,l),
(540,401,o),
(540,587,qs),
(540,670,l),
(741,670,l),
(741,370,ls),
(741,315,o),
(689,229,o),
(598,182,o),
(542,182,qs)
);
},
{
closed = 1;
nodes = (
(824,0,l),
(824,670,l),
(956,670,l),
(956,740,l),
(-27,740,l),
(-27,670,l),
(457,670,l),
(457,601,ls),
(457,515,o),
(368,442,o),
(280,441,qs),
(213,442,o),
(113,506,o),
(113,573,q),
(35,573,l),
(36,476,o),
(167,380,o),
(261,375,q),
(266,253,o),
(404,112,o),
(525,112,qs),
(602,112,o),
(712,171,o),
(741,219,q),
(741,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 89 values pushed */
13 1 2 4 1 76 0 5 0 6 0 5 6 128 0 4 1 2 1 4 114 0 10 3 10 134 0 8 9 7 2 0 5 8 0 103 0 6 0 1 4 6 1 105 11 1 2 3 3 2 89 11 1 2 2 3 97 0 3 2 3 81 0 0 37 36 35 34 33 32 31 30 27 25 23 22 20 19 17 15 0 12 0 11 18 20 12 6 24 
CALL[ ]	/* CallFunction */";
};
width = 929;
}
);
note = dvEyelash_YA;
},
{
glyphname = dvEyelash_HA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(615,23,o),
(542,-34,o),
(484,-34,qs),
(414,-34,o),
(335,50,o),
(335,116,qs),
(335,181,o),
(414,267,o),
(484,267,qs),
(543,267,o),
(616,208,o),
(626,169,q),
(706,169,l),
(694,239,o),
(583,334,o),
(486,334,qs),
(458,334,o),
(430,329,q),
(398,338,o),
(359,381,o),
(359,411,qs),
(359,453,o),
(419,492,o),
(466,492,qs),
(649,492,l),
(649,670,l),
(790,670,l),
(790,740,l),
(-27,740,l),
(-27,670,l),
(570,670,l),
(570,553,l),
(439,553,ls),
(366,553,o),
(277,488,o),
(277,426,qs),
(277,387,o),
(296,357,q),
(272,353,o),
(255,353,qs),
(197,353,o),
(113,416,o),
(113,481,q),
(35,481,l),
(35,416,o),
(95,328,o),
(189,286,o),
(241,286,qs),
(304,286,o),
(350,310,q),
(361,305,l),
(310,278,o),
(253,180,o),
(253,117,qs),
(253,54,o),
(307,-46,o),
(412,-104,o),
(484,-104,qs),
(547,-104,o),
(642,-59,o),
(699,17,o),
(706,62,q),
(626,62,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 111 values pushed */
24 1 3 2 44 12 11 3 1 9 2 76 0 2 8 3 8 2 3 128 0 10 11 13 11 10 13 128 14 1 13 12 11 13 12 126 0 6 7 1 5 4 6 5 103 0 4 0 8 2 4 8 103 0 3 0 1 11 3 1 105 0 9 0 11 10 9 11 105 0 12 0 0 12 89 0 12 12 0 97 0 0 12 0 81 0 0 0 62 0 62 60 58 54 52 50 49 47 45 33 17 17 17 37 34 19 40 35 15 6 31 
CALL[ ]	/* CallFunction */";
};
width = 764;
}
);
note = dvEyelash_HA;
},
{
glyphname = dvmII.aLong;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-451,720,l),
(-451,749,ls),
(-451,834,o),
(-331,939,o),
(-171,939,qs),
(-10,939,o),
(107,835,o),
(107,749,qs),
(107,740,l),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l),
(189,670,l),
(320,670,l),
(320,740,l),
(189,740,l),
(189,754,ls),
(189,872,o),
(25,1009,o),
(-171,1009,qs),
(-364,1009,o),
(-531,871,o),
(-531,754,qs),
(-531,720,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 7 1 2 1 7 2 128 0 3 2 3 134 0 0 0 6 1 0 6 105 5 1 1 7 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 19 35 17 17 17 17 19 34 8 6 30 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmII.aLong;
},
{
glyphname = dvmII_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-107,720,l),
(-107,782,ls),
(-107,844,o),
(-58,926,o),
(1,926,qs),
(59,926,o),
(107,844,o),
(107,782,qs),
(107,740,l),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l),
(189,670,l),
(320,670,l),
(320,740,l),
(189,740,l),
(189,778,ls),
(189,878,o),
(101,996,o),
(1,996,qs),
(-98,996,o),
(-189,877,o),
(-189,778,qs),
(-189,720,l)
);
},
{
closed = 1;
nodes = (
(332,829,o),
(365,862,o),
(365,885,qs),
(365,908,o),
(332,941,o),
(309,941,qs),
(285,941,o),
(252,908,o),
(252,885,qs),
(252,862,o),
(285,829,o),
(309,829,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
0 7 1 2 1 7 2 128 0 3 2 3 134 0 0 0 6 9 0 6 105 0 8 10 1 9 1 8 9 105 5 1 1 7 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 26 26 26 37 26 36 37 19 35 17 17 17 17 19 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmII_Anusvara;
},
{
glyphname = dvmII_Reph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-107,720,l),
(-107,782,ls),
(-107,844,o),
(-58,926,o),
(1,926,qs),
(59,926,o),
(107,844,o),
(107,782,qs),
(107,740,l),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l),
(189,670,l),
(320,670,l),
(320,740,l),
(189,740,l),
(189,821,ls),
(189,865,o),
(226,915,o),
(262,915,qs),
(297,915,o),
(333,869,o),
(331,829,q),
(406,829,l),
(410,901,o),
(341,982,o),
(281,982,qs),
(236,982,o),
(178,940,o),
(165,905,q),
(121,996,o),
(1,996,qs),
(-98,996,o),
(-189,877,o),
(-189,778,qs),
(-189,720,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
5 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 2 3 4 3 2 114 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 2 3 4 3 2 4 128 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
37 36 33 31 17 17 17 17 19 34 18 35 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmII_Reph;
},
{
glyphname = dvmII_Reph_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-107,720,l),
(-107,782,ls),
(-107,844,o),
(-58,926,o),
(1,926,qs),
(59,926,o),
(107,844,o),
(107,782,qs),
(107,740,l),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l),
(189,670,l),
(320,670,l),
(320,740,l),
(189,740,l),
(189,817,ls),
(189,867,o),
(235,924,o),
(276,924,qs),
(314,924,o),
(359,877,o),
(358,840,q),
(426,840,l),
(431,907,o),
(357,990,o),
(292,990,qs),
(244,990,o),
(179,945,o),
(164,907,q),
(120,996,o),
(1,996,qs),
(-98,996,o),
(-189,877,o),
(-189,778,qs),
(-189,720,l)
);
},
{
closed = 1;
nodes = (
(293,786,o),
(319,813,o),
(319,831,qs),
(319,850,o),
(293,876,o),
(274,876,qs),
(255,876,o),
(229,850,o),
(229,831,qs),
(229,813,o),
(255,786,o),
(274,786,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 94 values pushed */
5 1 11 3 1 76 0 2 11 12 11 2 12 128 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 1 3 0 89 0 1 9 1 3 11 1 3 105 0 11 13 1 12 4 11 12 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 38 38 38 49 38 48 44 42 37 36 33 31 17 17 17 17 19 34 18 35 34 14 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmII_Reph_Anusvara;
},
{
glyphname = dvmII_Anusvara.aLong;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-451,720,l),
(-451,749,ls),
(-451,834,o),
(-331,939,o),
(-171,939,qs),
(-10,939,o),
(107,835,o),
(107,749,qs),
(107,740,l),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l),
(189,670,l),
(320,670,l),
(320,740,l),
(189,740,l),
(189,754,ls),
(189,872,o),
(25,1009,o),
(-171,1009,qs),
(-364,1009,o),
(-531,871,o),
(-531,754,qs),
(-531,720,l)
);
},
{
closed = 1;
nodes = (
(332,829,o),
(365,862,o),
(365,885,qs),
(365,908,o),
(332,941,o),
(309,941,qs),
(285,941,o),
(252,908,o),
(252,885,qs),
(252,862,o),
(285,829,o),
(309,829,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
0 7 1 2 1 7 2 128 0 3 2 3 134 0 0 0 6 9 0 6 105 0 8 10 1 9 1 8 9 105 5 1 1 7 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 26 26 26 37 26 36 37 19 35 17 17 17 17 19 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmII_Anusvara.aLong;
},
{
glyphname = dvmII_Reph.aLong;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-451,720,l),
(-451,749,ls),
(-451,834,o),
(-331,939,o),
(-171,939,qs),
(-10,939,o),
(107,835,o),
(107,749,qs),
(107,740,l),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l),
(189,670,l),
(320,670,l),
(320,740,l),
(189,740,l),
(189,821,ls),
(189,865,o),
(226,915,o),
(262,915,qs),
(297,915,o),
(333,869,o),
(331,829,q),
(406,829,l),
(410,901,o),
(341,982,o),
(281,982,qs),
(228,982,o),
(167,927,o),
(158,882,q),
(84,1009,o),
(-171,1009,qs),
(-364,1009,o),
(-531,871,o),
(-531,754,qs),
(-531,720,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
5 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 2 3 4 3 2 114 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 2 3 4 3 2 4 128 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
37 36 33 31 17 17 17 17 19 34 18 35 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmII_Reph.aLong;
},
{
glyphname = dvmII_Reph_Anusvara.aLong;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-451,720,l),
(-451,749,ls),
(-451,834,o),
(-331,939,o),
(-171,939,qs),
(-10,939,o),
(107,835,o),
(107,749,qs),
(107,740,l),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l),
(189,670,l),
(320,670,l),
(320,740,l),
(189,740,l),
(189,817,ls),
(189,867,o),
(235,924,o),
(276,924,qs),
(314,924,o),
(359,877,o),
(358,840,q),
(426,840,l),
(431,907,o),
(357,990,o),
(292,990,qs),
(237,990,o),
(167,931,o),
(157,884,q),
(84,1009,o),
(-171,1009,qs),
(-364,1009,o),
(-531,871,o),
(-531,754,qs),
(-531,720,l)
);
},
{
closed = 1;
nodes = (
(293,786,o),
(319,813,o),
(319,831,qs),
(319,850,o),
(293,876,o),
(274,876,qs),
(255,876,o),
(229,850,o),
(229,831,qs),
(229,813,o),
(255,786,o),
(274,786,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 95 values pushed */
5 1 11 3 1 76 0 2 11 12 11 2 12 128 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 11 1 3 105 0 11 13 1 12 4 11 12 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 38 38 38 49 38 48 44 42 37 36 33 31 17 17 17 17 19 34 18 35 34 14 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmII_Reph_Anusvara.aLong;
},
{
glyphname = dvmE_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-172,849,o),
(-262,951,o),
(-348,981,o),
(-421,981,qs),
(-462,981,l),
(-462,913,l),
(-420,913,ls),
(-366,913,o),
(-304,891,o),
(-237,818,o),
(-185,736,q),
(-106,736,l)
);
},
{
closed = 1;
nodes = (
(-11,830,o),
(22,863,o),
(22,886,qs),
(22,909,o),
(-11,942,o),
(-34,942,qs),
(-58,942,o),
(-91,909,o),
(-91,886,qs),
(-91,863,o),
(-58,830,o),
(-34,830,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
5 1 2 4 2 134 0 3 0 4 3 89 0 1 0 0 4 1 0 105 0 3 3 4 97 6 1 4 3 4 81 12 12 0 0 12 23 12 22 18 16 0 11 0 11 33 35 7 6 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmE_Anusvara;
},
{
glyphname = dvmE_Reph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-127,775,o),
(-127,815,qs),
(-127,863,o),
(-82,915,o),
(-42,915,qs),
(-7,915,o),
(34,869,o),
(32,833,q),
(104,833,l),
(109,898,o),
(37,980,o),
(-26,980,qs),
(-94,980,o),
(-162,895,o),
(-162,835,qs),
(-162,827,l),
(-208,896,o),
(-282,961,o),
(-359,981,o),
(-421,981,qs),
(-462,981,l),
(-462,913,l),
(-420,913,ls),
(-366,913,o),
(-304,891,o),
(-237,818,o),
(-185,736,q),
(-106,736,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
11 1 5 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 0 5 0 3 114 6 1 5 5 132 2 1 1 0 0 1 89 2 1 1 1 0 97 4 1 0 1 0 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 0 5 0 3 5 128 6 1 5 5 132 2 1 1 0 0 1 89 2 1 1 1 0 97 4 1 0 1 0 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 27 34 18 38 33 35 7 6 27 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmE_Reph;
},
{
glyphname = dvmE_Reph_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-129,779,o),
(-129,821,qs),
(-129,872,o),
(-72,930,o),
(-25,930,qs),
(18,930,o),
(68,878,o),
(70,837,q),
(129,837,l),
(130,904,o),
(52,985,o),
(-16,985,qs),
(-90,985,o),
(-167,897,o),
(-167,835,qs),
(-167,834,l),
(-212,900,o),
(-284,963,o),
(-359,981,o),
(-421,981,qs),
(-462,981,l),
(-462,913,l),
(-420,913,ls),
(-366,913,o),
(-304,891,o),
(-237,818,o),
(-185,736,q),
(-106,736,l)
);
},
{
closed = 1;
nodes = (
(-12,788,o),
(14,815,o),
(14,833,qs),
(14,852,o),
(-12,878,o),
(-31,878,qs),
(-50,878,o),
(-76,852,o),
(-76,833,qs),
(-76,815,o),
(-50,788,o),
(-31,788,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
11 1 7 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 6 7 6 3 7 128 8 1 5 7 5 134 0 2 0 4 0 2 4 105 0 1 0 0 6 1 0 105 0 6 3 7 6 89 0 6 6 7 97 9 1 7 6 7 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 3 6 7 6 3 7 128 8 1 5 7 5 134 0 4 0 1 4 89 2 1 1 0 0 6 1 0 105 0 6 3 7 6 89 0 6 6 7 97 9 1 7 6 7 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 3 6 7 6 3 7 128 8 1 5 7 5 134 0 2 0 4 0 2 4 105 0 1 0 0 6 1 0 105 0 6 3 7 6 89 0 6 6 7 97 9 1 7 6 7 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
28 28 0 0 28 39 28 38 34 32 0 27 0 27 34 18 38 33 35 10 6 27 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmE_Reph_Anusvara;
},
{
glyphname = dvmAI_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-181,884,o),
(-271,1008,o),
(-351,1041,o),
(-425,1041,qs),
(-468,1041,l),
(-468,986,l),
(-424,986,ls),
(-373,986,o),
(-312,967,o),
(-243,891,o),
(-198,807,q),
(-246,847,o),
(-309,881,o),
(-369,889,o),
(-427,889,qs),
(-468,889,l),
(-468,835,l),
(-425,835,ls),
(-366,835,o),
(-305,824,o),
(-239,785,o),
(-178,737,q),
(-106,737,l)
);
},
{
closed = 1;
nodes = (
(-6,829,o),
(27,862,o),
(27,885,qs),
(27,908,o),
(-6,941,o),
(-29,941,qs),
(-53,941,o),
(-86,908,o),
(-86,885,qs),
(-86,862,o),
(-53,829,o),
(-29,829,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
11 1 4 6 1 76 7 1 4 6 4 134 0 3 0 2 5 3 2 105 0 5 1 6 5 89 0 1 0 0 6 1 0 105 0 5 5 6 97 8 1 6 5 6 81 23 23 0 0 23 34 23 33 29 27 0 22 0 22 33 38 33 35 9 6 26 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmAI_Anusvara;
},
{
glyphname = dvmAI_Reph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-113,751,ls),
(-127,784,o),
(-127,815,qs),
(-127,863,o),
(-82,915,o),
(-42,915,qs),
(-7,915,o),
(34,869,o),
(32,833,q),
(97,833,l),
(101,898,o),
(32,980,o),
(-28,980,qs),
(-93,980,o),
(-159,900,o),
(-162,842,q),
(-214,936,o),
(-288,1019,o),
(-360,1041,o),
(-425,1041,qs),
(-468,1041,l),
(-468,986,l),
(-424,986,ls),
(-373,986,o),
(-312,967,o),
(-243,891,o),
(-198,807,q),
(-246,847,o),
(-309,881,o),
(-369,889,o),
(-427,889,qs),
(-468,889,l),
(-468,835,l),
(-425,835,ls),
(-366,835,o),
(-305,824,o),
(-239,785,o),
(-178,737,q),
(-106,737,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
22 1 0 1 11 1 7 0 2 76 8 1 7 0 7 134 0 3 0 2 4 3 2 105 0 4 0 6 1 4 6 105 0 1 0 0 1 89 0 1 1 0 97 5 1 0 1 0 81 0 0 0 38 0 38 34 18 37 33 38 33 35 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmAI_Reph;
},
{
glyphname = dvmAI_Reph_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-111,747,ls),
(-129,785,o),
(-129,819,qs),
(-129,872,o),
(-73,930,o),
(-25,930,qs),
(18,930,o),
(68,878,o),
(70,837,q),
(129,837,l),
(131,903,o),
(52,985,o),
(-16,985,qs),
(-85,985,o),
(-162,906,o),
(-165,848,q),
(-216,939,o),
(-289,1019,o),
(-361,1041,o),
(-425,1041,qs),
(-468,1041,l),
(-468,986,l),
(-424,986,ls),
(-373,986,o),
(-312,967,o),
(-243,891,o),
(-198,807,q),
(-246,847,o),
(-309,881,o),
(-369,889,o),
(-427,889,qs),
(-468,889,l),
(-468,835,l),
(-425,835,ls),
(-366,835,o),
(-305,824,o),
(-239,785,o),
(-178,737,q),
(-106,737,l)
);
},
{
closed = 1;
nodes = (
(-14,788,o),
(12,815,o),
(12,833,qs),
(12,852,o),
(-14,878,o),
(-33,878,qs),
(-52,878,o),
(-78,852,o),
(-78,833,qs),
(-78,815,o),
(-52,788,o),
(-33,788,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 82 values pushed */
22 1 0 8 11 1 9 0 2 76 10 1 7 9 7 134 0 3 0 2 4 3 2 105 0 4 0 6 1 4 6 105 0 8 0 9 8 89 0 1 5 1 0 9 1 0 105 0 8 8 9 97 11 1 9 8 9 81 39 39 0 0 39 50 39 49 45 43 0 38 0 38 34 18 37 33 38 33 35 12 6 29 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmAI_Reph_Anusvara;
},
{
glyphname = dvmO_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,0,l),
(189,670,l),
(320,670,l),
(320,740,l),
(186,740,l),
(121,851,o),
(32,952,o),
(-54,981,o),
(-127,981,qs),
(-168,981,l),
(-168,913,l),
(-126,913,ls),
(-73,913,o),
(-11,892,o),
(55,820,o),
(106,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l)
);
},
{
closed = 1;
nodes = (
(283,830,o),
(316,863,o),
(316,886,qs),
(316,909,o),
(283,942,o),
(260,942,qs),
(236,942,o),
(203,909,o),
(203,886,qs),
(203,863,o),
(236,830,o),
(260,830,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 6 0 6 134 0 3 0 2 8 3 2 105 0 7 9 1 8 1 7 8 105 4 1 1 0 0 1 87 4 1 1 1 0 95 5 1 0 1 0 79 20 20 20 31 20 30 37 17 17 19 33 35 17 16 10 6 30 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmO_Anusvara;
},
{
glyphname = dvmO_Reph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,0,l),
(189,670,l),
(320,670,l),
(320,740,l),
(186,740,l),
(178,755,o),
(167,796,o),
(167,815,qs),
(167,863,o),
(212,915,o),
(252,915,qs),
(287,915,o),
(328,869,o),
(326,833,q),
(398,833,l),
(403,898,o),
(331,980,o),
(268,980,qs),
(200,980,o),
(132,895,o),
(132,835,qs),
(132,827,l),
(86,896,o),
(12,961,o),
(-65,981,o),
(-127,981,qs),
(-168,981,l),
(-168,913,l),
(-126,913,ls),
(-73,913,o),
(-11,892,o),
(55,820,o),
(106,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 1 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 5 2 1 2 5 114 0 9 0 9 134 4 1 3 6 1 2 5 3 2 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 5 2 1 2 5 1 128 0 9 0 9 134 4 1 3 6 1 2 5 3 2 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
36 35 17 21 34 18 38 33 35 17 16 10 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmO_Reph;
},
{
glyphname = dvmO_Reph_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,0,l),
(189,670,l),
(320,670,l),
(320,740,l),
(186,740,l),
(165,779,o),
(165,821,qs),
(165,872,o),
(222,930,o),
(269,930,qs),
(312,930,o),
(362,878,o),
(364,837,q),
(423,837,l),
(424,904,o),
(346,985,o),
(278,985,qs),
(204,985,o),
(127,897,o),
(127,835,qs),
(127,834,l),
(82,900,o),
(10,963,o),
(-65,981,o),
(-127,981,qs),
(-168,981,l),
(-168,913,l),
(-126,913,ls),
(-73,913,o),
(-11,892,o),
(55,820,o),
(106,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l)
);
},
{
closed = 1;
nodes = (
(282,788,o),
(308,815,o),
(308,833,qs),
(308,852,o),
(282,878,o),
(263,878,qs),
(244,878,o),
(218,852,o),
(218,833,qs),
(218,815,o),
(244,788,o),
(263,788,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 11 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 5 10 11 10 5 11 128 0 9 0 9 134 0 4 0 6 2 4 6 105 0 3 0 2 10 3 2 105 0 10 12 1 11 1 10 11 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 5 10 11 10 5 11 128 0 9 0 9 134 0 6 2 3 6 89 4 1 3 0 2 10 3 2 105 0 10 12 1 11 1 10 11 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 5 10 11 10 5 11 128 0 9 0 9 134 0 4 0 6 2 4 6 105 0 3 0 2 10 3 2 105 0 10 12 1 11 1 10 11 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
36 36 36 47 36 46 42 40 35 34 17 20 34 18 38 33 35 17 16 13 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmO_Reph_Anusvara;
},
{
glyphname = dvmAU_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,0,l),
(189,670,l),
(320,670,l),
(320,740,l),
(183,740,l),
(109,885,o),
(19,1009,o),
(-60,1041,o),
(-134,1041,qs),
(-177,1041,l),
(-177,986,l),
(-133,986,ls),
(-82,986,o),
(-21,967,o),
(48,891,o),
(93,807,q),
(45,847,o),
(-18,881,o),
(-78,889,o),
(-136,889,qs),
(-177,889,l),
(-177,835,l),
(-134,835,ls),
(-76,835,o),
(-15,824,o),
(50,786,o),
(109,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l)
);
},
{
closed = 1;
nodes = (
(285,829,o),
(318,862,o),
(318,885,qs),
(318,908,o),
(285,941,o),
(262,941,qs),
(238,941,o),
(205,908,o),
(205,885,qs),
(205,862,o),
(238,829,o),
(262,829,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
14 1 1 10 1 76 0 8 0 8 134 0 5 0 4 9 5 4 105 0 3 0 2 10 3 2 105 0 9 11 1 10 1 9 10 105 6 1 1 0 0 1 87 6 1 1 1 0 95 7 1 0 1 0 79 31 31 31 42 31 41 37 35 17 17 19 33 38 33 35 17 16 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmAU_Anusvara;
},
{
glyphname = dvmAU_Reph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,0,l),
(189,670,l),
(320,670,l),
(320,740,l),
(183,740,l),
(183,741,o),
(178,751,qs),
(164,784,o),
(164,815,qs),
(164,863,o),
(209,915,o),
(249,915,qs),
(284,915,o),
(325,869,o),
(323,833,q),
(388,833,l),
(392,898,o),
(323,980,o),
(263,980,qs),
(198,980,o),
(132,900,o),
(129,842,q),
(77,936,o),
(3,1019,o),
(-69,1041,o),
(-134,1041,qs),
(-177,1041,l),
(-177,986,l),
(-133,986,ls),
(-82,986,o),
(-21,967,o),
(48,891,o),
(93,807,q),
(45,847,o),
(-18,881,o),
(-78,889,o),
(-136,889,qs),
(-177,889,l),
(-177,835,l),
(-134,835,ls),
(-76,835,o),
(-15,824,o),
(50,786,o),
(109,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */
25 1 2 3 14 1 1 2 2 76 0 11 0 11 134 0 5 0 4 6 5 4 105 0 6 0 8 3 6 8 105 0 3 7 1 2 1 3 2 105 9 1 1 0 0 1 87 9 1 1 1 0 95 10 1 0 1 0 79 47 46 45 44 43 41 34 18 37 33 38 33 35 17 16 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmAU_Reph;
},
{
glyphname = dvmAU_Reph_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,0,l),
(189,670,l),
(320,670,l),
(320,740,l),
(183,740,l),
(180,747,ls),
(162,785,o),
(162,819,qs),
(162,872,o),
(218,930,o),
(266,930,qs),
(309,930,o),
(359,878,o),
(361,837,q),
(420,837,l),
(422,903,o),
(343,985,o),
(275,985,qs),
(206,985,o),
(129,906,o),
(126,848,q),
(75,939,o),
(2,1019,o),
(-70,1041,o),
(-134,1041,qs),
(-177,1041,l),
(-177,986,l),
(-133,986,ls),
(-82,986,o),
(-21,967,o),
(48,891,o),
(93,807,q),
(45,847,o),
(-18,881,o),
(-78,889,o),
(-136,889,qs),
(-177,889,l),
(-177,835,l),
(-134,835,ls),
(-76,835,o),
(-15,824,o),
(50,786,o),
(109,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l)
);
},
{
closed = 1;
nodes = (
(277,788,o),
(303,815,o),
(303,833,qs),
(303,852,o),
(277,878,o),
(258,878,qs),
(239,878,o),
(213,852,o),
(213,833,qs),
(213,815,o),
(239,788,o),
(258,788,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 94 values pushed */
25 1 2 12 14 1 13 2 2 76 0 11 0 11 134 0 5 0 4 6 5 4 105 0 6 0 8 3 6 8 105 0 3 7 1 2 13 3 2 105 0 12 14 1 13 1 12 13 105 9 1 1 0 0 1 87 9 1 1 1 0 95 10 1 0 1 0 79 47 47 47 58 47 57 53 51 46 45 44 43 42 41 34 18 37 33 38 33 35 17 16 15 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmAU_Reph_Anusvara;
},
{
glyphname = dvmEcandra_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-80,818,o),
(11,865,o),
(57,945,o),
(57,994,q),
(-11,994,l),
(-11,948,o),
(-81,879,o),
(-146,879,qs),
(-211,879,o),
(-281,948,o),
(-281,994,q),
(-350,994,l),
(-350,945,o),
(-304,865,o),
(-212,818,o),
(-146,818,qs)
);
},
{
closed = 1;
nodes = (
(-128,982,o),
(-104,1006,o),
(-104,1023,qs),
(-104,1040,o),
(-128,1065,o),
(-146,1065,qs),
(-163,1065,o),
(-187,1040,o),
(-187,1023,qs),
(-187,1006,o),
(-163,982,o),
(-146,982,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
2 1 0 4 5 4 0 5 128 0 4 7 1 5 1 4 5 105 0 1 3 3 1 89 0 1 1 3 97 6 1 3 1 3 81 16 16 0 0 16 27 16 26 22 20 0 15 0 14 18 34 19 8 6 25 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmEcandra_Anusvara;
},
{
glyphname = dvmOcandra_Anusvara;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(105,0,l),
(189,0,l),
(189,670,l),
(320,670,l),
(320,740,l),
(-27,740,l),
(-27,670,l),
(105,670,l)
);
},
{
closed = 1;
nodes = (
(213,818,o),
(304,865,o),
(350,945,o),
(350,994,q),
(282,994,l),
(282,948,o),
(212,879,o),
(147,879,qs),
(82,879,o),
(12,948,o),
(12,994,q),
(-57,994,l),
(-57,945,o),
(-11,865,o),
(81,818,o),
(147,818,qs)
);
},
{
closed = 1;
nodes = (
(165,982,o),
(189,1006,o),
(189,1023,qs),
(189,1040,o),
(165,1065,o),
(147,1065,qs),
(130,1065,o),
(106,1040,o),
(106,1023,qs),
(106,1006,o),
(130,982,o),
(147,982,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 82 values pushed */
6 1 4 8 9 8 4 9 128 0 2 1 2 134 0 8 12 1 9 5 8 9 105 0 5 11 1 7 0 5 7 105 0 0 1 1 0 87 0 0 0 1 95 10 3 2 1 0 1 79 24 24 8 8 0 0 24 35 24 34 30 28 8 23 8 22 19 18 16 14 12 11 0 7 0 7 17 17 17 13 6 25 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmOcandra_Anusvara;
},
{
glyphname = dvRA_mU;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,348,l),
(165,352,l),
(172,352,l)
);
},
{
closed = 1;
nodes = (
(-27,670,l),
(359,670,l),
(359,581,ls),
(359,414,o),
(188,414,qs),
(83,414,l),
(83,207,ls),
(83,109,o),
(184,-9,o),
(281,-9,qs),
(370,-9,o),
(473,100,o),
(473,193,qs),
(473,207,l),
(393,207,l),
(393,191,ls),
(393,133,o),
(332,63,o),
(279,63,qs),
(223,63,o),
(165,139,o),
(165,202,qs),
(165,345,l),
(585,345,ls),
(641,345,o),
(706,290,o),
(706,240,qs),
(706,191,o),
(647,138,o),
(596,138,qs),
(567,138,o),
(545,145,q),
(545,76,l),
(579,70,o),
(603,70,qs),
(685,70,o),
(782,160,o),
(782,236,qs),
(782,321,o),
(677,414,o),
(579,414,qs),
(383,414,l),
(442,475,o),
(442,581,qs),
(442,670,l),
(876,670,l),
(876,740,l),
(-27,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
2 1 4 1 18 1 3 6 17 1 2 3 3 76 0 6 4 3 4 6 3 128 11 1 10 9 1 0 1 10 0 103 8 1 1 0 4 6 1 4 103 0 3 0 2 5 3 2 105 0 5 7 7 5 89 0 5 5 7 97 0 7 5 7 81 3 3 3 50 3 50 49 48 35 35 19 35 36 35 36 35 20 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 829;
}
);
note = dvRA_mU;
},
{
glyphname = dvRA_mUU;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,348,l),
(165,352,l),
(172,352,l)
);
},
{
closed = 1;
nodes = (
(-27,670,l),
(359,670,l),
(359,581,ls),
(359,414,o),
(188,414,qs),
(83,414,l),
(83,207,ls),
(83,109,o),
(184,-9,o),
(281,-9,qs),
(370,-9,o),
(473,100,o),
(473,193,qs),
(473,207,l),
(393,207,l),
(393,191,ls),
(393,133,o),
(332,63,o),
(279,63,qs),
(223,63,o),
(165,139,o),
(165,202,qs),
(165,345,l),
(472,345,ls),
(541,345,o),
(615,278,o),
(615,215,qs),
(615,118,l),
(693,118,l),
(693,216,ls),
(693,311,o),
(584,414,o),
(480,414,qs),
(383,414,l),
(442,475,o),
(442,581,qs),
(442,670,l),
(780,670,l),
(780,740,l),
(-27,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
2 1 3 1 1 76 0 5 3 2 3 5 2 128 0 2 4 3 2 4 126 10 1 9 8 1 0 1 9 0 103 7 1 1 0 3 5 1 3 103 0 4 6 6 4 89 0 4 4 6 97 0 6 4 6 81 3 3 3 42 3 42 18 35 35 19 35 35 19 35 20 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = dvRA_mUU;
},
{
glyphname = dvmI.a01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(188,843,o),
(325,927,o),
(422,927,qs),
(479,927,o),
(585,890,o),
(655,804,o),
(655,736,qs),
(655,720,l),
(737,720,l),
(737,737,ls),
(737,822,o),
(651,939,o),
(508,996,o),
(422,996,qs),
(286,996,o),
(107,870,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 25 0 25 17 18 36 20 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a01;
},
{
glyphname = dvmI.a02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(188,843,o),
(333,928,o),
(447,928,qs),
(558,928,o),
(709,835,o),
(709,735,qs),
(709,719,l),
(790,719,l),
(790,737,ls),
(790,822,o),
(701,939,o),
(546,997,o),
(447,997,qs),
(293,997,o),
(107,872,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 24 0 24 17 18 35 20 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a02;
},
{
glyphname = dvmI.a03;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(188,844,o),
(340,929,o),
(473,929,qs),
(604,929,o),
(763,836,o),
(763,733,qs),
(763,719,l),
(845,719,l),
(845,735,ls),
(845,864,o),
(644,998,o),
(473,998,qs),
(301,998,o),
(107,873,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 23 0 23 17 18 35 19 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a03;
},
{
glyphname = dvmI.a04;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(188,844,o),
(348,930,o),
(498,930,qs),
(647,930,o),
(816,835,o),
(816,732,qs),
(816,718,l),
(898,718,l),
(898,735,ls),
(898,864,o),
(689,999,o),
(499,999,qs),
(309,999,o),
(108,874,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 23 0 23 17 18 35 19 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a04;
},
{
glyphname = dvmI.a05;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(188,845,o),
(355,931,o),
(523,931,qs),
(691,931,o),
(870,836,o),
(870,732,qs),
(870,717,l),
(952,717,l),
(952,734,ls),
(952,865,o),
(733,1000,o),
(524,1000,qs),
(316,1000,o),
(108,875,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 23 0 23 17 18 35 19 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a05;
},
{
glyphname = dvmI.a06;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(189,812,o),
(270,896,o),
(426,932,o),
(549,932,qs),
(735,932,o),
(923,836,o),
(923,731,qs),
(923,716,l),
(1005,716,l),
(1005,732,ls),
(1005,865,o),
(778,1001,o),
(551,1001,qs),
(325,1001,o),
(108,876,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 24 0 24 17 19 35 19 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a06;
},
{
glyphname = dvmI.a07;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(189,812,o),
(272,895,o),
(439,932,o),
(575,932,qs),
(780,932,o),
(978,836,o),
(978,730,qs),
(978,717,l),
(1060,716,l),
(1060,731,ls),
(1060,1001,o),
(577,1001,qs),
(414,1001,o),
(207,946,o),
(107,831,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 24 0 24 17 19 35 18 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a07;
},
{
glyphname = dvmI.a08;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(190,812,o),
(274,896,o),
(452,933,o),
(600,933,qs),
(824,933,o),
(1032,835,o),
(1032,729,qs),
(1032,717,l),
(1113,716,l),
(1113,731,ls),
(1113,865,o),
(867,1002,o),
(603,1002,qs),
(426,1002,o),
(209,947,o),
(107,832,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 25 0 25 17 19 35 19 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a08;
},
{
glyphname = dvmI.a09;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(190,812,o),
(277,896,o),
(465,934,o),
(625,934,qs),
(788,934,o),
(990,890,o),
(1085,799,o),
(1085,727,qs),
(1085,716,l),
(1167,715,l),
(1167,730,ls),
(1167,865,o),
(910,1003,o),
(627,1003,qs),
(439,1003,o),
(212,948,o),
(108,833,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 26 0 26 17 19 36 19 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a09;
},
{
glyphname = dvmI.a10;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(190,812,o),
(279,897,o),
(479,935,o),
(651,935,qs),
(827,935,o),
(1041,890,o),
(1139,799,o),
(1139,727,qs),
(1139,715,l),
(1221,714,l),
(1221,729,ls),
(1221,865,o),
(955,1004,o),
(653,1004,qs),
(452,1004,o),
(214,948,o),
(108,833,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 26 0 26 17 19 36 19 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a10;
},
{
glyphname = dvmI.a11;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(190,812,o),
(281,897,o),
(491,936,o),
(676,936,qs),
(865,936,o),
(1092,890,o),
(1194,798,o),
(1194,726,qs),
(1194,714,l),
(1275,713,l),
(1275,728,ls),
(1275,819,o),
(1159,941,o),
(896,1005,o),
(679,1005,qs),
(466,1005,o),
(217,948,o),
(108,833,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a11;
},
{
glyphname = dvmI.a12;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(190,811,o),
(284,896,o),
(506,937,o),
(702,937,qs),
(903,937,o),
(1143,890,o),
(1248,797,o),
(1248,725,qs),
(1248,714,l),
(1329,713,l),
(1329,726,ls),
(1329,817,o),
(1210,940,o),
(935,1006,o),
(705,1006,qs),
(479,1006,o),
(219,949,o),
(108,834,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a12;
},
{
glyphname = dvmI.a13;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(190,812,o),
(286,897,o),
(518,938,o),
(727,938,qs),
(941,938,o),
(1193,890,o),
(1300,797,o),
(1300,724,qs),
(1300,713,l),
(1383,713,l),
(1383,726,ls),
(1383,818,o),
(1261,941,o),
(973,1007,o),
(730,1007,qs),
(493,1007,o),
(222,949,o),
(108,834,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a13;
},
{
glyphname = dvmI.a14;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(191,811,o),
(289,897,o),
(533,939,o),
(752,939,qs),
(979,939,o),
(1243,890,o),
(1354,795,o),
(1354,722,qs),
(1354,713,l),
(1437,712,l),
(1437,724,ls),
(1437,817,o),
(1312,941,o),
(1012,1008,o),
(757,1008,qs),
(506,1008,o),
(224,950,o),
(108,834,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a14;
},
{
glyphname = dvmI.a15;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(191,812,o),
(291,898,o),
(545,940,o),
(779,940,qs),
(1019,940,o),
(1295,890,o),
(1409,795,o),
(1409,722,qs),
(1409,712,l),
(1491,711,l),
(1491,724,ls),
(1491,816,o),
(1363,941,o),
(1051,1009,o),
(783,1009,qs),
(520,1009,o),
(227,950,o),
(108,834,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a15;
},
{
glyphname = dvmI.a16;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(191,811,o),
(294,897,o),
(560,941,o),
(804,941,qs),
(1057,941,o),
(1345,890,o),
(1462,795,o),
(1462,722,qs),
(1462,711,l),
(1545,711,l),
(1545,723,ls),
(1545,816,o),
(1414,941,o),
(1089,1010,o),
(808,1010,qs),
(533,1010,o),
(229,951,o),
(108,834,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a16;
},
{
glyphname = dvmI.a17;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(191,811,o),
(296,898,o),
(573,942,o),
(829,942,qs),
(1094,942,o),
(1396,890,o),
(1516,794,o),
(1516,720,qs),
(1516,711,l),
(1598,710,l),
(1598,721,ls),
(1598,815,o),
(1464,942,o),
(1128,1011,o),
(834,1011,qs),
(547,1011,o),
(232,951,o),
(108,835,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a17;
},
{
glyphname = dvmI.a18;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(191,812,o),
(300,898,o),
(587,943,o),
(855,943,qs),
(1133,943,o),
(1446,890,o),
(1570,792,o),
(1570,719,qs),
(1570,711,l),
(1652,710,l),
(1652,721,ls),
(1652,815,o),
(1515,941,o),
(1166,1012,o),
(859,1012,qs),
(560,1012,o),
(234,951,o),
(108,835,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a18;
},
{
glyphname = dvmI.a19;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(191,811,o),
(302,898,o),
(601,944,o),
(880,944,qs),
(1171,944,o),
(1497,890,o),
(1624,792,o),
(1624,718,qs),
(1624,710,l),
(1707,709,l),
(1707,721,ls),
(1707,815,o),
(1567,942,o),
(1205,1013,o),
(885,1013,qs),
(574,1013,o),
(237,952,o),
(108,835,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a19;
},
{
glyphname = dvmI.a20;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(191,811,o),
(305,898,o),
(615,945,o),
(905,945,qs),
(1209,945,o),
(1548,890,o),
(1677,791,o),
(1677,717,qs),
(1677,710,l),
(1760,709,l),
(1760,719,ls),
(1760,814,o),
(1617,942,o),
(1244,1014,o),
(911,1014,qs),
(588,1014,o),
(239,952,o),
(108,835,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a20;
},
{
glyphname = dvmI.a21;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(191,811,o),
(307,898,o),
(628,945,o),
(931,945,qs),
(1247,945,o),
(1598,890,o),
(1731,790,o),
(1731,716,qs),
(1731,709,l),
(1814,708,l),
(1814,718,ls),
(1814,813,o),
(1668,941,o),
(1283,1014,o),
(937,1014,qs),
(601,1014,o),
(242,952,o),
(108,835,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a21;
},
{
glyphname = dvmI.a22;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(191,811,o),
(309,898,o),
(641,946,o),
(956,946,qs),
(1285,946,o),
(1649,889,o),
(1785,789,o),
(1785,715,qs),
(1785,709,l),
(1867,707,l),
(1867,717,ls),
(1867,812,o),
(1718,941,o),
(1321,1015,o),
(963,1015,qs),
(615,1015,o),
(244,953,o),
(108,836,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a22;
},
{
glyphname = dvmI.a23;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(192,811,o),
(313,898,o),
(656,947,o),
(982,947,qs),
(1324,947,o),
(1700,890,o),
(1839,789,o),
(1839,714,qs),
(1839,708,l),
(1922,707,l),
(1922,716,ls),
(1922,812,o),
(1770,942,o),
(1360,1016,o),
(988,1016,qs),
(629,1016,o),
(248,953,o),
(109,835,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a23;
},
{
glyphname = dvmI.a24;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,670,l),
(320,670,l),
(320,740,l),
(188,740,l),
(192,811,o),
(315,899,o),
(670,948,o),
(1008,948,qs),
(1362,948,o),
(1750,890,o),
(1893,788,o),
(1893,713,qs),
(1893,707,l),
(1976,706,l),
(1976,715,ls),
(1976,811,o),
(1821,942,o),
(1399,1017,o),
(1015,1017,qs),
(643,1017,o),
(250,953,o),
(109,836,o),
(105,740,q),
(-27,740,l),
(-27,670,l),
(105,670,l),
(105,0,l),
(189,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a24;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(78,188,o),
(84,182,o),
(88,182,qs),
(204,182,ls),
(208,182,o),
(214,188,o),
(214,192,qs),
(225,702,ls),
(225,712,o),
(215,712,qs),
(77,712,ls),
(67,712,o),
(67,702,qs),
(78,192,ls)
);
},
{
closed = 1;
nodes = (
(240,87,o),
(189,133,o),
(150,133,qs),
(111,133,o),
(58,86,o),
(58,56,qs),
(58,26,o),
(111,-21,o),
(150,-21,qs),
(189,-21,o),
(240,25,o),
(240,56,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
6 1 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 1 1 0 95 0 0 0 28 77 0 3 3 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
0 3 0 2 3 2 101 0 1 1 0 95 0 0 0 28 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
36 37 36 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 298;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = quotedbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(16,593,o),
(23,587,o),
(27,587,qs),
(110,587,ls),
(114,587,o),
(120,593,o),
(120,597,qs),
(130,795,ls),
(130,806,o),
(120,806,qs),
(16,806,ls),
(6,806,o),
(6,795,qs),
(16,597,ls)
);
},
{
closed = 1;
nodes = (
(171,593,o),
(178,587,o),
(182,587,qs),
(265,587,ls),
(269,587,o),
(275,593,o),
(275,597,qs),
(285,795,ls),
(285,806,o),
(275,806,qs),
(171,806,ls),
(161,806,o),
(161,795,qs),
(171,597,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
20 6 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 36 53 36 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 292;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,305,o),
(471,290,o),
(459,290,qs),
(363,290,ls),
(344,290,o),
(322,316,o),
(326,336,qs),
(344,423,ls),
(346,435,o),
(365,450,o),
(377,450,qs),
(473,450,ls),
(492,450,o),
(514,424,o),
(510,404,qs),
(492,317,ls)
);
},
{
closed = 1;
nodes = (
(424,-2,o),
(431,-10,o),
(436,-10,qs),
(541,-10,ls),
(544,-10,o),
(550,-5,o),
(551,-2,qs),
(586,164,ls),
(588,176,o),
(607,190,o),
(619,190,qs),
(739,190,ls),
(749,190,o),
(749,200,qs),
(749,280,ls),
(749,290,o),
(739,290,qs),
(660,290,ls),
(641,290,o),
(619,316,o),
(623,336,qs),
(641,423,ls),
(643,435,o),
(662,450,o),
(674,450,qs),
(795,450,ls),
(805,450,o),
(805,460,qs),
(805,540,ls),
(805,550,o),
(795,550,qs),
(716,550,ls),
(697,550,o),
(674,577,o),
(678,596,qs),
(708,737,ls),
(709,742,o),
(702,750,o),
(697,750,qs),
(592,750,ls),
(589,750,o),
(583,745,o),
(582,742,qs),
(547,576,ls),
(545,564,o),
(526,550,o),
(514,550,qs),
(419,550,ls),
(400,550,o),
(377,577,o),
(381,596,qs),
(411,737,ls),
(412,742,o),
(405,750,o),
(400,750,qs),
(295,750,ls),
(292,750,o),
(286,745,o),
(285,742,qs),
(250,576,ls),
(248,564,o),
(229,550,o),
(217,550,qs),
(80,550,ls),
(70,550,o),
(70,540,qs),
(70,460,ls),
(70,450,o),
(80,450,qs),
(176,450,ls),
(195,450,o),
(217,424,o),
(213,404,qs),
(195,317,ls),
(193,305,o),
(174,290,o),
(162,290,qs),
(23,290,ls),
(13,290,o),
(13,280,qs),
(13,200,ls),
(13,190,o),
(23,190,qs),
(120,190,ls),
(139,190,o),
(162,163,o),
(158,144,qs),
(128,3,ls),
(127,-2,o),
(134,-10,o),
(139,-10,qs),
(244,-10,ls),
(247,-10,o),
(253,-5,o),
(254,-2,qs),
(289,164,ls),
(291,176,o),
(310,190,o),
(322,190,qs),
(417,190,ls),
(436,190,o),
(459,163,o),
(455,144,qs),
(425,3,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
13 5 2 1 14 4 2 2 3 1 2 103 10 1 8 8 30 77 12 6 2 0 0 7 95 11 9 2 7 7 31 77 15 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
11 9 2 7 12 6 2 0 1 7 0 104 13 5 2 1 14 4 2 2 3 1 2 103 10 1 8 8 30 77 15 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
10 1 8 7 8 133 11 9 2 7 12 6 2 0 1 7 0 104 13 5 2 1 14 4 2 2 3 1 2 103 15 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
10 1 8 7 8 133 15 1 3 2 3 134 11 9 2 7 12 6 2 0 1 7 0 104 13 5 2 1 2 2 1 87 13 5 2 1 1 2 95 14 4 2 2 1 2 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
116 114 109 106 103 100 95 92 89 86 80 78 73 70 37 51 53 51 54 37 53 53 50 16 8 31 
CALL[ ]	/* CallFunction */";
};
width = 840;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = dollar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,-97,o),
(257,-97,qs),
(331,-97,ls),
(341,-97,o),
(341,-87,qs),
(341,-14,l),
(407,-6,o),
(500,56,o),
(547,143,o),
(547,191,qs),
(547,255,o),
(489,334,o),
(403,374,o),
(341,390,q),
(341,610,l),
(366,598,o),
(397,553,o),
(401,526,qs),
(403,517,o),
(411,517,qs),
(528,517,ls),
(533,517,o),
(539,524,o),
(538,528,q),
(530,602,o),
(426,701,o),
(341,713,q),
(341,788,ls),
(341,798,o),
(331,798,qs),
(257,798,ls),
(247,798,o),
(247,788,qs),
(247,713,l),
(152,702,o),
(40,592,o),
(40,512,qs),
(40,448,o),
(98,370,o),
(184,329,o),
(247,313,q),
(247,85,l),
(216,96,o),
(182,147,o),
(178,182,q),
(176,191,o),
(168,191,qs),
(51,191,ls),
(47,191,o),
(41,185,o),
(41,181,qs),
(42,103,o),
(155,-1,o),
(247,-14,q),
(247,-87,ls)
);
},
{
closed = 1;
nodes = (
(416,147,o),
(377,92,o),
(341,82,q),
(341,286,l),
(378,272,o),
(416,227,o),
(416,186,qs)
);
},
{
closed = 1;
nodes = (
(173,601,o),
(247,617,q),
(247,418,l),
(210,432,o),
(173,477,o),
(173,517,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
65 39 27 20 4 2 1 64 57 40 13 4 0 2 58 48 12 3 0 5 3 0 3 76 0 2 1 0 1 2 0 128 0 0 3 1 0 3 126 0 1 2 3 1 87 0 1 1 3 95 0 3 1 3 79 53 50 39 63 37 4 8 25 
CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(22,487,o),
(116,400,o),
(188,400,qs),
(261,400,o),
(354,487,o),
(354,560,qs),
(354,632,o),
(261,719,o),
(188,719,qs),
(116,719,o),
(22,632,o),
(22,560,qs)
);
},
{
closed = 1;
nodes = (
(214,643,o),
(242,604,o),
(242,560,qs),
(242,476,o),
(188,476,qs),
(135,476,o),
(135,560,qs),
(135,605,o),
(162,643,o),
(188,643,qs)
);
},
{
closed = 1;
nodes = (
(112,2,o),
(119,-10,o),
(127,-10,qs),
(230,-10,ls),
(236,-10,o),
(238,-6,qs),
(641,689,ls),
(645,696,o),
(638,708,o),
(630,708,qs),
(527,708,ls),
(521,708,o),
(519,704,qs),
(116,9,ls)
);
},
{
closed = 1;
nodes = (
(405,66,o),
(499,-22,o),
(571,-22,qs),
(643,-22,o),
(736,66,o),
(736,138,qs),
(736,211,o),
(643,298,o),
(571,298,qs),
(498,298,o),
(405,211,o),
(405,138,qs)
);
},
{
closed = 1;
nodes = (
(596,221,o),
(624,182,o),
(624,138,qs),
(624,94,o),
(596,56,o),
(570,56,qs),
(544,56,o),
(516,94,o),
(516,138,qs),
(516,182,o),
(544,221,o),
(570,221,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 0 1 6 2 1 105 0 6 11 1 9 8 6 9 106 10 1 3 3 0 97 4 1 0 0 28 77 0 8 8 5 97 7 1 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 2 0 1 6 2 1 105 0 6 11 1 9 8 6 9 106 10 1 3 3 0 97 4 1 0 0 28 77 0 5 5 29 77 0 8 8 7 97 0 7 7 29 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 2 0 1 6 2 1 105 0 6 11 1 9 8 6 9 106 0 8 0 7 8 7 101 0 4 4 28 77 10 1 3 3 0 97 0 0 0 28 77 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 5 8 7 8 5 7 128 0 2 0 1 6 2 1 105 0 6 11 1 9 8 6 9 106 0 8 0 7 8 7 101 0 4 4 28 77 10 1 3 3 0 97 0 0 0 28 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
48 48 12 12 48 59 48 58 54 52 45 43 39 37 32 31 25 24 12 21 12 20 38 36 33 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 759;
}
);
note = percent;
unicode = 37;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(515,538,o),
(517,547,q),
(519,597,o),
(473,676,o),
(384,721,o),
(325,721,qs),
(264,721,o),
(171,678,o),
(121,603,o),
(121,556,qs),
(121,519,o),
(147,457,o),
(178,419,q),
(97,384,o),
(17,271,o),
(17,200,qs),
(17,134,o),
(83,34,o),
(203,-22,o),
(281,-22,qs),
(423,-22,o),
(521,71,q),
(599,-8,ls),
(601,-10,o),
(604,-10,qs),
(727,-10,ls),
(738,-10,o),
(745,8,o),
(737,15,qs),
(595,157,l),
(625,204,o),
(631,215,qs),
(711,353,ls),
(715,360,o),
(708,372,o),
(700,372,qs),
(589,372,ls),
(583,372,o),
(581,368,qs),
(513,253,l),
(508,245,l),
(318,436,ls),
(283,473,o),
(252,527,o),
(252,556,qs),
(252,590,o),
(289,626,o),
(321,626,qs),
(351,626,o),
(387,588,o),
(386,549,qs),
(386,544,o),
(392,538,o),
(396,538,qs),
(507,538,ls)
);
},
{
closed = 1;
nodes = (
(221,76,o),
(148,145,o),
(148,203,qs),
(148,252,o),
(198,320,o),
(250,343,q),
(440,152,l),
(402,111,o),
(328,76,o),
(281,76,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
52 1 5 0 41 1 1 5 58 57 24 13 4 6 1 32 1 2 6 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
7 1 5 0 1 0 5 1 128 0 0 0 4 97 0 4 4 28 77 0 1 1 2 97 3 1 2 2 29 77 8 1 6 6 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
7 1 5 0 1 0 5 1 128 0 0 0 4 97 0 4 4 28 77 0 1 1 2 95 0 2 2 29 77 8 1 6 6 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 0 1 0 5 1 128 8 1 6 0 3 6 3 101 0 0 0 4 97 0 4 4 28 77 0 1 1 2 95 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
7 1 5 0 1 0 5 1 128 0 1 0 2 3 1 2 103 8 1 6 0 3 6 3 101 0 0 0 4 97 0 4 4 28 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
55 55 0 0 55 64 55 63 0 54 0 53 44 36 41 26 37 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = quotesingle;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(28,592,o),
(34,587,o),
(38,587,qs),
(121,587,ls),
(125,587,o),
(131,592,o),
(131,596,qs),
(143,795,ls),
(143,806,o),
(133,806,qs),
(25,806,ls),
(15,806,o),
(15,795,qs),
(28,596,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
6 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 36 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 159;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,-196,o),
(426,-186,qs),
(426,-179,ls),
(426,-176,o),
(424,-174,qs),
(323,-72,o),
(216,210,o),
(216,366,qs),
(216,527,o),
(328,820,o),
(438,922,q),
(441,924,o),
(441,928,qs),
(441,934,ls),
(441,938,o),
(435,944,o),
(431,944,qs),
(318,944,ls),
(315,944,o),
(313,942,qs),
(201,838,o),
(88,537,o),
(88,366,qs),
(88,199,o),
(194,-93,o),
(298,-194,qs),
(300,-196,o),
(303,-196,qs),
(416,-196,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
26 15 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 28 0 27 56 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 454;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,-196,o),
(161,-194,qs),
(265,-93,o),
(371,199,o),
(371,366,qs),
(371,537,o),
(258,838,o),
(146,942,qs),
(144,944,o),
(141,944,qs),
(28,944,ls),
(24,944,o),
(18,938,o),
(18,934,qs),
(18,928,ls),
(18,924,o),
(21,922,q),
(131,820,o),
(243,527,o),
(243,366,qs),
(243,210,o),
(136,-72,o),
(35,-174,qs),
(33,-176,o),
(33,-179,qs),
(33,-186,ls),
(33,-196,o),
(43,-196,qs),
(156,-196,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
13 1 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 1 0 18 16 0 28 1 26 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 454;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(303,736,o),
(296,744,o),
(291,744,qs),
(197,744,ls),
(192,744,o),
(185,736,o),
(186,732,q),
(195,646,ls),
(196,636,o),
(181,627,o),
(173,633,qs),
(90,693,l),
(45,611,ls),
(43,607,o),
(46,598,o),
(50,596,qs),
(137,561,ls),
(147,557,o),
(148,538,o),
(138,534,qs),
(50,498,ls),
(46,496,o),
(43,487,o),
(45,482,q),
(87,410,ls),
(89,406,o),
(98,404,o),
(102,407,qs),
(173,458,ls),
(181,464,o),
(196,456,o),
(195,446,qs),
(186,362,l),
(185,358,o),
(192,350,o),
(197,350,qs),
(290,350,ls),
(295,350,o),
(302,358,o),
(301,362,q),
(292,446,ls),
(291,456,o),
(306,465,o),
(314,459,qs),
(384,408,ls),
(388,405,o),
(398,407,o),
(400,411,qs),
(440,483,l),
(442,488,o),
(440,496,o),
(435,498,qs),
(346,534,ls),
(336,539,o),
(336,556,o),
(346,560,qs),
(434,597,l),
(438,598,o),
(441,608,o),
(439,612,qs),
(401,682,ls),
(399,686,o),
(389,688,o),
(385,685,qs),
(314,634,ls),
(306,628,o),
(291,637,o),
(292,647,qs),
(302,732,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
61 56 44 28 8 5 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 95 0 1 1 30 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
65 63 32 30 2 8 22 
CALL[ ]	/* CallFunction */";
};
width = 486;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,631,o),
(279,621,qs),
(279,439,ls),
(279,429,o),
(265,414,o),
(254,414,qs),
(77,414,ls),
(67,414,o),
(67,404,qs),
(67,327,ls),
(67,317,o),
(77,317,qs),
(254,317,ls),
(265,317,o),
(279,303,o),
(279,292,qs),
(279,111,ls),
(279,101,o),
(289,101,qs),
(394,101,ls),
(404,101,o),
(404,111,qs),
(404,292,ls),
(404,303,o),
(419,317,o),
(429,317,qs),
(607,317,ls),
(617,317,o),
(617,327,qs),
(617,404,ls),
(617,414,o),
(607,414,qs),
(429,414,ls),
(419,414,o),
(404,429,o),
(404,439,qs),
(404,621,ls),
(404,631,o),
(394,631,qs),
(289,631,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
6 1 0 1 3 0 87 5 1 1 4 1 2 3 1 2 103 6 1 0 0 3 95 0 3 0 3 79 1 0 34 31 28 25 21 18 14 11 8 5 0 39 1 38 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 683;
}
);
note = plus;
unicode = 43;
},
{
glyphname = comma;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-23,-144,o),
(-16,-153,o),
(-10,-153,qs),
(69,-153,ls),
(76,-153,o),
(77,-147,q),
(188,120,ls),
(190,126,o),
(184,136,o),
(177,136,qs),
(61,136,ls),
(53,136,o),
(52,129,q),
(-21,-139,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 22 18 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 198;
}
);
note = comma;
unicode = 44;
},
{
glyphname = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(38,271,o),
(48,271,qs),
(467,271,ls),
(477,271,o),
(477,281,qs),
(477,358,ls),
(477,368,o),
(467,368,qs),
(48,368,ls),
(38,368,o),
(38,358,qs),
(38,281,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 51 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,85,o),
(140,128,o),
(106,128,qs),
(71,128,o),
(24,85,o),
(24,56,qs),
(24,27,o),
(71,-16,o),
(106,-16,qs),
(140,-16,o),
(186,27,o),
(186,56,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
36 33 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = period;
unicode = 46;
},
{
glyphname = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(33,-172,o),
(40,-180,o),
(45,-180,qs),
(154,-180,ls),
(162,-180,o),
(163,-173,q),
(436,938,ls),
(437,944,o),
(430,952,o),
(425,952,qs),
(315,952,ls),
(307,952,o),
(306,945,q),
(34,-166,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 22 18 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 476;
}
);
note = slash;
unicode = 47;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,188,o),
(157,-20,o),
(314,-20,qs),
(471,-20,o),
(595,188,o),
(595,369,qs),
(595,548,o),
(471,754,o),
(314,754,qs),
(157,754,o),
(32,548,o),
(32,369,qs)
);
},
{
closed = 1;
nodes = (
(445,281,o),
(426,168,o),
(368,103,o),
(314,103,qs),
(259,103,o),
(201,168,o),
(182,281,o),
(182,369,qs),
(182,454,o),
(202,566,o),
(259,631,o),
(314,631,qs),
(368,631,o),
(426,566,o),
(445,454,o),
(445,369,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 0 97 0 0 0 30 77 0 3 3 1 97 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 3 0 1 3 1 101 0 2 2 0 97 0 0 0 30 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 37 36 33 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,-10,l),
(241,688,ls),
(241,708,o),
(214,733,o),
(191,733,qs),
(61,733,l),
(18,630,l),
(99,630,ls),
(110,630,o),
(119,619,o),
(119,605,qs),
(119,-10,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 28 77 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
0 1 0 0 2 1 0 103 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
19 33 34 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(21,4,o),
(45,-12,o),
(61,-12,qs),
(522,-12,ls),
(538,-12,o),
(562,4,o),
(562,18,qs),
(562,49,ls),
(562,72,o),
(526,104,o),
(497,104,qs),
(207,104,l),
(210,86,o),
(215,76,o),
(220,78,q),
(315,156,o),
(444,280,o),
(541,439,o),
(541,522,qs),
(541,593,o),
(478,699,o),
(364,756,o),
(287,756,qs),
(214,756,o),
(99,699,o),
(29,590,o),
(25,513,qs),
(24,499,o),
(48,482,o),
(64,482,qs),
(109,482,ls),
(137,482,o),
(171,509,o),
(176,531,qs),
(186,585,o),
(239,638,o),
(288,638,qs),
(344,638,o),
(391,578,o),
(391,518,qs),
(391,452,o),
(296,315,o),
(155,187,o),
(33,89,q),
(21,77,o),
(21,65,qs),
(21,18,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
19 1 1 0 31 1 4 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 30 77 0 3 3 4 95 0 4 4 29 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 4 4 3 87 0 3 3 4 95 0 4 3 4 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
53 42 37 52 40 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(145,521,o),
(178,546,o),
(184,566,qs),
(198,603,o),
(250,639,o),
(294,639,qs),
(397,639,o),
(397,542,qs),
(397,486,o),
(326,441,o),
(241,440,qs),
(217,440,o),
(187,412,o),
(187,385,qs),
(187,379,ls),
(187,353,o),
(216,324,o),
(240,324,qs),
(332,324,o),
(411,271,o),
(411,203,qs),
(411,92,o),
(298,92,qs),
(247,92,o),
(186,138,o),
(171,183,qs),
(166,202,o),
(132,228,o),
(105,228,qs),
(60,228,ls),
(43,228,o),
(18,210,o),
(20,195,qs),
(32,91,o),
(186,-25,o),
(299,-25,qs),
(381,-25,o),
(498,33,o),
(558,133,o),
(558,195,qs),
(558,277,o),
(468,383,o),
(387,402,q),
(387,384,l),
(403,385,o),
(412,378,qs),
(416,375,o),
(422,374,o),
(428,377,qs),
(484,401,o),
(545,493,o),
(545,551,qs),
(545,609,o),
(486,702,o),
(374,757,o),
(297,757,qs),
(187,757,o),
(42,648,o),
(31,554,qs),
(29,539,o),
(54,521,o),
(71,521,qs),
(118,521,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
19 1 2 7 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
9 1 0 8 7 8 0 7 128 0 2 7 6 7 2 6 128 0 4 6 5 6 4 5 128 0 7 0 6 4 7 6 105 0 5 0 3 5 3 101 0 8 8 1 97 0 1 1 30 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
9 1 0 8 7 8 0 7 128 0 2 7 6 7 2 6 128 0 4 6 5 6 4 5 128 0 1 0 8 0 1 8 105 0 7 0 6 4 7 6 105 0 5 3 3 5 89 0 5 5 3 97 0 3 5 3 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
1 0 57 55 52 50 45 43 40 38 34 31 27 25 18 17 7 5 0 62 1 61 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(380,-4,o),
(404,-20,o),
(420,-20,qs),
(490,-20,ls),
(506,-20,o),
(530,-4,o),
(530,10,qs),
(530,151,ls),
(530,146,o),
(522,141,q),
(590,141,ls),
(606,141,o),
(630,157,o),
(630,171,qs),
(630,230,ls),
(630,244,o),
(606,260,o),
(590,260,qs),
(535,260,ls),
(531,260,o),
(530,266,o),
(530,275,qs),
(530,706,ls),
(530,720,o),
(506,736,o),
(490,736,qs),
(399,736,ls),
(387,736,o),
(363,727,o),
(360,717,q),
(20,248,ls),
(15,241,o),
(10,230,o),
(10,223,qs),
(10,171,ls),
(10,157,o),
(34,141,o),
(50,141,qs),
(388,141,l),
(380,146,o),
(380,151,qs),
(380,10,ls)
);
},
{
closed = 1;
nodes = (
(162,247,o),
(176,238,o),
(179,241,q),
(399,554,l),
(399,573,o),
(392,595,o),
(384,603,o),
(384,600,qs),
(384,250,ls),
(384,255,o),
(392,260,q),
(160,260,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
49 45 2 2 1 50 7 0 3 0 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 5 2 2 3 1 0 4 2 0 105 0 1 1 28 77 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 1 2 4 1 87 6 5 2 2 3 1 0 4 2 0 105 0 1 1 4 97 0 4 1 4 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
42 42 42 53 42 53 53 37 38 57 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(98,744,ls),
(82,744,o),
(58,728,o),
(58,714,qs),
(58,326,ls),
(58,312,o),
(82,296,o),
(98,296,qs),
(166,296,ls),
(178,296,o),
(203,308,o),
(206,320,q),
(225,356,o),
(282,391,o),
(324,391,qs),
(391,391,o),
(452,322,o),
(452,248,qs),
(452,174,o),
(389,95,o),
(323,95,qs),
(272,95,o),
(209,141,o),
(194,189,q),
(192,202,o),
(166,216,o),
(153,216,qs),
(84,216,ls),
(65,216,o),
(43,198,o),
(45,181,q),
(63,90,o),
(208,-22,o),
(322,-22,qs),
(413,-22,o),
(537,50,o),
(599,174,o),
(599,250,qs),
(599,314,o),
(548,432,o),
(431,509,o),
(337,509,qs),
(283,509,o),
(185,469,o),
(159,440,q),
(156,432,o),
(178,422,o),
(202,426,o),
(202,434,qs),
(202,634,ls),
(202,629,o),
(194,624,q),
(488,624,ls),
(517,624,o),
(553,656,o),
(553,679,qs),
(553,744,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 5 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 6 5 3 5 6 3 128 0 3 4 5 3 4 126 0 1 0 5 6 1 5 105 0 0 0 7 95 0 7 7 30 77 0 4 4 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 5 3 5 6 3 128 0 3 4 5 3 4 126 0 1 0 5 6 1 5 105 0 4 0 2 4 2 101 0 0 0 7 95 0 7 7 30 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 6 5 3 5 6 3 128 0 3 4 5 3 4 126 0 7 0 0 1 7 0 103 0 1 0 5 6 1 5 105 0 4 2 2 4 89 0 4 4 2 97 0 2 4 2 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
37 52 36 36 52 38 41 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(555,531,o),
(580,550,o),
(578,566,qs),
(563,648,o),
(436,758,o),
(329,758,qs),
(181,758,o),
(43,556,o),
(43,371,qs),
(43,249,o),
(93,78,o),
(223,-22,o),
(338,-22,qs),
(424,-22,o),
(544,48,o),
(604,166,o),
(604,238,qs),
(604,318,o),
(540,436,o),
(424,499,o),
(348,499,qs),
(302,499,o),
(217,473,o),
(185,449,q),
(193,555,o),
(262,642,o),
(328,642,qs),
(371,642,o),
(414,612,o),
(429,575,qs),
(435,556,o),
(470,531,o),
(496,531,qs),
(538,531,ls)
);
},
{
closed = 1;
nodes = (
(393,382,o),
(456,309,o),
(456,235,qs),
(456,166,o),
(392,94,o),
(333,94,qs),
(263,94,o),
(193,174,o),
(193,245,qs),
(193,315,o),
(269,382,o),
(329,382,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 1 6 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
7 1 0 1 2 1 0 2 128 0 2 8 1 6 5 2 6 105 0 1 1 4 97 0 4 4 30 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
7 1 0 1 2 1 0 2 128 0 2 8 1 6 5 2 6 105 0 5 0 3 5 3 101 0 1 1 4 97 0 4 4 30 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
7 1 0 1 2 1 0 2 128 0 4 0 1 0 4 1 105 0 2 8 1 6 5 2 6 105 0 5 3 3 5 89 0 5 5 3 97 0 3 5 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
34 34 1 0 34 45 34 44 40 38 28 26 21 19 13 11 7 5 0 33 1 32 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(27,741,o),
(3,725,o),
(3,711,qs),
(3,678,ls),
(3,655,o),
(39,623,o),
(68,623,qs),
(374,623,ls),
(378,623,o),
(377,617,o),
(373,610,q),
(114,20,ls),
(106,0,o),
(131,-20,o),
(150,-20,qs),
(221,-20,ls),
(232,-20,o),
(256,-10,o),
(260,0,qs),
(526,623,ls),
(537,649,o),
(537,674,qs),
(537,687,ls),
(537,711,o),
(502,741,o),
(472,741,qs),
(43,741,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 2 2 0 95 3 1 0 0 30 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 1 2 1 134 3 1 0 2 2 0 87 3 1 0 0 2 95 0 2 0 2 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
1 0 20 18 12 9 0 26 1 25 4 8 22 
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,351,o),
(30,256,o),
(30,195,qs),
(30,125,o),
(101,19,o),
(231,-40,o),
(315,-40,qs),
(399,-40,o),
(529,19,o),
(602,125,o),
(602,195,qs),
(602,256,o),
(543,350,o),
(489,378,q),
(535,406,o),
(583,490,o),
(583,542,qs),
(583,600,o),
(520,697,o),
(399,754,o),
(315,754,qs),
(231,754,o),
(110,697,o),
(48,601,o),
(48,542,qs),
(48,433,o),
(141,378,q)
);
},
{
closed = 1;
nodes = (
(259,426,o),
(196,479,o),
(196,530,qs),
(196,586,o),
(256,638,o),
(315,638,qs),
(375,638,o),
(435,587,o),
(435,531,qs),
(435,480,o),
(372,426,o),
(315,426,qs)
);
},
{
closed = 1;
nodes = (
(452,316,o),
(452,198,qs),
(452,139,o),
(381,76,o),
(315,76,qs),
(248,76,o),
(177,139,o),
(177,198,qs),
(177,261,o),
(249,316,o),
(315,316,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
26 12 2 5 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 3 7 1 5 4 3 5 105 0 4 0 1 4 1 101 0 2 2 0 97 0 0 0 30 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 0 0 2 3 0 2 105 6 1 3 7 1 5 4 3 5 105 0 4 1 1 4 89 0 4 4 1 97 0 1 4 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
39 39 27 27 39 49 39 48 45 43 27 38 27 37 43 44 36 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 631;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(89,214,o),
(64,196,o),
(66,181,qs),
(77,94,o),
(206,-21,o),
(319,-21,qs),
(423,-21,o),
(544,72,o),
(594,245,o),
(594,375,qs),
(594,561,o),
(467,757,o),
(311,757,qs),
(226,757,o),
(105,691,o),
(43,574,o),
(43,499,qs),
(43,419,o),
(110,304,o),
(229,243,o),
(305,243,qs),
(346,243,o),
(423,265,o),
(453,285,q),
(447,178,o),
(385,95,o),
(324,95,qs),
(279,95,o),
(229,130,o),
(215,170,qs),
(209,189,o),
(174,214,o),
(148,214,qs),
(106,214,ls)
);
},
{
closed = 1;
nodes = (
(190,360,o),
(190,501,qs),
(190,569,o),
(254,641,o),
(313,641,qs),
(377,641,o),
(443,565,o),
(443,494,qs),
(443,428,o),
(377,360,o),
(320,360,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 1 2 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
7 1 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 30 77 0 1 1 4 97 0 4 4 29 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
7 1 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 1 0 4 1 4 101 0 5 5 3 97 0 3 3 30 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
7 1 0 2 1 2 0 1 128 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 4 4 1 89 0 1 1 4 97 0 4 1 4 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
34 34 1 0 34 44 34 43 40 38 28 26 21 19 13 11 7 5 0 33 1 32 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = nine;
unicode = 57;
},
{
glyphname = colon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,85,o),
(140,128,o),
(106,128,qs),
(71,128,o),
(24,85,o),
(24,56,qs),
(24,27,o),
(71,-16,o),
(106,-16,qs),
(140,-16,o),
(186,27,o),
(186,56,qs)
);
},
{
closed = 1;
nodes = (
(186,513,o),
(140,556,o),
(106,556,qs),
(71,556,o),
(24,513,o),
(24,484,qs),
(24,455,o),
(71,412,o),
(106,412,qs),
(140,412,o),
(186,455,o),
(186,484,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 97 0 3 3 31 77 0 1 1 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 1 0 0 1 0 101 0 2 2 3 97 0 3 3 31 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 2 1 3 2 105 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
36 36 36 33 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 213;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(210,514,o),
(164,557,o),
(130,557,qs),
(95,557,o),
(48,514,o),
(48,485,qs),
(48,456,o),
(95,413,o),
(130,413,qs),
(164,413,o),
(210,456,o),
(210,485,qs)
);
},
{
closed = 1;
nodes = (
(0,-153,l),
(100,-153,l),
(220,136,l),
(79,136,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
4 1 3 0 2 3 2 99 0 0 0 1 97 0 1 1 31 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 0 3 1 0 105 4 1 3 2 2 3 87 4 1 3 3 2 95 0 2 3 2 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
12 12 12 15 12 15 20 36 33 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 264;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(231,355,o),
(231,377,o),
(239,385,qs),
(445,580,ls),
(453,588,o),
(446,605,o),
(435,605,qs),
(317,605,ls),
(314,605,o),
(312,603,qs),
(83,385,ls),
(75,377,o),
(75,355,o),
(83,347,qs),
(312,128,ls),
(314,126,o),
(317,126,qs),
(435,126,ls),
(446,126,o),
(453,144,o),
(445,151,qs),
(239,347,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 71 34 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = less;
unicode = 60;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(81,210,o),
(91,210,qs),
(631,210,ls),
(641,210,o),
(641,220,qs),
(641,297,ls),
(641,307,o),
(631,307,qs),
(91,307,ls),
(81,307,o),
(81,297,qs),
(81,220,ls)
);
},
{
closed = 1;
nodes = (
(81,425,o),
(91,425,qs),
(631,425,ls),
(641,425,o),
(641,435,qs),
(641,512,ls),
(641,522,o),
(631,522,qs),
(91,522,ls),
(81,522,o),
(81,512,qs),
(81,435,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 3 0 2 3 103 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 51 51 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 723;
}
);
note = equal;
unicode = 61;
},
{
glyphname = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(73,144,o),
(80,126,o),
(90,126,qs),
(208,126,ls),
(211,126,o),
(213,128,qs),
(442,347,ls),
(450,355,o),
(450,377,o),
(442,385,qs),
(213,603,ls),
(211,605,o),
(208,605,qs),
(90,605,ls),
(80,605,o),
(73,588,o),
(80,580,q),
(286,385,ls),
(294,377,o),
(294,355,o),
(286,347,qs),
(80,151,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 71 38 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 539;
}
);
note = greater;
unicode = 62;
},
{
glyphname = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,495,o),
(143,506,qs),
(144,562,o),
(202,620,o),
(256,620,qs),
(309,620,o),
(369,558,o),
(369,500,qs),
(369,445,o),
(322,387,o),
(240,367,o),
(178,367,qs),
(129,367,l),
(133,199,ls),
(133,195,o),
(139,189,o),
(143,189,qs),
(242,189,ls),
(246,189,o),
(252,195,o),
(252,199,qs),
(255,284,l),
(365,289,o),
(496,396,o),
(496,500,qs),
(496,565,o),
(435,663,o),
(326,716,o),
(255,716,qs),
(185,716,o),
(76,663,o),
(17,567,o),
(17,505,qs),
(17,501,o),
(23,495,o),
(27,495,qs),
(133,495,ls)
);
},
{
closed = 1;
nodes = (
(272,85,o),
(226,128,o),
(192,128,qs),
(157,128,o),
(110,85,o),
(110,56,qs),
(110,27,o),
(157,-16,o),
(192,-16,qs),
(226,-16,o),
(272,27,o),
(272,56,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
8 1 5 4 3 4 5 3 128 0 1 3 2 3 1 2 128 0 3 0 2 7 3 2 103 0 4 4 0 97 0 0 0 28 77 0 7 7 6 97 0 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
8 1 5 4 3 4 5 3 128 0 1 3 2 3 1 2 128 0 3 0 2 7 3 2 103 0 7 0 6 7 6 101 0 4 4 0 97 0 0 0 28 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 46 44 40 38 0 36 0 35 37 36 35 21 38 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = question;
unicode = 63;
},
{
glyphname = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(797,-17,o),
(905,77,o),
(960,226,o),
(960,307,qs),
(960,409,o),
(867,565,o),
(693,651,o),
(577,651,qs),
(427,651,o),
(187,513,o),
(52,276,o),
(52,133,qs),
(52,30,o),
(147,-125,o),
(318,-209,o),
(431,-209,qs),
(487,-209,o),
(595,-188,o),
(641,-169,qs),
(649,-165,o),
(647,-159,q),
(641,-128,ls),
(637,-108,o),
(605,-92,o),
(585,-100,qs),
(523,-124,o),
(449,-124,qs),
(314,-124,o),
(167,11,o),
(168,141,qs),
(168,262,o),
(271,456,o),
(453,567,o),
(566,567,qs),
(702,567,o),
(846,431,o),
(846,302,qs),
(846,247,o),
(819,137,o),
(770,65,o),
(737,65,qs),
(713,65,o),
(700,105,o),
(707,148,qs),
(751,405,ls),
(754,423,o),
(733,449,o),
(714,449,qs),
(648,449,ls),
(645,449,o),
(640,444,o),
(639,441,qs),
(635,422,l),
(593,459,o),
(519,459,qs),
(441,459,o),
(320,377,o),
(253,242,o),
(253,165,qs),
(253,81,o),
(352,-17,o),
(436,-17,qs),
(483,-17,o),
(571,18,o),
(604,49,q),
(617,18,o),
(678,-17,o),
(723,-17,qs)
);
},
{
closed = 1;
nodes = (
(604,197,o),
(564,118,o),
(501,74,o),
(463,74,qs),
(421,74,o),
(378,128,o),
(378,179,qs),
(378,229,o),
(413,316,o),
(477,369,o),
(519,369,qs),
(566,369,o),
(612,303,o),
(607,248,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
14 1 9 1 81 1 3 9 2 1 0 3 46 1 6 5 4 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
14 1 9 2 81 1 3 9 2 1 0 3 46 1 6 5 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
14 1 9 2 81 1 10 9 2 1 0 3 46 1 6 5 4 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 7 0 4 1 7 4 105 2 1 1 0 9 3 1 9 105 0 5 0 6 5 6 101 10 1 3 3 0 98 11 8 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 2 1 9 1 2 9 128 0 7 0 4 1 7 4 105 0 1 0 9 3 1 9 105 0 5 0 6 5 6 101 10 1 3 3 0 98 11 8 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 2 1 9 1 2 9 128 0 7 0 4 1 7 4 105 0 1 0 9 10 1 9 105 0 5 0 6 5 6 101 0 10 10 0 97 11 8 2 0 0 29 77 0 3 3 0 98 11 8 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 2 1 9 1 2 9 128 0 7 0 4 1 7 4 105 0 1 0 9 10 1 9 105 0 10 3 0 10 89 0 3 11 8 2 0 5 3 0 106 0 5 6 6 5 89 0 5 5 6 97 0 6 5 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
0 0 78 76 71 69 0 67 0 66 38 41 37 37 37 52 37 36 12 8 30 
CALL[ ]	/* CallFunction */";
};
width = 1013;
}
);
note = at;
unicode = 64;
},
{
glyphname = A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,22,o),
(550,0,o),
(575,0,qs),
(678,0,l),
(428,672,ls),
(421,691,o),
(385,713,o),
(360,713,qs),
(315,713,ls),
(290,713,o),
(254,691,o),
(247,672,qs),
(-4,0,l),
(99,0,ls),
(124,0,o),
(160,22,o),
(167,41,qs),
(205,143,ls),
(208,151,o),
(217,151,qs),
(457,151,ls),
(466,151,o),
(469,143,qs),
(507,41,ls)
);
},
{
closed = 1;
nodes = (
(425,262,o),
(414,262,qs),
(260,262,ls),
(249,262,o),
(252,272,qs),
(330,485,ls),
(332,491,o),
(342,491,o),
(344,485,qs),
(422,272,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 4 0 0 1 4 0 104 0 2 2 28 77 3 1 1 1 29 1 78 56 35 51 36 49 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = A;
unicode = 65;
},
{
glyphname = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(443,160,o),
(387,112,o),
(329,112,qs),
(198,112,l),
(198,298,ls),
(198,306,o),
(199,312,o),
(203,312,qs),
(326,312,ls),
(383,312,o),
(443,262,o),
(443,210,qs)
);
},
{
closed = 1;
nodes = (
(425,468,o),
(375,424,o),
(321,424,qs),
(198,424,l),
(198,591,ls),
(198,599,o),
(199,605,o),
(203,605,qs),
(319,605,ls),
(375,605,o),
(425,561,o),
(425,515,qs)
);
},
{
closed = 1;
nodes = (
(594,255,o),
(534,346,o),
(484,372,q),
(578,424,o),
(578,525,qs),
(578,578,o),
(519,665,o),
(406,717,o),
(327,717,qs),
(87,717,ls),
(71,717,o),
(47,701,o),
(47,688,qs),
(47,29,ls),
(47,16,o),
(71,0,o),
(87,0,qs),
(337,0,ls),
(415,0,o),
(532,54,o),
(594,145,o),
(594,201,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
42 1 0 3 1 76 0 3 0 0 1 3 0 103 0 2 2 5 95 0 5 5 28 77 0 1 1 4 95 0 4 4 29 4 78 53 53 36 36 36 33 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(13,259,o),
(113,93,o),
(285,0,o),
(391,0,qs),
(510,0,o),
(695,108,o),
(737,202,qs),
(745,221,o),
(720,240,o),
(701,240,qs),
(633,240,ls),
(610,240,o),
(576,222,o),
(566,207,qs),
(537,159,o),
(452,115,o),
(391,115,qs),
(326,115,o),
(224,173,o),
(166,285,o),
(166,362,qs),
(166,440,o),
(224,552,o),
(325,610,o),
(391,610,qs),
(452,610,o),
(537,565,o),
(566,517,qs),
(576,502,o),
(610,484,o),
(633,484,qs),
(701,484,ls),
(720,484,o),
(745,503,o),
(737,522,qs),
(695,617,o),
(510,726,o),
(391,726,qs),
(286,726,o),
(113,632,o),
(13,466,o),
(13,362,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 34 77 0 3 3 5 97 0 5 5 29 5 78 36 52 38 36 52 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = C;
unicode = 67;
},
{
glyphname = D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(83,717,o),
(47,686,o),
(47,663,qs),
(47,29,ls),
(47,16,o),
(71,0,o),
(87,0,qs),
(294,0,ls),
(416,0,o),
(597,87,o),
(694,248,o),
(694,357,qs),
(694,466,o),
(597,628,o),
(416,717,o),
(294,717,qs),
(112,717,ls)
);
},
{
closed = 1;
nodes = (
(198,107,o),
(198,102,qs),
(198,592,ls),
(198,600,o),
(199,606,o),
(203,606,qs),
(294,606,ls),
(417,606,o),
(541,480,o),
(541,357,qs),
(541,235,o),
(418,112,o),
(294,112,qs),
(190,112,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
28 1 1 2 1 76 0 3 3 0 95 4 1 0 0 28 77 5 1 2 2 1 95 0 1 1 29 1 78 18 17 1 0 24 22 17 30 18 30 10 7 0 16 1 15 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 707;
}
);
note = D;
unicode = 68;
},
{
glyphname = E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,718,o),
(472,718,qs),
(57,718,ls),
(51,718,o),
(47,714,o),
(47,708,qs),
(47,10,ls),
(47,4,o),
(51,0,o),
(57,0,qs),
(472,0,ls),
(482,0,o),
(482,10,qs),
(482,58,ls),
(482,81,o),
(446,112,o),
(417,112,qs),
(208,112,ls),
(198,112,o),
(198,122,qs),
(198,297,ls),
(198,306,o),
(208,306,qs),
(442,306,ls),
(452,306,o),
(452,316,qs),
(452,409,ls),
(452,418,o),
(442,418,qs),
(208,418,ls),
(198,418,o),
(198,428,qs),
(198,596,ls),
(198,606,o),
(208,606,qs),
(417,606,ls),
(446,606,o),
(482,637,o),
(482,660,qs),
(482,708,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
33 1 0 5 1 76 0 1 0 2 3 1 2 103 0 0 0 5 95 0 5 5 28 77 0 3 3 4 95 0 4 4 29 4 78 54 36 51 51 51 50 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = E;
unicode = 69;
},
{
glyphname = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(28,0,o),
(38,0,qs),
(169,0,ls),
(179,0,o),
(179,10,qs),
(179,315,ls),
(179,310,o),
(171,305,q),
(415,305,ls),
(425,305,o),
(425,315,qs),
(425,407,ls),
(425,416,o),
(415,416,qs),
(171,416,l),
(179,412,o),
(179,407,qs),
(179,572,ls),
(179,589,o),
(198,606,o),
(214,606,qs),
(417,606,ls),
(446,606,o),
(482,637,o),
(482,660,qs),
(482,707,ls),
(482,717,o),
(472,717,qs),
(63,717,ls),
(47,717,o),
(28,699,o),
(28,683,qs),
(28,10,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
15 1 3 2 1 76 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 28 77 0 4 4 29 4 78 52 35 37 52 50 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 504;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,725,o),
(113,631,o),
(13,466,o),
(13,362,qs),
(13,259,o),
(113,93,o),
(287,0,o),
(393,0,qs),
(493,0,o),
(657,86,o),
(757,233,o),
(765,321,q),
(765,378,ls),
(765,392,o),
(741,407,o),
(725,407,qs),
(395,407,ls),
(366,407,o),
(330,376,o),
(330,354,qs),
(330,307,ls),
(330,297,o),
(340,297,qs),
(627,297,l),
(623,307,o),
(614,314,o),
(607,311,o),
(607,308,qs),
(594,215,o),
(483,118,o),
(393,118,qs),
(327,118,o),
(224,176,o),
(166,286,o),
(166,362,qs),
(166,438,o),
(224,549,o),
(327,607,o),
(393,607,qs),
(459,607,o),
(550,551,o),
(580,491,qs),
(583,484,o),
(591,484,qs),
(739,484,ls),
(744,484,o),
(749,489,o),
(748,494,q),
(724,565,o),
(620,669,o),
(476,725,o),
(393,725,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
39 1 3 4 1 76 0 0 1 4 1 0 4 128 0 4 0 3 2 4 3 103 0 1 1 6 97 7 1 6 6 34 77 0 2 2 5 97 0 5 5 29 5 78 0 0 0 51 0 50 38 52 38 38 36 37 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = G;
unicode = 71;
},
{
glyphname = H;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,23,o),
(525,0,o),
(548,0,qs),
(634,0,ls),
(644,0,o),
(644,10,qs),
(644,707,ls),
(644,717,o),
(634,717,qs),
(503,717,ls),
(493,717,o),
(493,707,qs),
(493,453,ls),
(493,438,o),
(475,419,o),
(458,419,qs),
(208,419,ls),
(198,419,o),
(198,429,qs),
(198,673,ls),
(198,694,o),
(166,717,o),
(143,717,qs),
(57,717,ls),
(47,717,o),
(47,707,qs),
(47,10,ls),
(47,0,o),
(57,0,qs),
(188,0,ls),
(198,0,o),
(198,10,qs),
(198,273,ls),
(198,290,o),
(217,307,o),
(233,307,qs),
(483,307,ls),
(493,307,o),
(493,298,qs),
(493,44,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 3 0 0 1 3 0 103 4 1 2 2 28 77 5 1 1 1 29 1 78 51 52 52 51 52 49 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 691;
}
);
note = H;
unicode = 72;
},
{
glyphname = I;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,18,o),
(66,0,o),
(82,0,qs),
(188,0,ls),
(198,0,o),
(198,10,qs),
(198,683,ls),
(198,699,o),
(180,717,o),
(163,717,qs),
(57,717,ls),
(47,717,o),
(47,707,qs),
(47,34,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 28 77 0 1 1 29 1 78 52 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = I;
unicode = 73;
},
{
glyphname = J;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(306,117,o),
(235,117,qs),
(203,117,o),
(172,146,o),
(165,180,qs),
(154,227,o),
(99,227,qs),
(51,227,ls),
(35,227,o),
(11,212,o),
(11,199,qs),
(14,108,o),
(136,0,o),
(235,0,qs),
(301,0,o),
(402,50,o),
(458,142,o),
(458,201,qs),
(458,707,ls),
(458,717,o),
(448,717,qs),
(371,717,ls),
(342,717,o),
(306,686,o),
(306,664,qs),
(306,201,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 0 3 3 2 114 0 0 0 28 77 0 3 3 1 98 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 128 0 0 0 28 77 0 3 3 1 98 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
35 52 37 50 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = J;
unicode = 74;
},
{
glyphname = K;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(262,367,o),
(268,374,qs),
(562,672,ls),
(576,686,o),
(570,706,o),
(546,717,o),
(534,717,qs),
(462,717,ls),
(424,717,o),
(397,693,q),
(190,468,ls),
(186,463,o),
(178,465,o),
(178,472,qs),
(178,663,ls),
(178,686,o),
(142,717,o),
(113,717,qs),
(37,717,ls),
(27,717,o),
(27,707,qs),
(27,54,ls),
(27,31,o),
(63,0,o),
(92,0,qs),
(168,0,ls),
(178,0,o),
(178,10,qs),
(178,241,ls),
(178,248,o),
(186,250,o),
(190,245,qs),
(404,16,l),
(407,8,o),
(431,0,o),
(442,0,qs),
(537,0,ls),
(559,0,o),
(583,24,o),
(565,45,qs),
(268,360,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
26 1 0 2 1 76 3 1 2 2 28 77 1 1 0 0 29 0 78 56 52 56 50 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = K;
unicode = 75;
},
{
glyphname = L;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,717,o),
(20,707,qs),
(20,29,ls),
(20,16,o),
(44,0,o),
(60,0,qs),
(375,0,ls),
(391,0,o),
(415,16,o),
(415,29,qs),
(415,101,ls),
(415,111,o),
(405,111,qs),
(207,111,ls),
(192,111,o),
(171,131,o),
(171,146,qs),
(171,663,ls),
(171,686,o),
(135,717,o),
(106,717,qs),
(30,717,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
3 1 0 0 28 77 0 1 1 2 96 0 2 2 29 2 78 1 0 16 13 9 6 0 21 1 20 4 8 22 
CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = L;
unicode = 76;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,9,o),
(56,0,o),
(62,0,qs),
(133,0,ls),
(162,0,o),
(198,31,o),
(198,53,qs),
(198,389,l),
(365,23,ls),
(372,8,o),
(386,0,o),
(402,0,qs),
(460,0,ls),
(476,0,o),
(490,8,o),
(497,23,qs),
(663,387,l),
(663,53,ls),
(663,31,o),
(699,0,o),
(728,0,qs),
(799,0,ls),
(805,0,o),
(814,9,o),
(814,15,qs),
(814,697,ls),
(814,703,o),
(805,712,o),
(799,712,qs),
(716,712,ls),
(692,712,o),
(654,693,o),
(647,675,q),
(450,246,ls),
(444,232,o),
(418,232,o),
(412,246,qs),
(215,675,l),
(208,693,o),
(170,712,o),
(146,712,qs),
(62,712,ls),
(56,712,o),
(47,703,o),
(47,697,qs),
(47,15,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
37 28 0 3 1 0 20 1 3 1 2 76 2 1 0 0 28 77 0 1 1 3 95 5 4 2 3 3 29 3 78 38 54 54 36 20 50 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 861;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(513,718,o),
(504,709,o),
(504,703,qs),
(504,181,ls),
(504,186,o),
(538,201,q),
(209,686,ls),
(200,700,o),
(164,718,o),
(141,718,qs),
(62,718,ls),
(56,718,o),
(47,709,o),
(47,703,qs),
(47,54,ls),
(47,31,o),
(83,0,o),
(112,0,qs),
(188,0,ls),
(198,0,o),
(198,10,qs),
(198,538,ls),
(198,533,o),
(164,518,q),
(493,32,ls),
(502,18,o),
(538,0,o),
(561,0,qs),
(645,0,ls),
(655,0,o),
(655,10,qs),
(655,664,ls),
(655,687,o),
(619,718,o),
(590,718,qs),
(519,718,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
32 29 21 11 4 1 0 1 76 3 4 2 0 0 28 77 2 1 1 1 29 1 78 1 0 26 23 18 15 8 5 0 35 1 34 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 700;
}
);
note = N;
unicode = 78;
},
{
glyphname = O;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(773,467,o),
(673,631,o),
(499,725,o),
(393,725,qs),
(287,725,o),
(113,631,o),
(13,467,o),
(13,363,qs),
(13,258,o),
(113,94,o),
(287,0,o),
(393,0,qs),
(499,0,o),
(673,94,o),
(773,258,o),
(773,363,qs)
);
},
{
closed = 1;
nodes = (
(166,441,o),
(224,552,o),
(327,610,o),
(393,610,qs),
(459,610,o),
(562,552,o),
(620,441,o),
(620,363,qs),
(620,285,o),
(562,174,o),
(459,115,o),
(393,115,qs),
(327,115,o),
(224,174,o),
(166,285,o),
(166,363,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 29 0 78 38 38 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = O;
unicode = 79;
},
{
glyphname = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,570,ls),
(198,585,o),
(219,605,o),
(234,605,qs),
(302,605,ls),
(367,605,o),
(420,556,o),
(420,499,qs),
(420,444,o),
(367,395,o),
(302,395,qs),
(198,395,l)
);
},
{
closed = 1;
nodes = (
(573,560,o),
(512,660,o),
(390,717,o),
(302,717,qs),
(112,717,ls),
(83,717,o),
(47,686,o),
(47,663,qs),
(47,10,ls),
(47,0,o),
(57,0,qs),
(133,0,ls),
(162,0,o),
(198,31,o),
(198,54,qs),
(198,283,l),
(302,283,ls),
(394,283,o),
(516,342,o),
(573,441,o),
(573,499,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 0 0 2 3 0 2 103 0 1 1 4 95 0 4 4 28 77 0 3 3 29 3 78 1 0 29 26 22 19 16 14 8 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = P;
unicode = 80;
},
{
glyphname = Q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,439,o),
(224,552,o),
(327,610,o),
(393,610,qs),
(459,610,o),
(562,552,o),
(620,439,o),
(620,361,qs),
(620,283,o),
(562,171,o),
(459,112,o),
(393,112,qs),
(327,112,o),
(224,171,o),
(166,283,o),
(166,361,qs)
);
},
{
closed = 1;
nodes = (
(773,465,o),
(673,631,o),
(499,725,o),
(393,725,qs),
(287,725,o),
(113,631,o),
(13,465,o),
(13,361,qs),
(13,256,o),
(113,90,o),
(287,-4,o),
(393,-4,qs),
(451,-4,o),
(494,8,q),
(495,7,o),
(478,13,q),
(596,-101,ls),
(620,-125,o),
(661,-125,qs),
(737,-125,ls),
(749,-125,o),
(773,-115,o),
(779,-95,o),
(764,-80,qs),
(597,81,l),
(585,69,l),
(678,106,o),
(773,261,o),
(773,361,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
28 19 18 3 3 0 1 76 0 2 3 2 134 0 1 1 4 97 0 4 4 34 77 0 0 0 3 97 0 3 3 29 3 78 38 37 59 38 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(414,443,o),
(358,387,o),
(296,387,qs),
(184,387,l),
(192,382,o),
(192,377,qs),
(192,570,ls),
(192,585,o),
(213,605,o),
(228,605,qs),
(296,605,ls),
(361,605,o),
(414,555,o),
(414,498,qs)
);
},
{
closed = 1;
nodes = (
(77,717,o),
(41,686,o),
(41,663,qs),
(41,10,ls),
(41,0,o),
(51,0,qs),
(182,0,ls),
(192,0,o),
(192,10,qs),
(192,287,ls),
(192,282,o),
(184,277,q),
(251,277,l),
(248,280,o),
(398,33,q),
(408,19,o),
(444,0,o),
(466,0,qs),
(569,0,ls),
(577,0,o),
(584,12,o),
(580,18,qs),
(404,304,ls),
(401,309,o),
(380,308,o),
(370,295,o),
(379,284,q),
(475,306,o),
(568,423,o),
(568,498,qs),
(568,559,o),
(507,659,o),
(384,717,o),
(296,717,qs),
(106,717,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
7 1 3 1 21 1 5 3 2 76 0 3 1 5 1 3 5 128 0 1 0 5 4 1 5 103 0 0 0 2 95 7 1 2 2 28 77 6 1 4 4 29 4 78 15 14 43 40 36 34 31 28 24 23 14 48 15 47 37 49 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = R;
unicode = 82;
},
{
glyphname = S;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(560,283,o),
(493,371,o),
(400,411,o),
(327,428,qs),
(278,440,o),
(221,460,o),
(184,495,o),
(184,524,qs),
(184,571,o),
(239,614,o),
(288,612,qs),
(361,611,o),
(387,554,qs),
(395,537,o),
(429,515,o),
(454,515,qs),
(512,515,ls),
(529,515,o),
(554,532,o),
(552,548,qs),
(543,600,o),
(474,681,o),
(363,726,o),
(292,726,qs),
(215,726,o),
(96,674,o),
(31,580,o),
(31,521,qs),
(31,445,o),
(98,359,o),
(190,321,o),
(263,304,qs),
(313,292,o),
(371,272,o),
(408,235,o),
(408,205,qs),
(408,161,o),
(352,113,o),
(298,113,qs),
(251,113,o),
(201,148,o),
(189,181,qs),
(183,201,o),
(149,225,o),
(122,225,qs),
(67,225,ls),
(51,225,o),
(27,209,o),
(27,196,qs),
(31,138,o),
(103,49,o),
(224,0,o),
(298,0,qs),
(379,0,o),
(498,60,o),
(560,156,o),
(560,209,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 34 77 0 2 2 0 97 0 0 0 29 0 78 35 53 45 36 53 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = S;
unicode = 83;
},
{
glyphname = T;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(4,606,o),
(14,606,qs),
(160,606,ls),
(177,606,o),
(195,589,o),
(195,572,qs),
(195,10,ls),
(195,0,o),
(205,0,qs),
(336,0,ls),
(346,0,o),
(346,10,qs),
(346,572,ls),
(346,589,o),
(365,606,o),
(381,606,qs),
(526,606,ls),
(536,606,o),
(536,616,qs),
(536,707,ls),
(536,717,o),
(526,717,qs),
(14,717,ls),
(4,717,o),
(4,707,qs),
(4,616,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 1 1 0 95 0 0 0 28 77 0 2 2 29 2 78 52 52 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = T;
unicode = 84;
},
{
glyphname = U;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(45,184,o),
(122,61,o),
(255,0,o),
(337,0,qs),
(419,0,o),
(552,61,o),
(630,184,o),
(630,274,qs),
(630,707,ls),
(630,717,o),
(620,717,qs),
(544,717,ls),
(515,717,o),
(479,686,o),
(479,664,qs),
(479,273,ls),
(479,188,o),
(408,116,o),
(338,116,qs),
(268,116,o),
(196,188,o),
(196,273,qs),
(196,664,ls),
(196,686,o),
(160,717,o),
(131,717,qs),
(55,717,ls),
(45,717,o),
(45,707,qs),
(45,274,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 28 77 0 1 1 3 97 0 3 3 29 3 78 37 53 37 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = U;
unicode = 85;
},
{
glyphname = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(354,236,o),
(322,236,o),
(316,252,qs),
(150,696,ls),
(147,705,o),
(122,717,o),
(110,717,qs),
(1,717,ls),
(-5,717,o),
(-12,708,o),
(-10,701,qs),
(247,39,ls),
(254,21,o),
(290,0,o),
(315,0,qs),
(360,0,ls),
(385,0,o),
(421,21,o),
(428,39,qs),
(685,701,ls),
(687,708,o),
(680,717,o),
(674,717,qs),
(566,717,ls),
(554,717,o),
(529,705,o),
(526,696,qs),
(360,252,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 28 77 0 3 3 1 97 0 1 1 29 1 78 20 53 54 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,23,o),
(223,0,o),
(249,0,qs),
(289,1,ls),
(315,1,o),
(351,25,o),
(356,43,qs),
(478,441,ls),
(480,447,o),
(493,447,o),
(494,441,q),
(612,43,ls),
(618,23,o),
(655,1,o),
(680,1,qs),
(720,1,ls),
(745,1,o),
(782,23,o),
(788,43,qs),
(985,703,ls),
(987,708,o),
(980,717,o),
(974,717,qs),
(864,717,ls),
(850,717,o),
(825,703,o),
(823,693,qs),
(709,267,ls),
(708,261,o),
(694,261,o),
(692,267,qs),
(579,674,ls),
(574,693,o),
(536,717,o),
(511,717,qs),
(471,717,ls),
(445,717,o),
(409,693,o),
(404,674,qs),
(282,259,l),
(281,253,o),
(267,255,o),
(265,260,q),
(152,693,ls),
(150,704,o),
(124,717,o),
(111,717,qs),
(3,717,ls),
(-3,717,o),
(-10,708,o),
(-8,703,qs),
(182,43,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 2 0 0 28 77 4 1 3 3 29 3 78 57 54 41 57 50 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 996;
}
);
note = W;
unicode = 87;
},
{
glyphname = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(448,11,o),
(470,0,o),
(481,0,qs),
(598,0,ls),
(606,0,o),
(613,12,o),
(609,18,qs),
(401,346,ls),
(398,351,o),
(398,365,o),
(401,370,qs),
(610,699,ls),
(614,705,o),
(607,717,o),
(599,717,qs),
(483,717,ls),
(472,717,o),
(450,706,o),
(443,699,q),
(330,510,ls),
(325,500,o),
(304,499,o),
(298,509,qs),
(179,699,l),
(172,706,o),
(150,717,o),
(139,717,qs),
(23,717,ls),
(15,717,o),
(8,705,o),
(12,699,qs),
(220,370,ls),
(223,365,o),
(223,351,o),
(220,346,qs),
(13,18,ls),
(9,12,o),
(16,0,o),
(24,0,qs),
(139,0,ls),
(150,0,o),
(172,11,o),
(179,18,q),
(291,206,ls),
(296,216,o),
(317,216,o),
(323,206,qs),
(441,18,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 3 0 0 1 3 0 105 4 1 2 2 28 77 5 1 1 1 29 1 78 58 36 20 58 36 17 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 621;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,271,o),
(217,253,qs),
(217,29,ls),
(217,16,o),
(241,0,o),
(257,0,qs),
(328,0,ls),
(344,0,o),
(368,16,o),
(368,29,qs),
(368,253,ls),
(368,271,o),
(375,285,qs),
(598,699,ls),
(601,706,o),
(594,717,o),
(587,717,qs),
(472,717,ls),
(460,717,o),
(435,706,o),
(432,699,qs),
(304,439,ls),
(300,431,o),
(284,431,o),
(280,439,qs),
(152,699,ls),
(149,706,o),
(124,717,o),
(112,717,qs),
(-4,717,ls),
(-12,717,o),
(-19,706,o),
(-15,699,qs),
(210,285,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 28 77 0 1 1 3 95 0 3 3 29 3 78 57 36 20 50 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,701,o),
(498,717,o),
(482,717,qs),
(30,717,ls),
(20,717,o),
(20,707,qs),
(20,655,ls),
(20,632,o),
(56,601,o),
(85,601,qs),
(317,601,ls),
(325,601,o),
(332,590,o),
(328,583,qs),
(22,101,l),
(16,87,o),
(16,83,qs),
(16,29,ls),
(16,16,o),
(40,0,o),
(56,0,qs),
(514,0,ls),
(524,0,o),
(524,10,qs),
(524,62,ls),
(524,85,o),
(488,116,o),
(459,116,qs),
(221,116,ls),
(213,116,o),
(206,127,o),
(210,134,qs),
(516,616,l),
(522,630,o),
(522,634,qs),
(522,688,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 18 1 1 0 2 76 0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 52 56 52 53 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = Z;
unicode = 90;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(113,-196,o),
(123,-196,qs),
(323,-196,ls),
(333,-196,o),
(333,-186,qs),
(333,-110,ls),
(333,-100,o),
(323,-100,qs),
(274,-100,ls),
(259,-100,o),
(238,-79,o),
(238,-64,qs),
(238,813,ls),
(238,828,o),
(259,849,o),
(274,849,qs),
(323,849,ls),
(333,849,o),
(333,859,qs),
(333,934,ls),
(333,944,o),
(323,944,qs),
(123,944,ls),
(113,944,o),
(113,934,qs),
(113,-186,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 105 0 2 3 3 2 89 0 2 2 3 95 0 3 2 3 79 51 53 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 423;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(221,942,l),
(131,942,l),
(444,-170,l),
(534,-170,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 658;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(333,944,o),
(323,944,qs),
(123,944,ls),
(113,944,o),
(113,934,qs),
(113,859,ls),
(113,849,o),
(123,849,qs),
(172,849,ls),
(187,849,o),
(208,828,o),
(208,813,qs),
(208,-64,ls),
(208,-79,o),
(187,-100,o),
(172,-100,qs),
(123,-100,ls),
(113,-100,o),
(113,-110,qs),
(113,-186,ls),
(113,-196,o),
(123,-196,qs),
(323,-196,ls),
(333,-196,o),
(333,-186,qs),
(333,934,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 3 0 2 1 3 2 105 0 1 0 0 1 89 0 1 1 0 95 0 0 1 0 79 51 53 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 423;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,159,o),
(488,159,qs),
(600,159,ls),
(607,159,o),
(613,170,o),
(610,176,qs),
(381,684,ls),
(377,692,o),
(362,703,o),
(353,703,qs),
(277,703,ls),
(268,703,o),
(252,692,o),
(248,684,qs),
(20,176,ls),
(17,170,o),
(23,159,o),
(30,159,qs),
(141,159,ls),
(147,159,o),
(149,164,qs),
(271,436,ls),
(280,456,o),
(315,471,o),
(351,455,o),
(360,435,qs),
(480,164,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 133 2 1 0 0 118 37 54 23 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 629;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(85,-132,o),
(95,-132,qs),
(647,-132,ls),
(657,-132,o),
(657,-122,qs),
(657,-38,ls),
(657,-28,o),
(647,-28,qs),
(95,-28,ls),
(85,-28,o),
(85,-38,qs),
(85,-122,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 51 49 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 733;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-3,699,o),
(2,697,q),
(232,574,ls),
(239,570,o),
(250,577,o),
(250,585,qs),
(250,655,ls),
(250,661,o),
(246,663,qs),
(16,797,ls),
(9,801,o),
(-3,794,o),
(-3,786,qs),
(-3,705,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
9 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 257;
}
);
note = grave;
unicode = 96;
},
{
glyphname = a;
lastChange = "2023-01-11 15:44:49 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(478,30,o),
(514,0,o),
(543,0,qs),
(619,0,ls),
(629,0,o),
(629,9,qs),
(629,526,ls),
(629,548,o),
(593,578,o),
(564,578,qs),
(488,578,ls),
(478,578,o),
(478,568,qs),
(478,520,l),
(444,546,o),
(355,576,o),
(303,576,qs),
(220,576,o),
(88,502,o),
(13,370,o),
(13,286,qs),
(13,202,o),
(88,71,o),
(220,0,o),
(303,0,qs),
(355,0,o),
(478,61,qs)
);
},
{
closed = 1;
nodes = (
(145,342,o),
(189,423,o),
(263,465,o),
(309,465,qs),
(354,465,o),
(429,423,o),
(473,342,o),
(473,287,qs),
(473,232,o),
(429,152,o),
(354,110,o),
(309,110,qs),
(238,110,o),
(145,203,o),
(145,286,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
14 1 5 1 28 1 0 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
14 1 5 1 28 1 3 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 5 5 1 97 2 1 1 1 37 77 0 4 4 0 97 3 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 5 5 1 97 2 1 1 1 37 77 0 3 3 29 77 0 4 4 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
38 36 52 52 38 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = a;
unicode = 97;
},
{
glyphname = b;
lastChange = "2023-01-11 15:46:01 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,21,o),
(321,0,o),
(373,0,qs),
(456,0,o),
(588,72,o),
(663,204,o),
(663,290,qs),
(663,374,o),
(588,508,o),
(456,583,o),
(373,583,qs),
(321,583,o),
(232,552,o),
(198,526,q),
(198,750,ls),
(198,760,o),
(188,760,qs),
(112,760,ls),
(83,760,o),
(47,729,o),
(47,707,qs),
(47,9,ls),
(47,0,o),
(57,0,qs),
(133,0,ls),
(162,0,o),
(198,30,o),
(198,46,q)
);
},
{
closed = 1;
nodes = (
(516,208,o),
(433,121,o),
(367,121,qs),
(303,121,o),
(218,210,o),
(218,291,qs),
(218,372,o),
(303,461,o),
(367,461,qs),
(432,461,o),
(516,371,o),
(516,290,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
14 1 4 2 28 1 0 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 30 77 0 4 4 2 97 0 2 2 37 77 0 5 5 0 97 3 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 1 1 30 77 0 4 4 2 97 0 2 2 37 77 0 0 0 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 2 97 0 2 2 37 77 0 1 1 0 95 0 0 0 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 36 38 36 52 50 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(13,203,o),
(89,71,o),
(224,0,o),
(310,0,qs),
(387,0,o),
(509,53,o),
(583,146,o),
(594,204,qs),
(595,209,o),
(590,214,o),
(585,214,qs),
(495,214,ls),
(470,214,o),
(435,193,o),
(426,176,qs),
(409,142,o),
(354,111,o),
(310,111,qs),
(243,111,o),
(166,200,o),
(166,289,qs),
(166,378,o),
(243,466,o),
(310,466,qs),
(354,466,o),
(409,435,o),
(427,401,qs),
(435,384,o),
(470,363,o),
(495,363,qs),
(584,363,ls),
(589,363,o),
(594,368,o),
(593,373,qs),
(577,466,o),
(426,577,o),
(310,577,qs),
(224,577,o),
(89,506,o),
(13,375,o),
(13,289,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 37 77 0 3 3 5 97 0 5 5 29 5 78 38 36 36 36 52 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = c;
unicode = 99;
},
{
glyphname = d;
lastChange = "2023-01-11 15:46:14 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(478,30,o),
(514,0,o),
(543,0,qs),
(619,0,ls),
(629,0,o),
(629,9,qs),
(629,707,ls),
(629,729,o),
(593,760,o),
(564,760,qs),
(488,760,ls),
(478,760,o),
(478,750,qs),
(478,526,l),
(444,552,o),
(355,583,o),
(303,583,qs),
(220,583,o),
(88,508,o),
(13,374,o),
(13,290,qs),
(13,204,o),
(88,72,o),
(220,0,o),
(303,0,qs),
(355,0,o),
(444,21,o),
(478,46,q)
);
},
{
closed = 1;
nodes = (
(160,371,o),
(244,461,o),
(309,461,qs),
(373,461,o),
(458,372,o),
(458,291,qs),
(458,210,o),
(373,121,o),
(309,121,qs),
(243,121,o),
(160,208,o),
(160,290,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
14 1 5 1 28 1 0 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
14 1 5 1 28 1 3 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 2 2 30 77 0 5 5 1 97 0 1 1 37 77 0 4 4 0 97 3 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 2 30 77 0 5 5 1 97 0 1 1 37 77 0 3 3 29 77 0 4 4 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 5 5 1 97 0 1 1 37 77 0 2 2 3 95 0 3 3 29 77 0 4 4 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 36 52 52 38 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = d;
unicode = 100;
},
{
glyphname = e;
lastChange = "2023-01-11 15:47:31 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(361,466,o),
(437,411,o),
(446,357,qs),
(447,351,o),
(441,346,o),
(436,346,qs),
(176,346,ls),
(165,346,o),
(167,356,qs),
(181,410,o),
(253,466,o),
(305,466,qs)
);
},
{
closed = 1;
nodes = (
(467,208,o),
(434,188,o),
(425,173,qs),
(406,141,o),
(352,111,o),
(309,111,qs),
(253,111,o),
(177,169,o),
(165,227,qs),
(163,237,o),
(174,237,qs),
(559,237,ls),
(572,237,o),
(598,250,o),
(600,263,qs),
(602,297,o),
(602,308,qs),
(602,384,o),
(530,507,o),
(396,577,o),
(309,577,qs),
(221,577,o),
(84,506,o),
(8,375,o),
(8,289,qs),
(8,204,o),
(85,72,o),
(222,0,o),
(309,0,qs),
(388,0,o),
(511,57,o),
(586,151,o),
(596,208,q),
(492,208,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
30 1 4 0 1 76 8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 97 0 2 2 29 2 78 12 12 0 0 12 45 12 44 40 38 35 32 25 23 17 15 0 11 0 10 35 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = e;
unicode = 101;
},
{
glyphname = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(66,0,o),
(76,0,qs),
(207,0,ls),
(217,0,o),
(217,10,qs),
(217,452,ls),
(217,461,o),
(227,461,qs),
(322,461,ls),
(332,461,o),
(332,471,qs),
(332,564,ls),
(332,573,o),
(322,573,qs),
(209,573,l),
(217,569,o),
(217,564,qs),
(217,592,ls),
(217,633,o),
(237,664,o),
(265,669,qs),
(293,673,o),
(326,701,o),
(326,724,qs),
(326,773,ls),
(326,783,o),
(316,783,qs),
(189,788,o),
(66,694,o),
(66,592,qs),
(66,564,ls),
(66,569,o),
(74,573,q),
(5,573,ls),
(-5,573,o),
(-5,564,qs),
(-5,471,ls),
(-5,461,o),
(5,461,qs),
(31,461,ls),
(48,461,o),
(66,444,o),
(66,427,qs),
(66,10,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
26 1 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 36 77 4 1 0 0 1 97 3 1 1 1 37 77 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 36 77 4 1 0 0 1 97 3 1 1 1 31 77 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 36 77 4 1 0 0 1 97 3 1 1 1 37 77 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 36 77 4 1 0 0 1 97 3 1 1 1 31 77 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 36 77 4 1 0 0 1 97 3 1 1 1 37 77 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 2 1 2 133 4 1 0 0 1 97 3 1 1 1 37 77 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
51 51 43 37 35 50 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 329;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,88,o),
(145,187,o),
(145,276,qs),
(145,365,o),
(237,461,o),
(309,461,qs),
(355,461,o),
(429,418,o),
(473,334,o),
(473,275,qs),
(473,186,o),
(380,88,o),
(309,88,qs)
);
},
{
closed = 1;
nodes = (
(497,568,o),
(478,550,o),
(478,533,qs),
(478,520,l),
(444,546,o),
(355,577,o),
(303,577,qs),
(220,577,o),
(88,502,o),
(13,365,o),
(13,276,qs),
(13,188,o),
(88,49,o),
(220,-29,o),
(303,-29,qs),
(355,-29,o),
(444,3,o),
(478,30,q),
(478,0,ls),
(478,-80,o),
(403,-159,o),
(338,-159,qs),
(228,-159,o),
(194,-69,qs),
(191,-60,o),
(165,-48,o),
(154,-48,qs),
(41,-48,l),
(45,-116,o),
(123,-220,o),
(255,-278,o),
(338,-278,qs),
(427,-278,o),
(558,-206,o),
(629,-80,o),
(629,0,qs),
(629,558,ls),
(629,568,o),
(619,568,qs),
(513,568,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
48 1 0 2 34 1 6 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 4 6 5 6 4 5 128 8 1 1 0 6 4 1 6 105 0 0 0 2 97 7 9 2 2 2 31 77 0 5 5 3 97 0 3 3 33 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 4 6 5 6 4 5 128 8 1 1 0 6 4 1 6 105 9 1 2 2 31 77 0 0 0 7 97 0 7 7 37 77 0 5 5 3 97 0 3 3 33 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
14 13 0 0 46 44 38 36 31 29 26 24 21 19 13 52 14 51 0 12 0 11 37 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = g;
unicode = 103;
},
{
glyphname = h;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(448,0,o),
(458,0,qs),
(588,0,ls),
(598,0,o),
(598,10,qs),
(598,334,ls),
(598,413,o),
(533,525,o),
(418,583,o),
(344,583,qs),
(304,583,o),
(228,561,o),
(198,542,q),
(198,716,ls),
(198,737,o),
(166,760,o),
(143,760,qs),
(57,760,ls),
(47,760,o),
(47,750,qs),
(47,10,ls),
(47,0,o),
(57,0,qs),
(188,0,ls),
(198,0,o),
(198,10,qs),
(198,315,ls),
(198,467,o),
(325,467,qs),
(385,467,o),
(448,397,o),
(448,322,qs),
(448,10,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
19 1 0 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 30 77 0 0 0 3 97 0 3 3 37 77 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 3 97 0 3 3 37 77 0 2 2 1 95 4 1 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
53 37 51 51 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = h;
unicode = 104;
},
{
glyphname = i;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,44,ls),
(47,23,o),
(79,0,o),
(102,0,qs),
(198,0,l),
(198,530,ls),
(198,550,o),
(166,573,o),
(143,573,qs),
(47,573,l)
);
},
{
closed = 1;
nodes = (
(160,637,o),
(208,681,o),
(208,711,qs),
(208,741,o),
(160,785,o),
(124,785,qs),
(87,785,o),
(38,741,o),
(38,711,qs),
(38,681,o),
(87,637,o),
(124,637,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
5 1 3 3 2 97 0 2 2 36 77 4 1 0 0 31 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 5 1 3 0 2 3 105 4 1 0 0 31 77 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
10 10 1 0 10 21 10 20 16 14 6 4 0 9 1 9 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = i;
unicode = 105;
},
{
glyphname = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,568,o),
(50,558,qs),
(50,-117,ls),
(50,-142,o),
(43,-161,o),
(21,-165,o),
(-9,-162,qs),
(-26,-161,o),
(-57,-179,o),
(-57,-196,qs),
(-57,-280,l),
(26,-280,ls),
(111,-280,o),
(201,-199,o),
(201,-119,qs),
(201,513,ls),
(201,536,o),
(165,568,o),
(136,568,qs),
(60,568,ls)
);
},
{
closed = 1;
nodes = (
(163,622,o),
(211,667,o),
(211,698,qs),
(211,729,o),
(163,774,o),
(127,774,qs),
(90,774,o),
(41,729,o),
(41,698,qs),
(41,667,o),
(90,622,o),
(127,622,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 4 4 3 97 0 3 3 36 77 5 1 0 0 31 77 0 2 2 1 96 0 1 1 33 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 6 1 4 0 3 4 105 5 1 0 0 31 77 0 2 2 1 96 0 1 1 33 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
20 20 1 0 20 31 20 30 26 24 12 11 8 6 0 19 1 18 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 248;
}
);
note = j;
unicode = 106;
},
{
glyphname = k;
lastChange = "2023-03-27 02:04:55 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(24,32,o),
(60,0,o),
(89,0,qs),
(165,0,ls),
(175,0,o),
(175,10,qs),
(175,223,l),
(175,223,o),
(171,222,q),
(155,212,o),
(141,208,q),
(329,16,l),
(333,9,o),
(356,0,o),
(367,0,qs),
(467,0,ls),
(490,0,o),
(512,24,o),
(494,46,q),
(261,275,l),
(256,270,l),
(525,556,ls),
(529,561,o),
(526,568,o),
(520,568,qs),
(382,568,ls),
(340,568,o),
(317,542,qs),
(207,414,ls),
(175,376,o),
(175,378,qs),
(175,705,ls),
(175,728,o),
(139,760,o),
(110,760,qs),
(34,760,ls),
(24,760,o),
(24,750,qs),
(24,55,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
29 27 18 7 4 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 30 77 0 1 1 31 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
3 1 2 2 0 95 0 0 0 30 77 3 1 2 2 1 95 0 1 1 31 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
0 0 1 2 0 87 3 1 2 2 1 95 0 1 1 31 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
57 56 39 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 548;
}
);
note = k;
unicode = 107;
},
{
glyphname = l;
lastChange = "2023-03-27 02:27:42 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,32,o),
(83,0,o),
(112,0,qs),
(188,0,ls),
(198,0,o),
(198,10,qs),
(198,750,ls),
(198,760,o),
(188,760,qs),
(57,760,ls),
(47,760,o),
(47,750,qs),
(47,55,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 30 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 95 0 0 0 30 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
51 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = l;
unicode = 108;
},
{
glyphname = m;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(610,580,o),
(521,532,q),
(498,551,o),
(399,580,o),
(344,580,qs),
(299,580,o),
(212,548,o),
(198,534,q),
(198,537,o),
(180,555,o),
(151,570,o),
(133,570,qs),
(62,570,ls),
(56,570,o),
(47,562,o),
(47,556,qs),
(47,10,ls),
(47,0,o),
(57,0,qs),
(188,0,ls),
(198,0,o),
(198,10,qs),
(198,313,ls),
(198,465,o),
(325,465,qs),
(385,465,o),
(448,395,o),
(448,320,qs),
(448,35,ls),
(448,20,o),
(469,0,o),
(484,0,qs),
(588,0,ls),
(598,0,o),
(598,10,qs),
(598,307,ls),
(598,389,o),
(657,465,o),
(716,465,qs),
(776,465,o),
(839,395,o),
(839,320,qs),
(839,35,ls),
(839,20,o),
(860,0,o),
(875,0,qs),
(979,0,ls),
(989,0,o),
(989,10,qs),
(989,333,ls),
(989,411,o),
(924,523,o),
(809,580,o),
(735,580,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
51 37 2 1 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
3 1 1 1 5 97 8 7 6 3 5 5 31 77 4 2 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 5 5 31 77 3 1 1 1 6 97 8 7 2 6 6 37 77 4 2 2 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 53 0 52 37 52 51 37 52 37 53 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 1030;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(453,21,o),
(474,0,o),
(489,0,qs),
(583,0,ls),
(593,0,o),
(593,10,qs),
(593,331,ls),
(593,409,o),
(529,519,o),
(416,575,o),
(344,575,qs),
(294,575,o),
(210,543,o),
(193,516,q),
(193,538,o),
(161,565,o),
(133,565,qs),
(67,565,ls),
(61,565,o),
(52,556,o),
(52,551,qs),
(52,10,ls),
(52,0,o),
(62,0,qs),
(183,0,ls),
(193,0,o),
(193,10,qs),
(193,311,ls),
(193,392,o),
(262,468,o),
(325,468,qs),
(453,468,o),
(453,318,qs),
(453,35,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 12 2 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 2 97 3 1 2 2 31 77 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 31 77 0 0 0 3 97 0 3 3 37 77 4 1 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
53 36 52 52 33 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = n;
unicode = 110;
},
{
glyphname = o;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(627,375,o),
(547,506,o),
(407,577,o),
(320,577,qs),
(234,577,o),
(94,506,o),
(13,375,o),
(13,289,qs),
(13,204,o),
(92,72,o),
(230,0,o),
(316,0,qs),
(403,0,o),
(545,72,o),
(627,204,o),
(627,289,qs)
);
},
{
closed = 1;
nodes = (
(166,378,o),
(251,464,o),
(319,464,qs),
(386,464,o),
(474,377,o),
(474,289,qs),
(474,202,o),
(384,114,o),
(316,114,qs),
(249,114,o),
(166,200,o),
(166,289,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 29 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = o;
unicode = 111;
},
{
glyphname = p;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(198,536,o),
(162,568,o),
(133,568,qs),
(57,568,ls),
(47,568,o),
(47,558,qs),
(47,-225,ls),
(47,-248,o),
(83,-280,o),
(112,-280,qs),
(188,-280,ls),
(198,-280,o),
(198,-270,qs),
(198,30,l),
(232,3,o),
(321,-29,o),
(373,-29,qs),
(456,-29,o),
(588,49,o),
(663,188,o),
(663,276,qs),
(663,365,o),
(588,502,o),
(456,577,o),
(373,577,qs),
(321,577,o),
(232,546,o),
(198,520,q),
(198,513,ls)
);
},
{
closed = 1;
nodes = (
(516,191,o),
(432,98,o),
(367,98,qs),
(303,98,o),
(218,190,o),
(218,275,qs),
(218,359,o),
(303,451,o),
(367,451,qs),
(433,451,o),
(516,361,o),
(516,276,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
28 1 4 0 14 1 1 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
28 1 4 3 14 1 1 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 0 1 2 5 1 105 0 4 4 0 97 3 1 0 0 37 77 0 2 2 33 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 5 0 1 2 5 1 105 0 3 3 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 33 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 36 52 52 38 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = p;
unicode = 112;
},
{
glyphname = q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,546,o),
(355,577,o),
(303,577,qs),
(220,577,o),
(88,502,o),
(13,365,o),
(13,276,qs),
(13,188,o),
(88,49,o),
(220,-29,o),
(303,-29,qs),
(355,-29,o),
(444,3,o),
(478,30,q),
(478,-270,ls),
(478,-280,o),
(488,-280,qs),
(564,-280,ls),
(593,-280,o),
(629,-248,o),
(629,-225,qs),
(629,558,ls),
(629,568,o),
(619,568,qs),
(543,568,ls),
(514,568,o),
(478,536,o),
(478,513,qs),
(478,520,l)
);
},
{
closed = 1;
nodes = (
(160,361,o),
(243,451,o),
(309,451,qs),
(373,451,o),
(458,359,o),
(458,275,qs),
(458,190,o),
(373,98,o),
(309,98,qs),
(244,98,o),
(160,191,o),
(160,276,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
28 1 5 0 14 1 2 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 4 0 2 1 4 2 105 0 5 5 0 97 3 1 0 0 31 77 0 1 1 33 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 4 0 2 1 4 2 105 0 0 0 31 77 0 5 5 3 97 0 3 3 37 77 0 1 1 33 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 36 38 36 52 50 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(347,480,o),
(315,456,o),
(289,452,qs),
(236,447,o),
(178,381,o),
(178,312,qs),
(178,10,ls),
(178,0,o),
(168,0,qs),
(37,0,ls),
(27,0,o),
(27,10,qs),
(27,559,ls),
(27,568,o),
(37,568,qs),
(123,568,ls),
(146,568,o),
(178,545,o),
(178,525,qs),
(178,535,l),
(238,573,o),
(322,578,qs),
(341,578,o),
(363,561,o),
(361,544,q),
(352,500,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
5 1 2 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
5 1 2 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
1 1 0 0 37 77 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 37 77 0 1 1 31 77 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
51 52 34 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = r;
unicode = 114;
},
{
glyphname = s;
lastChange = "2023-03-27 02:03:57 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,229,o),
(445,298,o),
(363,330,o),
(299,346,qs),
(239,360,o),
(185,387,o),
(185,412,qs),
(185,440,o),
(222,466,o),
(262,466,qs),
(297,466,o),
(335,442,o),
(346,416,qs),
(353,399,o),
(385,375,o),
(412,375,qs),
(462,375,ls),
(478,375,o),
(503,391,o),
(501,406,qs),
(492,485,o),
(364,577,o),
(265,577,qs),
(197,577,o),
(92,532,o),
(34,457,o),
(34,412,qs),
(34,359,o),
(94,292,o),
(176,258,o),
(241,239,qs),
(302,222,o),
(358,194,o),
(358,169,qs),
(358,111,o),
(276,111,qs),
(238,111,o),
(194,134,o),
(183,160,q),
(162,200,o),
(116,200,qs),
(63,200,ls),
(47,200,o),
(22,184,o),
(24,169,qs),
(30,121,o),
(99,44,o),
(209,0,o),
(277,0,qs),
(345,0,o),
(450,45,o),
(507,122,o),
(507,169,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 37 77 0 2 2 0 97 0 0 0 29 0 78 36 52 43 35 53 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
note = s;
unicode = 115;
},
{
glyphname = t;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(83,0,o),
(265,0,qs),
(377,0,l),
(377,60,ls),
(377,83,o),
(341,114,o),
(312,114,qs),
(280,114,ls),
(258,114,o),
(240,121,o),
(234,141,o),
(234,165,qs),
(234,470,ls),
(234,465,o),
(226,460,q),
(367,460,ls),
(377,460,o),
(377,470,qs),
(377,562,ls),
(377,572,o),
(367,572,qs),
(226,572,l),
(234,567,o),
(234,562,qs),
(234,696,ls),
(234,706,o),
(224,706,qs),
(93,706,ls),
(83,706,o),
(83,696,qs),
(83,607,ls),
(83,592,o),
(62,572,o),
(47,572,qs),
(22,572,ls),
(12,572,o),
(12,562,qs),
(12,470,ls),
(12,460,o),
(22,460,qs),
(91,460,l),
(83,465,o),
(83,470,qs),
(83,165,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 0 2 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 2 28 77 4 1 0 0 1 97 3 1 1 1 31 77 0 5 5 6 95 0 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 2 1 2 133 4 1 0 0 1 97 3 1 1 1 31 77 0 5 5 6 95 0 6 6 29 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
35 54 35 36 52 51 34 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 389;
}
);
note = t;
unicode = 116;
},
{
glyphname = u;
lastChange = "2023-01-11 15:45:02 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(192,554,o),
(163,574,o),
(142,574,qs),
(62,574,ls),
(52,574,o),
(52,564,qs),
(52,244,ls),
(52,166,o),
(116,56,o),
(229,0,o),
(301,0,qs),
(351,0,o),
(435,32,o),
(452,59,q),
(452,27,o),
(484,0,o),
(512,0,qs),
(593,0,l),
(593,564,ls),
(593,574,o),
(583,574,qs),
(462,574,ls),
(452,574,o),
(452,564,qs),
(452,264,ls),
(452,183,o),
(383,106,o),
(320,106,qs),
(192,106,o),
(192,257,qs),
(192,535,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
16 1 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 1 1 1 31 77 0 0 0 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 1 31 77 0 2 2 29 77 0 0 0 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 1 95 4 1 1 1 31 77 0 0 0 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
53 36 34 52 33 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = u;
unicode = 117;
},
{
glyphname = v;
lastChange = "2023-01-11 15:48:29 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1,568,o),
(-3,561,o),
(-1,556,qs),
(209,38,ls),
(216,21,o),
(254,0,o),
(278,0,qs),
(324,0,ls),
(348,0,o),
(386,21,o),
(393,38,qs),
(603,556,ls),
(605,561,o),
(601,568,o),
(596,568,qs),
(502,568,ls),
(477,568,o),
(441,546,o),
(434,527,qs),
(316,218,ls),
(312,208,o),
(292,208,o),
(288,218,qs),
(169,527,ls),
(162,546,o),
(126,568,o),
(101,568,qs),
(6,568,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
2 4 2 0 0 31 77 0 1 1 3 97 0 3 3 29 3 78 1 0 21 18 12 10 6 5 0 27 1 26 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
lastChange = "2023-01-11 15:46:53 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(11,568,o),
(14,557,qs),
(182,40,ls),
(188,21,o),
(221,0,o),
(243,0,qs),
(280,0,ls),
(303,0,o),
(337,22,o),
(341,40,q),
(437,332,ls),
(439,338,o),
(452,338,o),
(453,332,q),
(548,40,ls),
(554,21,o),
(587,0,o),
(609,0,qs),
(646,0,ls),
(669,0,o),
(703,22,o),
(707,40,q),
(876,557,ls),
(879,568,o),
(868,568,qs),
(789,568,ls),
(768,568,o),
(735,547,o),
(729,527,qs),
(636,223,l),
(635,217,o),
(622,217,o),
(620,223,qs),
(527,527,l),
(523,546,o),
(491,567,o),
(471,568,qs),
(414,568,l),
(395,565,o),
(367,544,o),
(363,527,q),
(270,223,l),
(269,217,o),
(256,217,o),
(254,223,qs),
(161,527,l),
(157,546,o),
(122,568,o),
(101,568,qs),
(22,568,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
2 1 5 3 0 0 31 77 4 1 3 3 29 3 78 1 0 44 41 32 29 25 22 13 11 0 49 1 48 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 879;
}
);
note = w;
unicode = 119;
},
{
glyphname = x;
lastChange = "2023-01-11 15:47:00 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,9,o),
(392,0,o),
(402,0,qs),
(519,0,ls),
(527,0,o),
(534,13,o),
(530,19,qs),
(361,275,ls),
(357,280,o),
(357,294,o),
(361,298,q),
(528,549,ls),
(533,556,o),
(526,568,o),
(518,568,qs),
(409,568,ls),
(398,568,o),
(376,557,o),
(369,550,q),
(291,426,ls),
(286,417,o),
(266,415,o),
(260,425,qs),
(176,553,ls),
(172,559,o),
(149,568,o),
(139,568,qs),
(22,568,ls),
(14,568,o),
(7,555,o),
(11,549,qs),
(180,293,ls),
(184,288,o),
(184,274,o),
(180,270,q),
(12,19,ls),
(8,13,o),
(15,0,o),
(23,0,qs),
(131,0,ls),
(142,0,o),
(164,11,o),
(171,18,q),
(250,143,ls),
(255,152,o),
(275,153,o),
(281,143,qs),
(365,15,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
0 0 2 1 2 0 1 128 3 1 2 2 31 77 4 1 1 1 29 1 78 58 41 58 36 17 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 540;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
lastChange = "2023-01-11 15:48:24 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,210,o),
(303,210,o),
(299,220,qs),
(167,562,l),
(166,568,o),
(159,568,qs),
(18,568,ls),
(11,568,o),
(5,558,o),
(7,552,qs),
(231,6,l),
(113,-278,l),
(269,-278,l),
(610,552,ls),
(612,558,o),
(606,568,o),
(599,568,qs),
(465,568,ls),
(459,568,o),
(457,562,qs),
(327,220,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 1 1 3 1 76 0 3 0 1 0 3 1 128 2 1 0 0 31 77 0 1 1 33 1 78 20 36 20 18 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
note = y;
unicode = 121;
},
{
glyphname = z;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(442,553,o),
(418,568,o),
(402,568,qs),
(23,568,ls),
(13,568,o),
(13,558,qs),
(13,511,ls),
(13,489,o),
(49,458,o),
(78,458,qs),
(237,458,ls),
(245,458,o),
(252,445,o),
(248,439,qs),
(17,103,l),
(11,89,o),
(11,85,qs),
(11,29,ls),
(11,15,o),
(35,0,o),
(51,0,qs),
(434,0,ls),
(444,0,o),
(444,10,qs),
(444,58,ls),
(444,80,o),
(408,111,o),
(379,111,qs),
(215,111,ls),
(207,111,o),
(199,124,o),
(204,130,qs),
(436,466,l),
(442,480,o),
(442,484,qs),
(442,539,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 18 1 1 0 2 76 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 52 56 52 53 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 477;
}
);
note = z;
unicode = 122;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(284,405,o),
(315,470,o),
(315,511,qs),
(315,555,o),
(305,651,qs),
(302,686,o),
(296,757,o),
(296,780,qs),
(296,818,o),
(322,845,o),
(353,845,qs),
(404,845,ls),
(414,845,o),
(414,855,qs),
(414,934,ls),
(414,944,o),
(404,944,qs),
(336,944,ls),
(261,944,o),
(167,863,o),
(167,786,qs),
(167,742,o),
(177,644,qs),
(187,552,o),
(187,514,qs),
(187,477,o),
(153,431,o),
(113,421,qs),
(100,418,o),
(85,400,o),
(85,388,qs),
(85,359,ls),
(85,347,o),
(100,329,o),
(113,326,qs),
(153,316,o),
(187,270,o),
(187,233,qs),
(187,195,o),
(177,103,qs),
(167,5,o),
(167,-39,qs),
(167,-116,o),
(261,-197,o),
(336,-197,qs),
(404,-197,ls),
(414,-197,o),
(414,-187,qs),
(414,-108,ls),
(414,-98,o),
(404,-98,qs),
(353,-98,ls),
(322,-98,o),
(296,-71,o),
(296,-33,qs),
(296,-10,o),
(302,61,o),
(305,96,qs),
(315,192,o),
(315,236,qs),
(315,277,o),
(284,342,o),
(253,361,qs),
(242,369,o),
(242,380,o),
(253,387,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
0 2 0 3 0 2 3 105 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 55 52 49 46 51 60 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 462;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(80,805,l),
(80,-116,l),
(211,-116,l),
(211,805,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 291;
}
);
note = bar;
unicode = 124;
},
{
glyphname = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(257,380,o),
(257,369,o),
(246,361,qs),
(215,342,o),
(184,277,o),
(184,236,qs),
(184,192,o),
(194,96,qs),
(197,61,o),
(203,-10,o),
(203,-33,qs),
(203,-71,o),
(177,-98,o),
(146,-98,qs),
(95,-98,ls),
(85,-98,o),
(85,-108,qs),
(85,-187,ls),
(85,-197,o),
(95,-197,qs),
(163,-197,ls),
(238,-197,o),
(332,-116,o),
(332,-39,qs),
(332,5,o),
(322,103,qs),
(312,195,o),
(312,233,qs),
(312,270,o),
(346,316,o),
(386,326,qs),
(399,329,o),
(414,347,o),
(414,359,qs),
(414,388,ls),
(414,400,o),
(399,418,o),
(386,421,qs),
(346,431,o),
(312,477,o),
(312,514,qs),
(312,552,o),
(322,644,qs),
(332,742,o),
(332,786,qs),
(332,863,o),
(238,944,o),
(163,944,qs),
(95,944,ls),
(85,944,o),
(85,934,qs),
(85,855,ls),
(85,845,o),
(95,845,qs),
(146,845,ls),
(177,845,o),
(203,818,o),
(203,780,qs),
(203,757,o),
(197,686,o),
(194,651,qs),
(184,555,o),
(184,511,qs),
(184,470,o),
(215,405,o),
(246,387,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
0 1 0 0 3 1 0 105 0 3 2 2 3 89 0 3 3 2 97 0 2 3 2 81 52 49 46 43 51 57 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 462;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(122,238,o),
(124,247,qs),
(133,303,o),
(172,303,qs),
(184,303,o),
(208,291,o),
(226,279,qs),
(254,259,o),
(305,237,o),
(340,237,qs),
(406,237,o),
(488,315,o),
(501,391,qs),
(502,396,o),
(496,403,o),
(491,403,qs),
(404,403,ls),
(396,403,o),
(394,394,qs),
(386,338,o),
(347,338,qs),
(336,338,o),
(313,349,o),
(295,362,qs),
(266,382,o),
(214,404,o),
(178,404,qs),
(113,404,o),
(31,326,o),
(17,251,qs),
(16,246,o),
(23,238,o),
(28,238,qs),
(114,238,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 1 4 3 1 89 2 1 0 0 4 3 0 4 105 0 1 1 3 98 6 5 2 3 1 3 82 0 0 0 33 0 32 36 37 34 36 37 7 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 519;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 267;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(108,361,l),
(184,361,l),
(195,-139,l),
(97,-139,l)
);
},
{
closed = 1;
nodes = (
(210,476,o),
(175,440,o),
(150,440,qs),
(124,440,o),
(88,476,o),
(88,502,qs),
(88,528,o),
(124,564,o),
(150,564,qs),
(175,564,o),
(210,528,o),
(210,502,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
0 0 4 1 1 0 1 99 0 3 3 2 97 0 2 2 31 3 78 0 0 13 11 7 5 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 298;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = cent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(460,135,o),
(383,80,o),
(322,80,qs),
(246,80,o),
(151,176,o),
(151,262,qs),
(151,348,o),
(246,445,o),
(322,445,qs),
(383,445,o),
(459,389,o),
(471,341,q),
(556,341,l),
(547,414,o),
(434,512,o),
(347,519,q),
(347,611,l),
(293,611,l),
(293,519,l),
(185,510,o),
(65,369,o),
(65,262,qs),
(65,155,o),
(185,14,o),
(293,5,q),
(293,-89,l),
(347,-89,l),
(347,5,l),
(434,12,o),
(547,110,o),
(556,184,q),
(471,184,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
15 12 2 3 1 6 3 2 0 4 2 76 0 2 3 5 3 2 5 128 6 1 5 4 3 5 4 126 0 1 0 3 2 1 3 105 0 4 0 0 4 89 0 4 4 0 95 0 0 4 0 79 0 0 0 31 0 31 36 34 20 24 20 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = cent;
unicode = 162;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(108,470,o),
(122,407,o),
(135,372,q),
(44,372,l),
(44,308,l),
(157,308,l),
(166,272,o),
(166,246,qs),
(166,183,o),
(125,97,o),
(83,50,q),
(99,-2,l),
(545,-2,l),
(545,74,l),
(181,74,l),
(252,151,o),
(252,246,qs),
(252,272,o),
(243,308,q),
(417,308,l),
(417,372,l),
(223,372,l),
(209,412,o),
(195,471,o),
(195,504,qs),
(195,574,o),
(268,642,o),
(326,642,qs),
(389,642,o),
(456,570,o),
(458,511,q),
(542,511,l),
(538,601,o),
(428,719,o),
(326,719,qs),
(262,719,o),
(163,667,o),
(108,572,o),
(108,508,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
27 1 6 5 1 76 0 1 2 3 2 1 3 128 8 1 3 7 1 4 5 3 4 103 0 2 2 0 97 0 0 0 28 77 0 5 5 6 95 0 6 6 29 6 78 17 22 17 20 17 21 34 18 34 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = currency;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,322,o),
(309,259,o),
(267,259,qs),
(224,259,o),
(168,321,o),
(168,377,qs),
(168,433,o),
(225,496,o),
(267,496,qs),
(310,496,o),
(369,432,o),
(369,377,qs)
);
},
{
closed = 1;
nodes = (
(473,212,l),
(414,271,l),
(446,317,o),
(446,377,qs),
(446,440,o),
(413,484,q),
(473,544,l),
(432,586,l),
(371,525,l),
(327,554,o),
(268,554,qs),
(209,554,o),
(166,525,q),
(105,586,l),
(63,544,l),
(124,484,l),
(92,439,o),
(92,377,qs),
(92,317,o),
(122,271,q),
(63,212,l),
(105,170,l),
(164,229,l),
(207,200,o),
(267,200,qs),
(325,200,o),
(372,230,q),
(432,170,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
32 30 26 24 4 0 3 37 33 23 19 4 1 0 38 18 16 3 2 1 3 76 31 25 2 3 74 39 17 2 2 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 1 0 2 1 2 101 0 0 0 3 97 0 3 3 31 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 0 1 3 0 105 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
44 36 36 33 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 537;
}
);
note = currency;
unicode = 164;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,263,l),
(253,224,l),
(53,224,l),
(53,157,l),
(253,157,l),
(253,0,l),
(344,0,l),
(344,157,l),
(544,157,l),
(544,224,l),
(344,224,l),
(344,263,l),
(371,315,l),
(544,317,l),
(544,383,l),
(407,383,l),
(571,697,l),
(469,697,l),
(298,345,l),
(127,697,l),
(25,697,l),
(190,383,l),
(53,383,l),
(53,317,l),
(225,315,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
5 1 4 0 23 12 2 5 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
3 1 0 11 10 2 4 5 0 4 104 9 1 5 8 1 6 7 5 6 103 2 1 1 1 28 77 0 7 7 29 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
2 1 1 0 1 133 3 1 0 11 10 2 4 5 0 4 104 9 1 5 8 1 6 7 5 6 103 0 7 7 29 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 24 0 24 22 21 17 17 17 18 17 17 18 17 17 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = yen;
unicode = 165;
},
{
glyphname = brokenbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,273,l),
(100,-106,l),
(191,-106,l),
(191,273,l)
);
},
{
closed = 1;
nodes = (
(191,417,l),
(191,795,l),
(100,795,l),
(100,417,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 3 1 2 3 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 291;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(76,508,o),
(133,445,o),
(184,420,q),
(117,401,o),
(46,314,o),
(46,258,qs),
(46,188,o),
(145,104,o),
(247,70,qs),
(311,49,o),
(379,16,o),
(408,-21,o),
(408,-46,qs),
(408,-89,o),
(349,-132,o),
(295,-132,qs),
(238,-132,o),
(179,-76,o),
(175,-31,q),
(84,-31,l),
(86,-109,o),
(203,-196,o),
(295,-196,qs),
(357,-196,o),
(450,-154,o),
(499,-82,o),
(499,-39,qs),
(499,8,o),
(442,72,o),
(391,95,q),
(459,116,o),
(529,202,o),
(529,258,qs),
(529,328,o),
(429,412,o),
(328,445,qs),
(264,466,o),
(196,500,o),
(167,537,o),
(167,563,qs),
(167,604,o),
(227,647,o),
(281,647,qs),
(338,647,o),
(397,590,o),
(400,546,q),
(491,546,l),
(489,624,o),
(373,712,o),
(281,712,qs),
(218,712,o),
(125,670,o),
(76,598,o),
(76,555,qs)
);
},
{
closed = 1;
nodes = (
(436,210,o),
(357,143,o),
(290,143,qs),
(221,143,o),
(139,209,o),
(139,258,qs),
(139,306,o),
(218,372,o),
(286,372,qs),
(354,372,o),
(436,308,o),
(436,258,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
50 1 6 1 23 1 4 7 2 76 0 1 2 6 2 1 6 128 0 6 7 2 6 7 126 0 7 4 2 7 4 126 0 4 5 2 4 5 126 0 5 0 3 5 3 102 0 2 2 0 97 0 0 0 28 2 78 63 61 57 55 38 36 34 33 31 29 34 18 34 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = section;
unicode = 167;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(97,622,o),
(128,652,o),
(128,674,qs),
(128,696,o),
(97,727,o),
(76,727,qs),
(54,727,o),
(23,696,o),
(23,674,qs),
(23,652,o),
(54,622,o),
(76,622,qs)
);
},
{
closed = 1;
nodes = (
(260,622,o),
(291,652,o),
(291,674,qs),
(291,696,o),
(260,727,o),
(238,727,qs),
(216,727,o),
(186,696,o),
(186,674,qs),
(186,652,o),
(216,622,o),
(238,622,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 314;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(49,246,o),
(137,85,o),
(295,-6,o),
(397,-6,qs),
(498,-6,o),
(656,85,o),
(743,246,o),
(743,349,qs),
(743,452,o),
(656,613,o),
(498,704,o),
(397,704,qs),
(295,704,o),
(137,613,o),
(49,452,o),
(49,349,qs)
);
},
{
closed = 1;
nodes = (
(700,256,o),
(626,113,o),
(489,33,o),
(397,33,qs),
(304,33,o),
(166,113,o),
(92,256,o),
(92,349,qs),
(92,443,o),
(166,585,o),
(304,664,o),
(397,664,qs),
(489,664,o),
(626,585,o),
(700,443,o),
(700,349,qs)
);
},
{
closed = 1;
nodes = (
(503,472,o),
(439,515,o),
(395,515,qs),
(335,515,o),
(259,429,o),
(259,349,qs),
(259,270,o),
(335,184,o),
(395,184,qs),
(486,184,o),
(516,267,q),
(600,267,l),
(580,199,o),
(470,118,o),
(395,118,qs),
(335,118,o),
(236,175,o),
(178,280,o),
(178,350,qs),
(178,420,o),
(236,525,o),
(335,581,o),
(395,581,qs),
(471,581,o),
(581,503,o),
(600,432,q),
(516,432,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 4 2 8 2 4 114 0 5 7 3 3 5 114 0 0 0 2 4 0 2 105 10 1 9 0 6 7 9 6 103 0 8 0 7 5 8 7 105 0 3 1 1 3 89 0 3 3 1 98 0 1 3 1 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 4 2 8 2 4 8 128 0 5 7 3 7 5 3 128 0 0 0 2 4 0 2 105 10 1 9 0 6 7 9 6 103 0 8 0 7 5 8 7 105 0 3 1 1 3 89 0 3 3 1 98 0 1 3 1 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
32 32 32 58 32 58 36 33 18 38 38 38 38 38 34 11 8 31 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 792;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,347,o),
(315,384,o),
(331,413,q),
(331,353,l),
(403,353,l),
(403,703,l),
(331,703,l),
(331,642,l),
(314,672,o),
(247,709,o),
(200,709,qs),
(153,709,o),
(77,664,o),
(33,582,o),
(33,530,qs),
(33,477,o),
(77,394,o),
(154,347,o),
(202,347,qs)
);
},
{
closed = 1;
nodes = (
(267,652,o),
(331,585,o),
(331,528,qs),
(331,471,o),
(267,404,o),
(219,404,qs),
(172,404,o),
(108,472,o),
(108,529,qs),
(108,586,o),
(172,652,o),
(219,652,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
15 10 2 4 5 1 76 0 1 1 44 77 7 1 5 5 0 97 0 0 0 44 77 0 2 2 45 77 0 4 4 3 97 6 1 3 3 47 3 78 19 19 0 0 19 30 19 29 25 23 0 18 0 17 17 19 38 8 9 25 
CALL[ ]	/* CallFunction */";
};
width = 450;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(131,295,l),
(230,470,l),
(141,470,l),
(45,295,l),
(141,120,l),
(230,120,l)
);
},
{
closed = 1;
nodes = (
(321,120,l),
(411,120,l),
(312,295,l),
(411,470,l),
(321,470,l),
(226,295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 8 4 1 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 4 2 1 0 1 79 0 0 10 9 7 6 0 5 0 5 18 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 461;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = logicalnot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(41,360,l),
(515,360,l),
(515,220,l),
(606,220,l),
(606,432,l),
(41,432,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 1 1 0 113 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 1 0 134 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 5 0 5 17 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 650;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = uni00AD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(58,328,l),
(457,328,l),
(457,405,l),
(58,405,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = uni00AD;
unicode = 173;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,667,o),
(416,575,o),
(416,502,qs),
(416,429,o),
(327,337,o),
(255,337,qs),
(182,337,o),
(95,429,o),
(95,502,qs),
(95,575,o),
(182,667,o),
(255,667,qs)
);
},
{
closed = 1;
nodes = (
(313,297,o),
(405,350,o),
(457,444,o),
(457,502,qs),
(457,560,o),
(405,653,o),
(313,706,o),
(255,706,qs),
(196,706,o),
(104,653,o),
(52,560,o),
(52,502,qs),
(52,444,o),
(104,350,o),
(196,297,o),
(255,297,qs)
);
},
{
closed = 1;
nodes = (
(345,575,o),
(304,611,o),
(270,611,qs),
(174,611,l),
(174,396,l),
(226,396,l),
(226,476,l),
(243,476,l),
(291,396,l),
(354,397,l),
(298,480,l),
(320,487,o),
(345,520,o),
(345,544,qs)
);
},
{
closed = 1;
nodes = (
(267,564,ls),
(278,564,o),
(293,553,o),
(293,542,qs),
(293,531,o),
(278,519,o),
(267,519,qs),
(226,519,l),
(226,564,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 87 values pushed */
30 1 5 8 1 76 6 1 4 5 0 5 4 0 128 0 2 10 1 1 7 2 1 105 0 7 0 9 8 7 9 105 0 8 0 5 4 8 5 103 0 0 3 3 0 89 0 0 0 3 97 11 1 3 0 3 81 12 12 0 0 50 48 44 42 39 37 36 35 34 33 32 31 12 27 12 26 20 18 0 11 0 10 36 12 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 509;
}
);
note = registered;
unicode = 174;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(17,641,l),
(369,641,l),
(369,709,l),
(17,709,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 387;
}
);
note = macron;
unicode = 175;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(28,444,o),
(125,347,o),
(203,347,qs),
(254,347,o),
(335,391,o),
(381,471,o),
(381,524,qs),
(381,603,o),
(283,699,o),
(205,699,qs),
(127,699,o),
(28,603,o),
(28,524,qs)
);
},
{
closed = 1;
nodes = (
(308,466,o),
(248,402,o),
(203,402,qs),
(158,402,o),
(101,465,o),
(101,524,qs),
(101,581,o),
(160,646,o),
(204,646,qs),
(249,646,o),
(308,581,o),
(308,524,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 31 values pushed */
0 0 0 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 36 36 37 33 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 410;
}
);
note = degree;
unicode = 176;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(301,624,l),
(301,454,l),
(88,454,l),
(88,377,l),
(301,377,l),
(301,195,l),
(88,195,l),
(88,118,l),
(597,118,l),
(597,195,l),
(386,195,l),
(386,377,l),
(597,377,l),
(597,454,l),
(386,454,l),
(386,624,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 7 0 7 133 6 1 0 5 1 1 2 0 1 103 4 1 2 3 3 2 87 4 1 2 2 3 96 0 3 2 3 80 17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = uni00B2;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(106,627,o),
(133,654,o),
(157,654,qs),
(180,654,o),
(209,624,o),
(209,597,qs),
(209,568,o),
(174,519,o),
(141,492,qs),
(32,404,l),
(32,352,l),
(289,352,l),
(289,411,l),
(113,411,l),
(192,467,ls),
(241,503,o),
(285,562,o),
(285,600,qs),
(285,646,o),
(216,710,o),
(159,710,qs),
(100,710,o),
(32,650,o),
(30,603,q),
(103,603,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
5 1 4 3 1 3 4 114 0 3 3 0 97 0 0 0 44 77 0 1 1 2 95 0 2 2 45 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
5 1 4 3 1 3 4 1 128 0 3 3 0 97 0 0 0 44 77 0 1 1 2 95 0 2 2 45 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 24 0 24 39 17 22 34 6 9 26 
CALL[ ]	/* CallFunction */";
};
width = 330;
}
);
note = uni00B2;
unicode = 178;
},
{
glyphname = uni00B3;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(101,631,o),
(132,655,o),
(158,655,qs),
(186,655,o),
(218,626,o),
(218,603,qs),
(218,579,o),
(184,553,o),
(155,553,qs),
(114,553,l),
(114,505,l),
(157,505,ls),
(185,505,o),
(220,477,o),
(220,453,qs),
(220,429,o),
(187,401,o),
(159,401,qs),
(132,401,o),
(99,427,o),
(95,454,q),
(23,454,l),
(27,403,o),
(100,347,o),
(160,347,qs),
(221,347,o),
(298,403,o),
(298,444,qs),
(298,474,o),
(261,517,o),
(233,527,q),
(233,529,l),
(261,537,o),
(295,577,o),
(295,607,qs),
(295,650,o),
(219,710,o),
(163,710,qs),
(105,710,o),
(32,655,o),
(27,611,q),
(96,611,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
9 1 4 5 1 76 8 1 7 6 5 6 7 5 128 0 2 4 3 4 2 3 128 0 5 0 4 2 5 4 105 0 6 6 0 97 0 0 0 44 77 0 3 3 1 97 0 1 1 47 1 78 0 0 0 41 0 41 36 33 36 34 18 43 34 9 9 29 
CALL[ ]	/* CallFunction */";
};
width = 332;
}
);
note = uni00B3;
unicode = 179;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(17,657,l),
(17,589,l),
(230,703,l),
(230,782,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 247;
}
);
note = acute;
unicode = 180;
},
{
glyphname = uni00B5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(568,548,l),
(477,548,l),
(477,245,ls),
(477,159,o),
(394,69,o),
(323,69,qs),
(252,69,o),
(167,161,o),
(167,248,qs),
(167,548,l),
(77,548,l),
(77,-260,l),
(167,-260,l),
(167,54,l),
(188,21,o),
(255,-9,o),
(295,-9,qs),
(356,-9,o),
(451,46,o),
(477,100,q),
(477,0,l),
(568,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
1 1 3 2 7 1 0 3 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
1 1 3 2 7 1 5 3 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
4 1 2 2 31 77 0 3 3 0 97 6 5 2 0 0 29 77 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 1 2 1 83 4 1 2 2 0 97 6 5 2 0 0 29 77 0 3 3 0 97 6 5 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 1 2 1 83 4 1 2 2 5 95 6 1 5 5 29 77 0 3 3 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 21 0 21 19 35 17 19 35 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 645;
}
);
note = uni00B5;
unicode = 181;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(268,692,ls),
(152,692,o),
(31,578,o),
(31,488,qs),
(31,398,o),
(151,286,o),
(268,286,qs),
(279,286,l),
(279,0,l),
(360,0,l),
(360,621,l),
(437,621,l),
(437,0,l),
(518,0,l),
(518,692,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 3 1 0 1 3 0 128 0 4 0 1 3 4 1 103 2 1 0 0 29 0 78 36 33 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,367,o),
(134,403,o),
(109,403,qs),
(83,403,o),
(47,367,o),
(47,341,qs),
(47,315,o),
(83,279,o),
(109,279,qs),
(134,279,o),
(169,315,o),
(169,341,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 36 33 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 212;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(64,7,l),
(64,-114,l),
(114,-114,ls),
(147,-114,o),
(178,-134,o),
(178,-157,qs),
(178,-181,o),
(147,-201,o),
(114,-201,qs),
(17,-201,l),
(17,-260,l),
(132,-260,ls),
(186,-260,o),
(254,-204,o),
(254,-157,qs),
(254,-109,o),
(184,-57,o),
(125,-58,q),
(125,7,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 4 3 4 0 114 0 4 0 3 2 4 3 105 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 4 3 4 0 3 128 0 4 0 3 2 4 3 105 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 36 33 36 16 5 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 272;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = uni00B9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(79,352,l),
(151,352,l),
(151,704,l),
(25,704,l),
(25,648,l),
(79,648,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
3 1 2 2 0 95 0 0 0 44 77 0 1 1 45 1 78 0 0 0 5 0 5 17 17 4 9 24 
CALL[ ]	/* CallFunction */";
};
width = 196;
}
);
note = uni00B9;
unicode = 185;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(33,474,o),
(81,392,o),
(164,346,o),
(217,346,qs),
(269,346,o),
(354,392,o),
(403,475,o),
(403,528,qs),
(403,582,o),
(355,664,o),
(271,709,o),
(218,709,qs),
(166,709,o),
(81,664,o),
(33,582,o),
(33,528,qs)
);
},
{
closed = 1;
nodes = (
(329,470,o),
(263,404,o),
(217,404,qs),
(170,404,o),
(108,469,o),
(108,527,qs),
(108,586,o),
(171,652,o),
(218,652,qs),
(264,652,o),
(329,586,o),
(329,527,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 2 2 0 97 0 0 0 44 77 0 3 3 1 97 0 1 1 47 1 78 36 37 38 34 4 9 26 
CALL[ ]	/* CallFunction */";
};
width = 436;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(320,120,l),
(416,295,l),
(320,470,l),
(231,470,l),
(329,295,l),
(231,120,l)
);
},
{
closed = 1;
nodes = (
(139,120,l),
(235,295,l),
(139,470,l),
(50,470,l),
(149,295,l),
(50,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 461;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = onequarter;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,0,l),
(148,0,l),
(522,698,l),
(436,698,l)
);
},
{
closed = 1;
nodes = (
(92,648,l),
(92,352,l),
(164,352,l),
(164,704,l),
(38,704,l),
(38,648,l)
);
},
{
closed = 1;
nodes = (
(484,69,l),
(484,0,l),
(556,0,l),
(556,69,l),
(604,69,l),
(604,116,l),
(556,116,l),
(556,353,l),
(459,353,l),
(301,111,l),
(301,69,l)
);
},
{
closed = 1;
nodes = (
(486,291,l),
(486,116,l),
(375,116,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 10 values pushed */
22 1 6 3 10 1 7 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 5 4 3 4 5 3 128 0 3 6 4 3 6 126 8 1 0 7 0 134 2 11 2 1 0 4 5 1 4 103 12 10 2 6 7 7 6 87 12 10 2 6 6 7 96 9 1 7 6 7 80 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
11 1 1 2 4 2 1 4 128 0 5 4 3 4 5 3 128 0 3 6 4 3 6 126 8 1 0 7 0 134 0 2 0 4 5 2 4 103 12 10 2 6 7 7 6 87 12 10 2 6 6 7 96 9 1 7 6 7 80 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
21 21 0 0 21 23 21 23 20 19 18 17 16 15 14 13 12 11 9 8 7 6 5 4 0 3 0 3 17 13 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 640;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = onehalf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(57,0,l),
(144,0,l),
(509,698,l),
(423,698,l)
);
},
{
closed = 1;
nodes = (
(90,352,l),
(162,352,l),
(162,704,l),
(36,704,l),
(36,648,l),
(90,648,l)
);
},
{
closed = 1;
nodes = (
(444,274,o),
(471,301,o),
(495,301,qs),
(518,301,o),
(547,271,o),
(547,244,qs),
(547,215,o),
(512,166,o),
(479,139,qs),
(370,51,l),
(370,-1,l),
(627,-1,l),
(627,58,l),
(451,58,l),
(530,114,ls),
(579,150,o),
(623,209,o),
(623,247,qs),
(623,293,o),
(554,357,o),
(497,357,qs),
(438,357,o),
(370,297,o),
(368,250,q),
(441,250,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
24 1 0 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 3 5 8 5 3 8 128 12 1 9 8 6 8 9 114 2 10 2 1 11 1 4 5 1 4 103 0 5 0 8 9 5 8 106 0 6 0 0 6 87 0 6 6 0 95 7 1 0 6 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 3 5 8 5 3 8 128 12 1 9 8 6 8 9 6 128 2 10 2 1 11 1 4 5 1 4 103 0 5 0 8 9 5 8 106 0 6 0 0 6 87 0 6 6 0 95 7 1 0 6 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
10 1 1 2 4 2 1 4 128 0 3 5 8 5 3 8 128 12 1 9 8 6 8 9 6 128 0 2 11 1 4 5 2 4 103 0 5 0 8 9 5 8 106 0 6 0 0 6 87 0 6 6 0 95 7 1 0 6 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
10 10 4 4 0 0 10 34 10 34 32 30 23 22 21 20 14 12 4 9 4 9 8 7 6 5 0 3 0 3 17 13 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 675;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = threequarters;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,0,l),
(228,0,l),
(617,698,l),
(531,698,l)
);
},
{
closed = 1;
nodes = (
(635,116,l),
(635,353,l),
(538,353,l),
(380,111,l),
(380,69,l),
(563,69,l),
(563,0,l),
(635,0,l),
(635,69,l),
(682,69,l),
(682,116,l)
);
},
{
closed = 1;
nodes = (
(453,116,l),
(564,291,l),
(564,116,l)
);
},
{
closed = 1;
nodes = (
(113,631,o),
(144,655,o),
(170,655,qs),
(198,655,o),
(230,626,o),
(230,603,qs),
(230,579,o),
(196,553,o),
(167,553,qs),
(126,553,l),
(126,505,l),
(169,505,ls),
(197,505,o),
(232,477,o),
(232,453,qs),
(232,429,o),
(199,401,o),
(171,401,qs),
(144,401,o),
(111,427,o),
(107,454,q),
(35,454,l),
(39,403,o),
(112,347,o),
(172,347,qs),
(233,347,o),
(310,403,o),
(310,444,qs),
(310,474,o),
(273,517,o),
(245,527,q),
(245,529,l),
(273,537,o),
(307,577,o),
(307,607,qs),
(307,650,o),
(231,710,o),
(175,710,qs),
(117,710,o),
(44,655,o),
(39,611,q),
(108,611,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 14 values pushed */
27 1 12 13 15 1 6 9 10 1 2 6 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 77 values pushed */
17 1 15 14 13 14 15 13 128 0 10 12 11 12 10 11 128 0 5 11 9 11 5 9 128 3 1 0 2 2 0 113 8 16 2 1 0 14 15 1 14 105 0 13 0 12 10 13 12 105 0 11 0 9 6 11 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
17 1 15 14 13 14 15 13 128 0 10 12 11 12 10 11 128 0 5 11 9 11 5 9 128 3 1 0 2 0 134 8 16 2 1 0 14 15 1 14 105 0 13 0 12 10 13 12 105 0 11 0 9 6 11 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 83 values pushed */
16 1 1 8 14 8 1 14 128 17 1 15 14 13 14 15 13 128 0 10 12 11 12 10 11 128 0 5 11 9 11 5 9 128 3 1 0 2 0 134 0 8 0 14 15 8 14 105 0 13 0 12 10 13 12 105 0 11 0 9 6 11 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
18 18 0 0 18 59 18 59 57 55 51 49 48 46 42 40 38 37 35 33 22 20 17 16 14 13 12 11 9 8 7 6 5 4 0 3 0 3 17 18 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 709;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(399,-13,o),
(328,-80,o),
(266,-80,qs),
(205,-80,o),
(133,-10,o),
(133,50,qs),
(133,133,o),
(245,193,o),
(344,193,qs),
(373,193,l),
(369,351,l),
(290,351,l),
(287,256,l),
(176,256,o),
(46,155,o),
(46,50,qs),
(46,-44,o),
(168,-156,o),
(267,-156,qs),
(332,-156,o),
(431,-106,o),
(485,-15,o),
(485,45,q),
(399,45,l)
);
},
{
closed = 1;
nodes = (
(270,468,o),
(305,432,o),
(330,432,qs),
(356,432,o),
(392,468,o),
(392,494,qs),
(392,520,o),
(356,556,o),
(330,556,qs),
(305,556,o),
(270,520,o),
(270,494,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 7 1 1 2 114 8 1 5 3 4 3 5 4 128 0 1 0 3 5 1 3 106 0 4 0 0 4 0 101 0 7 7 6 97 0 6 6 31 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 2 7 1 7 2 1 128 8 1 5 3 4 3 5 4 128 0 1 0 3 5 1 3 106 0 4 0 0 4 0 101 0 7 7 6 97 0 6 6 31 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 7 1 7 2 1 128 8 1 5 3 4 3 5 4 128 0 6 0 7 2 6 7 105 0 1 0 3 5 1 3 106 0 4 0 0 4 89 0 4 4 0 97 0 0 4 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 33 31 27 25 0 23 0 23 36 33 17 20 35 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 519;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = Agrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(545,0,l),
(641,0,l),
(390,693,l),
(285,693,l),
(33,0,l),
(129,0,l),
(185,155,l),
(489,155,l)
);
},
{
closed = 1;
nodes = (
(337,581,l),
(463,229,l),
(211,229,l)
);
},
{
closed = 1;
nodes = (
(435,734,l),
(435,802,l),
(222,927,l),
(222,848,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
9 1 4 1 1 76 14 13 12 11 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 1 4 1 133 6 1 4 5 1 3 0 4 3 104 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 1 4 1 133 6 1 4 5 1 3 0 4 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
8 8 0 0 8 10 8 10 0 7 0 7 17 17 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Aacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(545,0,l),
(641,0,l),
(390,693,l),
(285,693,l),
(33,0,l),
(129,0,l),
(185,155,l),
(489,155,l)
);
},
{
closed = 1;
nodes = (
(337,581,l),
(463,229,l),
(211,229,l)
);
},
{
closed = 1;
nodes = (
(435,848,l),
(435,927,l),
(222,802,l),
(222,734,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
9 1 4 1 1 76 14 13 12 11 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 1 4 1 133 6 1 4 5 1 3 0 4 3 104 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 1 4 1 133 6 1 4 5 1 3 0 4 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
8 8 0 0 8 10 8 10 0 7 0 7 17 17 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(545,0,l),
(641,0,l),
(390,693,l),
(285,693,l),
(33,0,l),
(129,0,l),
(185,155,l),
(489,155,l)
);
},
{
closed = 1;
nodes = (
(338,827,l),
(476,742,l),
(476,814,l),
(338,897,l),
(199,814,l),
(199,742,l)
);
},
{
closed = 1;
nodes = (
(337,581,l),
(463,229,l),
(211,229,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
15 1 4 1 1 76 13 12 11 10 9 8 6 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 1 4 1 133 6 1 4 5 1 3 0 4 3 104 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 1 4 1 133 6 1 4 5 1 3 0 4 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
14 14 0 0 14 16 14 16 0 7 0 7 17 17 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Atilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(545,0,l),
(641,0,l),
(390,693,l),
(285,693,l),
(33,0,l),
(129,0,l),
(185,155,l),
(489,155,l)
);
},
{
closed = 1;
nodes = (
(246,774,o),
(269,796,o),
(286,796,qs),
(299,796,o),
(318,786,o),
(334,776,qs),
(352,763,o),
(381,750,o),
(400,750,qs),
(440,750,o),
(494,804,o),
(500,854,q),
(448,854,l),
(445,833,o),
(421,811,o),
(404,811,qs),
(391,811,o),
(369,822,o),
(355,832,qs),
(336,844,o),
(309,857,o),
(290,857,qs),
(250,857,o),
(197,803,o),
(190,752,q),
(243,752,l)
);
},
{
closed = 1;
nodes = (
(463,229,l),
(211,229,l),
(337,581,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
36 1 10 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 4 0 8 7 4 8 105 0 5 12 9 2 7 1 5 7 105 0 10 11 1 3 0 10 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 1 7 10 7 1 10 128 6 1 4 0 8 7 4 8 105 0 5 12 9 2 7 1 5 7 105 0 10 11 1 3 0 10 3 104 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 4 0 8 7 4 8 105 0 5 12 9 2 7 1 5 7 105 0 10 11 1 3 0 10 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 1 7 10 7 1 10 128 6 1 4 0 8 7 4 8 105 0 5 12 9 2 7 1 5 7 105 0 10 11 1 3 0 10 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
8 8 0 0 35 34 8 33 8 33 31 29 25 23 21 20 18 16 12 10 0 7 0 7 17 17 17 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = Adieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(545,0,l),
(641,0,l),
(390,693,l),
(285,693,l),
(33,0,l),
(129,0,l),
(185,155,l),
(489,155,l)
);
},
{
closed = 1;
nodes = (
(278,767,o),
(309,797,o),
(309,819,qs),
(309,841,o),
(278,872,o),
(257,872,qs),
(235,872,o),
(204,841,o),
(204,819,qs),
(204,797,o),
(235,767,o),
(257,767,qs)
);
},
{
closed = 1;
nodes = (
(441,767,o),
(472,797,o),
(472,819,qs),
(472,841,o),
(441,872,o),
(419,872,qs),
(397,872,o),
(367,841,o),
(367,819,qs),
(367,797,o),
(397,767,o),
(419,767,qs)
);
},
{
closed = 1;
nodes = (
(463,229,l),
(211,229,l),
(337,581,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
34 1 8 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
6 1 4 11 7 10 3 5 1 4 5 105 0 8 9 1 3 0 8 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 5 8 5 1 8 128 6 1 4 11 7 10 3 5 1 4 5 105 0 8 9 1 3 0 8 3 104 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
6 1 4 11 7 10 3 5 1 4 5 105 0 8 9 1 3 0 8 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 5 8 5 1 8 128 6 1 4 11 7 10 3 5 1 4 5 105 0 8 9 1 3 0 8 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
20 20 8 8 0 0 33 32 20 31 20 30 26 24 8 19 8 18 14 12 0 7 0 7 17 17 17 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Aring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(545,0,l),
(641,0,l),
(390,693,l),
(285,693,l),
(33,0,l),
(129,0,l),
(185,155,l),
(489,155,l)
);
},
{
closed = 1;
nodes = (
(315,801,o),
(284,833,o),
(284,858,qs),
(284,883,o),
(315,914,o),
(338,914,qs),
(361,914,o),
(392,883,o),
(392,858,qs),
(392,833,o),
(361,801,o),
(338,801,qs)
);
},
{
closed = 1;
nodes = (
(293,962,o),
(231,904,o),
(231,857,qs),
(231,810,o),
(293,752,o),
(338,752,qs),
(384,752,o),
(445,809,o),
(445,857,qs),
(445,905,o),
(384,962,o),
(338,962,qs)
);
},
{
closed = 1;
nodes = (
(463,229,l),
(211,229,l),
(337,581,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
34 1 8 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
11 1 7 0 4 5 7 4 105 0 8 9 1 3 0 8 3 104 0 6 6 5 97 10 1 5 5 36 77 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 6 8 6 1 8 128 11 1 7 0 4 5 7 4 105 0 8 9 1 3 0 8 3 104 0 6 6 5 97 10 1 5 5 36 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
11 1 7 0 4 5 7 4 105 0 8 9 1 3 0 8 3 104 0 6 6 5 97 10 1 5 5 36 77 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 6 8 6 1 8 128 11 1 7 0 4 5 7 4 105 0 8 9 1 3 0 8 3 104 0 6 6 5 97 10 1 5 5 36 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 1 6 8 6 1 8 128 11 1 7 0 4 5 7 4 105 10 1 5 0 6 1 5 6 105 0 8 9 1 3 0 8 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
20 20 8 8 0 0 33 32 20 31 20 30 26 24 8 19 8 18 14 12 0 7 0 7 17 17 17 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = AE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,629,l),
(465,226,l),
(238,226,l)
);
},
{
closed = 1;
nodes = (
(111,0,l),
(198,155,l),
(465,155,l),
(465,0,l),
(838,0,l),
(838,72,l),
(556,72,l),
(556,317,l),
(808,317,l),
(808,387,l),
(556,387,l),
(556,626,l),
(838,626,l),
(838,698,l),
(407,698,l),
(12,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 0 4 0 3 4 103 9 1 0 0 7 5 0 7 103 0 2 2 1 95 0 1 1 28 77 0 5 5 6 95 8 1 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 1 0 2 3 1 2 103 0 3 0 4 0 3 4 103 9 1 0 0 7 5 0 7 103 0 5 5 6 95 8 1 6 6 29 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
0 0 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 0 2 0 2 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 900;
}
);
note = AE;
unicode = 198;
},
{
glyphname = Ccedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,251,o),
(127,94,o),
(274,1,o),
(365,-5,q),
(365,-114,l),
(415,-114,ls),
(448,-114,o),
(479,-134,o),
(479,-157,qs),
(479,-181,o),
(448,-201,o),
(415,-201,qs),
(318,-201,l),
(318,-260,l),
(433,-260,ls),
(487,-260,o),
(555,-204,o),
(555,-157,qs),
(555,-109,o),
(485,-57,o),
(426,-58,q),
(426,-5,l),
(527,3,o),
(678,111,o),
(714,203,q),
(605,203,l),
(576,140,o),
(467,73,o),
(391,73,qs),
(318,73,o),
(202,141,o),
(136,266,o),
(136,349,qs),
(136,433,o),
(202,558,o),
(318,626,o),
(391,626,qs),
(467,626,o),
(576,558,o),
(605,495,q),
(714,495,l),
(675,596,o),
(505,706,o),
(391,706,qs),
(294,706,o),
(135,614,o),
(43,451,o),
(43,349,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 5 9 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 5 0 8 7 5 8 105 0 2 2 0 97 0 0 0 28 77 0 3 3 9 97 0 9 9 29 77 0 7 7 6 95 0 6 6 33 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 5 0 8 7 5 8 105 0 7 0 6 7 6 99 0 2 2 0 97 0 0 0 28 77 0 3 3 9 97 0 9 9 29 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 5 0 8 7 5 8 105 0 7 0 6 7 6 99 0 3 3 9 97 0 9 9 29 9 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
44 43 36 33 36 20 18 38 34 18 34 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Egrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,698,l),
(77,698,l),
(77,0,l),
(452,0,l),
(452,75,l),
(168,75,l),
(168,315,l),
(422,315,l),
(422,390,l),
(168,390,l),
(168,623,l),
(452,623,l)
);
},
{
closed = 1;
nodes = (
(352,734,l),
(352,802,l),
(139,927,l),
(139,848,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
15 14 13 12 4 4 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 4 6 1 5 0 4 5 103 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Eacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,698,l),
(77,698,l),
(77,0,l),
(452,0,l),
(452,75,l),
(168,75,l),
(168,315,l),
(422,315,l),
(422,390,l),
(168,390,l),
(168,623,l),
(452,623,l)
);
},
{
closed = 1;
nodes = (
(352,848,l),
(352,927,l),
(139,802,l),
(139,734,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
15 14 13 12 4 4 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 4 6 1 5 0 4 5 103 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ecircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,698,l),
(77,698,l),
(77,0,l),
(452,0,l),
(452,75,l),
(168,75,l),
(168,315,l),
(422,315,l),
(422,390,l),
(168,390,l),
(168,623,l),
(452,623,l)
);
},
{
closed = 1;
nodes = (
(255,827,l),
(393,742,l),
(393,814,l),
(255,897,l),
(116,814,l),
(116,742,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
17 16 15 14 13 12 6 4 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 4 6 1 5 0 4 5 103 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,698,l),
(77,698,l),
(77,0,l),
(452,0,l),
(452,75,l),
(168,75,l),
(168,315,l),
(422,315,l),
(422,390,l),
(168,390,l),
(168,623,l),
(452,623,l)
);
},
{
closed = 1;
nodes = (
(195,767,o),
(226,797,o),
(226,819,qs),
(226,841,o),
(195,872,o),
(174,872,qs),
(152,872,o),
(121,841,o),
(121,819,qs),
(121,797,o),
(152,767,o),
(174,767,qs)
);
},
{
closed = 1;
nodes = (
(358,767,o),
(389,797,o),
(389,819,qs),
(389,841,o),
(358,872,o),
(336,872,qs),
(314,872,o),
(284,841,o),
(284,819,qs),
(284,797,o),
(314,767,o),
(336,767,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
8 1 6 12 9 11 3 7 4 6 7 105 0 0 0 1 2 0 1 103 10 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
8 1 6 12 9 11 3 7 4 6 7 105 0 4 10 1 5 0 4 5 103 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
24 24 12 12 0 0 24 35 24 34 30 28 12 23 12 22 18 16 0 11 0 11 17 17 17 17 17 13 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,697,l),
(77,697,l)
);
},
{
closed = 1;
nodes = (
(220,734,l),
(220,802,l),
(7,927,l),
(7,848,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 6 5 4 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,697,l),
(77,697,l)
);
},
{
closed = 1;
nodes = (
(220,848,l),
(220,927,l),
(7,802,l),
(7,734,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 6 5 4 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,697,l),
(77,697,l)
);
},
{
closed = 1;
nodes = (
(123,827,l),
(261,742,l),
(261,814,l),
(123,897,l),
(-16,814,l),
(-16,742,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
9 8 7 6 5 4 6 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,697,l),
(77,697,l)
);
},
{
closed = 1;
nodes = (
(63,767,o),
(94,797,o),
(94,819,qs),
(94,841,o),
(63,872,o),
(42,872,qs),
(20,872,o),
(-11,841,o),
(-11,819,qs),
(-11,797,o),
(20,767,o),
(42,767,qs)
);
},
{
closed = 1;
nodes = (
(226,767,o),
(257,797,o),
(257,819,qs),
(257,841,o),
(226,872,o),
(204,872,qs),
(182,872,o),
(152,841,o),
(152,819,qs),
(152,797,o),
(182,767,o),
(204,767,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
4 1 2 8 5 7 3 3 1 2 3 105 6 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
4 1 2 8 5 7 3 3 1 2 3 105 6 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
16 16 4 4 0 0 16 27 16 26 22 20 4 15 4 14 10 8 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Eth;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,389,l),
(9,389,l),
(9,305,l),
(96,305,l),
(96,0,l),
(313,0,ls),
(426,0,o),
(593,83,o),
(682,240,o),
(682,347,qs),
(682,454,o),
(593,612,o),
(426,697,o),
(313,697,qs),
(96,697,l)
);
},
{
closed = 1;
nodes = (
(187,305,l),
(379,305,l),
(379,389,l),
(187,389,l),
(187,623,l),
(313,623,ls),
(447,623,o),
(589,477,o),
(589,347,qs),
(589,217,o),
(447,70,o),
(313,70,qs),
(187,70,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
6 1 3 7 1 2 4 3 2 103 0 5 5 0 95 8 1 0 0 28 77 9 1 4 4 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
8 1 0 0 5 3 0 5 103 6 1 3 7 1 2 4 3 2 103 9 1 4 4 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
16 15 1 0 26 25 24 23 22 20 15 27 16 27 13 12 11 10 9 7 0 14 1 14 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = Ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(534,698,l),
(534,144,l),
(168,698,l),
(77,698,l),
(77,0,l),
(168,0,l),
(168,555,l),
(534,0,l),
(625,0,l),
(625,698,l)
);
},
{
closed = 1;
nodes = (
(261,774,o),
(284,796,o),
(301,796,qs),
(314,796,o),
(333,786,o),
(349,776,qs),
(367,763,o),
(396,750,o),
(415,750,qs),
(455,750,o),
(509,804,o),
(515,854,q),
(463,854,l),
(460,833,o),
(436,811,o),
(419,811,qs),
(406,811,o),
(384,822,o),
(370,832,qs),
(351,844,o),
(324,857,o),
(305,857,qs),
(265,857,o),
(212,803,o),
(205,752,q),
(258,752,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 2 2 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 0 8 7 4 8 105 0 5 10 9 2 7 2 5 7 105 3 1 2 2 28 77 1 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 0 8 7 4 8 105 0 5 10 9 2 7 2 5 7 105 3 1 2 2 0 95 1 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
10 10 10 35 10 35 36 34 18 36 35 18 17 18 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Ograve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(743,452,o),
(651,614,o),
(491,705,o),
(393,705,qs),
(296,705,o),
(136,614,o),
(43,451,o),
(43,349,qs),
(43,247,o),
(136,84,o),
(296,-7,o),
(393,-7,qs),
(491,-7,o),
(651,84,o),
(743,246,o),
(743,349,qs)
);
},
{
closed = 1;
nodes = (
(136,433,o),
(203,558,o),
(319,626,o),
(393,626,qs),
(467,626,o),
(583,558,o),
(650,433,o),
(650,349,qs),
(650,266,o),
(583,140,o),
(466,72,o),
(393,72,qs),
(320,72,o),
(203,140,o),
(136,266,o),
(136,349,qs)
);
},
{
closed = 1;
nodes = (
(280,848,l),
(493,734,l),
(493,802,l),
(280,927,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 34 33 32 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 1 97 0 1 1 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 38 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Oacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(743,452,o),
(651,614,o),
(491,705,o),
(393,705,qs),
(296,705,o),
(136,614,o),
(43,451,o),
(43,349,qs),
(43,247,o),
(136,84,o),
(296,-7,o),
(393,-7,qs),
(491,-7,o),
(651,84,o),
(743,246,o),
(743,349,qs)
);
},
{
closed = 1;
nodes = (
(136,433,o),
(203,558,o),
(319,626,o),
(393,626,qs),
(467,626,o),
(583,558,o),
(650,433,o),
(650,349,qs),
(650,266,o),
(583,140,o),
(466,72,o),
(393,72,qs),
(320,72,o),
(203,140,o),
(136,266,o),
(136,349,qs)
);
},
{
closed = 1;
nodes = (
(280,802,l),
(280,734,l),
(493,848,l),
(493,927,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 34 33 32 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 1 97 0 1 1 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 38 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(743,452,o),
(651,614,o),
(491,705,o),
(393,705,qs),
(296,705,o),
(136,614,o),
(43,451,o),
(43,349,qs),
(43,247,o),
(136,84,o),
(296,-7,o),
(393,-7,qs),
(491,-7,o),
(651,84,o),
(743,246,o),
(743,349,qs)
);
},
{
closed = 1;
nodes = (
(136,433,o),
(203,558,o),
(319,626,o),
(393,626,qs),
(467,626,o),
(583,558,o),
(650,433,o),
(650,349,qs),
(650,266,o),
(583,140,o),
(466,72,o),
(393,72,qs),
(320,72,o),
(203,140,o),
(136,266,o),
(136,349,qs)
);
},
{
closed = 1;
nodes = (
(534,814,l),
(396,897,l),
(257,814,l),
(257,742,l),
(396,827,l),
(534,742,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
37 36 35 34 33 5 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 1 97 0 1 1 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 38 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Otilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(743,452,o),
(651,614,o),
(491,705,o),
(393,705,qs),
(296,705,o),
(136,614,o),
(43,451,o),
(43,349,qs),
(43,247,o),
(136,84,o),
(296,-7,o),
(393,-7,qs),
(491,-7,o),
(651,84,o),
(743,246,o),
(743,349,qs)
);
},
{
closed = 1;
nodes = (
(136,433,o),
(203,558,o),
(319,626,o),
(393,626,qs),
(467,626,o),
(583,558,o),
(650,433,o),
(650,349,qs),
(650,266,o),
(583,140,o),
(466,72,o),
(393,72,qs),
(320,72,o),
(203,140,o),
(136,266,o),
(136,349,qs)
);
},
{
closed = 1;
nodes = (
(305,774,o),
(328,796,o),
(345,796,qs),
(358,796,o),
(377,786,o),
(393,776,qs),
(411,763,o),
(440,750,o),
(459,750,qs),
(499,750,o),
(553,804,o),
(559,854,q),
(507,854,l),
(504,833,o),
(480,811,o),
(463,811,qs),
(450,811,o),
(428,822,o),
(414,832,qs),
(395,844,o),
(368,857,o),
(349,857,qs),
(309,857,o),
(256,803,o),
(249,752,q),
(302,752,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 4 0 8 7 4 8 105 0 5 10 9 2 7 1 5 7 105 0 3 3 1 97 0 1 1 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
6 1 4 0 8 7 4 8 105 0 5 10 9 2 7 1 5 7 105 0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
32 32 32 57 32 57 36 34 18 36 38 38 38 38 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = Odieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(743,452,o),
(651,614,o),
(491,705,o),
(393,705,qs),
(296,705,o),
(136,614,o),
(43,451,o),
(43,349,qs),
(43,247,o),
(136,84,o),
(296,-7,o),
(393,-7,qs),
(491,-7,o),
(651,84,o),
(743,246,o),
(743,349,qs)
);
},
{
closed = 1;
nodes = (
(136,433,o),
(203,558,o),
(319,626,o),
(393,626,qs),
(467,626,o),
(583,558,o),
(650,433,o),
(650,349,qs),
(650,266,o),
(583,140,o),
(466,72,o),
(393,72,qs),
(320,72,o),
(203,140,o),
(136,266,o),
(136,349,qs)
);
},
{
closed = 1;
nodes = (
(336,767,o),
(367,797,o),
(367,819,qs),
(367,841,o),
(336,872,o),
(315,872,qs),
(293,872,o),
(262,841,o),
(262,819,qs),
(262,797,o),
(293,767,o),
(315,767,qs)
);
},
{
closed = 1;
nodes = (
(499,767,o),
(530,797,o),
(530,819,qs),
(530,841,o),
(499,872,o),
(477,872,qs),
(455,872,o),
(425,841,o),
(425,819,qs),
(425,797,o),
(455,767,o),
(477,767,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
6 1 4 9 7 8 3 5 1 4 5 105 0 3 3 1 97 0 1 1 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
6 1 4 9 7 8 3 5 1 4 5 105 0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
44 44 32 32 44 55 44 54 50 48 32 43 32 42 40 38 38 38 34 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,150,l),
(322,309,l),
(481,150,l),
(539,208,l),
(381,367,l),
(538,524,l),
(478,584,l),
(321,427,l),
(164,584,l),
(106,525,l),
(262,369,l),
(103,210,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
8 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = Oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(743,421,o),
(697,546,o),
(654,593,q),
(751,698,l),
(677,698,l),
(614,630,l),
(569,666,o),
(456,705,o),
(393,705,qs),
(296,705,o),
(136,614,o),
(43,451,o),
(43,349,qs),
(43,278,o),
(90,154,o),
(132,106,q),
(35,0,l),
(109,0,l),
(172,68,l),
(217,32,o),
(330,-7,o),
(393,-7,qs),
(491,-7,o),
(651,84,o),
(743,246,o),
(743,349,qs)
);
},
{
closed = 1;
nodes = (
(136,433,o),
(203,558,o),
(319,626,o),
(393,626,qs),
(490,626,o),
(558,569,q),
(191,169,l),
(136,241,o),
(136,349,qs)
);
},
{
closed = 1;
nodes = (
(296,72,o),
(228,129,q),
(596,529,l),
(650,456,o),
(650,349,qs),
(650,266,o),
(583,140,o),
(466,72,o),
(393,72,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
19 1 4 2 41 40 28 27 22 9 6 5 4 6 1 0 5 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
19 1 4 3 41 40 28 27 22 9 6 5 4 6 1 1 5 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 4 2 97 3 1 2 2 28 77 6 1 5 5 0 97 1 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 2 4 2 3 4 128 0 4 4 2 97 0 2 2 28 77 0 1 1 29 77 6 1 5 5 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 3 2 4 2 3 4 128 0 2 0 4 5 2 4 105 0 1 1 29 77 6 1 5 5 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
35 35 35 43 35 42 40 19 39 19 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,257,ls),
(75,170,o),
(144,51,o),
(263,-7,o),
(337,-7,qs),
(411,-7,o),
(530,51,o),
(600,170,o),
(600,257,qs),
(600,697,l),
(509,697,l),
(509,256,ls),
(509,163,o),
(418,73,o),
(338,73,qs),
(257,73,o),
(166,163,o),
(166,256,qs),
(166,697,l),
(75,697,l)
);
},
{
closed = 1;
nodes = (
(222,848,l),
(435,734,l),
(435,802,l),
(222,927,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
23 22 21 20 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
4 3 2 1 0 1 133 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 19 0 19 36 19 35 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,257,ls),
(75,170,o),
(144,51,o),
(263,-7,o),
(337,-7,qs),
(411,-7,o),
(530,51,o),
(600,170,o),
(600,257,qs),
(600,697,l),
(509,697,l),
(509,256,ls),
(509,163,o),
(418,73,o),
(338,73,qs),
(257,73,o),
(166,163,o),
(166,256,qs),
(166,697,l),
(75,697,l)
);
},
{
closed = 1;
nodes = (
(222,802,l),
(222,734,l),
(435,848,l),
(435,927,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
23 22 21 20 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
4 3 2 1 0 1 133 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 19 0 19 36 19 35 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,257,ls),
(75,170,o),
(144,51,o),
(263,-7,o),
(337,-7,qs),
(411,-7,o),
(530,51,o),
(600,170,o),
(600,257,qs),
(600,697,l),
(509,697,l),
(509,256,ls),
(509,163,o),
(418,73,o),
(338,73,qs),
(257,73,o),
(166,163,o),
(166,256,qs),
(166,697,l),
(75,697,l)
);
},
{
closed = 1;
nodes = (
(476,814,l),
(338,897,l),
(199,814,l),
(199,742,l),
(338,827,l),
(476,742,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
25 24 23 22 21 5 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
4 3 2 1 0 1 133 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 19 0 19 36 19 35 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,257,ls),
(75,170,o),
(144,51,o),
(263,-7,o),
(337,-7,qs),
(411,-7,o),
(530,51,o),
(600,170,o),
(600,257,qs),
(600,697,l),
(509,697,l),
(509,256,ls),
(509,163,o),
(418,73,o),
(338,73,qs),
(257,73,o),
(166,163,o),
(166,256,qs),
(166,697,l),
(75,697,l)
);
},
{
closed = 1;
nodes = (
(278,767,o),
(309,797,o),
(309,819,qs),
(309,841,o),
(278,872,o),
(257,872,qs),
(235,872,o),
(204,841,o),
(204,819,qs),
(204,797,o),
(235,767,o),
(257,767,qs)
);
},
{
closed = 1;
nodes = (
(441,767,o),
(472,797,o),
(472,819,qs),
(472,841,o),
(441,872,o),
(419,872,qs),
(397,872,o),
(367,841,o),
(367,819,qs),
(367,797,o),
(397,767,o),
(419,767,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 4 10 7 9 3 5 1 4 5 105 8 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
8 3 2 1 5 0 5 1 0 128 6 1 4 10 7 9 3 5 1 4 5 105 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
32 32 20 20 0 0 32 43 32 42 38 36 20 31 20 30 26 24 0 19 0 19 36 19 35 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Yacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,263,l),
(247,0,l),
(338,0,l),
(338,263,l),
(565,697,l),
(464,697,l),
(292,344,l),
(120,697,l),
(19,697,l)
);
},
{
closed = 1;
nodes = (
(390,848,l),
(390,927,l),
(177,802,l),
(177,734,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
7 4 1 3 1 0 1 76 12 11 10 9 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 0 0 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 0 1 0 133 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 8 0 8 18 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(168,481,l),
(302,481,ls),
(377,481,o),
(450,411,o),
(450,349,qs),
(450,288,o),
(377,219,o),
(302,219,qs),
(168,219,l)
);
},
{
closed = 1;
nodes = (
(543,439,o),
(420,553,o),
(302,553,qs),
(168,553,l),
(168,698,l),
(77,698,l),
(77,0,l),
(168,0,l),
(168,146,l),
(302,146,ls),
(424,146,o),
(543,261,o),
(543,349,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 0 0 2 3 0 2 103 0 4 4 28 77 0 1 1 5 95 0 5 5 31 77 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 0 0 2 3 0 2 103 0 1 1 5 95 0 5 5 31 77 0 4 4 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 5 0 1 0 5 1 103 6 1 0 0 2 3 0 2 103 0 4 4 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 19 17 16 15 14 13 12 10 7 5 0 8 1 8 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,0,l),
(151,550,ls),
(151,694,o),
(294,694,qs),
(354,694,o),
(423,643,o),
(423,598,qs),
(423,570,o),
(390,526,o),
(356,495,qs),
(319,462,o),
(281,410,o),
(281,375,qs),
(281,329,o),
(350,269,o),
(431,242,qs),
(486,224,o),
(530,180,o),
(530,144,qs),
(530,105,o),
(480,63,o),
(433,63,qs),
(383,63,o),
(324,121,o),
(321,170,q),
(229,170,l),
(236,86,o),
(346,-10,o),
(433,-10,qs),
(522,-10,o),
(623,79,o),
(623,151,qs),
(623,210,o),
(557,287,o),
(484,311,qs),
(419,333,o),
(373,365,o),
(373,387,qs),
(373,403,o),
(397,432,o),
(424,455,qs),
(466,490,o),
(514,557,o),
(514,605,qs),
(514,649,o),
(463,725,o),
(364,771,o),
(295,771,qs),
(179,771,o),
(60,654,o),
(60,561,qs),
(60,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 30 77 0 3 3 1 97 5 1 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 30 77 0 5 5 29 77 0 3 3 1 97 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 4 3 4 2 3 128 0 0 0 4 2 0 4 105 0 5 5 29 77 0 3 3 1 97 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 4 3 4 2 3 128 0 0 0 4 2 0 4 105 0 3 0 1 3 1 101 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
51 50 48 46 30 28 26 25 23 21 34 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 681;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = agrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,193,o),
(111,63,o),
(229,-9,o),
(302,-9,qs),
(373,-9,o),
(480,54,o),
(507,102,q),
(507,0,l),
(599,0,l),
(599,548,l),
(507,548,l),
(507,448,l),
(481,495,o),
(375,557,o),
(303,557,qs),
(230,557,o),
(111,487,o),
(43,360,o),
(43,276,qs)
);
},
{
closed = 1;
nodes = (
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs),
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs)
);
},
{
closed = 1;
nodes = (
(223,703,l),
(436,589,l),
(436,657,l),
(223,782,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
11 6 2 5 4 1 76 38 37 36 35 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 0 0 4 5 0 4 105 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
38 38 35 17 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = aacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,193,o),
(111,63,o),
(229,-9,o),
(302,-9,qs),
(373,-9,o),
(480,54,o),
(507,102,q),
(507,0,l),
(599,0,l),
(599,548,l),
(507,548,l),
(507,448,l),
(481,495,o),
(375,557,o),
(303,557,qs),
(230,557,o),
(111,487,o),
(43,360,o),
(43,276,qs)
);
},
{
closed = 1;
nodes = (
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs),
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs)
);
},
{
closed = 1;
nodes = (
(223,657,l),
(223,589,l),
(436,703,l),
(436,782,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
11 6 2 5 4 1 76 38 37 36 35 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 0 0 4 5 0 4 105 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
38 38 35 17 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = acircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,193,o),
(111,63,o),
(229,-9,o),
(302,-9,qs),
(373,-9,o),
(480,54,o),
(507,102,q),
(507,0,l),
(599,0,l),
(599,548,l),
(507,548,l),
(507,448,l),
(481,495,o),
(375,557,o),
(303,557,qs),
(230,557,o),
(111,487,o),
(43,360,o),
(43,276,qs)
);
},
{
closed = 1;
nodes = (
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs),
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs)
);
},
{
closed = 1;
nodes = (
(477,669,l),
(339,752,l),
(200,669,l),
(200,597,l),
(339,682,l),
(477,597,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
11 6 2 5 4 1 76 40 39 38 37 36 5 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 0 0 4 5 0 4 105 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
38 38 35 17 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = atilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,193,o),
(111,63,o),
(229,-9,o),
(302,-9,qs),
(373,-9,o),
(480,54,o),
(507,102,q),
(507,0,l),
(599,0,l),
(599,548,l),
(507,548,l),
(507,448,l),
(481,495,o),
(375,557,o),
(303,557,qs),
(230,557,o),
(111,487,o),
(43,360,o),
(43,276,qs)
);
},
{
closed = 1;
nodes = (
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs),
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs)
);
},
{
closed = 1;
nodes = (
(248,629,o),
(271,651,o),
(288,651,qs),
(301,651,o),
(320,641,o),
(336,631,qs),
(354,618,o),
(383,605,o),
(402,605,qs),
(442,605,o),
(496,659,o),
(502,709,q),
(450,709,l),
(447,688,o),
(423,666,o),
(406,666,qs),
(393,666,o),
(371,677,o),
(357,687,qs),
(338,699,o),
(311,712,o),
(292,712,qs),
(252,712,o),
(199,658,o),
(192,607,q),
(245,607,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
11 6 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 7 12 11 2 9 0 7 9 105 0 10 10 6 97 8 1 6 6 28 77 0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 7 12 11 2 9 0 7 9 105 0 10 10 6 97 8 1 6 6 28 77 0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 7 12 11 2 9 0 7 9 105 0 0 0 4 5 0 4 105 0 10 10 6 97 8 1 6 6 28 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
35 35 35 60 35 60 58 56 52 50 18 36 38 38 38 35 17 19 34 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = adieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,193,o),
(111,63,o),
(229,-9,o),
(302,-9,qs),
(373,-9,o),
(480,54,o),
(507,102,q),
(507,0,l),
(599,0,l),
(599,548,l),
(507,548,l),
(507,448,l),
(481,495,o),
(375,557,o),
(303,557,qs),
(230,557,o),
(111,487,o),
(43,360,o),
(43,276,qs)
);
},
{
closed = 1;
nodes = (
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs),
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs)
);
},
{
closed = 1;
nodes = (
(279,622,o),
(310,652,o),
(310,674,qs),
(310,696,o),
(279,727,o),
(258,727,qs),
(236,727,o),
(205,696,o),
(205,674,qs),
(205,652,o),
(236,622,o),
(258,622,qs)
);
},
{
closed = 1;
nodes = (
(442,622,o),
(473,652,o),
(473,674,qs),
(473,696,o),
(442,727,o),
(420,727,qs),
(398,727,o),
(368,696,o),
(368,674,qs),
(368,652,o),
(398,622,o),
(420,622,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
11 6 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
11 9 10 3 7 7 6 97 8 1 6 6 34 77 0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
11 9 10 3 7 7 6 97 8 1 6 6 34 77 0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 0 0 4 5 0 4 105 11 9 10 3 7 7 6 97 8 1 6 6 34 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
47 47 35 35 47 58 47 57 53 51 35 46 35 45 40 38 38 35 17 19 34 12 8 29 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = aring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,193,o),
(111,63,o),
(229,-9,o),
(302,-9,qs),
(373,-9,o),
(480,54,o),
(507,102,q),
(507,0,l),
(599,0,l),
(599,548,l),
(507,548,l),
(507,448,l),
(481,495,o),
(375,557,o),
(303,557,qs),
(230,557,o),
(111,487,o),
(43,360,o),
(43,276,qs)
);
},
{
closed = 1;
nodes = (
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs),
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs)
);
},
{
closed = 1;
nodes = (
(294,817,o),
(232,759,o),
(232,712,qs),
(232,665,o),
(294,607,o),
(339,607,qs),
(385,607,o),
(446,664,o),
(446,712,qs),
(446,760,o),
(385,817,o),
(339,817,qs)
);
},
{
closed = 1;
nodes = (
(316,656,o),
(285,688,o),
(285,713,qs),
(285,738,o),
(316,769,o),
(339,769,qs),
(362,769,o),
(393,738,o),
(393,713,qs),
(393,688,o),
(362,656,o),
(339,656,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
11 6 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
10 1 7 0 8 9 7 8 105 11 1 9 0 6 0 9 6 105 0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
10 1 7 0 8 9 7 8 105 11 1 9 0 6 0 9 6 105 0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
10 1 7 0 8 9 7 8 105 11 1 9 0 6 0 9 6 105 0 0 0 4 5 0 4 105 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
47 47 35 35 47 58 47 57 53 51 35 46 35 45 40 38 38 35 17 19 34 12 8 29 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = aring;
unicode = 229;
},
{
glyphname = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(833,480,o),
(914,439,o),
(961,362,o),
(961,309,q),
(600,309,l),
(607,388,o),
(712,480,o),
(784,480,qs)
);
},
{
closed = 1;
nodes = (
(931,123,o),
(847,68,o),
(783,68,qs),
(739,68,o),
(659,108,o),
(605,187,o),
(600,243,q),
(1051,243,l),
(1055,268,o),
(1055,297,qs),
(1055,369,o),
(991,488,o),
(874,557,o),
(798,557,qs),
(660,557,o),
(589,447,q),
(589,548,l),
(513,548,l),
(513,447,l),
(480,500,o),
(375,557,o),
(308,557,qs),
(232,557,o),
(112,487,o),
(43,360,o),
(43,276,qs),
(43,193,o),
(111,63,o),
(230,-9,o),
(303,-9,qs),
(372,-9,o),
(480,54,o),
(510,105,q),
(510,0,l),
(589,0,l),
(589,106,l),
(618,53,o),
(731,-9,o),
(798,-9,qs),
(893,-9,o),
(1021,90,o),
(1043,169,q),
(945,169,l)
);
},
{
closed = 1;
nodes = (
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs),
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
34 31 2 0 1 17 14 2 9 10 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
14 1 10 8 9 8 10 9 128 0 0 0 8 10 0 8 103 12 13 2 1 1 5 97 7 6 2 5 5 31 77 11 1 9 9 2 97 4 3 2 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
14 1 10 8 9 8 10 9 128 0 0 0 8 10 0 8 103 12 13 2 1 1 5 97 7 1 5 5 31 77 0 6 6 3 95 0 3 3 29 77 11 1 9 9 2 97 4 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
14 1 10 8 9 8 10 9 128 7 1 5 12 13 2 1 0 5 1 105 0 0 0 8 10 0 8 103 0 6 6 3 95 0 3 3 29 77 11 1 9 9 2 97 4 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
8 8 0 0 63 61 55 53 8 50 8 50 48 46 43 42 37 35 33 32 29 27 21 19 16 15 12 10 0 7 0 6 18 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 1097;
}
);
note = ae;
unicode = 230;
},
{
glyphname = ccedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,196,o),
(102,73,o),
(208,0,o),
(277,-7,q),
(277,-114,l),
(327,-114,ls),
(360,-114,o),
(391,-134,o),
(391,-157,qs),
(391,-181,o),
(360,-201,o),
(327,-201,qs),
(230,-201,l),
(230,-260,l),
(345,-260,ls),
(399,-260,o),
(467,-204,o),
(467,-157,qs),
(467,-109,o),
(397,-57,o),
(338,-58,q),
(338,-8,l),
(426,-1,o),
(543,98,o),
(563,176,q),
(465,176,l),
(450,124,o),
(370,68,o),
(310,68,qs),
(232,68,o),
(136,176,o),
(136,275,qs),
(136,373,o),
(232,480,o),
(310,480,qs),
(370,480,o),
(451,422,o),
(465,372,q),
(563,372,l),
(542,459,o),
(411,557,o),
(310,557,qs),
(232,557,o),
(111,487,o),
(43,360,o),
(43,275,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
41 23 2 5 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 3 5 5 3 112 0 5 0 8 7 5 8 106 0 2 2 0 97 0 0 0 31 77 0 7 7 6 95 0 6 6 33 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 3 5 2 3 5 126 0 5 0 8 7 5 8 106 0 2 2 0 97 0 0 0 31 77 0 7 7 6 95 0 6 6 33 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 3 5 2 3 5 126 0 5 0 8 7 5 8 106 0 7 0 6 7 6 99 0 2 2 0 97 0 0 0 31 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 3 5 2 3 5 126 0 0 0 2 1 0 2 105 0 5 0 8 7 5 8 106 0 7 6 6 7 87 0 7 7 6 95 0 6 7 6 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 33 36 20 18 36 34 18 34 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = egrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,480,o),
(437,441,o),
(483,366,o),
(483,314,q),
(137,314,l),
(144,392,o),
(241,480,o),
(310,480,qs)
);
},
{
closed = 1;
nodes = (
(452,123,o),
(373,68,o),
(314,68,qs),
(242,68,o),
(141,159,o),
(136,240,q),
(574,240,l),
(577,269,o),
(577,295,qs),
(577,370,o),
(512,489,o),
(392,557,o),
(314,557,qs),
(234,557,o),
(111,488,o),
(43,360,o),
(43,275,qs),
(43,190,o),
(113,61,o),
(236,-9,o),
(314,-9,qs),
(412,-9,o),
(544,90,o),
(566,169,q),
(468,169,l)
);
},
{
closed = 1;
nodes = (
(195,703,l),
(408,589,l),
(408,657,l),
(195,782,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
36 35 34 33 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
8 1 6 4 5 4 6 5 128 0 3 7 1 1 0 3 1 105 0 0 0 4 6 0 4 103 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
8 8 0 0 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = eacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,480,o),
(437,441,o),
(483,366,o),
(483,314,q),
(137,314,l),
(144,392,o),
(241,480,o),
(310,480,qs)
);
},
{
closed = 1;
nodes = (
(452,123,o),
(373,68,o),
(314,68,qs),
(242,68,o),
(141,159,o),
(136,240,q),
(574,240,l),
(577,269,o),
(577,295,qs),
(577,370,o),
(512,489,o),
(392,557,o),
(314,557,qs),
(234,557,o),
(111,488,o),
(43,360,o),
(43,275,qs),
(43,190,o),
(113,61,o),
(236,-9,o),
(314,-9,qs),
(412,-9,o),
(544,90,o),
(566,169,q),
(468,169,l)
);
},
{
closed = 1;
nodes = (
(195,657,l),
(195,589,l),
(408,703,l),
(408,782,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
36 35 34 33 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
8 1 6 4 5 4 6 5 128 0 3 7 1 1 0 3 1 105 0 0 0 4 6 0 4 103 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
8 8 0 0 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ecircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,480,o),
(437,441,o),
(483,366,o),
(483,314,q),
(137,314,l),
(144,392,o),
(241,480,o),
(310,480,qs)
);
},
{
closed = 1;
nodes = (
(452,123,o),
(373,68,o),
(314,68,qs),
(242,68,o),
(141,159,o),
(136,240,q),
(574,240,l),
(577,269,o),
(577,295,qs),
(577,370,o),
(512,489,o),
(392,557,o),
(314,557,qs),
(234,557,o),
(111,488,o),
(43,360,o),
(43,275,qs),
(43,190,o),
(113,61,o),
(236,-9,o),
(314,-9,qs),
(412,-9,o),
(544,90,o),
(566,169,q),
(468,169,l)
);
},
{
closed = 1;
nodes = (
(449,669,l),
(311,752,l),
(172,669,l),
(172,597,l),
(311,682,l),
(449,597,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
38 37 36 35 34 5 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
8 1 6 4 5 4 6 5 128 0 3 7 1 1 0 3 1 105 0 0 0 4 6 0 4 103 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
8 8 0 0 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,480,o),
(437,441,o),
(483,366,o),
(483,314,q),
(137,314,l),
(144,392,o),
(241,480,o),
(310,480,qs)
);
},
{
closed = 1;
nodes = (
(452,123,o),
(373,68,o),
(314,68,qs),
(242,68,o),
(141,159,o),
(136,240,q),
(574,240,l),
(577,269,o),
(577,295,qs),
(577,370,o),
(512,489,o),
(392,557,o),
(314,557,qs),
(234,557,o),
(111,488,o),
(43,360,o),
(43,275,qs),
(43,190,o),
(113,61,o),
(236,-9,o),
(314,-9,qs),
(412,-9,o),
(544,90,o),
(566,169,q),
(468,169,l)
);
},
{
closed = 1;
nodes = (
(250,622,o),
(281,652,o),
(281,674,qs),
(281,696,o),
(250,727,o),
(229,727,qs),
(207,727,o),
(176,696,o),
(176,674,qs),
(176,652,o),
(207,622,o),
(229,622,qs)
);
},
{
closed = 1;
nodes = (
(413,622,o),
(444,652,o),
(444,674,qs),
(444,696,o),
(413,727,o),
(391,727,qs),
(369,727,o),
(339,696,o),
(339,674,qs),
(339,652,o),
(369,622,o),
(391,622,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
12 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 14 10 13 3 8 8 7 97 9 1 7 7 34 77 11 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
12 1 6 4 5 4 6 5 128 0 3 11 1 1 0 3 1 105 0 0 0 4 6 0 4 103 14 10 13 3 8 8 7 97 9 1 7 7 34 77 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
45 45 33 33 8 8 0 0 45 56 45 55 51 49 33 44 33 43 39 37 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = igrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,548,l),
(77,548,l)
);
},
{
closed = 1;
nodes = (
(220,589,l),
(220,657,l),
(7,782,l),
(7,703,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 6 5 4 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = iacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,548,l),
(77,548,l)
);
},
{
closed = 1;
nodes = (
(220,703,l),
(220,782,l),
(7,657,l),
(7,589,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 6 5 4 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = icircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,548,l),
(77,548,l)
);
},
{
closed = 1;
nodes = (
(123,682,l),
(261,597,l),
(261,669,l),
(123,752,l),
(-16,669,l),
(-16,597,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
9 8 7 6 5 4 6 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,548,l),
(77,548,l)
);
},
{
closed = 1;
nodes = (
(63,622,o),
(94,652,o),
(94,674,qs),
(94,696,o),
(63,727,o),
(42,727,qs),
(20,727,o),
(-11,696,o),
(-11,674,qs),
(-11,652,o),
(20,622,o),
(42,622,qs)
);
},
{
closed = 1;
nodes = (
(226,622,o),
(257,652,o),
(257,674,qs),
(257,696,o),
(226,727,o),
(204,727,qs),
(182,727,o),
(152,696,o),
(152,674,qs),
(152,652,o),
(182,622,o),
(204,622,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
8 5 7 3 3 3 2 97 4 1 2 2 34 77 6 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
8 5 7 3 3 3 2 97 4 1 2 2 34 77 6 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
16 16 4 4 0 0 16 27 16 26 22 20 4 15 4 14 10 8 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = eth;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,594,l),
(391,638,l),
(460,561,o),
(492,466,q),
(430,558,o),
(311,558,qs),
(235,558,o),
(113,488,o),
(43,361,o),
(43,278,qs),
(43,193,o),
(112,62,o),
(237,-9,o),
(316,-9,qs),
(397,-9,o),
(524,65,o),
(596,210,o),
(596,315,qs),
(596,507,o),
(458,660,q),
(552,692,l),
(552,743,l),
(421,699,l),
(415,705,o),
(375,740,q),
(282,740,l),
(323,707,o),
(355,676,q),
(261,644,l)
);
},
{
closed = 1;
nodes = (
(136,343,o),
(185,434,o),
(268,481,o),
(318,481,qs),
(368,481,o),
(452,434,o),
(502,340,o),
(502,275,qs),
(502,210,o),
(451,116,o),
(366,68,o),
(316,68,qs),
(266,68,o),
(184,117,o),
(136,212,o),
(136,278,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
28 27 26 8 7 5 6 2 0 24 1 3 4 2 76 6 1 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 30 77 0 4 4 2 97 0 2 2 31 77 0 3 3 1 97 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 0 2 0 133 0 4 4 2 97 0 2 2 31 77 0 3 3 1 97 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 2 0 133 0 2 0 4 3 2 4 106 0 3 3 1 97 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
38 40 38 42 18 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = eth;
unicode = 240;
},
{
glyphname = ntilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(168,303,ls),
(168,389,o),
(253,479,o),
(325,479,qs),
(396,479,o),
(478,392,o),
(478,310,qs),
(478,0,l),
(568,0,l),
(568,323,ls),
(568,437,o),
(444,558,o),
(344,558,qs),
(288,558,o),
(195,512,o),
(168,470,q),
(168,548,l),
(77,548,l),
(77,0,l),
(168,0,l)
);
},
{
closed = 1;
nodes = (
(231,629,o),
(254,651,o),
(271,651,qs),
(284,651,o),
(303,641,o),
(319,631,qs),
(337,618,o),
(366,605,o),
(385,605,qs),
(425,605,o),
(479,659,o),
(485,709,q),
(433,709,l),
(430,688,o),
(406,666,o),
(389,666,qs),
(376,666,o),
(354,677,o),
(340,687,qs),
(321,699,o),
(294,712,o),
(275,712,qs),
(235,712,o),
(182,658,o),
(175,607,q),
(228,607,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 6 12 10 2 8 0 6 8 105 0 9 9 5 97 7 1 5 5 28 77 0 3 3 0 97 1 1 0 0 31 77 11 4 2 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 6 12 10 2 8 1 6 8 105 0 9 9 5 97 7 1 5 5 28 77 0 0 0 31 77 0 3 3 1 97 0 1 1 31 77 11 4 2 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 6 12 10 2 8 1 6 8 105 0 9 9 5 97 7 1 5 5 28 77 0 3 3 1 97 0 1 1 31 77 0 0 0 2 95 11 4 2 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 6 12 10 2 8 1 6 8 105 0 1 0 3 2 1 3 105 0 9 9 5 97 7 1 5 5 28 77 0 0 0 2 95 11 4 2 2 2 29 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
20 20 0 0 20 45 20 45 43 41 37 35 33 32 30 28 24 22 0 19 0 19 35 19 35 17 13 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = ograve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,360,o),
(524,488,o),
(398,557,o),
(320,557,qs),
(242,557,o),
(116,488,o),
(43,359,o),
(43,275,qs),
(43,190,o),
(114,61,o),
(239,-9,o),
(316,-9,qs),
(394,-9,o),
(522,61,o),
(597,190,o),
(597,275,qs)
);
},
{
closed = 1;
nodes = (
(136,341,o),
(186,433,o),
(269,478,o),
(319,478,qs),
(368,478,o),
(452,433,o),
(504,341,o),
(504,275,qs),
(504,209,o),
(451,117,o),
(365,71,o),
(316,71,qs),
(267,71,o),
(185,116,o),
(136,208,o),
(136,275,qs)
);
},
{
closed = 1;
nodes = (
(205,710,l),
(418,596,l),
(418,664,l),
(205,789,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 34 33 32 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 38 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = oacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,360,o),
(524,488,o),
(398,557,o),
(320,557,qs),
(242,557,o),
(116,488,o),
(43,359,o),
(43,275,qs),
(43,190,o),
(114,61,o),
(239,-9,o),
(316,-9,qs),
(394,-9,o),
(522,61,o),
(597,190,o),
(597,275,qs)
);
},
{
closed = 1;
nodes = (
(136,341,o),
(186,433,o),
(269,478,o),
(319,478,qs),
(368,478,o),
(452,433,o),
(504,341,o),
(504,275,qs),
(504,209,o),
(451,117,o),
(365,71,o),
(316,71,qs),
(267,71,o),
(185,116,o),
(136,208,o),
(136,275,qs)
);
},
{
closed = 1;
nodes = (
(205,664,l),
(205,596,l),
(418,710,l),
(418,789,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 34 33 32 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 38 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,360,o),
(524,488,o),
(398,557,o),
(320,557,qs),
(242,557,o),
(116,488,o),
(43,359,o),
(43,275,qs),
(43,190,o),
(114,61,o),
(239,-9,o),
(316,-9,qs),
(394,-9,o),
(522,61,o),
(597,190,o),
(597,275,qs)
);
},
{
closed = 1;
nodes = (
(136,341,o),
(186,433,o),
(269,478,o),
(319,478,qs),
(368,478,o),
(452,433,o),
(504,341,o),
(504,275,qs),
(504,209,o),
(451,117,o),
(365,71,o),
(316,71,qs),
(267,71,o),
(185,116,o),
(136,208,o),
(136,275,qs)
);
},
{
closed = 1;
nodes = (
(459,676,l),
(321,759,l),
(182,676,l),
(182,604,l),
(321,689,l),
(459,604,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
37 36 35 34 33 5 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 38 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = otilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,360,o),
(524,488,o),
(398,557,o),
(320,557,qs),
(242,557,o),
(116,488,o),
(43,359,o),
(43,275,qs),
(43,190,o),
(114,61,o),
(239,-9,o),
(316,-9,qs),
(394,-9,o),
(522,61,o),
(597,190,o),
(597,275,qs)
);
},
{
closed = 1;
nodes = (
(136,341,o),
(186,433,o),
(269,478,o),
(319,478,qs),
(368,478,o),
(452,433,o),
(504,341,o),
(504,275,qs),
(504,209,o),
(451,117,o),
(365,71,o),
(316,71,qs),
(267,71,o),
(185,116,o),
(136,208,o),
(136,275,qs)
);
},
{
closed = 1;
nodes = (
(230,636,o),
(253,658,o),
(270,658,qs),
(283,658,o),
(302,648,o),
(318,638,qs),
(336,625,o),
(365,612,o),
(384,612,qs),
(424,612,o),
(478,666,o),
(484,716,q),
(432,716,l),
(429,695,o),
(405,673,o),
(388,673,qs),
(375,673,o),
(353,684,o),
(339,694,qs),
(320,706,o),
(293,719,o),
(274,719,qs),
(234,719,o),
(181,665,o),
(174,614,q),
(227,614,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 5 10 9 2 7 1 5 7 105 0 8 8 4 97 6 1 4 4 28 77 0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 5 10 9 2 7 1 5 7 105 0 1 0 3 2 1 3 105 0 8 8 4 97 6 1 4 4 28 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
32 32 32 57 32 57 36 34 18 36 38 38 38 38 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = odieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,360,o),
(524,488,o),
(398,557,o),
(320,557,qs),
(242,557,o),
(116,488,o),
(43,359,o),
(43,275,qs),
(43,190,o),
(114,61,o),
(239,-9,o),
(316,-9,qs),
(394,-9,o),
(522,61,o),
(597,190,o),
(597,275,qs)
);
},
{
closed = 1;
nodes = (
(136,341,o),
(186,433,o),
(269,478,o),
(319,478,qs),
(368,478,o),
(452,433,o),
(504,341,o),
(504,275,qs),
(504,209,o),
(451,117,o),
(365,71,o),
(316,71,qs),
(267,71,o),
(185,116,o),
(136,208,o),
(136,275,qs)
);
},
{
closed = 1;
nodes = (
(261,629,o),
(292,659,o),
(292,681,qs),
(292,703,o),
(261,734,o),
(240,734,qs),
(218,734,o),
(187,703,o),
(187,681,qs),
(187,659,o),
(218,629,o),
(240,629,qs)
);
},
{
closed = 1;
nodes = (
(424,629,o),
(455,659,o),
(455,681,qs),
(455,703,o),
(424,734,o),
(402,734,qs),
(380,734,o),
(350,703,o),
(350,681,qs),
(350,659,o),
(380,629,o),
(402,629,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
9 7 8 3 5 5 4 97 6 1 4 4 34 77 0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 0 3 2 1 3 105 9 7 8 3 5 5 4 97 6 1 4 4 34 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
44 44 32 32 44 55 44 54 50 48 32 43 32 42 40 38 38 38 34 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(78,328,l),
(588,328,l),
(588,405,l),
(78,405,l)
);
},
{
closed = 1;
nodes = (
(395,179,o),
(360,215,o),
(335,215,qs),
(309,215,o),
(273,179,o),
(273,153,qs),
(273,127,o),
(309,91,o),
(335,91,qs),
(360,91,o),
(395,127,o),
(395,153,qs)
);
},
{
closed = 1;
nodes = (
(395,608,o),
(360,644,o),
(335,644,qs),
(309,644,o),
(273,608,o),
(273,582,qs),
(273,556,o),
(309,520,o),
(335,520,qs),
(360,520,o),
(395,556,o),
(395,582,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 5 0 4 1 5 4 105 6 1 1 0 0 3 1 0 103 0 3 2 2 3 89 0 3 3 2 97 0 2 3 2 81 0 0 25 23 19 17 13 11 7 5 0 3 0 3 17 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = divide;
unicode = 247;
},
{
glyphname = oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,333,o),
(562,431,o),
(530,468,q),
(603,548,l),
(538,548,l),
(495,500,l),
(421,557,o),
(320,557,qs),
(242,557,o),
(116,488,o),
(43,359,o),
(43,275,qs),
(43,216,o),
(78,117,o),
(110,79,q),
(38,0,l),
(103,0,l),
(145,46,l),
(219,-9,o),
(316,-9,qs),
(394,-9,o),
(522,61,o),
(597,190,o),
(597,275,qs)
);
},
{
closed = 1;
nodes = (
(136,341,o),
(186,433,o),
(269,478,o),
(319,478,qs),
(389,478,o),
(437,437,q),
(171,145,l),
(136,198,o),
(136,275,qs)
);
},
{
closed = 1;
nodes = (
(250,71,o),
(203,109,q),
(469,401,l),
(504,352,o),
(504,275,qs),
(504,209,o),
(451,117,o),
(365,71,o),
(316,71,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
17 1 4 2 39 38 26 25 20 8 6 5 4 5 1 0 5 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
17 1 4 3 39 38 26 25 20 8 6 5 4 5 1 1 5 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 4 2 97 3 1 2 2 31 77 6 1 5 5 0 97 1 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 2 4 2 3 4 128 0 4 4 2 97 0 2 2 31 77 0 1 1 29 77 6 1 5 5 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 3 2 4 2 3 4 128 0 2 0 4 5 2 4 105 0 1 1 29 77 6 1 5 5 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
33 33 33 41 33 40 40 18 39 18 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = ugrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,548,l),
(472,548,l),
(472,247,ls),
(472,161,o),
(388,71,o),
(315,71,qs),
(244,71,o),
(162,158,o),
(162,239,qs),
(162,548,l),
(72,548,l),
(72,227,ls),
(72,151,o),
(131,45,o),
(233,-8,o),
(297,-8,qs),
(353,-8,o),
(446,39,o),
(472,81,q),
(472,0,l),
(563,0,l)
);
},
{
closed = 1;
nodes = (
(205,703,l),
(418,589,l),
(418,657,l),
(205,782,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
1 1 2 1 1 76 24 23 22 21 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 31 77 0 2 2 0 97 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
3 1 1 1 0 97 5 4 2 0 0 29 77 0 2 2 0 97 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 1 4 95 5 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 20 0 20 19 35 20 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,548,l),
(472,548,l),
(472,247,ls),
(472,161,o),
(388,71,o),
(315,71,qs),
(244,71,o),
(162,158,o),
(162,239,qs),
(162,548,l),
(72,548,l),
(72,227,ls),
(72,151,o),
(131,45,o),
(233,-8,o),
(297,-8,qs),
(353,-8,o),
(446,39,o),
(472,81,q),
(472,0,l),
(563,0,l)
);
},
{
closed = 1;
nodes = (
(205,657,l),
(205,589,l),
(418,703,l),
(418,782,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
1 1 2 1 1 76 24 23 22 21 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 31 77 0 2 2 0 97 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
3 1 1 1 0 97 5 4 2 0 0 29 77 0 2 2 0 97 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 1 4 95 5 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 20 0 20 19 35 20 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ucircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,548,l),
(472,548,l),
(472,247,ls),
(472,161,o),
(388,71,o),
(315,71,qs),
(244,71,o),
(162,158,o),
(162,239,qs),
(162,548,l),
(72,548,l),
(72,227,ls),
(72,151,o),
(131,45,o),
(233,-8,o),
(297,-8,qs),
(353,-8,o),
(446,39,o),
(472,81,q),
(472,0,l),
(563,0,l)
);
},
{
closed = 1;
nodes = (
(459,669,l),
(321,752,l),
(182,669,l),
(182,597,l),
(321,682,l),
(459,597,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 1 2 1 1 76 26 25 24 23 22 5 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 31 77 0 2 2 0 97 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
3 1 1 1 0 97 5 4 2 0 0 29 77 0 2 2 0 97 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 1 4 95 5 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 20 0 20 19 35 20 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,548,l),
(472,548,l),
(472,247,ls),
(472,161,o),
(388,71,o),
(315,71,qs),
(244,71,o),
(162,158,o),
(162,239,qs),
(162,548,l),
(72,548,l),
(72,227,ls),
(72,151,o),
(131,45,o),
(233,-8,o),
(297,-8,qs),
(353,-8,o),
(446,39,o),
(472,81,q),
(472,0,l),
(563,0,l)
);
},
{
closed = 1;
nodes = (
(261,622,o),
(292,652,o),
(292,674,qs),
(292,696,o),
(261,727,o),
(240,727,qs),
(218,727,o),
(187,696,o),
(187,674,qs),
(187,652,o),
(218,622,o),
(240,622,qs)
);
},
{
closed = 1;
nodes = (
(424,622,o),
(455,652,o),
(455,674,qs),
(455,696,o),
(424,727,o),
(402,727,qs),
(380,727,o),
(350,696,o),
(350,674,qs),
(350,652,o),
(380,622,o),
(402,622,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
11 8 10 3 6 6 5 97 7 1 5 5 34 77 3 1 1 1 31 77 0 2 2 0 97 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
11 8 10 3 6 6 5 97 7 1 5 5 34 77 3 1 1 1 0 97 9 4 2 0 0 29 77 0 2 2 0 97 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
11 8 10 3 6 6 5 97 7 1 5 5 34 77 3 1 1 1 4 95 9 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
33 33 21 21 0 0 33 44 33 43 39 37 21 32 21 31 27 25 0 20 0 20 19 35 20 35 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = yacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(285,104,l),
(113,548,l),
(12,548,l),
(233,6,l),
(125,-258,l),
(219,-258,l),
(549,548,l),
(455,548,l)
);
},
{
closed = 1;
nodes = (
(379,703,l),
(379,782,l),
(166,657,l),
(166,589,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
6 3 2 0 1 1 76 11 10 9 8 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 1 1 31 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 0 1 0 134 3 2 2 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
3 2 2 1 0 1 133 0 0 0 118 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 7 0 7 18 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,740,l),
(77,-260,l),
(168,-260,l),
(168,120,l),
(195,62,o),
(301,-9,o),
(373,-9,qs),
(446,-9,o),
(565,63,o),
(633,193,o),
(633,276,qs),
(633,360,o),
(565,487,o),
(446,557,o),
(373,557,qs),
(301,557,o),
(194,488,o),
(168,432,q),
(168,740,l)
);
},
{
closed = 1;
nodes = (
(540,213,o),
(490,120,o),
(405,71,o),
(354,71,qs),
(304,71,o),
(219,120,o),
(168,213,o),
(168,275,qs),
(168,336,o),
(219,429,o),
(304,478,o),
(354,478,qs),
(405,478,o),
(490,430,o),
(540,338,o),
(540,276,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
14 0 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 3 30 77 0 4 4 0 97 0 0 0 31 77 0 5 5 1 97 0 1 1 29 77 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 0 2 3 2 99 0 4 4 0 97 0 0 0 31 77 0 5 5 1 97 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 4 5 0 4 105 0 3 0 2 3 2 99 0 5 5 1 97 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
38 35 17 19 38 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = ydieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(285,104,l),
(113,548,l),
(12,548,l),
(233,6,l),
(125,-258,l),
(219,-258,l),
(549,548,l),
(455,548,l)
);
},
{
closed = 1;
nodes = (
(222,622,o),
(253,652,o),
(253,674,qs),
(253,696,o),
(222,727,o),
(201,727,qs),
(179,727,o),
(148,696,o),
(148,674,qs),
(148,652,o),
(179,622,o),
(201,622,qs)
);
},
{
closed = 1;
nodes = (
(385,622,o),
(416,652,o),
(416,674,qs),
(416,696,o),
(385,727,o),
(363,727,qs),
(341,727,o),
(311,696,o),
(311,674,qs),
(311,652,o),
(341,622,o),
(363,622,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
6 3 2 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
9 6 8 3 4 4 3 97 5 1 3 3 34 77 7 2 2 1 1 31 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 0 134 9 6 8 3 4 4 3 97 5 1 3 3 34 77 7 2 2 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
7 2 2 1 4 0 4 1 0 128 0 0 0 132 9 6 8 3 4 4 3 97 5 1 3 3 34 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
20 20 8 8 0 0 20 31 20 30 26 24 8 19 8 18 14 12 0 7 0 7 18 17 10 8 24 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = Amacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(545,0,l),
(641,0,l),
(390,693,l),
(285,693,l),
(33,0,l),
(129,0,l),
(185,155,l),
(489,155,l)
);
},
{
closed = 1;
nodes = (
(513,786,l),
(513,854,l),
(161,854,l),
(161,786,l)
);
},
{
closed = 1;
nodes = (
(337,581,l),
(463,229,l),
(211,229,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
13 1 6 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 5 1 4 5 103 8 1 6 7 1 3 0 6 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 1 5 6 5 1 6 128 0 4 0 5 1 4 5 103 8 1 6 7 1 3 0 6 3 104 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 5 1 4 5 103 8 1 6 7 1 3 0 6 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 5 6 5 1 6 128 0 4 0 5 1 4 5 103 8 1 6 7 1 3 0 6 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
12 12 0 0 12 14 12 14 11 10 9 8 0 7 0 7 17 17 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = amacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,193,o),
(111,63,o),
(229,-9,o),
(302,-9,qs),
(373,-9,o),
(480,54,o),
(507,102,q),
(507,0,l),
(599,0,l),
(599,548,l),
(507,548,l),
(507,448,l),
(481,495,o),
(375,557,o),
(303,557,qs),
(230,557,o),
(111,487,o),
(43,360,o),
(43,276,qs)
);
},
{
closed = 1;
nodes = (
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs),
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs)
);
},
{
closed = 1;
nodes = (
(163,641,l),
(515,641,l),
(515,709,l),
(163,709,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
11 6 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 6 6 7 95 8 1 7 7 28 77 0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 6 6 7 95 8 1 7 7 28 77 0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 0 0 4 5 0 4 105 0 6 6 7 95 8 1 7 7 28 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
35 35 35 38 35 38 21 38 38 35 17 19 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = Abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(545,0,l),
(641,0,l),
(390,693,l),
(285,693,l),
(33,0,l),
(129,0,l),
(185,155,l),
(489,155,l)
);
},
{
closed = 1;
nodes = (
(426,895,l),
(426,857,o),
(384,818,o),
(338,818,qs),
(291,818,o),
(249,857,o),
(249,895,q),
(195,895,l),
(195,878,ls),
(195,820,o),
(271,747,o),
(338,747,qs),
(405,747,o),
(480,820,o),
(480,877,qs),
(480,895,l)
);
},
{
closed = 1;
nodes = (
(463,229,l),
(211,229,l),
(337,581,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
26 1 8 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 8 9 1 3 0 8 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 5 133 0 1 4 8 4 1 8 128 0 6 0 4 1 6 4 105 0 8 9 1 3 0 8 3 104 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 8 9 1 3 0 8 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 5 133 0 1 4 8 4 1 8 128 0 6 0 4 1 6 4 105 0 8 9 1 3 0 8 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 25 24 23 22 20 18 16 15 12 10 0 7 0 7 17 17 17 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = abreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,193,o),
(111,63,o),
(229,-9,o),
(302,-9,qs),
(373,-9,o),
(480,54,o),
(507,102,q),
(507,0,l),
(599,0,l),
(599,548,l),
(507,548,l),
(507,448,l),
(481,495,o),
(375,557,o),
(303,557,qs),
(230,557,o),
(111,487,o),
(43,360,o),
(43,276,qs)
);
},
{
closed = 1;
nodes = (
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs),
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs)
);
},
{
closed = 1;
nodes = (
(427,750,l),
(427,712,o),
(385,673,o),
(339,673,qs),
(292,673,o),
(250,712,o),
(250,750,q),
(196,750,l),
(196,733,ls),
(196,675,o),
(272,602,o),
(339,602,qs),
(406,602,o),
(481,675,o),
(481,732,qs),
(481,750,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
11 6 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 8 0 6 0 8 6 105 9 1 7 7 30 77 0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 98 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 8 0 6 0 8 6 105 9 1 7 7 30 77 0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 98 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
9 1 7 8 7 133 0 8 0 6 0 8 6 105 0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 98 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
9 1 7 8 7 133 0 8 0 6 0 8 6 105 0 0 0 4 5 0 4 105 0 1 1 2 95 0 2 2 29 77 0 5 5 3 98 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
50 49 34 19 38 38 38 35 17 19 34 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = Aogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(285,693,l),
(33,0,l),
(129,0,l),
(185,155,l),
(489,155,l),
(541,12,l),
(493,-14,o),
(451,-72,o),
(451,-106,qs),
(451,-157,o),
(523,-206,o),
(574,-206,qs),
(612,-206,o),
(650,-192,q),
(650,-132,l),
(614,-145,o),
(585,-145,qs),
(558,-145,o),
(526,-120,o),
(526,-97,qs),
(526,-77,o),
(554,-43,o),
(587,-27,qs),
(641,0,l),
(390,693,l)
);
},
{
closed = 1;
nodes = (
(463,229,l),
(211,229,l),
(337,581,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
27 1 5 4 18 1 3 2 9 1 0 3 10 1 1 0 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 5 0 2 3 5 2 104 0 0 0 1 0 1 101 0 4 4 28 77 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 5 4 133 0 5 0 2 3 5 2 104 0 0 0 1 0 1 101 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 5 0 2 3 5 2 104 0 0 0 1 0 1 101 0 4 4 28 77 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 4 5 4 133 0 5 0 2 3 5 2 104 0 0 0 1 0 1 101 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 17 22 35 38 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = aogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,193,o),
(111,63,o),
(229,-9,o),
(302,-9,qs),
(373,-9,o),
(480,54,o),
(507,102,q),
(507,17,l),
(409,-35,o),
(409,-106,qs),
(409,-157,o),
(480,-206,o),
(531,-206,qs),
(568,-206,o),
(608,-192,q),
(608,-132,l),
(571,-145,o),
(543,-145,qs),
(516,-145,o),
(484,-120,o),
(484,-97,qs),
(484,-56,o),
(544,-27,qs),
(599,0,l),
(599,548,l),
(507,548,l),
(507,448,l),
(481,495,o),
(375,557,o),
(303,557,qs),
(230,557,o),
(111,487,o),
(43,360,o),
(43,276,qs)
);
},
{
closed = 1;
nodes = (
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs),
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
26 6 2 6 5 25 9 2 4 6 17 1 2 4 18 1 3 2 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 0 3 2 3 102 0 5 5 0 97 1 1 0 0 31 77 0 6 6 4 97 0 4 4 29 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 0 5 0 1 5 128 0 2 0 3 2 3 102 0 5 5 0 97 0 0 0 31 77 0 6 6 4 97 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 1 0 5 0 1 5 128 0 0 0 5 6 0 5 105 0 2 0 3 2 3 102 0 6 6 4 97 0 4 4 29 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
38 38 39 35 38 19 34 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = Cacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,247,o),
(135,85,o),
(294,-6,o),
(391,-6,qs),
(505,-6,o),
(675,103,o),
(714,203,q),
(605,203,l),
(576,140,o),
(467,73,o),
(391,73,qs),
(318,73,o),
(202,141,o),
(136,266,o),
(136,349,qs),
(136,433,o),
(202,558,o),
(318,626,o),
(391,626,qs),
(467,626,o),
(576,558,o),
(605,495,q),
(714,495,l),
(675,596,o),
(505,706,o),
(391,706,qs),
(294,706,o),
(135,614,o),
(43,451,o),
(43,349,qs)
);
},
{
closed = 1;
nodes = (
(281,808,l),
(281,740,l),
(494,854,l),
(494,933,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
33 32 31 30 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 28 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 3 5 97 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 38 34 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = cacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,189,o),
(111,61,o),
(232,-9,o),
(310,-9,qs),
(409,-9,o),
(541,92,o),
(563,176,q),
(465,176,l),
(450,124,o),
(370,68,o),
(310,68,qs),
(232,68,o),
(136,176,o),
(136,275,qs),
(136,373,o),
(232,480,o),
(310,480,qs),
(370,480,o),
(451,422,o),
(465,372,q),
(563,372,l),
(542,459,o),
(411,557,o),
(310,557,qs),
(232,557,o),
(111,487,o),
(43,360,o),
(43,275,qs)
);
},
{
closed = 1;
nodes = (
(189,657,l),
(189,589,l),
(402,703,l),
(402,782,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
31 30 29 28 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 31 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 3 5 97 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 36 34 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = Cdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,247,o),
(135,85,o),
(294,-6,o),
(391,-6,qs),
(505,-6,o),
(675,103,o),
(714,203,q),
(605,203,l),
(576,140,o),
(467,73,o),
(391,73,qs),
(318,73,o),
(202,141,o),
(136,266,o),
(136,349,qs),
(136,433,o),
(202,558,o),
(318,626,o),
(391,626,qs),
(467,626,o),
(576,558,o),
(605,495,q),
(714,495,l),
(675,596,o),
(505,706,o),
(391,706,qs),
(294,706,o),
(135,614,o),
(43,451,o),
(43,349,qs)
);
},
{
closed = 1;
nodes = (
(419,767,o),
(449,797,o),
(449,819,qs),
(449,841,o),
(419,872,o),
(397,872,qs),
(375,872,o),
(344,841,o),
(344,819,qs),
(344,797,o),
(375,767,o),
(397,767,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 6 8 1 7 0 6 7 105 0 2 2 0 97 0 0 0 28 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 6 8 1 7 0 6 7 105 0 0 0 2 1 0 2 105 0 3 3 5 97 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
30 30 30 41 30 40 40 34 18 38 34 18 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = cdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,189,o),
(111,61,o),
(232,-9,o),
(310,-9,qs),
(409,-9,o),
(541,92,o),
(563,176,q),
(465,176,l),
(450,124,o),
(370,68,o),
(310,68,qs),
(232,68,o),
(136,176,o),
(136,275,qs),
(136,373,o),
(232,480,o),
(310,480,qs),
(370,480,o),
(451,422,o),
(465,372,q),
(563,372,l),
(542,459,o),
(411,557,o),
(310,557,qs),
(232,557,o),
(111,487,o),
(43,360,o),
(43,275,qs)
);
},
{
closed = 1;
nodes = (
(326,617,o),
(356,647,o),
(356,669,qs),
(356,691,o),
(326,722,o),
(304,722,qs),
(282,722,o),
(251,691,o),
(251,669,qs),
(251,647,o),
(282,617,o),
(304,617,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 8 1 7 7 6 97 0 6 6 34 77 0 2 2 0 97 0 0 0 31 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 8 1 7 7 6 97 0 6 6 28 77 0 2 2 0 97 0 0 0 31 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 8 1 7 7 6 97 0 6 6 34 77 0 2 2 0 97 0 0 0 31 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 8 1 7 7 6 97 0 6 6 28 77 0 2 2 0 97 0 0 0 31 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 8 1 7 7 6 97 0 6 6 34 77 0 2 2 0 97 0 0 0 31 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 8 1 7 7 6 97 0 6 6 34 77 0 3 3 5 97 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
28 28 28 39 28 38 40 34 18 36 34 18 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = Ccaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,247,o),
(135,85,o),
(294,-6,o),
(391,-6,qs),
(505,-6,o),
(675,103,o),
(714,203,q),
(605,203,l),
(576,140,o),
(467,73,o),
(391,73,qs),
(318,73,o),
(202,141,o),
(136,266,o),
(136,349,qs),
(136,433,o),
(202,558,o),
(318,626,o),
(391,626,qs),
(467,626,o),
(576,558,o),
(605,495,q),
(714,495,l),
(675,596,o),
(505,706,o),
(391,706,qs),
(294,706,o),
(135,614,o),
(43,451,o),
(43,349,qs)
);
},
{
closed = 1;
nodes = (
(397,817,l),
(258,902,l),
(258,830,l),
(397,748,l),
(535,830,l),
(535,902,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
35 34 33 32 31 30 6 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 28 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 3 5 97 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 38 34 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = ccaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,189,o),
(111,61,o),
(232,-9,o),
(310,-9,qs),
(409,-9,o),
(541,92,o),
(563,176,q),
(465,176,l),
(450,124,o),
(370,68,o),
(310,68,qs),
(232,68,o),
(136,176,o),
(136,275,qs),
(136,373,o),
(232,480,o),
(310,480,qs),
(370,480,o),
(451,422,o),
(465,372,q),
(563,372,l),
(542,459,o),
(411,557,o),
(310,557,qs),
(232,557,o),
(111,487,o),
(43,360,o),
(43,275,qs)
);
},
{
closed = 1;
nodes = (
(304,666,l),
(165,751,l),
(165,679,l),
(304,597,l),
(442,679,l),
(442,751,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
33 32 31 30 29 28 6 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 31 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 3 5 97 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 36 34 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = Dcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(294,0,ls),
(408,0,o),
(575,83,o),
(664,240,o),
(664,347,qs),
(664,454,o),
(575,612,o),
(408,697,o),
(294,697,qs),
(77,697,l)
);
},
{
closed = 1;
nodes = (
(168,623,l),
(294,623,ls),
(428,623,o),
(571,477,o),
(571,347,qs),
(571,218,o),
(429,75,o),
(294,75,qs),
(168,75,l)
);
},
{
closed = 1;
nodes = (
(352,811,l),
(213,896,l),
(213,824,l),
(352,742,l),
(490,824,l),
(490,896,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
25 24 23 22 21 20 6 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 3 3 0 95 4 1 0 0 28 77 5 1 2 2 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
4 1 0 0 3 2 0 3 103 5 1 2 2 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
12 11 1 0 18 16 11 19 12 19 9 7 0 10 1 10 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 707;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = dcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(651,654,l),
(700,654,l),
(700,631,ls),
(700,604,o),
(678,578,o),
(652,578,q),
(652,535,l),
(703,535,o),
(754,590,o),
(754,648,qs),
(754,685,o),
(743,740,q),
(651,740,l)
);
},
{
closed = 1;
nodes = (
(43,193,o),
(111,63,o),
(230,-9,o),
(303,-9,qs),
(374,-9,o),
(480,54,o),
(507,103,q),
(507,0,l),
(599,0,l),
(599,740,l),
(507,740,l),
(507,450,l),
(478,498,o),
(368,557,o),
(304,557,qs),
(230,557,o),
(111,487,o),
(43,360,o),
(43,276,qs)
);
},
{
closed = 1;
nodes = (
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs),
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
24 19 2 9 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 2 2 3 95 5 10 2 3 3 30 77 0 0 0 1 97 4 1 1 1 37 77 0 8 8 1 97 4 1 1 1 37 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 2 2 3 95 5 10 2 3 3 30 77 0 0 0 1 97 0 1 1 37 77 0 8 8 4 97 0 4 4 31 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
5 10 2 3 0 2 1 3 2 103 0 0 0 1 97 0 1 1 37 77 0 8 8 4 97 0 4 4 31 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 2 1 3 2 87 0 0 0 1 97 0 1 1 37 77 0 8 8 4 97 0 4 4 31 77 5 10 2 3 3 6 95 0 6 6 29 77 0 9 9 7 97 0 7 7 29 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 2 1 3 2 87 0 4 0 8 9 4 8 105 0 0 0 1 97 0 1 1 37 77 5 10 2 3 3 6 95 0 6 6 29 77 0 9 9 7 97 0 7 7 29 7 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 44 42 36 34 28 26 23 22 21 20 17 15 0 12 0 12 19 17 20 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 754;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = Dcroat;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,389,l),
(9,389,l),
(9,305,l),
(96,305,l),
(96,0,l),
(313,0,ls),
(426,0,o),
(593,83,o),
(682,240,o),
(682,347,qs),
(682,454,o),
(593,612,o),
(426,697,o),
(313,697,qs),
(96,697,l)
);
},
{
closed = 1;
nodes = (
(187,305,l),
(379,305,l),
(379,389,l),
(187,389,l),
(187,623,l),
(313,623,ls),
(447,623,o),
(589,477,o),
(589,347,qs),
(589,217,o),
(447,70,o),
(313,70,qs),
(187,70,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
6 1 3 7 1 2 4 3 2 103 0 5 5 0 95 8 1 0 0 28 77 9 1 4 4 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
8 1 0 0 5 3 0 5 103 6 1 3 7 1 2 4 3 2 103 9 1 4 4 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
16 15 1 0 26 25 24 23 22 20 15 27 16 27 13 12 11 10 9 7 0 14 1 14 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = dcroat;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,193,o),
(111,63,o),
(230,-9,o),
(303,-9,qs),
(374,-9,o),
(480,54,o),
(507,103,q),
(507,0,l),
(599,0,l),
(599,605,l),
(660,605,l),
(660,659,l),
(599,659,l),
(599,740,l),
(507,740,l),
(507,659,l),
(395,659,l),
(395,605,l),
(507,605,l),
(507,450,l),
(478,498,o),
(368,557,o),
(304,557,qs),
(230,557,o),
(111,487,o),
(43,360,o),
(43,276,qs)
);
},
{
closed = 1;
nodes = (
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs),
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 6 2 9 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 30 77 0 8 8 0 97 0 0 0 31 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 6 97 7 1 6 6 29 77 0 8 8 0 97 0 0 0 31 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
4 1 2 5 1 1 0 2 1 103 0 8 8 0 97 0 0 0 31 77 0 3 3 6 95 0 6 6 29 77 0 9 9 7 97 0 7 7 29 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
4 1 2 5 1 1 0 2 1 103 0 0 0 8 9 0 8 105 0 3 3 6 95 0 6 6 29 77 0 9 9 7 97 0 7 7 29 7 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
39 37 38 35 17 17 17 17 17 19 34 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = Emacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,698,l),
(77,698,l),
(77,0,l),
(452,0,l),
(452,75,l),
(168,75,l),
(168,315,l),
(422,315,l),
(422,390,l),
(168,390,l),
(168,623,l),
(452,623,l)
);
},
{
closed = 1;
nodes = (
(430,786,l),
(430,854,l),
(78,854,l),
(78,786,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 6 0 7 4 6 7 103 0 0 0 1 2 0 1 103 8 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 6 0 7 4 6 7 103 0 4 8 1 5 0 4 5 103 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 15 14 13 12 0 11 0 11 17 17 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = emacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,480,o),
(437,441,o),
(483,366,o),
(483,314,q),
(137,314,l),
(144,392,o),
(241,480,o),
(310,480,qs)
);
},
{
closed = 1;
nodes = (
(452,123,o),
(373,68,o),
(314,68,qs),
(242,68,o),
(141,159,o),
(136,240,q),
(574,240,l),
(577,269,o),
(577,295,qs),
(577,370,o),
(512,489,o),
(392,557,o),
(314,557,qs),
(234,557,o),
(111,488,o),
(43,360,o),
(43,275,qs),
(43,190,o),
(113,61,o),
(236,-9,o),
(314,-9,qs),
(412,-9,o),
(544,90,o),
(566,169,q),
(468,169,l)
);
},
{
closed = 1;
nodes = (
(134,641,l),
(486,641,l),
(486,709,l),
(134,709,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 0 7 7 8 95 11 1 8 8 28 77 9 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
10 1 6 4 5 4 6 5 128 0 3 9 1 1 0 3 1 105 0 0 0 4 6 0 4 103 0 7 7 8 95 11 1 8 8 28 77 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
33 33 8 8 0 0 33 36 33 36 35 34 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = Ebreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,698,l),
(77,698,l),
(77,0,l),
(452,0,l),
(452,75,l),
(168,75,l),
(168,315,l),
(422,315,l),
(422,390,l),
(168,390,l),
(168,623,l),
(452,623,l)
);
},
{
closed = 1;
nodes = (
(343,895,l),
(343,857,o),
(301,818,o),
(255,818,qs),
(208,818,o),
(166,857,o),
(166,895,q),
(112,895,l),
(112,878,ls),
(112,820,o),
(188,747,o),
(255,747,qs),
(322,747,o),
(397,820,o),
(397,877,qs),
(397,895,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
9 1 7 8 7 133 0 8 0 6 4 8 6 105 0 0 0 1 2 0 1 103 10 1 5 5 4 95 0 4 4 28 77 0 2 2 3 96 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
9 1 7 8 7 133 0 8 0 6 4 8 6 105 0 4 10 1 5 0 4 5 104 0 0 0 1 2 0 1 103 0 2 2 3 96 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 27 26 24 22 20 19 16 14 0 11 0 11 17 17 17 17 17 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = ebreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,480,o),
(437,441,o),
(483,366,o),
(483,314,q),
(137,314,l),
(144,392,o),
(241,480,o),
(310,480,qs)
);
},
{
closed = 1;
nodes = (
(452,123,o),
(373,68,o),
(314,68,qs),
(242,68,o),
(141,159,o),
(136,240,q),
(574,240,l),
(577,269,o),
(577,295,qs),
(577,370,o),
(512,489,o),
(392,557,o),
(314,557,qs),
(234,557,o),
(111,488,o),
(43,360,o),
(43,275,qs),
(43,190,o),
(113,61,o),
(236,-9,o),
(314,-9,qs),
(412,-9,o),
(544,90,o),
(566,169,q),
(468,169,l)
);
},
{
closed = 1;
nodes = (
(399,750,l),
(399,712,o),
(357,673,o),
(311,673,qs),
(264,673,o),
(222,712,o),
(222,750,q),
(168,750,l),
(168,733,ls),
(168,675,o),
(244,602,o),
(311,602,qs),
(378,602,o),
(453,675,o),
(453,732,qs),
(453,750,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
12 1 6 4 5 4 6 5 128 0 9 0 7 3 9 7 105 0 0 0 4 6 0 4 104 10 1 8 8 30 77 11 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
10 1 8 9 8 133 12 1 6 4 5 4 6 5 128 0 9 0 7 3 9 7 105 0 0 0 4 6 0 4 104 11 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
10 1 8 9 8 133 12 1 6 4 5 4 6 5 128 0 9 0 7 3 9 7 105 0 3 11 1 1 0 3 1 105 0 0 0 4 6 0 4 104 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
8 8 0 0 48 47 45 43 41 40 37 35 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 13 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = Edotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,698,l),
(77,698,l),
(77,0,l),
(452,0,l),
(452,75,l),
(168,75,l),
(168,315,l),
(422,315,l),
(422,390,l),
(168,390,l),
(168,623,l),
(452,623,l)
);
},
{
closed = 1;
nodes = (
(277,761,o),
(307,791,o),
(307,813,qs),
(307,835,o),
(277,866,o),
(255,866,qs),
(233,866,o),
(202,835,o),
(202,813,qs),
(202,791,o),
(233,761,o),
(255,761,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 6 9 1 7 4 6 7 105 0 0 0 1 2 0 1 103 8 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 6 9 1 7 4 6 7 105 0 4 8 1 5 0 4 5 103 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
12 12 0 0 12 23 12 22 18 16 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = edotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,480,o),
(437,441,o),
(483,366,o),
(483,314,q),
(137,314,l),
(144,392,o),
(241,480,o),
(310,480,qs)
);
},
{
closed = 1;
nodes = (
(452,123,o),
(373,68,o),
(314,68,qs),
(242,68,o),
(141,159,o),
(136,240,q),
(574,240,l),
(577,269,o),
(577,295,qs),
(577,370,o),
(512,489,o),
(392,557,o),
(314,557,qs),
(234,557,o),
(111,488,o),
(43,360,o),
(43,275,qs),
(43,190,o),
(113,61,o),
(236,-9,o),
(314,-9,qs),
(412,-9,o),
(544,90,o),
(566,169,q),
(468,169,l)
);
},
{
closed = 1;
nodes = (
(333,617,o),
(363,647,o),
(363,669,qs),
(363,691,o),
(333,722,o),
(311,722,qs),
(289,722,o),
(258,691,o),
(258,669,qs),
(258,647,o),
(289,617,o),
(311,617,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 11 1 8 8 7 97 0 7 7 34 77 9 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 11 1 8 8 7 97 0 7 7 28 77 9 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 11 1 8 8 7 97 0 7 7 34 77 9 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 11 1 8 8 7 97 0 7 7 28 77 9 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 11 1 8 8 7 97 0 7 7 34 77 9 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
10 1 6 4 5 4 6 5 128 0 3 9 1 1 0 3 1 105 0 0 0 4 6 0 4 103 11 1 8 8 7 97 0 7 7 34 77 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
33 33 8 8 0 0 33 44 33 43 39 37 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = Eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,698,l),
(77,698,l),
(77,0,l),
(331,0,l),
(262,-46,o),
(262,-106,qs),
(262,-157,o),
(333,-206,o),
(384,-206,qs),
(421,-206,o),
(461,-192,q),
(461,-132,l),
(424,-145,o),
(396,-145,qs),
(369,-145,o),
(337,-120,o),
(337,-97,qs),
(337,-56,o),
(397,-27,qs),
(452,0,l),
(452,75,l),
(168,75,l),
(168,315,l),
(422,315,l),
(422,390,l),
(168,390,l),
(168,623,l),
(452,623,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
15 1 3 5 16 1 4 3 2 76 7 1 5 1 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 0 0 1 2 0 1 103 0 3 0 4 3 4 101 8 1 7 7 6 95 0 6 6 28 77 0 2 2 5 95 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 6 8 1 7 0 6 7 103 0 0 0 1 2 0 1 103 0 3 0 4 3 4 101 0 2 2 5 95 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 27 0 27 17 20 35 38 17 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,480,o),
(437,441,o),
(483,366,o),
(483,314,q),
(137,314,l),
(144,392,o),
(241,480,o),
(310,480,qs)
);
},
{
closed = 1;
nodes = (
(392,-131,o),
(364,-131,qs),
(337,-131,o),
(305,-106,o),
(305,-83,qs),
(305,-42,o),
(365,-13,qs),
(393,1,l),
(460,19,o),
(549,108,o),
(566,169,q),
(468,169,l),
(452,123,o),
(373,68,o),
(314,68,qs),
(242,68,o),
(141,159,o),
(136,240,q),
(574,240,l),
(577,269,o),
(577,295,qs),
(577,370,o),
(512,489,o),
(392,557,o),
(314,557,qs),
(234,557,o),
(111,488,o),
(43,360,o),
(43,275,qs),
(43,197,o),
(101,76,o),
(205,3,o),
(273,-6,q),
(230,-43,o),
(230,-92,qs),
(230,-143,o),
(301,-192,o),
(352,-192,qs),
(389,-192,o),
(429,-178,q),
(429,-118,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
48 15 2 7 5 8 1 2 7 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 6 4 5 4 6 5 128 0 5 7 4 5 7 126 0 0 0 4 6 0 4 103 0 7 0 2 7 2 102 8 1 1 1 3 97 0 3 3 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 6 4 5 4 6 5 128 0 5 7 4 5 7 126 0 3 8 1 1 0 3 1 105 0 0 0 4 6 0 4 103 0 7 2 2 7 89 0 7 7 2 98 0 2 7 2 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 47 45 37 36 34 32 30 29 24 22 11 9 0 7 0 6 18 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = Ecaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,698,l),
(77,698,l),
(77,0,l),
(452,0,l),
(452,75,l),
(168,75,l),
(168,315,l),
(422,315,l),
(422,390,l),
(168,390,l),
(168,623,l),
(452,623,l)
);
},
{
closed = 1;
nodes = (
(255,742,l),
(393,824,l),
(393,896,l),
(255,811,l),
(116,896,l),
(116,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
17 16 15 14 13 12 6 4 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 4 6 1 5 0 4 5 103 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = ecaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,480,o),
(437,441,o),
(483,366,o),
(483,314,q),
(137,314,l),
(144,392,o),
(241,480,o),
(310,480,qs)
);
},
{
closed = 1;
nodes = (
(452,123,o),
(373,68,o),
(314,68,qs),
(242,68,o),
(141,159,o),
(136,240,q),
(574,240,l),
(577,269,o),
(577,295,qs),
(577,370,o),
(512,489,o),
(392,557,o),
(314,557,qs),
(234,557,o),
(111,488,o),
(43,360,o),
(43,275,qs),
(43,190,o),
(113,61,o),
(236,-9,o),
(314,-9,qs),
(412,-9,o),
(544,90,o),
(566,169,q),
(468,169,l)
);
},
{
closed = 1;
nodes = (
(311,666,l),
(172,751,l),
(172,679,l),
(311,597,l),
(449,679,l),
(449,751,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
38 37 36 35 34 33 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
8 1 6 4 5 4 6 5 128 0 3 7 1 1 0 3 1 105 0 0 0 4 6 0 4 103 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
8 8 0 0 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = Gbreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(296,705,o),
(136,614,o),
(43,451,o),
(43,349,qs),
(43,247,o),
(136,85,o),
(296,-6,o),
(393,-6,qs),
(485,-6,o),
(635,77,o),
(727,220,o),
(735,306,q),
(735,376,l),
(360,376,l),
(360,302,l),
(638,302,l),
(627,198,o),
(495,76,o),
(393,76,qs),
(320,76,o),
(203,143,o),
(136,267,o),
(136,349,qs),
(136,431,o),
(203,556,o),
(320,623,o),
(393,623,qs),
(466,623,o),
(576,556,o),
(605,495,q),
(714,495,l),
(675,595,o),
(504,705,o),
(393,705,qs)
);
},
{
closed = 1;
nodes = (
(481,895,l),
(481,857,o),
(439,818,o),
(393,818,qs),
(346,818,o),
(304,857,o),
(304,895,q),
(250,895,l),
(250,878,ls),
(250,820,o),
(326,747,o),
(393,747,qs),
(460,747,o),
(535,820,o),
(535,877,qs),
(535,895,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 3 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
10 1 8 9 8 133 0 0 1 4 1 0 4 128 0 9 0 7 6 9 7 105 0 4 0 3 2 4 3 104 0 1 1 6 97 11 1 6 6 28 77 0 2 2 5 98 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
10 1 8 9 8 133 0 0 1 4 1 0 4 128 0 9 0 7 6 9 7 105 11 1 6 0 1 0 6 1 105 0 4 0 3 2 4 3 104 0 2 2 5 98 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
0 0 49 48 46 44 42 41 38 36 0 33 0 32 36 17 18 38 34 18 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = gbreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,193,o),
(111,63,o),
(230,-9,o),
(303,-9,qs),
(374,-9,o),
(480,55,o),
(507,103,q),
(507,-12,ls),
(507,-97,o),
(412,-191,o),
(337,-191,qs),
(271,-191,o),
(177,-130,o),
(162,-80,q),
(72,-80,l),
(85,-168,o),
(229,-270,o),
(337,-270,qs),
(416,-270,o),
(535,-204,o),
(599,-87,o),
(599,-12,qs),
(599,548,l),
(507,548,l),
(507,448,l),
(481,495,o),
(374,557,o),
(303,557,qs),
(230,557,o),
(111,487,o),
(43,360,o),
(43,276,qs)
);
},
{
closed = 1;
nodes = (
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs),
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs)
);
},
{
closed = 1;
nodes = (
(427,750,l),
(427,712,o),
(385,673,o),
(339,673,qs),
(292,673,o),
(250,712,o),
(250,750,q),
(196,750,l),
(196,733,ls),
(196,675,o),
(272,602,o),
(339,602,qs),
(406,602,o),
(481,675,o),
(481,732,qs),
(481,750,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
24 6 2 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 3 5 4 5 3 4 128 0 10 0 8 0 10 8 105 11 1 9 9 30 77 0 6 6 0 97 1 1 0 0 31 77 0 7 7 5 98 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
0 1 0 6 0 1 6 128 0 3 5 4 5 3 4 128 0 10 0 8 0 10 8 105 11 1 9 9 30 77 0 6 6 0 97 0 0 0 31 77 0 7 7 5 98 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
11 1 9 10 9 133 0 1 0 6 0 1 6 128 0 3 5 4 5 3 4 128 0 10 0 8 0 10 8 105 0 6 6 0 97 0 0 0 31 77 0 7 7 5 98 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
11 1 9 10 9 133 0 1 0 6 0 1 6 128 0 3 5 4 5 3 4 128 0 10 0 8 0 10 8 105 0 0 0 6 7 0 6 105 0 7 7 5 98 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
63 62 60 58 56 55 38 38 38 37 34 18 36 19 34 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = Gdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(296,705,o),
(136,614,o),
(43,451,o),
(43,349,qs),
(43,247,o),
(136,85,o),
(296,-6,o),
(393,-6,qs),
(485,-6,o),
(635,77,o),
(727,220,o),
(735,306,q),
(735,376,l),
(360,376,l),
(360,302,l),
(638,302,l),
(627,198,o),
(495,76,o),
(393,76,qs),
(320,76,o),
(203,143,o),
(136,267,o),
(136,349,qs),
(136,431,o),
(203,556,o),
(320,623,o),
(393,623,qs),
(466,623,o),
(576,556,o),
(605,495,q),
(714,495,l),
(675,595,o),
(504,705,o),
(393,705,qs)
);
},
{
closed = 1;
nodes = (
(414,761,o),
(444,791,o),
(444,813,qs),
(444,835,o),
(414,866,o),
(392,866,qs),
(370,866,o),
(339,835,o),
(339,813,qs),
(339,791,o),
(370,761,o),
(392,761,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 3 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 0 1 4 1 0 4 128 0 7 10 1 8 6 7 8 105 0 4 0 3 2 4 3 103 0 1 1 6 97 9 1 6 6 28 77 0 2 2 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 0 1 4 1 0 4 128 0 7 10 1 8 6 7 8 105 9 1 6 0 1 0 6 1 105 0 4 0 3 2 4 3 103 0 2 2 5 97 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
34 34 0 0 34 45 34 44 40 38 0 33 0 32 36 17 18 38 34 18 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = gdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(43,193,o),
(111,63,o),
(230,-9,o),
(303,-9,qs),
(374,-9,o),
(480,55,o),
(507,103,q),
(507,-12,ls),
(507,-97,o),
(412,-191,o),
(337,-191,qs),
(271,-191,o),
(177,-130,o),
(162,-80,q),
(72,-80,l),
(85,-168,o),
(229,-270,o),
(337,-270,qs),
(416,-270,o),
(535,-204,o),
(599,-87,o),
(599,-12,qs),
(599,548,l),
(507,548,l),
(507,448,l),
(481,495,o),
(374,557,o),
(303,557,qs),
(230,557,o),
(111,487,o),
(43,360,o),
(43,276,qs)
);
},
{
closed = 1;
nodes = (
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs),
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs)
);
},
{
closed = 1;
nodes = (
(361,617,o),
(391,647,o),
(391,669,qs),
(391,691,o),
(361,722,o),
(339,722,qs),
(317,722,o),
(286,691,o),
(286,669,qs),
(286,647,o),
(317,617,o),
(339,617,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
24 6 2 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 3 5 4 5 3 4 128 10 1 9 9 8 97 0 8 8 34 77 0 6 6 0 97 1 1 0 0 31 77 0 7 7 5 97 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 3 5 4 5 3 4 128 10 1 9 9 8 97 0 8 8 28 77 0 6 6 0 97 1 1 0 0 31 77 0 7 7 5 97 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 3 5 4 5 3 4 128 10 1 9 9 8 97 0 8 8 34 77 0 6 6 0 97 1 1 0 0 31 77 0 7 7 5 97 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 3 5 4 5 3 4 128 10 1 9 9 8 97 0 8 8 28 77 0 6 6 0 97 1 1 0 0 31 77 0 7 7 5 97 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 3 5 4 5 3 4 128 10 1 9 9 8 97 0 8 8 34 77 0 6 6 0 97 1 1 0 0 31 77 0 7 7 5 97 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 1 0 6 0 1 6 128 0 3 5 4 5 3 4 128 10 1 9 9 8 97 0 8 8 34 77 0 6 6 0 97 0 0 0 31 77 0 7 7 5 97 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 1 0 6 0 1 6 128 0 3 5 4 5 3 4 128 0 0 0 6 7 0 6 105 10 1 9 9 8 97 0 8 8 34 77 0 7 7 5 97 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
48 48 48 59 48 58 40 38 38 37 34 18 36 19 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = uni0122;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(343,-131,l),
(391,-131,l),
(391,-149,ls),
(391,-205,o),
(343,-205,q),
(343,-247,l),
(444,-247,o),
(444,-132,qs),
(444,-96,o),
(433,-49,q),
(343,-49,l)
);
},
{
closed = 1;
nodes = (
(296,705,o),
(136,614,o),
(43,451,o),
(43,349,qs),
(43,247,o),
(136,85,o),
(296,-6,o),
(393,-6,qs),
(485,-6,o),
(635,77,o),
(727,220,o),
(735,306,q),
(735,376,l),
(360,376,l),
(360,302,l),
(638,302,l),
(627,198,o),
(495,76,o),
(393,76,qs),
(320,76,o),
(203,143,o),
(136,267,o),
(136,349,qs),
(136,431,o),
(203,556,o),
(320,623,o),
(393,623,qs),
(466,623,o),
(576,556,o),
(605,495,q),
(714,495,l),
(675,595,o),
(504,705,o),
(393,705,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
32 1 7 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 4 5 8 5 4 8 128 0 8 0 7 6 8 7 103 11 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 5 5 10 97 12 1 10 10 28 77 0 6 6 9 97 0 9 9 29 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 4 5 8 5 4 8 128 12 1 10 0 5 4 10 5 105 0 8 0 7 6 8 7 103 11 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 9 97 0 9 9 29 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
11 11 0 0 11 44 11 43 37 35 31 30 29 28 26 24 18 16 14 13 0 10 0 10 18 17 19 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = uni0123;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(382,682,l),
(334,682,l),
(334,705,ls),
(334,759,o),
(381,759,q),
(381,801,l),
(280,801,o),
(280,688,qs),
(280,644,o),
(291,596,q),
(382,596,l)
);
},
{
closed = 1;
nodes = (
(43,193,o),
(111,63,o),
(230,-9,o),
(303,-9,qs),
(374,-9,o),
(480,55,o),
(507,103,q),
(507,-12,ls),
(507,-97,o),
(412,-191,o),
(337,-191,qs),
(271,-191,o),
(177,-130,o),
(162,-80,q),
(72,-80,l),
(85,-168,o),
(229,-270,o),
(337,-270,qs),
(416,-270,o),
(535,-204,o),
(599,-87,o),
(599,-12,qs),
(599,548,l),
(507,548,l),
(507,448,l),
(481,495,o),
(374,557,o),
(303,557,qs),
(230,557,o),
(111,487,o),
(43,360,o),
(43,276,qs)
);
},
{
closed = 1;
nodes = (
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs),
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 17 2 11 10 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 7 9 8 9 7 8 128 0 2 12 1 3 4 2 3 103 0 1 1 0 97 0 0 0 36 77 0 10 10 4 97 5 1 4 4 31 77 0 11 11 9 97 0 9 9 29 77 0 8 8 6 97 0 6 6 33 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
0 5 4 10 4 5 10 128 0 7 9 8 9 7 8 128 0 2 12 1 3 4 2 3 103 0 1 1 0 97 0 0 0 36 77 0 10 10 4 97 0 4 4 31 77 0 11 11 9 97 0 9 9 29 77 0 8 8 6 97 0 6 6 33 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 5 4 10 4 5 10 128 0 7 9 8 9 7 8 128 0 0 0 1 2 0 1 105 0 2 12 1 3 4 2 3 103 0 10 10 4 97 0 4 4 31 77 0 11 11 9 97 0 9 9 29 77 0 8 8 6 97 0 6 6 33 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 62 values pushed */
0 5 4 10 4 5 10 128 0 7 9 8 9 7 8 128 0 0 0 1 2 0 1 105 0 2 12 1 3 4 2 3 103 0 4 0 10 11 4 10 105 0 11 11 9 97 0 9 9 29 77 0 8 8 6 97 0 6 6 33 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
0 0 55 53 47 45 39 37 32 30 28 27 25 23 19 18 15 13 0 10 0 10 18 17 19 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = Itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,697,l),
(77,697,l)
);
},
{
closed = 1;
nodes = (
(32,774,o),
(55,796,o),
(72,796,qs),
(85,796,o),
(104,786,o),
(120,776,qs),
(138,763,o),
(167,750,o),
(186,750,qs),
(226,750,o),
(280,804,o),
(286,854,q),
(234,854,l),
(231,833,o),
(207,811,o),
(190,811,qs),
(177,811,o),
(155,822,o),
(141,832,qs),
(122,844,o),
(95,857,o),
(76,857,qs),
(36,857,o),
(-17,803,o),
(-24,752,q),
(29,752,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
4 1 2 0 6 5 2 6 105 0 3 9 7 2 5 1 3 5 105 8 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
4 1 2 0 6 5 2 6 105 0 3 9 7 2 5 1 3 5 105 8 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
4 4 0 0 4 29 4 29 27 25 21 19 17 16 14 12 8 6 0 3 0 3 17 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = itilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,548,l),
(77,548,l)
);
},
{
closed = 1;
nodes = (
(32,629,o),
(55,651,o),
(72,651,qs),
(85,651,o),
(104,641,o),
(120,631,qs),
(138,618,o),
(167,605,o),
(186,605,qs),
(226,605,o),
(280,659,o),
(286,709,q),
(234,709,l),
(231,688,o),
(207,666,o),
(190,666,qs),
(177,666,o),
(155,677,o),
(141,687,qs),
(122,699,o),
(95,712,o),
(76,712,qs),
(36,712,o),
(-17,658,o),
(-24,607,q),
(29,607,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 3 9 7 2 5 1 3 5 105 0 6 6 2 97 4 1 2 2 28 77 8 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 3 9 7 2 5 1 3 5 105 0 6 6 2 97 4 1 2 2 28 77 8 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
4 4 0 0 4 29 4 29 27 25 21 19 17 16 14 12 8 6 0 3 0 3 17 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = Imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,697,l),
(77,697,l)
);
},
{
closed = 1;
nodes = (
(298,786,l),
(298,854,l),
(-54,854,l),
(-54,786,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 2 0 3 1 2 3 103 4 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 2 0 3 1 2 3 103 4 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = imacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,548,l),
(77,548,l)
);
},
{
closed = 1;
nodes = (
(298,641,l),
(298,709,l),
(-54,709,l),
(-54,641,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 2 95 0 2 2 28 77 4 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 2 95 0 2 2 28 77 4 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = uni012C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,697,l),
(77,697,l)
);
},
{
closed = 1;
nodes = (
(211,895,l),
(211,857,o),
(169,818,o),
(123,818,qs),
(76,818,o),
(34,857,o),
(34,895,q),
(-20,895,l),
(-20,878,ls),
(-20,820,o),
(56,747,o),
(123,747,qs),
(190,747,o),
(265,820,o),
(265,877,qs),
(265,895,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
5 1 3 4 3 133 0 4 0 2 1 4 2 105 6 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
5 1 3 4 3 133 0 4 0 2 1 4 2 105 6 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 19 18 16 14 12 11 8 6 0 3 0 3 17 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = uni012C;
unicode = 300;
},
{
glyphname = uni012D;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,548,l),
(77,548,l)
);
},
{
closed = 1;
nodes = (
(211,750,l),
(211,712,o),
(169,673,o),
(123,673,qs),
(76,673,o),
(34,712,o),
(34,750,q),
(-20,750,l),
(-20,733,ls),
(-20,675,o),
(56,602,o),
(123,602,qs),
(190,602,o),
(265,675,o),
(265,732,qs),
(265,750,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 0 2 1 4 2 105 5 1 3 3 30 77 6 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 0 2 1 4 2 105 5 1 3 3 30 77 6 1 1 1 0 95 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
5 1 3 4 3 133 0 4 0 2 1 4 2 105 6 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 19 18 16 14 12 11 8 6 0 3 0 3 17 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = uni012D;
unicode = 301;
},
{
glyphname = Iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(140,-144,o),
(112,-144,qs),
(85,-144,o),
(53,-119,o),
(53,-96,qs),
(53,-55,o),
(113,-26,qs),
(166,0,l),
(168,0,l),
(168,697,l),
(77,697,l),
(77,18,l),
(-22,-33,o),
(-22,-105,qs),
(-22,-156,o),
(49,-205,o),
(100,-205,qs),
(137,-205,o),
(177,-191,q),
(177,-131,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
19 10 7 3 2 1 0 1 0 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 2 0 0 2 0 102 0 1 1 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 2 1 133 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
39 21 33 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(140,-144,o),
(112,-144,qs),
(85,-144,o),
(53,-119,o),
(53,-96,qs),
(53,-55,o),
(113,-26,qs),
(166,0,l),
(168,0,l),
(168,548,l),
(77,548,l),
(77,18,l),
(-22,-33,o),
(-22,-105,qs),
(-22,-156,o),
(49,-205,o),
(100,-205,qs),
(137,-205,o),
(177,-191,q),
(177,-131,l)
);
},
{
closed = 1;
nodes = (
(149,637,o),
(184,673,o),
(184,699,qs),
(184,725,o),
(149,761,o),
(124,761,qs),
(98,761,o),
(62,725,o),
(62,699,qs),
(62,673,o),
(98,637,o),
(124,637,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
19 10 7 3 2 1 0 1 0 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 0 2 0 102 5 1 4 4 3 97 0 3 3 30 77 0 1 1 31 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 4 2 4 1 2 128 0 2 0 0 2 0 102 5 1 4 4 3 97 0 3 3 30 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 4 2 4 1 2 128 0 3 5 1 4 1 3 4 105 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
20 20 20 31 20 30 38 39 21 33 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = Idotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,697,l),
(77,697,l)
);
},
{
closed = 1;
nodes = (
(145,761,o),
(175,791,o),
(175,813,qs),
(175,835,o),
(145,866,o),
(123,866,qs),
(101,866,o),
(70,835,o),
(70,813,qs),
(70,791,o),
(101,761,o),
(123,761,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 5 1 3 1 2 3 105 4 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 5 1 3 1 2 3 105 4 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 0 0 4 15 4 14 10 8 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = dotlessi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,548,l),
(77,548,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = uni0136;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,-131,l),
(299,-131,l),
(299,-149,ls),
(299,-205,o),
(252,-205,q),
(252,-247,l),
(352,-247,o),
(352,-132,qs),
(352,-90,o),
(341,-49,q),
(251,-49,l)
);
},
{
closed = 1;
nodes = (
(455,0,l),
(574,0,l),
(255,348,l),
(571,697,l),
(456,697,l),
(168,374,l),
(168,697,l),
(77,697,l),
(77,0,l),
(168,0,l),
(168,318,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
21 18 15 3 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 6 1 5 5 28 77 7 1 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 6 1 5 5 4 95 7 1 4 4 29 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 20 19 17 16 14 13 12 11 0 10 0 10 18 17 19 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = uni0137;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,-131,l),
(259,-131,l),
(259,-149,ls),
(259,-205,o),
(212,-205,q),
(212,-247,l),
(312,-247,o),
(312,-132,qs),
(312,-92,o),
(302,-49,q),
(212,-49,l)
);
},
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,242,l),
(383,0,l),
(507,0,l),
(248,275,l),
(506,548,l),
(379,548,l),
(168,305,l),
(168,740,l),
(77,740,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
18 15 12 3 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 9 1 7 7 30 77 0 4 4 31 77 6 1 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 9 1 7 7 5 95 6 1 5 5 29 77 0 4 4 5 95 6 1 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
11 11 0 0 11 21 11 21 20 19 17 16 14 13 0 10 0 10 18 17 19 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 515;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = Lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,697,l),
(77,0,l),
(412,0,l),
(412,74,l),
(168,74,l),
(168,697,l)
);
},
{
closed = 1;
nodes = (
(314,848,l),
(314,927,l),
(101,802,l),
(101,734,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
9 8 7 6 4 2 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 2 2 28 77 0 0 0 1 96 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 2 0 2 133 0 0 0 1 96 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = lacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,740,l),
(77,740,l)
);
},
{
closed = 1;
nodes = (
(220,895,l),
(220,974,l),
(7,849,l),
(7,781,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 6 5 4 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 30 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = uni013B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,-131,l),
(244,-131,l),
(244,-149,ls),
(244,-205,o),
(197,-205,q),
(197,-247,l),
(298,-247,o),
(298,-132,qs),
(298,-90,o),
(287,-49,q),
(196,-49,l)
);
},
{
closed = 1;
nodes = (
(77,697,l),
(77,0,l),
(412,0,l),
(412,74,l),
(168,74,l),
(168,697,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
7 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 28 77 0 4 4 5 96 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 6 4 6 133 7 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 4 4 5 96 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 16 15 14 13 12 11 0 10 0 10 18 17 19 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = uni013C;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,-131,l),
(123,-131,l),
(123,-149,ls),
(123,-205,o),
(75,-205,q),
(75,-247,l),
(177,-247,o),
(177,-132,qs),
(177,-96,o),
(166,-49,q),
(75,-49,l)
);
},
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,740,l),
(77,740,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 5 5 30 77 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
6 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 5 5 4 95 0 4 4 29 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
11 11 0 0 11 14 11 14 13 12 0 10 0 10 18 17 19 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = Lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(281,612,l),
(330,612,l),
(330,589,ls),
(330,561,o),
(308,535,o),
(283,535,q),
(283,492,l),
(333,492,o),
(384,548,o),
(384,606,qs),
(384,649,o),
(373,697,q),
(281,697,l)
);
},
{
closed = 1;
nodes = (
(77,697,l),
(77,0,l),
(412,0,l),
(412,74,l),
(168,74,l),
(168,697,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 1 0 0 4 1 0 105 0 2 2 3 95 6 7 2 3 3 28 77 0 4 4 5 96 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
6 7 2 3 0 2 1 3 2 103 0 1 0 0 4 1 0 105 0 4 4 5 96 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 18 17 16 15 14 13 0 12 0 12 19 17 20 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 446;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = lcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,654,l),
(291,654,l),
(291,631,ls),
(291,604,o),
(268,578,o),
(243,578,q),
(243,535,l),
(344,535,o),
(344,648,qs),
(344,692,o),
(333,740,q),
(241,740,l)
);
},
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,740,l),
(77,740,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 2 3 95 7 5 6 3 3 3 30 77 0 0 0 1 97 0 1 1 37 77 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 2 1 3 2 87 0 0 0 1 97 0 1 1 37 77 7 5 6 3 3 3 4 95 0 4 4 29 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
12 12 0 0 12 15 12 15 14 13 0 11 0 11 19 17 19 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 369;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = Ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,697,l),
(77,0,l),
(412,0,l),
(412,74,l),
(168,74,l),
(168,697,l)
);
},
{
closed = 1;
nodes = (
(239,761,o),
(269,791,o),
(269,813,qs),
(269,835,o),
(239,866,o),
(217,866,qs),
(195,866,o),
(164,835,o),
(164,813,qs),
(164,791,o),
(195,761,o),
(217,761,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 5 1 4 2 3 4 105 0 2 2 28 77 0 0 0 1 96 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 2 4 0 4 2 0 128 0 3 5 1 4 2 3 4 105 0 0 0 1 96 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
6 6 6 17 6 16 37 17 17 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = ldot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(145,775,o),
(176,805,o),
(176,827,qs),
(176,849,o),
(145,880,o),
(123,880,qs),
(101,880,o),
(70,849,o),
(70,827,qs),
(70,805,o),
(101,775,o),
(123,775,qs)
);
},
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,740,l),
(77,740,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 4 1 1 3 0 1 105 5 1 3 3 30 77 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 4 1 1 3 0 1 105 5 1 3 3 2 95 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
12 12 0 0 12 15 12 15 14 13 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = Lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(91,697,l),
(91,378,l),
(9,348,l),
(9,279,l),
(91,308,l),
(91,0,l),
(425,0,l),
(425,70,l),
(182,70,l),
(182,341,l),
(291,380,l),
(291,450,l),
(182,411,l),
(182,697,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
11 10 9 8 3 2 1 0 8 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 2 2 28 77 0 0 0 1 96 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 2 0 2 133 0 0 0 1 96 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
21 17 20 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 437;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(80,0,l),
(171,0,l),
(171,372,l),
(242,400,l),
(242,471,l),
(171,444,l),
(171,740,l),
(80,740,l),
(80,408,l),
(9,381,l),
(9,309,l),
(80,337,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
11 8 7 6 5 2 1 0 8 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 30 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
21 19 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 251;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = Nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(534,698,l),
(534,144,l),
(168,698,l),
(77,698,l),
(77,0,l),
(168,0,l),
(168,555,l),
(534,0,l),
(625,0,l),
(625,698,l)
);
},
{
closed = 1;
nodes = (
(449,848,l),
(449,927,l),
(236,802,l),
(236,734,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
7 2 2 0 2 1 76 13 12 11 10 4 2 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 1 2 2 28 77 1 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
3 1 2 2 0 95 1 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
18 17 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = nacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(206,657,l),
(206,589,l),
(419,703,l),
(419,782,l)
);
},
{
closed = 1;
nodes = (
(568,0,l),
(568,323,ls),
(568,437,o),
(444,558,o),
(344,558,qs),
(288,558,o),
(195,512,o),
(168,470,q),
(168,548,l),
(77,548,l),
(77,0,l),
(168,0,l),
(168,303,ls),
(168,389,o),
(253,479,o),
(325,479,qs),
(396,479,o),
(478,392,o),
(478,310,qs),
(478,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
15 1 1 0 1 76 3 2 1 0 4 2 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
15 1 1 0 1 76 3 2 1 0 4 3 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 2 97 3 1 2 2 31 77 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 31 77 0 0 0 3 97 0 3 3 31 77 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 3 97 0 3 3 31 77 0 2 2 1 95 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 3 0 0 1 3 0 105 0 2 2 1 95 4 1 1 1 29 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
19 35 17 19 38 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = uni0145;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(304,-131,l),
(351,-131,l),
(351,-149,ls),
(351,-205,o),
(305,-205,q),
(305,-247,l),
(405,-247,o),
(405,-132,qs),
(405,-90,o),
(394,-49,q),
(304,-49,l)
);
},
{
closed = 1;
nodes = (
(534,698,l),
(534,144,l),
(168,698,l),
(77,698,l),
(77,0,l),
(168,0,l),
(168,555,l),
(534,0,l),
(625,0,l),
(625,698,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
18 13 2 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 6 6 28 77 5 1 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 6 6 4 95 5 1 4 4 29 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 20 19 17 16 15 14 12 11 0 10 0 10 18 17 19 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = uni0146;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(274,-131,l),
(322,-131,l),
(322,-149,ls),
(322,-205,o),
(275,-205,q),
(275,-247,l),
(376,-247,o),
(376,-132,qs),
(376,-94,o),
(364,-49,q),
(274,-49,l)
);
},
{
closed = 1;
nodes = (
(568,0,l),
(568,323,ls),
(568,437,o),
(444,558,o),
(344,558,qs),
(288,558,o),
(195,512,o),
(168,470,q),
(168,548,l),
(77,548,l),
(77,0,l),
(168,0,l),
(168,303,ls),
(168,389,o),
(253,479,o),
(325,479,qs),
(396,479,o),
(478,392,o),
(478,310,qs),
(478,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
22 1 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
9 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 4 4 6 97 7 1 6 6 31 77 8 1 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
9 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 31 77 0 4 4 7 97 0 7 7 31 77 8 1 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
9 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 4 4 7 97 0 7 7 31 77 0 6 6 5 95 8 1 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 7 0 4 5 7 4 105 9 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 5 95 8 1 5 5 29 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 30 29 26 24 21 20 19 18 15 13 0 10 0 10 18 17 19 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = Ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(534,698,l),
(534,144,l),
(168,698,l),
(77,698,l),
(77,0,l),
(168,0,l),
(168,555,l),
(534,0,l),
(625,0,l),
(625,698,l)
);
},
{
closed = 1;
nodes = (
(352,742,l),
(490,824,l),
(490,896,l),
(352,811,l),
(213,896,l),
(213,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
7 2 2 0 2 1 76 15 14 13 12 11 10 6 2 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 1 2 2 28 77 1 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
3 1 2 2 0 95 1 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
18 17 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = ncaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(568,0,l),
(568,323,ls),
(568,437,o),
(444,558,o),
(344,558,qs),
(288,558,o),
(195,512,o),
(168,470,q),
(168,548,l),
(77,548,l),
(77,0,l),
(168,0,l),
(168,303,ls),
(168,389,o),
(253,479,o),
(325,479,qs),
(396,479,o),
(478,392,o),
(478,310,qs),
(478,0,l)
);
},
{
closed = 1;
nodes = (
(322,666,l),
(183,751,l),
(183,679,l),
(322,597,l),
(460,679,l),
(460,751,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
11 1 1 0 1 76 25 24 23 22 21 20 6 2 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
11 1 1 0 1 76 25 24 23 22 21 20 6 3 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 2 97 3 1 2 2 31 77 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 31 77 0 0 0 3 97 0 3 3 31 77 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 3 97 0 3 3 31 77 0 2 2 1 95 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 3 0 0 1 3 0 105 0 2 2 1 95 4 1 1 1 29 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
19 35 17 19 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = Omacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(743,452,o),
(651,614,o),
(491,705,o),
(393,705,qs),
(296,705,o),
(136,614,o),
(43,451,o),
(43,349,qs),
(43,247,o),
(136,84,o),
(296,-7,o),
(393,-7,qs),
(491,-7,o),
(651,84,o),
(743,246,o),
(743,349,qs)
);
},
{
closed = 1;
nodes = (
(136,433,o),
(203,558,o),
(319,626,o),
(393,626,qs),
(467,626,o),
(583,558,o),
(650,433,o),
(650,349,qs),
(650,266,o),
(583,140,o),
(466,72,o),
(393,72,qs),
(320,72,o),
(203,140,o),
(136,266,o),
(136,349,qs)
);
},
{
closed = 1;
nodes = (
(219,786,l),
(571,786,l),
(571,854,l),
(219,854,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 5 0 4 1 5 4 103 0 3 3 1 97 0 1 1 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
6 1 5 0 4 1 5 4 103 0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
32 32 32 35 32 35 21 38 38 38 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = omacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,360,o),
(524,488,o),
(398,557,o),
(320,557,qs),
(242,557,o),
(116,488,o),
(43,359,o),
(43,275,qs),
(43,190,o),
(114,61,o),
(239,-9,o),
(316,-9,qs),
(394,-9,o),
(522,61,o),
(597,190,o),
(597,275,qs)
);
},
{
closed = 1;
nodes = (
(136,341,o),
(186,433,o),
(269,478,o),
(319,478,qs),
(368,478,o),
(452,433,o),
(504,341,o),
(504,275,qs),
(504,209,o),
(451,117,o),
(365,71,o),
(316,71,qs),
(267,71,o),
(185,116,o),
(136,208,o),
(136,275,qs)
);
},
{
closed = 1;
nodes = (
(144,648,l),
(496,648,l),
(496,716,l),
(144,716,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 4 4 5 95 6 1 5 5 28 77 0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 1 0 3 2 1 3 105 0 4 4 5 95 6 1 5 5 28 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
32 32 32 35 32 35 21 38 38 38 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = uni014E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(743,452,o),
(651,614,o),
(491,705,o),
(393,705,qs),
(296,705,o),
(136,614,o),
(43,451,o),
(43,349,qs),
(43,247,o),
(136,84,o),
(296,-7,o),
(393,-7,qs),
(491,-7,o),
(651,84,o),
(743,246,o),
(743,349,qs)
);
},
{
closed = 1;
nodes = (
(136,433,o),
(203,558,o),
(319,626,o),
(393,626,qs),
(467,626,o),
(583,558,o),
(650,433,o),
(650,349,qs),
(650,266,o),
(583,140,o),
(466,72,o),
(393,72,qs),
(320,72,o),
(203,140,o),
(136,266,o),
(136,349,qs)
);
},
{
closed = 1;
nodes = (
(484,895,l),
(484,857,o),
(442,818,o),
(396,818,qs),
(349,818,o),
(307,857,o),
(307,895,q),
(253,895,l),
(253,878,ls),
(253,820,o),
(329,747,o),
(396,747,qs),
(463,747,o),
(538,820,o),
(538,877,qs),
(538,895,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 3 3 1 97 0 1 1 28 77 0 2 2 0 98 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 1 0 3 2 1 3 105 0 2 2 0 98 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
18 34 19 38 38 38 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = uni014E;
unicode = 334;
},
{
glyphname = uni014F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,360,o),
(524,488,o),
(398,557,o),
(320,557,qs),
(242,557,o),
(116,488,o),
(43,359,o),
(43,275,qs),
(43,190,o),
(114,61,o),
(239,-9,o),
(316,-9,qs),
(394,-9,o),
(522,61,o),
(597,190,o),
(597,275,qs)
);
},
{
closed = 1;
nodes = (
(136,341,o),
(186,433,o),
(269,478,o),
(319,478,qs),
(368,478,o),
(452,433,o),
(504,341,o),
(504,275,qs),
(504,209,o),
(451,117,o),
(365,71,o),
(316,71,qs),
(267,71,o),
(185,116,o),
(136,208,o),
(136,275,qs)
);
},
{
closed = 1;
nodes = (
(409,757,l),
(409,719,o),
(367,680,o),
(321,680,qs),
(274,680,o),
(232,719,o),
(232,757,q),
(178,757,l),
(178,740,ls),
(178,682,o),
(254,609,o),
(321,609,qs),
(388,609,o),
(463,682,o),
(463,739,qs),
(463,757,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 6 0 4 1 6 4 105 7 1 5 5 30 77 0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
18 34 19 38 38 38 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = uni014F;
unicode = 335;
},
{
glyphname = Ohungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(743,452,o),
(651,614,o),
(491,705,o),
(393,705,qs),
(296,705,o),
(136,614,o),
(43,451,o),
(43,349,qs),
(43,247,o),
(136,84,o),
(296,-7,o),
(393,-7,qs),
(491,-7,o),
(651,84,o),
(743,246,o),
(743,349,qs)
);
},
{
closed = 1;
nodes = (
(136,433,o),
(203,558,o),
(319,626,o),
(393,626,qs),
(467,626,o),
(583,558,o),
(650,433,o),
(650,349,qs),
(650,266,o),
(583,140,o),
(466,72,o),
(393,72,qs),
(320,72,o),
(203,140,o),
(136,266,o),
(136,349,qs)
);
},
{
closed = 1;
nodes = (
(348,900,l),
(281,746,l),
(342,746,l),
(429,900,l)
);
},
{
closed = 1;
nodes = (
(502,900,l),
(430,746,l),
(490,746,l),
(582,900,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
7 1 5 4 5 133 6 1 4 1 4 133 0 3 3 1 97 0 1 1 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
7 1 5 4 5 133 6 1 4 1 4 133 0 1 0 3 2 1 3 106 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 20 38 38 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = ohungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,360,o),
(524,488,o),
(398,557,o),
(320,557,qs),
(242,557,o),
(116,488,o),
(43,359,o),
(43,275,qs),
(43,190,o),
(114,61,o),
(239,-9,o),
(316,-9,qs),
(394,-9,o),
(522,61,o),
(597,190,o),
(597,275,qs)
);
},
{
closed = 1;
nodes = (
(136,341,o),
(186,433,o),
(269,478,o),
(319,478,qs),
(368,478,o),
(452,433,o),
(504,341,o),
(504,275,qs),
(504,209,o),
(451,117,o),
(365,71,o),
(316,71,qs),
(267,71,o),
(185,116,o),
(136,208,o),
(136,275,qs)
);
},
{
closed = 1;
nodes = (
(273,762,l),
(206,608,l),
(267,608,l),
(354,762,l)
);
},
{
closed = 1;
nodes = (
(427,762,l),
(355,608,l),
(415,608,l),
(507,762,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
6 1 4 5 1 5 4 1 128 7 1 5 5 30 77 0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
7 1 5 4 5 133 6 1 4 1 4 133 0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
7 1 5 4 5 133 6 1 4 1 4 133 0 1 0 3 2 1 3 106 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 20 38 38 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = OE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1024,626,l),
(1024,697,l),
(650,697,l),
(650,558,l),
(611,629,o),
(473,705,o),
(385,705,qs),
(292,705,o),
(135,614,o),
(43,452,o),
(43,349,qs),
(43,247,o),
(135,84,o),
(292,-7,o),
(386,-7,qs),
(474,-7,o),
(611,71,o),
(650,143,q),
(650,0,l),
(1024,0,l),
(1024,72,l),
(741,72,l),
(741,316,l),
(994,316,l),
(994,387,l),
(741,387,l),
(741,626,l)
);
},
{
closed = 1;
nodes = (
(466,623,o),
(583,556,o),
(650,431,o),
(650,349,qs),
(650,267,o),
(583,143,o),
(466,75,o),
(393,75,qs),
(320,75,o),
(203,143,o),
(136,267,o),
(136,349,qs),
(136,431,o),
(203,556,o),
(320,623,o),
(393,623,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
22 1 0 7 8 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 0 0 1 2 0 1 103 10 9 2 7 7 5 97 6 1 5 5 28 77 8 1 2 2 3 97 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 6 7 7 6 87 0 0 0 1 2 0 1 103 10 9 2 7 7 5 97 0 5 5 28 77 8 1 2 2 3 97 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 6 7 7 6 87 0 0 0 1 2 0 1 103 10 9 2 7 7 5 97 0 5 5 28 77 8 1 2 2 3 95 0 3 3 29 77 8 1 2 2 4 97 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 5 6 7 5 89 0 6 10 9 2 7 0 6 7 105 0 0 0 1 2 0 1 103 8 1 2 2 3 95 0 3 3 29 77 8 1 2 2 4 97 0 4 4 29 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
27 27 27 42 27 41 39 17 19 38 35 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 1086;
}
);
note = OE;
unicode = 338;
},
{
glyphname = oe;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(503,209,o),
(451,115,o),
(365,68,o),
(316,68,qs),
(267,68,o),
(185,115,o),
(136,208,o),
(136,275,qs),
(136,341,o),
(186,434,o),
(269,480,o),
(318,480,qs),
(367,480,o),
(452,434,o),
(503,341,o),
(503,275,qs)
);
},
{
closed = 1;
nodes = (
(818,480,o),
(897,439,o),
(943,360,o),
(943,306,q),
(597,306,l),
(602,388,o),
(699,480,o),
(770,480,qs)
);
},
{
closed = 1;
nodes = (
(43,190,o),
(114,61,o),
(238,-9,o),
(316,-9,qs),
(391,-9,o),
(514,62,o),
(548,126,q),
(579,62,o),
(696,-9,o),
(770,-9,qs),
(869,-9,o),
(1001,90,o),
(1023,169,q),
(925,169,l),
(909,123,o),
(830,68,o),
(770,68,qs),
(697,68,o),
(601,161,o),
(597,243,q),
(1033,243,l),
(1037,268,o),
(1037,297,qs),
(1037,371,o),
(971,489,o),
(852,557,o),
(774,557,qs),
(698,557,o),
(580,487,o),
(548,424,q),
(515,487,o),
(394,557,o),
(320,557,qs),
(242,557,o),
(116,488,o),
(43,359,o),
(43,275,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
30 1 2 0 53 1 1 8 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 8 6 1 6 8 1 128 0 2 0 6 8 2 6 103 11 3 2 0 0 4 97 5 1 4 4 31 77 7 1 1 1 9 97 10 1 9 9 29 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 8 6 1 6 8 1 128 5 1 4 11 3 2 0 2 4 0 105 0 2 0 6 8 2 6 103 7 1 1 1 9 97 10 1 9 9 29 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
16 16 57 55 51 49 47 46 44 42 40 39 34 32 28 26 16 23 16 22 22 38 34 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 1080;
}
);
note = oe;
unicode = 339;
},
{
glyphname = Racute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(450,431,o),
(376,358,o),
(302,358,qs),
(168,358,l),
(168,622,l),
(302,622,ls),
(377,622,o),
(450,554,o),
(450,492,qs)
);
},
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,285,l),
(278,285,l),
(444,0,l),
(553,0,l),
(378,292,l),
(461,310,o),
(544,420,o),
(544,492,qs),
(544,551,o),
(490,643,o),
(381,697,o),
(302,697,qs),
(77,697,l)
);
},
{
closed = 1;
nodes = (
(195,802,l),
(195,734,l),
(408,848,l),
(408,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
16 1 4 1 1 76 27 26 25 24 4 2 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 4 3 1 4 103 0 0 0 2 95 6 1 2 2 28 77 5 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
6 1 2 0 0 1 2 0 103 0 1 0 4 3 1 4 103 5 1 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
10 9 22 21 20 19 18 17 9 23 10 23 33 33 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = racute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(168,298,ls),
(168,464,o),
(321,464,qs),
(345,464,l),
(345,558,l),
(281,558,o),
(192,506,o),
(168,459,q),
(168,548,l),
(77,548,l),
(77,0,l),
(168,0,l)
);
},
{
closed = 1;
nodes = (
(115,657,l),
(115,589,l),
(328,703,l),
(328,782,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 1 3 2 1 76 15 14 13 12 4 0 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
3 1 3 2 1 76 15 14 13 12 4 1 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 2 0 97 1 1 0 0 31 77 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 31 77 0 2 2 1 97 0 1 1 31 77 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 1 97 0 1 1 31 77 0 0 0 3 95 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 1 0 2 3 1 2 105 0 0 0 3 95 4 1 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 11 0 11 33 19 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = racute;
unicode = 341;
},
{
glyphname = uni0156;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(256,-131,l),
(303,-131,l),
(303,-149,ls),
(303,-205,o),
(256,-205,q),
(256,-247,l),
(356,-247,o),
(356,-132,qs),
(356,-92,o),
(346,-49,q),
(256,-49,l)
);
},
{
closed = 1;
nodes = (
(168,0,l),
(168,285,l),
(278,285,l),
(444,0,l),
(553,0,l),
(378,292,l),
(461,310,o),
(544,420,o),
(544,492,qs),
(544,551,o),
(490,643,o),
(381,697,o),
(302,697,qs),
(77,697,l),
(77,0,l)
);
},
{
closed = 1;
nodes = (
(450,431,o),
(376,358,o),
(302,358,qs),
(168,358,l),
(168,622,l),
(302,622,ls),
(377,622,o),
(450,554,o),
(450,492,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
19 1 6 9 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 9 0 6 5 9 6 103 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 8 8 4 95 0 4 4 28 77 7 1 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 0 8 9 4 8 103 0 9 0 6 5 9 6 103 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 32 30 29 27 25 24 23 22 21 20 13 11 0 10 0 10 18 17 19 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = uni0157;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,-131,l),
(122,-131,l),
(122,-149,ls),
(122,-205,o),
(75,-205,q),
(75,-247,l),
(176,-247,o),
(176,-132,qs),
(176,-90,o),
(165,-49,q),
(75,-49,l)
);
},
{
closed = 1;
nodes = (
(168,298,ls),
(168,464,o),
(321,464,qs),
(345,464,l),
(345,558,l),
(281,558,o),
(192,506,o),
(168,459,q),
(168,548,l),
(77,548,l),
(77,0,l),
(168,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 4 97 5 1 4 4 31 77 9 1 7 7 29 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 4 4 31 77 0 6 6 5 97 0 5 5 31 77 9 1 7 7 29 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 5 97 0 5 5 31 77 0 4 4 7 95 9 1 7 7 29 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 5 0 6 7 5 6 105 8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 4 4 7 95 9 1 7 7 29 7 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
11 11 0 0 11 22 11 22 20 18 17 16 13 12 0 10 0 10 18 17 19 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = Rcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(450,431,o),
(376,358,o),
(302,358,qs),
(168,358,l),
(168,622,l),
(302,622,ls),
(377,622,o),
(450,554,o),
(450,492,qs)
);
},
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,285,l),
(278,285,l),
(444,0,l),
(553,0,l),
(378,292,l),
(461,310,o),
(544,420,o),
(544,492,qs),
(544,551,o),
(490,643,o),
(381,697,o),
(302,697,qs),
(77,697,l)
);
},
{
closed = 1;
nodes = (
(311,811,l),
(172,896,l),
(172,824,l),
(311,742,l),
(449,824,l),
(449,896,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
16 1 4 1 1 76 29 28 27 26 25 24 6 2 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 4 3 1 4 103 0 0 0 2 95 6 1 2 2 28 77 5 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
6 1 2 0 0 1 2 0 103 0 1 0 4 3 1 4 103 5 1 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
10 9 22 21 20 19 18 17 9 23 10 23 33 33 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = rcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(168,298,ls),
(168,464,o),
(321,464,qs),
(345,464,l),
(345,558,l),
(281,558,o),
(192,506,o),
(168,459,q),
(168,548,l),
(77,548,l),
(77,0,l),
(168,0,l)
);
},
{
closed = 1;
nodes = (
(231,666,l),
(92,751,l),
(92,679,l),
(231,597,l),
(369,679,l),
(369,751,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
3 1 3 2 1 76 17 16 15 14 13 12 6 0 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
3 1 3 2 1 76 17 16 15 14 13 12 6 1 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 2 0 97 1 1 0 0 31 77 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 31 77 0 2 2 1 97 0 1 1 31 77 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 1 97 0 1 1 31 77 0 0 0 3 95 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 1 0 2 3 1 2 105 0 0 0 3 95 4 1 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 11 0 11 33 19 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = Sacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(530,256,o),
(470,333,o),
(386,370,o),
(317,389,qs),
(260,405,o),
(197,430,o),
(154,478,o),
(154,516,qs),
(154,570,o),
(230,630,o),
(288,628,qs),
(347,627,o),
(418,567,o),
(423,527,q),
(523,527,l),
(515,608,o),
(390,706,o),
(292,706,qs),
(224,706,o),
(119,658,o),
(61,570,o),
(61,513,qs),
(61,448,o),
(120,371,o),
(203,335,o),
(272,317,qs),
(328,302,o),
(394,276,o),
(438,226,o),
(438,186,qs),
(438,135,o),
(363,70,o),
(298,70,qs),
(230,70,o),
(159,137,o),
(154,186,q),
(57,186,l),
(58,129,o),
(120,42,o),
(229,-7,o),
(298,-7,qs),
(370,-7,o),
(476,49,o),
(530,139,o),
(530,190,qs)
);
},
{
closed = 1;
nodes = (
(176,808,l),
(176,740,l),
(389,854,l),
(389,933,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
48 47 46 45 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 5 4 3 5 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 45 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = sacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,199,o),
(417,261,o),
(343,292,o),
(284,308,qs),
(237,321,o),
(184,342,o),
(149,377,o),
(149,404,qs),
(149,438,o),
(207,480,o),
(256,480,qs),
(309,480,o),
(372,428,o),
(375,385,q),
(466,385,l),
(462,465,o),
(350,557,o),
(259,557,qs),
(200,557,o),
(108,516,o),
(58,446,o),
(58,404,qs),
(58,351,o),
(113,286,o),
(190,253,o),
(251,237,qs),
(318,220,o),
(382,185,o),
(382,149,qs),
(382,114,o),
(322,68,o),
(270,68,qs),
(214,68,o),
(145,120,o),
(141,161,q),
(47,161,l),
(50,111,o),
(108,34,o),
(208,-9,o),
(271,-9,qs),
(330,-9,o),
(421,32,o),
(471,104,o),
(471,149,qs)
);
},
{
closed = 1;
nodes = (
(145,664,l),
(145,596,l),
(358,710,l),
(358,789,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
47 46 45 44 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 5 4 3 5 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 44 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = uni015E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(530,256,o),
(470,333,o),
(386,370,o),
(317,389,qs),
(260,405,o),
(197,430,o),
(154,478,o),
(154,516,qs),
(154,570,o),
(230,630,o),
(288,628,qs),
(347,627,o),
(418,567,o),
(423,527,q),
(523,527,l),
(515,608,o),
(390,706,o),
(292,706,qs),
(224,706,o),
(119,658,o),
(61,570,o),
(61,513,qs),
(61,448,o),
(120,371,o),
(203,335,o),
(272,317,qs),
(328,302,o),
(394,276,o),
(438,226,o),
(438,186,qs),
(438,135,o),
(363,70,o),
(298,70,qs),
(230,70,o),
(159,137,o),
(154,186,q),
(57,186,l),
(58,106,o),
(174,2,o),
(268,-6,q),
(268,-119,l),
(318,-119,ls),
(351,-119,o),
(382,-139,o),
(382,-162,qs),
(382,-186,o),
(351,-206,o),
(318,-206,qs),
(221,-206,l),
(221,-265,l),
(336,-265,ls),
(390,-265,o),
(458,-209,o),
(458,-162,qs),
(458,-114,o),
(388,-62,o),
(329,-63,q),
(329,-6,l),
(392,0,o),
(483,58,o),
(530,143,o),
(530,190,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
21 3 2 0 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 0 5 112 0 0 0 3 2 0 3 106 0 8 8 6 97 0 6 6 28 77 0 2 2 1 95 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 8 5 0 126 0 0 0 3 2 0 3 106 0 8 8 6 97 0 6 6 28 77 0 2 2 1 95 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 8 5 0 126 0 0 0 3 2 0 3 106 0 2 0 1 2 1 99 0 8 8 6 97 0 6 6 28 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 8 5 0 126 0 6 0 8 7 6 8 105 0 0 0 3 2 0 3 106 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
34 18 45 34 20 36 33 36 20 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = uni015E;
unicode = 350;
},
{
glyphname = uni015F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,199,o),
(417,261,o),
(343,292,o),
(284,308,qs),
(237,321,o),
(184,342,o),
(149,377,o),
(149,404,qs),
(149,438,o),
(207,480,o),
(256,480,qs),
(309,480,o),
(372,428,o),
(375,385,q),
(466,385,l),
(462,465,o),
(350,557,o),
(259,557,qs),
(200,557,o),
(108,516,o),
(58,446,o),
(58,404,qs),
(58,351,o),
(113,286,o),
(190,253,o),
(251,237,qs),
(318,220,o),
(382,185,o),
(382,149,qs),
(382,114,o),
(322,68,o),
(270,68,qs),
(214,68,o),
(145,120,o),
(141,161,q),
(47,161,l),
(51,94,o),
(153,2,o),
(234,-7,q),
(234,-114,l),
(284,-114,ls),
(317,-114,o),
(348,-134,o),
(348,-157,qs),
(348,-181,o),
(317,-201,o),
(284,-201,qs),
(187,-201,l),
(187,-260,l),
(302,-260,ls),
(356,-260,o),
(424,-204,o),
(424,-157,qs),
(424,-109,o),
(354,-57,o),
(295,-58,q),
(295,-8,l),
(375,-2,o),
(471,85,o),
(471,149,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
20 2 2 0 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 0 5 112 0 0 0 3 2 0 3 106 0 8 8 6 97 0 6 6 31 77 0 2 2 1 95 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 8 5 0 126 0 0 0 3 2 0 3 106 0 8 8 6 97 0 6 6 31 77 0 2 2 1 95 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 8 5 0 126 0 0 0 3 2 0 3 106 0 2 0 1 2 1 99 0 8 8 6 97 0 6 6 31 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 8 5 0 126 0 6 0 8 7 6 8 105 0 0 0 3 2 0 3 106 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
34 18 44 34 20 36 33 36 19 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = uni015F;
unicode = 351;
},
{
glyphname = Scaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(530,256,o),
(470,333,o),
(386,370,o),
(317,389,qs),
(260,405,o),
(197,430,o),
(154,478,o),
(154,516,qs),
(154,570,o),
(230,630,o),
(288,628,qs),
(347,627,o),
(418,567,o),
(423,527,q),
(523,527,l),
(515,608,o),
(390,706,o),
(292,706,qs),
(224,706,o),
(119,658,o),
(61,570,o),
(61,513,qs),
(61,448,o),
(120,371,o),
(203,335,o),
(272,317,qs),
(328,302,o),
(394,276,o),
(438,226,o),
(438,186,qs),
(438,135,o),
(363,70,o),
(298,70,qs),
(230,70,o),
(159,137,o),
(154,186,q),
(57,186,l),
(58,129,o),
(120,42,o),
(229,-7,o),
(298,-7,qs),
(370,-7,o),
(476,49,o),
(530,139,o),
(530,190,qs)
);
},
{
closed = 1;
nodes = (
(291,817,l),
(152,902,l),
(152,830,l),
(291,748,l),
(429,830,l),
(429,902,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
50 49 48 47 46 45 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 5 4 3 5 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 45 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = scaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,199,o),
(417,261,o),
(343,292,o),
(284,308,qs),
(237,321,o),
(184,342,o),
(149,377,o),
(149,404,qs),
(149,438,o),
(207,480,o),
(256,480,qs),
(309,480,o),
(372,428,o),
(375,385,q),
(466,385,l),
(462,465,o),
(350,557,o),
(259,557,qs),
(200,557,o),
(108,516,o),
(58,446,o),
(58,404,qs),
(58,351,o),
(113,286,o),
(190,253,o),
(251,237,qs),
(318,220,o),
(382,185,o),
(382,149,qs),
(382,114,o),
(322,68,o),
(270,68,qs),
(214,68,o),
(145,120,o),
(141,161,q),
(47,161,l),
(50,111,o),
(108,34,o),
(208,-9,o),
(271,-9,qs),
(330,-9,o),
(421,32,o),
(471,104,o),
(471,149,qs)
);
},
{
closed = 1;
nodes = (
(261,673,l),
(122,758,l),
(122,686,l),
(261,604,l),
(399,686,l),
(399,758,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
49 48 47 46 45 44 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 5 4 3 5 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 44 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = uni0162;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(34,623,l),
(225,623,l),
(225,0,l),
(241,0,l),
(241,-114,l),
(291,-114,ls),
(324,-114,o),
(355,-134,o),
(355,-157,qs),
(355,-181,o),
(324,-201,o),
(291,-201,qs),
(194,-201,l),
(194,-260,l),
(309,-260,ls),
(363,-260,o),
(431,-204,o),
(431,-157,qs),
(431,-109,o),
(361,-57,o),
(302,-58,q),
(302,0,l),
(316,0,l),
(316,623,l),
(506,623,l),
(506,697,l),
(34,697,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 2 0 5 4 2 5 105 7 1 0 0 8 95 9 1 8 8 28 77 6 1 1 1 29 77 0 4 4 3 95 0 3 3 33 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
9 1 8 7 1 0 1 8 0 103 0 2 0 5 4 2 5 105 0 4 0 3 4 3 99 6 1 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 26 0 26 17 17 36 33 36 17 17 17 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni0163;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(97,150,ls),
(97,46,o),
(165,15,q),
(165,-114,l),
(216,-114,ls),
(249,-114,o),
(280,-134,o),
(280,-157,qs),
(280,-181,o),
(249,-201,o),
(216,-201,qs),
(119,-201,l),
(119,-260,l),
(234,-260,ls),
(288,-260,o),
(356,-204,o),
(356,-157,qs),
(356,-109,o),
(286,-57,o),
(227,-58,q),
(227,1,l),
(234,0,o),
(249,0,qs),
(331,0,l),
(331,77,l),
(264,77,ls),
(222,77,o),
(188,110,o),
(188,150,qs),
(188,473,l),
(331,473,l),
(331,548,l),
(188,548,l),
(188,686,l),
(97,686,l),
(97,548,l),
(26,548,l),
(26,473,l),
(97,473,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
35 1 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 0 1 133 0 6 0 9 8 6 9 106 11 10 2 3 3 0 95 2 1 0 0 31 77 0 4 4 5 95 0 5 5 29 77 0 8 8 7 95 0 7 7 33 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 1 0 1 133 2 1 0 11 10 2 3 4 0 3 103 0 6 0 9 8 6 9 106 0 8 0 7 8 7 99 0 4 4 5 95 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 38 0 38 34 32 33 36 18 33 35 17 17 17 17 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 364;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = Tcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(34,623,l),
(225,623,l),
(225,0,l),
(316,0,l),
(316,623,l),
(506,623,l),
(506,697,l),
(34,697,l)
);
},
{
closed = 1;
nodes = (
(271,742,l),
(409,824,l),
(409,896,l),
(271,811,l),
(132,896,l),
(132,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
13 12 11 10 9 8 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
2 1 0 0 3 95 4 1 3 3 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
4 1 3 2 1 0 1 3 0 103 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = tcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(262,687,l),
(311,687,l),
(311,669,ls),
(311,650,o),
(288,633,o),
(263,633,q),
(263,591,l),
(314,591,o),
(365,637,o),
(365,688,qs),
(365,721,o),
(353,773,q),
(262,773,l)
);
},
{
closed = 1;
nodes = (
(97,150,ls),
(97,70,o),
(173,0,o),
(249,0,qs),
(331,0,l),
(331,77,l),
(264,77,ls),
(222,77,o),
(188,110,o),
(188,150,qs),
(188,473,l),
(331,473,l),
(331,548,l),
(188,548,l),
(188,686,l),
(97,686,l),
(97,548,l),
(26,548,l),
(26,473,l),
(97,473,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 5 2 1 2 5 1 128 0 1 0 0 4 1 0 105 0 2 2 3 95 11 1 3 3 30 77 12 10 2 7 7 4 95 6 1 4 4 31 77 0 8 8 9 96 0 9 9 29 9 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 5 2 1 2 5 1 128 0 1 0 0 4 1 0 105 6 1 4 12 10 2 7 8 4 7 103 0 2 2 3 95 11 1 3 3 30 77 0 8 8 9 96 0 9 9 29 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 5 2 1 2 5 1 128 11 1 3 0 2 5 3 2 103 0 1 0 0 4 1 0 105 6 1 4 12 10 2 7 8 4 7 103 0 8 8 9 96 0 9 9 29 9 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
13 13 0 0 13 32 13 32 29 27 26 24 21 20 19 18 17 16 15 14 0 12 0 12 19 17 20 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 367;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = Utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,257,ls),
(75,170,o),
(144,51,o),
(263,-7,o),
(337,-7,qs),
(411,-7,o),
(530,51,o),
(600,170,o),
(600,257,qs),
(600,697,l),
(509,697,l),
(509,256,ls),
(509,163,o),
(418,73,o),
(338,73,qs),
(257,73,o),
(166,163,o),
(166,256,qs),
(166,697,l),
(75,697,l)
);
},
{
closed = 1;
nodes = (
(246,774,o),
(269,796,o),
(286,796,qs),
(299,796,o),
(318,786,o),
(334,776,qs),
(352,763,o),
(381,750,o),
(400,750,qs),
(440,750,o),
(494,804,o),
(500,854,q),
(448,854,l),
(445,833,o),
(421,811,o),
(404,811,qs),
(391,811,o),
(369,822,o),
(355,832,qs),
(336,844,o),
(309,857,o),
(290,857,qs),
(250,857,o),
(197,803,o),
(190,752,q),
(243,752,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
6 1 4 0 8 7 4 8 105 0 5 11 9 2 7 1 5 7 105 10 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
10 3 2 1 7 0 7 1 0 128 6 1 4 0 8 7 4 8 105 0 5 11 9 2 7 1 5 7 105 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
20 20 0 0 20 45 20 45 43 41 37 35 33 32 30 28 24 22 0 19 0 19 36 19 35 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = utilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,0,l),
(563,548,l),
(472,548,l),
(472,247,ls),
(472,161,o),
(388,71,o),
(315,71,qs),
(244,71,o),
(162,158,o),
(162,239,qs),
(162,548,l),
(72,548,l),
(72,227,ls),
(72,151,o),
(131,45,o),
(233,-8,o),
(297,-8,qs),
(353,-8,o),
(446,39,o),
(472,81,q),
(472,0,l)
);
},
{
closed = 1;
nodes = (
(230,629,o),
(253,651,o),
(270,651,qs),
(283,651,o),
(302,641,o),
(318,631,qs),
(336,618,o),
(365,605,o),
(384,605,qs),
(424,605,o),
(478,659,o),
(484,709,q),
(432,709,l),
(429,688,o),
(405,666,o),
(388,666,qs),
(375,666,o),
(353,677,o),
(339,687,qs),
(320,699,o),
(293,712,o),
(274,712,qs),
(234,712,o),
(181,658,o),
(174,607,q),
(227,607,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 6 11 10 2 8 1 6 8 105 0 9 9 5 97 7 1 5 5 28 77 3 1 1 1 31 77 0 2 2 0 97 4 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 6 11 10 2 8 1 6 8 105 0 9 9 5 97 7 1 5 5 28 77 3 1 1 1 0 98 4 1 0 0 29 77 0 2 2 0 97 4 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 6 11 10 2 8 1 6 8 105 0 9 9 5 97 7 1 5 5 28 77 3 1 1 1 4 96 0 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
21 21 21 46 21 46 44 42 34 18 36 35 17 19 35 20 34 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = Umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,257,ls),
(75,170,o),
(144,51,o),
(263,-7,o),
(337,-7,qs),
(411,-7,o),
(530,51,o),
(600,170,o),
(600,257,qs),
(600,697,l),
(509,697,l),
(509,256,ls),
(509,163,o),
(418,73,o),
(338,73,qs),
(257,73,o),
(166,163,o),
(166,256,qs),
(166,697,l),
(75,697,l)
);
},
{
closed = 1;
nodes = (
(161,786,l),
(513,786,l),
(513,854,l),
(161,854,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
7 1 5 0 4 1 5 4 103 6 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
6 3 2 1 4 0 4 1 0 128 7 1 5 0 4 1 5 4 103 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
20 20 0 0 20 23 20 23 22 21 0 19 0 19 36 19 35 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = umacron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,548,l),
(472,548,l),
(472,247,ls),
(472,161,o),
(388,71,o),
(315,71,qs),
(244,71,o),
(162,158,o),
(162,239,qs),
(162,548,l),
(72,548,l),
(72,227,ls),
(72,151,o),
(131,45,o),
(233,-8,o),
(297,-8,qs),
(353,-8,o),
(446,39,o),
(472,81,q),
(472,0,l),
(563,0,l)
);
},
{
closed = 1;
nodes = (
(144,641,l),
(496,641,l),
(496,709,l),
(144,709,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 5 5 6 95 8 1 6 6 28 77 3 1 1 1 31 77 0 2 2 0 97 7 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 5 5 6 95 8 1 6 6 28 77 3 1 1 1 0 97 7 4 2 0 0 29 77 0 2 2 0 97 7 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 5 5 6 95 8 1 6 6 28 77 3 1 1 1 4 95 7 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
21 21 0 0 21 24 21 24 23 22 0 20 0 20 19 35 20 35 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = Ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,257,ls),
(75,170,o),
(144,51,o),
(263,-7,o),
(337,-7,qs),
(411,-7,o),
(530,51,o),
(600,170,o),
(600,257,qs),
(600,697,l),
(509,697,l),
(509,256,ls),
(509,163,o),
(418,73,o),
(338,73,qs),
(257,73,o),
(166,163,o),
(166,256,qs),
(166,697,l),
(75,697,l)
);
},
{
closed = 1;
nodes = (
(426,895,l),
(426,857,o),
(384,818,o),
(338,818,qs),
(291,818,o),
(249,857,o),
(249,895,q),
(195,895,l),
(195,878,ls),
(195,820,o),
(271,747,o),
(338,747,qs),
(405,747,o),
(480,820,o),
(480,877,qs),
(480,895,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 8 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
7 1 5 6 5 133 8 3 2 1 4 0 4 1 0 128 0 6 0 4 1 6 4 105 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 35 34 32 30 28 27 24 22 0 19 0 19 36 19 35 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = ubreve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,548,l),
(472,548,l),
(472,247,ls),
(472,161,o),
(388,71,o),
(315,71,qs),
(244,71,o),
(162,158,o),
(162,239,qs),
(162,548,l),
(72,548,l),
(72,227,ls),
(72,151,o),
(131,45,o),
(233,-8,o),
(297,-8,qs),
(353,-8,o),
(446,39,o),
(472,81,q),
(472,0,l),
(563,0,l)
);
},
{
closed = 1;
nodes = (
(409,750,l),
(409,712,o),
(367,673,o),
(321,673,qs),
(274,673,o),
(232,712,o),
(232,750,q),
(178,750,l),
(178,733,ls),
(178,675,o),
(254,602,o),
(321,602,qs),
(388,602,o),
(463,675,o),
(463,732,qs),
(463,750,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 7 0 5 1 7 5 105 8 1 6 6 30 77 3 1 1 1 31 77 0 2 2 0 97 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 0 5 1 7 5 105 8 1 6 6 30 77 3 1 1 1 0 97 9 4 2 0 0 29 77 0 2 2 0 97 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 7 0 5 1 7 5 105 8 1 6 6 30 77 3 1 1 1 4 95 9 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
8 1 6 7 6 133 0 7 0 5 1 7 5 105 3 1 1 1 4 95 9 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
0 0 36 35 33 31 29 28 25 23 0 20 0 20 19 35 20 35 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = Uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,257,ls),
(75,170,o),
(144,51,o),
(263,-7,o),
(337,-7,qs),
(411,-7,o),
(530,51,o),
(600,170,o),
(600,257,qs),
(600,697,l),
(509,697,l),
(509,256,ls),
(509,163,o),
(418,73,o),
(338,73,qs),
(257,73,o),
(166,163,o),
(166,256,qs),
(166,697,l),
(75,697,l)
);
},
{
closed = 1;
nodes = (
(293,962,o),
(231,904,o),
(231,857,qs),
(231,810,o),
(293,752,o),
(338,752,qs),
(384,752,o),
(445,809,o),
(445,857,qs),
(445,905,o),
(384,962,o),
(338,962,qs)
);
},
{
closed = 1;
nodes = (
(315,801,o),
(284,833,o),
(284,858,qs),
(284,883,o),
(315,914,o),
(338,914,qs),
(361,914,o),
(392,883,o),
(392,858,qs),
(392,833,o),
(361,801,o),
(338,801,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
9 1 5 0 6 7 5 6 105 0 4 4 7 97 10 1 7 7 36 77 8 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
8 3 2 1 4 0 4 1 0 128 9 1 5 0 6 7 5 6 105 0 4 4 7 97 10 1 7 7 36 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
8 3 2 1 4 0 4 1 0 128 9 1 5 0 6 7 5 6 105 10 1 7 0 4 1 7 4 105 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
32 32 20 20 0 0 32 43 32 42 38 36 20 31 20 30 26 24 0 19 0 19 36 19 35 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = uring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,548,l),
(472,548,l),
(472,247,ls),
(472,161,o),
(388,71,o),
(315,71,qs),
(244,71,o),
(162,158,o),
(162,239,qs),
(162,548,l),
(72,548,l),
(72,227,ls),
(72,151,o),
(131,45,o),
(233,-8,o),
(297,-8,qs),
(353,-8,o),
(446,39,o),
(472,81,q),
(472,0,l),
(563,0,l)
);
},
{
closed = 1;
nodes = (
(298,656,o),
(267,688,o),
(267,713,qs),
(267,738,o),
(298,769,o),
(321,769,qs),
(344,769,o),
(375,738,o),
(375,713,qs),
(375,688,o),
(344,656,o),
(321,656,qs)
);
},
{
closed = 1;
nodes = (
(276,817,o),
(214,759,o),
(214,712,qs),
(214,665,o),
(276,607,o),
(321,607,qs),
(367,607,o),
(428,664,o),
(428,712,qs),
(428,760,o),
(367,817,o),
(321,817,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
11 1 8 0 5 6 8 5 105 10 1 6 0 7 1 6 7 105 3 1 1 1 31 77 0 2 2 0 97 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
11 1 8 0 5 6 8 5 105 10 1 6 0 7 1 6 7 105 3 1 1 1 0 97 9 4 2 0 0 29 77 0 2 2 0 97 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
11 1 8 0 5 6 8 5 105 10 1 6 0 7 1 6 7 105 3 1 1 1 4 95 9 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
33 33 21 21 0 0 33 44 33 43 39 37 21 32 21 31 27 25 0 20 0 20 19 35 20 35 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = uring;
unicode = 367;
},
{
glyphname = Uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,257,ls),
(75,170,o),
(144,51,o),
(263,-7,o),
(337,-7,qs),
(411,-7,o),
(530,51,o),
(600,170,o),
(600,257,qs),
(600,697,l),
(509,697,l),
(509,256,ls),
(509,163,o),
(418,73,o),
(338,73,qs),
(257,73,o),
(166,163,o),
(166,256,qs),
(166,697,l),
(75,697,l)
);
},
{
closed = 1;
nodes = (
(290,900,l),
(223,746,l),
(284,746,l),
(371,900,l)
);
},
{
closed = 1;
nodes = (
(444,900,l),
(372,746,l),
(432,746,l),
(524,900,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
7 1 5 4 5 133 6 1 4 1 4 133 8 3 2 1 1 28 77 0 0 0 2 98 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
7 1 5 4 5 133 6 1 4 1 4 133 8 3 2 1 0 1 133 0 0 0 2 98 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 27 26 25 24 23 22 21 20 0 19 0 19 36 19 35 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = uhungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,548,l),
(472,548,l),
(472,247,ls),
(472,161,o),
(388,71,o),
(315,71,qs),
(244,71,o),
(162,158,o),
(162,239,qs),
(162,548,l),
(72,548,l),
(72,227,ls),
(72,151,o),
(131,45,o),
(233,-8,o),
(297,-8,qs),
(353,-8,o),
(446,39,o),
(472,81,q),
(472,0,l),
(563,0,l)
);
},
{
closed = 1;
nodes = (
(273,755,l),
(206,601,l),
(267,601,l),
(354,755,l)
);
},
{
closed = 1;
nodes = (
(427,755,l),
(355,601,l),
(415,601,l),
(507,755,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
7 1 5 6 1 6 5 1 128 8 1 6 6 30 77 3 1 1 1 31 77 0 2 2 0 98 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
7 1 5 6 1 6 5 1 128 8 1 6 6 30 77 3 1 1 1 0 98 9 4 2 0 0 29 77 0 2 2 0 98 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 6 5 1 128 8 1 6 6 30 77 3 1 1 1 4 96 9 1 4 4 29 77 0 2 2 0 98 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
8 1 6 5 6 133 7 1 5 1 5 133 3 1 1 1 4 96 9 1 4 4 29 77 0 2 2 0 98 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
0 0 28 27 26 25 24 23 22 21 0 20 0 20 19 35 20 35 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = Uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,257,ls),
(75,144,o),
(189,12,o),
(283,-3,q),
(218,-47,o),
(218,-106,qs),
(218,-157,o),
(289,-206,o),
(340,-206,qs),
(377,-206,o),
(417,-192,q),
(417,-132,l),
(380,-145,o),
(352,-145,qs),
(325,-145,o),
(293,-120,o),
(293,-97,qs),
(293,-56,o),
(353,-27,qs),
(408,0,l),
(495,19,o),
(600,149,o),
(600,257,qs),
(600,697,l),
(509,697,l),
(509,256,ls),
(509,163,o),
(418,73,o),
(338,73,qs),
(257,73,o),
(166,163,o),
(166,256,qs),
(166,697,l),
(75,697,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
29 21 2 2 0 22 1 3 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 0 1 2 1 0 2 128 0 2 0 3 2 3 102 5 4 2 1 1 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
5 4 2 1 0 1 133 0 0 2 0 133 0 2 3 3 2 89 0 2 2 3 98 0 3 2 3 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 33 0 33 35 41 19 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,548,l),
(472,548,l),
(472,247,ls),
(472,161,o),
(388,71,o),
(315,71,qs),
(244,71,o),
(162,158,o),
(162,239,qs),
(162,548,l),
(72,548,l),
(72,227,ls),
(72,151,o),
(131,45,o),
(233,-8,o),
(297,-8,qs),
(353,-8,o),
(446,39,o),
(472,81,q),
(472,16,l),
(373,-35,o),
(373,-107,qs),
(373,-158,o),
(444,-207,o),
(495,-207,qs),
(532,-207,o),
(572,-193,q),
(572,-133,l),
(535,-146,o),
(507,-146,qs),
(480,-146,o),
(448,-121,o),
(448,-98,qs),
(448,-57,o),
(508,-28,qs),
(563,-1,l),
(562,0,l),
(563,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
18 1 4 3 37 17 2 2 4 9 1 0 2 10 1 1 0 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 1 0 1 102 5 1 3 3 31 77 0 4 4 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
5 1 3 4 3 133 0 0 0 1 0 1 102 0 4 4 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
19 35 20 39 35 38 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = Wcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,-1,l),
(319,0,l),
(487,561,l),
(649,0,l),
(751,0,l),
(953,697,l),
(855,697,l),
(702,108,l),
(542,697,l),
(440,697,l),
(272,106,l),
(120,697,l),
(23,697,l)
);
},
{
closed = 1;
nodes = (
(485,835,l),
(623,750,l),
(623,822,l),
(485,905,l),
(346,822,l),
(346,750,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
9 4 1 3 2 0 1 76 18 17 16 15 14 13 6 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 0 28 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 2 0 133 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 976;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = wcircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,0,l),
(278,0,l),
(410,435,l),
(542,0,l),
(636,0,l),
(807,548,l),
(717,548,l),
(593,87,l),
(460,548,l),
(367,548,l),
(231,88,l),
(105,548,l),
(12,548,l)
);
},
{
closed = 1;
nodes = (
(411,682,l),
(549,597,l),
(549,669,l),
(411,752,l),
(272,669,l),
(272,597,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
9 4 1 3 2 0 1 76 18 17 16 15 14 13 6 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 0 31 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 2 0 133 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 820;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = Ycircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,263,l),
(247,0,l),
(338,0,l),
(338,263,l),
(565,697,l),
(464,697,l),
(292,344,l),
(120,697,l),
(19,697,l)
);
},
{
closed = 1;
nodes = (
(293,827,l),
(431,742,l),
(431,814,l),
(293,897,l),
(154,814,l),
(154,742,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
7 4 1 3 1 0 1 76 14 13 12 11 10 9 6 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 0 0 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 0 1 0 133 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 8 0 8 18 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = ycircumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(285,104,l),
(113,548,l),
(12,548,l),
(233,6,l),
(125,-258,l),
(219,-258,l),
(549,548,l),
(455,548,l)
);
},
{
closed = 1;
nodes = (
(282,682,l),
(420,597,l),
(420,669,l),
(282,752,l),
(143,669,l),
(143,597,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
6 3 2 0 1 1 76 13 12 11 10 9 8 6 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 1 1 31 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 0 1 0 134 3 2 2 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
3 2 2 1 0 1 133 0 0 0 118 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 7 0 7 18 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = Ydieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,263,l),
(247,0,l),
(338,0,l),
(338,263,l),
(565,697,l),
(464,697,l),
(292,344,l),
(120,697,l),
(19,697,l)
);
},
{
closed = 1;
nodes = (
(233,767,o),
(264,797,o),
(264,819,qs),
(264,841,o),
(233,872,o),
(212,872,qs),
(190,872,o),
(159,841,o),
(159,819,qs),
(159,797,o),
(190,767,o),
(212,767,qs)
);
},
{
closed = 1;
nodes = (
(396,767,o),
(427,797,o),
(427,819,qs),
(427,841,o),
(396,872,o),
(374,872,qs),
(352,872,o),
(322,841,o),
(322,819,qs),
(322,797,o),
(352,767,o),
(374,767,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
7 4 1 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 3 9 6 8 3 4 0 3 4 105 7 2 2 0 0 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
7 2 2 0 4 1 4 0 1 128 5 1 3 9 6 8 3 4 0 3 4 105 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
21 21 9 9 0 0 21 32 21 31 27 25 9 20 9 19 15 13 0 8 0 8 18 18 10 8 24 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(492,697,l),
(50,697,l),
(50,618,l),
(384,618,l),
(46,72,l),
(46,0,l),
(494,0,l),
(494,79,l),
(154,79,l),
(492,625,l)
);
},
{
closed = 1;
nodes = (
(368,848,l),
(368,927,l),
(155,802,l),
(155,734,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
9 1 2 3 4 1 1 0 2 76 13 12 11 10 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 0 3 2 103 0 0 0 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = zacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,548,l),
(43,548,l),
(43,474,l),
(307,474,l),
(41,75,l),
(41,0,l),
(414,0,l),
(414,75,l),
(145,75,l),
(412,474,l)
);
},
{
closed = 1;
nodes = (
(326,703,l),
(326,782,l),
(113,657,l),
(113,589,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
9 1 2 4 1 0 2 75 13 12 11 10 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 0 3 2 103 0 0 0 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 455;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = Zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(492,697,l),
(50,697,l),
(50,618,l),
(384,618,l),
(46,72,l),
(46,0,l),
(494,0,l),
(494,79,l),
(154,79,l),
(492,625,l)
);
},
{
closed = 1;
nodes = (
(293,761,o),
(323,791,o),
(323,813,qs),
(323,835,o),
(293,866,o),
(271,866,qs),
(249,866,o),
(218,835,o),
(218,813,qs),
(218,791,o),
(249,761,o),
(271,761,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
9 1 2 3 4 1 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 6 1 5 3 4 5 105 0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 4 6 1 5 3 4 5 105 0 3 0 2 0 3 2 103 0 0 0 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
10 10 10 21 10 20 38 17 18 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = zdotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,548,l),
(43,548,l),
(43,474,l),
(307,474,l),
(41,75,l),
(41,0,l),
(414,0,l),
(414,75,l),
(145,75,l),
(412,474,l)
);
},
{
closed = 1;
nodes = (
(251,617,o),
(281,647,o),
(281,669,qs),
(281,691,o),
(251,722,o),
(229,722,qs),
(207,722,o),
(176,691,o),
(176,669,qs),
(176,647,o),
(207,617,o),
(229,617,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
9 1 2 4 1 0 2 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 5 5 4 97 0 4 4 34 77 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 5 5 4 97 0 4 4 28 77 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 5 5 4 97 0 4 4 34 77 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 5 5 4 97 0 4 4 28 77 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 5 5 4 97 0 4 4 34 77 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 3 0 2 0 3 2 103 6 1 5 5 4 97 0 4 4 34 77 0 0 0 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
10 10 10 21 10 20 38 17 18 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 455;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = Zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(492,697,l),
(50,697,l),
(50,618,l),
(384,618,l),
(46,72,l),
(46,0,l),
(494,0,l),
(494,79,l),
(154,79,l),
(492,625,l)
);
},
{
closed = 1;
nodes = (
(271,742,l),
(409,824,l),
(409,896,l),
(271,811,l),
(132,896,l),
(132,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
9 1 2 3 4 1 1 0 2 76 15 14 13 12 11 10 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 0 3 2 103 0 0 0 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = zcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,548,l),
(43,548,l),
(43,474,l),
(307,474,l),
(41,75,l),
(41,0,l),
(414,0,l),
(414,75,l),
(145,75,l),
(412,474,l)
);
},
{
closed = 1;
nodes = (
(229,597,l),
(367,679,l),
(367,751,l),
(229,666,l),
(90,751,l),
(90,679,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
9 1 2 4 1 0 2 75 15 14 13 12 11 10 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 0 3 2 103 0 0 0 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 455;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = uni018F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,75,o),
(221,131,o),
(163,232,o),
(163,298,q),
(629,298,l),
(625,229,o),
(562,128,o),
(458,75,o),
(394,75,qs)
);
},
{
closed = 1;
nodes = (
(493,-7,o),
(645,83,o),
(728,244,o),
(728,349,qs),
(728,453,o),
(644,615,o),
(492,705,o),
(395,705,qs),
(277,705,o),
(107,584,o),
(74,480,q),
(179,480,l),
(202,547,o),
(317,623,o),
(395,623,qs),
(460,623,o),
(564,563,o),
(626,454,o),
(629,383,q),
(71,383,l),
(68,350,o),
(68,321,qs),
(68,218,o),
(150,70,o),
(298,-7,o),
(394,-7,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 2 3 4 2 128 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 28 77 7 1 1 1 6 97 8 1 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 4 3 2 3 4 2 128 0 5 0 3 4 5 3 105 0 2 0 0 1 2 0 103 7 1 1 1 6 97 8 1 6 6 29 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
9 9 0 0 9 34 9 33 27 25 23 22 20 18 15 14 0 8 0 7 19 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = uni018F;
unicode = 399;
},
{
glyphname = florin;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(32,548,l),
(25,474,l),
(95,474,l),
(39,-57,ls),
(35,-93,o),
(7,-122,o),
(-22,-122,qs),
(-41,-122,l),
(-48,-197,l),
(-24,-197,ls),
(47,-197,o),
(123,-131,o),
(130,-57,qs),
(186,474,l),
(302,474,l),
(309,548,l),
(194,548,l),
(199,595,ls),
(204,647,o),
(259,691,o),
(317,691,q),
(324,767,l),
(223,767,o),
(118,685,o),
(108,595,qs),
(103,548,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 5 0 4 5 4 101 0 1 1 0 97 0 0 0 30 77 6 1 3 3 2 95 7 1 2 2 31 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
7 1 2 6 1 3 5 2 3 103 0 5 0 4 5 4 101 0 1 1 0 97 0 0 0 30 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 0 0 1 2 0 1 105 7 1 2 6 1 3 5 2 3 103 0 5 4 4 5 89 0 5 5 4 97 0 4 5 4 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 19 33 35 17 19 17 18 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 332;
}
);
note = florin;
unicode = 402;
},
{
glyphname = uni01FC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,808,l),
(444,740,l),
(657,854,l),
(657,933,l)
);
},
{
closed = 1;
nodes = (
(111,0,l),
(198,155,l),
(465,155,l),
(465,0,l),
(838,0,l),
(838,72,l),
(556,72,l),
(556,317,l),
(808,317,l),
(808,387,l),
(556,387,l),
(556,626,l),
(838,626,l),
(838,698,l),
(407,698,l),
(12,0,l)
);
},
{
closed = 1;
nodes = (
(465,629,l),
(465,226,l),
(238,226,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
21 1 1 0 1 76 3 2 1 0 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 0 3 8 2 3 103 9 1 8 0 6 4 8 6 103 0 1 1 0 95 0 0 0 28 77 0 4 4 5 95 7 1 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 0 0 1 2 0 1 103 0 2 0 3 8 2 3 103 9 1 8 0 6 4 8 6 103 0 4 4 5 95 7 1 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
20 20 20 22 20 22 17 17 17 17 17 17 17 20 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 900;
}
);
note = uni01FC;
unicode = 508;
},
{
glyphname = uni01FD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(833,480,o),
(914,439,o),
(961,362,o),
(961,309,q),
(600,309,l),
(607,388,o),
(712,480,o),
(784,480,qs)
);
},
{
closed = 1;
nodes = (
(931,123,o),
(847,68,o),
(783,68,qs),
(739,68,o),
(659,108,o),
(605,187,o),
(600,243,q),
(1051,243,l),
(1055,268,o),
(1055,297,qs),
(1055,369,o),
(991,488,o),
(874,557,o),
(798,557,qs),
(660,557,o),
(589,447,q),
(589,548,l),
(513,548,l),
(513,447,l),
(480,500,o),
(375,557,o),
(308,557,qs),
(232,557,o),
(112,487,o),
(43,360,o),
(43,276,qs),
(43,193,o),
(111,63,o),
(230,-9,o),
(303,-9,qs),
(372,-9,o),
(480,54,o),
(510,105,q),
(510,0,l),
(589,0,l),
(589,106,l),
(618,53,o),
(731,-9,o),
(798,-9,qs),
(893,-9,o),
(1021,90,o),
(1043,169,q),
(945,169,l)
);
},
{
closed = 1;
nodes = (
(136,338,o),
(186,430,o),
(270,478,o),
(321,478,qs),
(372,478,o),
(457,429,o),
(507,337,o),
(507,275,qs),
(507,213,o),
(457,120,o),
(372,71,o),
(321,71,qs),
(270,71,o),
(186,120,o),
(136,213,o),
(136,276,qs)
);
},
{
closed = 1;
nodes = (
(508,657,l),
(508,589,l),
(721,703,l),
(721,782,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
34 31 2 0 1 17 14 2 9 10 2 76 70 69 68 67 4 5 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
14 1 10 8 9 8 10 9 128 0 0 0 8 10 0 8 103 12 13 2 1 1 5 97 7 6 2 5 5 31 77 11 1 9 9 2 97 4 3 2 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
14 1 10 8 9 8 10 9 128 0 0 0 8 10 0 8 103 12 13 2 1 1 5 97 7 1 5 5 31 77 0 6 6 3 95 0 3 3 29 77 11 1 9 9 2 97 4 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
14 1 10 8 9 8 10 9 128 7 1 5 12 13 2 1 0 5 1 105 0 0 0 8 10 0 8 103 0 6 6 3 95 0 3 3 29 77 11 1 9 9 2 97 4 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
8 8 0 0 63 61 55 53 8 50 8 50 48 46 43 42 37 35 33 32 29 27 21 19 16 15 12 10 0 7 0 6 18 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 1100;
}
);
note = uni01FD;
unicode = 509;
},
{
glyphname = uni0218;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,-131,l),
(300,-131,l),
(300,-149,ls),
(300,-205,o),
(253,-205,q),
(253,-247,l),
(354,-247,o),
(354,-132,qs),
(354,-90,o),
(343,-49,q),
(253,-49,l)
);
},
{
closed = 1;
nodes = (
(530,256,o),
(470,333,o),
(386,370,o),
(317,389,qs),
(260,405,o),
(197,430,o),
(154,478,o),
(154,516,qs),
(154,570,o),
(230,630,o),
(288,628,qs),
(347,627,o),
(418,567,o),
(423,527,q),
(523,527,l),
(515,608,o),
(390,706,o),
(292,706,qs),
(224,706,o),
(119,658,o),
(61,570,o),
(61,513,qs),
(61,448,o),
(120,371,o),
(203,335,o),
(272,317,qs),
(328,302,o),
(394,276,o),
(438,226,o),
(438,186,qs),
(438,135,o),
(363,70,o),
(298,70,qs),
(230,70,o),
(159,137,o),
(154,186,q),
(57,186,l),
(58,129,o),
(120,42,o),
(229,-7,o),
(298,-7,qs),
(370,-7,o),
(476,49,o),
(530,139,o),
(530,190,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 8 9 5 9 8 5 128 0 5 6 9 5 6 126 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 9 9 7 97 0 7 7 28 77 0 6 6 4 97 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 8 9 5 9 8 5 128 0 5 6 9 5 6 126 0 7 0 9 8 7 9 105 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 4 97 0 4 4 29 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 45 43 41 40 38 36 23 21 19 18 15 13 0 10 0 10 18 17 19 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni0219;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,-131,l),
(266,-131,l),
(266,-149,ls),
(266,-205,o),
(219,-205,q),
(219,-247,l),
(320,-247,o),
(320,-132,qs),
(320,-96,o),
(309,-49,q),
(219,-49,l)
);
},
{
closed = 1;
nodes = (
(470,199,o),
(417,261,o),
(343,292,o),
(284,308,qs),
(237,321,o),
(184,342,o),
(149,377,o),
(149,404,qs),
(149,438,o),
(207,480,o),
(256,480,qs),
(309,480,o),
(372,428,o),
(375,385,q),
(466,385,l),
(462,465,o),
(350,557,o),
(259,557,qs),
(200,557,o),
(108,516,o),
(58,446,o),
(58,404,qs),
(58,351,o),
(113,286,o),
(190,253,o),
(251,237,qs),
(318,220,o),
(382,185,o),
(382,149,qs),
(382,114,o),
(322,68,o),
(270,68,qs),
(214,68,o),
(145,120,o),
(141,161,q),
(47,161,l),
(50,111,o),
(108,34,o),
(208,-9,o),
(271,-9,qs),
(330,-9,o),
(421,32,o),
(471,104,o),
(471,149,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 8 9 5 9 8 5 128 0 5 6 9 5 6 126 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 9 9 7 97 0 7 7 31 77 0 6 6 4 97 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 8 9 5 9 8 5 128 0 5 6 9 5 6 126 0 7 0 9 8 7 9 105 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 4 97 0 4 4 29 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 44 42 40 39 37 35 23 21 19 18 15 13 0 10 0 10 18 17 19 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = uni021A;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,-131,l),
(270,-131,l),
(270,-149,ls),
(270,-205,o),
(223,-205,q),
(223,-247,l),
(323,-247,o),
(323,-132,qs),
(323,-92,o),
(313,-49,q),
(223,-49,l)
);
},
{
closed = 1;
nodes = (
(34,623,l),
(225,623,l),
(225,0,l),
(316,0,l),
(316,623,l),
(506,623,l),
(506,697,l),
(34,697,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 6 1 4 4 7 95 9 1 7 7 28 77 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
9 1 7 6 1 4 5 7 4 103 8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
11 11 0 0 11 18 11 18 17 16 15 14 13 12 0 10 0 10 18 17 19 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = uni021B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,-131,l),
(191,-131,l),
(191,-149,ls),
(191,-205,o),
(143,-205,q),
(143,-247,l),
(193,-247,o),
(244,-191,o),
(244,-132,qs),
(244,-90,o),
(233,-49,q),
(143,-49,l)
);
},
{
closed = 1;
nodes = (
(97,150,ls),
(97,70,o),
(173,0,o),
(249,0,qs),
(331,0,l),
(331,77,l),
(264,77,ls),
(222,77,o),
(188,110,o),
(188,150,qs),
(188,473,l),
(331,473,l),
(331,548,l),
(188,548,l),
(188,686,l),
(97,686,l),
(97,548,l),
(26,548,l),
(26,473,l),
(97,473,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 5 4 5 133 11 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 12 10 2 7 7 4 95 6 1 4 4 31 77 0 8 8 9 96 0 9 9 29 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 5 4 5 133 6 1 4 12 10 2 7 8 4 7 103 11 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 8 8 9 96 0 9 9 29 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
12 12 0 0 12 31 12 31 28 26 25 23 20 19 18 17 16 15 14 13 0 11 0 11 18 17 20 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 364;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = uni0259;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(262,68,o),
(183,107,o),
(137,182,o),
(137,234,q),
(483,234,l),
(476,156,o),
(379,68,o),
(310,68,qs)
);
},
{
closed = 1;
nodes = (
(386,-9,o),
(509,60,o),
(577,188,o),
(577,273,qs),
(577,358,o),
(507,487,o),
(384,557,o),
(306,557,qs),
(208,557,o),
(76,458,o),
(54,379,q),
(152,379,l),
(168,425,o),
(247,480,o),
(306,480,qs),
(378,480,o),
(479,389,o),
(484,308,q),
(46,308,l),
(43,280,o),
(43,253,qs),
(43,178,o),
(108,59,o),
(228,-9,o),
(306,-9,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 2 3 4 2 128 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 31 77 7 1 1 1 6 97 8 1 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 4 3 2 3 4 2 128 0 5 0 3 4 5 3 105 0 2 0 0 1 2 0 103 7 1 1 1 6 97 8 1 6 6 29 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
8 8 0 0 8 32 8 31 25 23 21 20 18 16 14 13 0 7 0 6 18 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = uni0259;
unicode = 601;
},
{
glyphname = uni02BC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,470,l),
(192,697,l),
(91,697,l),
(32,470,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 219;
}
);
note = uni02BC;
unicode = 700;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(294,669,l),
(156,752,l),
(17,669,l),
(17,597,l),
(156,682,l),
(294,597,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(156,666,l),
(17,751,l),
(17,679,l),
(156,597,l),
(294,679,l),
(294,751,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = caron;
unicode = 711;
},
{
glyphname = uni02C9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(17,641,l),
(369,641,l),
(369,709,l),
(17,709,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 387;
}
);
note = uni02C9;
unicode = 713;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,750,l),
(248,712,o),
(206,673,o),
(160,673,qs),
(113,673,o),
(71,712,o),
(71,750,q),
(17,750,l),
(17,733,ls),
(17,675,o),
(93,602,o),
(160,602,qs),
(227,602,o),
(302,675,o),
(302,732,qs),
(302,750,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 2 1 133 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 18 34 19 34 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 320;
}
);
note = breve;
unicode = 728;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(94,622,o),
(124,652,o),
(124,674,qs),
(124,696,o),
(94,727,o),
(72,727,qs),
(50,727,o),
(19,696,o),
(19,674,qs),
(19,652,o),
(50,622,o),
(72,622,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 143;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,817,o),
(15,759,o),
(15,712,qs),
(15,665,o),
(77,607,o),
(122,607,qs),
(168,607,o),
(229,664,o),
(229,712,qs),
(229,760,o),
(168,817,o),
(122,817,qs)
);
},
{
closed = 1;
nodes = (
(99,656,o),
(68,688,o),
(68,713,qs),
(68,738,o),
(99,769,o),
(122,769,qs),
(145,769,o),
(176,738,o),
(176,713,qs),
(176,688,o),
(145,656,o),
(122,656,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 1 0 2 3 1 2 105 5 1 3 0 0 3 89 5 1 3 3 0 97 0 0 3 0 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 243;
}
);
note = ring;
unicode = 730;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(137,26,ls),
(75,-3,o),
(20,-68,o),
(20,-106,qs),
(20,-157,o),
(91,-206,o),
(142,-206,qs),
(179,-206,o),
(219,-192,q),
(219,-132,l),
(182,-145,o),
(154,-145,qs),
(127,-145,o),
(95,-120,o),
(95,-97,qs),
(95,-56,o),
(155,-27,qs),
(210,0,l),
(186,47,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 32 values pushed */
9 1 1 0 1 76 18 8 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 35 37 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 241;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(73,629,o),
(96,651,o),
(113,651,qs),
(126,651,o),
(145,641,o),
(161,631,qs),
(179,618,o),
(208,605,o),
(227,605,qs),
(267,605,o),
(321,659,o),
(327,709,q),
(275,709,l),
(272,688,o),
(248,666,o),
(231,666,qs),
(218,666,o),
(196,677,o),
(182,687,qs),
(163,699,o),
(136,712,o),
(117,712,qs),
(77,712,o),
(24,658,o),
(17,607,q),
(70,607,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 1 4 3 1 89 2 1 0 0 4 3 0 4 105 0 1 1 3 97 6 5 2 3 1 3 81 0 0 0 25 0 25 36 34 18 36 34 7 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 345;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(84,755,l),
(17,601,l),
(78,601,l),
(165,755,l)
);
},
{
closed = 1;
nodes = (
(226,601,l),
(318,755,l),
(238,755,l),
(166,601,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 18 values pushed */
2 1 1 0 1 133 3 1 0 0 118 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 344;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = Wgrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,-1,l),
(319,0,l),
(487,561,l),
(649,0,l),
(751,0,l),
(953,697,l),
(855,697,l),
(702,108,l),
(542,697,l),
(440,697,l),
(272,106,l),
(120,697,l),
(23,697,l)
);
},
{
closed = 1;
nodes = (
(540,739,l),
(540,807,l),
(327,932,l),
(327,853,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 0 28 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 2 0 133 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 976;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = wgrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,0,l),
(278,0,l),
(410,435,l),
(542,0,l),
(636,0,l),
(807,548,l),
(717,548,l),
(593,87,l),
(460,548,l),
(367,548,l),
(231,88,l),
(105,548,l),
(12,548,l)
);
},
{
closed = 1;
nodes = (
(455,589,l),
(455,657,l),
(242,782,l),
(242,703,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 0 31 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 2 0 133 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 820;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = Wacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,-1,l),
(319,0,l),
(487,561,l),
(649,0,l),
(751,0,l),
(953,697,l),
(855,697,l),
(702,108,l),
(542,697,l),
(440,697,l),
(272,106,l),
(120,697,l),
(23,697,l)
);
},
{
closed = 1;
nodes = (
(655,856,l),
(655,935,l),
(442,810,l),
(442,742,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 0 28 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 2 0 133 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 976;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = wacute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,0,l),
(278,0,l),
(410,435,l),
(542,0,l),
(636,0,l),
(807,548,l),
(717,548,l),
(593,87,l),
(460,548,l),
(367,548,l),
(231,88,l),
(105,548,l),
(12,548,l)
);
},
{
closed = 1;
nodes = (
(579,703,l),
(579,782,l),
(366,657,l),
(366,589,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 0 31 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 2 0 133 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 820;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = Wdieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,-1,l),
(319,0,l),
(487,561,l),
(649,0,l),
(751,0,l),
(953,697,l),
(855,697,l),
(702,108,l),
(542,697,l),
(440,697,l),
(272,106,l),
(120,697,l),
(23,697,l)
);
},
{
closed = 1;
nodes = (
(425,773,o),
(456,803,o),
(456,825,qs),
(456,847,o),
(425,878,o),
(404,878,qs),
(382,878,o),
(351,847,o),
(351,825,qs),
(351,803,o),
(382,773,o),
(404,773,qs)
);
},
{
closed = 1;
nodes = (
(588,773,o),
(619,803,o),
(619,825,qs),
(619,847,o),
(588,878,o),
(566,878,qs),
(544,878,o),
(514,847,o),
(514,825,qs),
(514,803,o),
(544,773,o),
(566,773,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
9 4 1 3 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
7 1 5 11 8 10 3 6 0 5 6 105 9 4 1 3 0 0 28 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
9 4 1 3 0 6 2 6 0 2 128 7 1 5 11 8 10 3 6 0 5 6 105 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
25 25 13 13 0 0 25 36 25 35 31 29 13 24 13 23 19 17 0 12 0 12 18 17 18 18 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 976;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = wdieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(184,0,l),
(278,0,l),
(410,435,l),
(542,0,l),
(636,0,l),
(807,548,l),
(717,548,l),
(593,87,l),
(460,548,l),
(367,548,l),
(231,88,l),
(105,548,l),
(12,548,l)
);
},
{
closed = 1;
nodes = (
(350,622,o),
(381,652,o),
(381,674,qs),
(381,696,o),
(350,727,o),
(329,727,qs),
(307,727,o),
(276,696,o),
(276,674,qs),
(276,652,o),
(307,622,o),
(329,622,qs)
);
},
{
closed = 1;
nodes = (
(513,622,o),
(544,652,o),
(544,674,qs),
(544,696,o),
(513,727,o),
(491,727,qs),
(469,727,o),
(439,696,o),
(439,674,qs),
(439,652,o),
(469,622,o),
(491,622,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
9 4 1 3 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
11 8 10 3 6 6 5 97 7 1 5 5 34 77 9 4 1 3 0 0 31 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
9 4 1 3 0 6 2 6 0 2 128 11 8 10 3 6 6 5 97 7 1 5 5 34 77 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
25 25 13 13 0 0 25 36 25 35 31 29 13 24 13 23 19 17 0 12 0 12 18 17 18 18 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 820;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = uni1EBC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,698,l),
(77,698,l),
(77,0,l),
(452,0,l),
(452,75,l),
(168,75,l),
(168,315,l),
(422,315,l),
(422,390,l),
(168,390,l),
(168,623,l),
(452,623,l)
);
},
{
closed = 1;
nodes = (
(164,774,o),
(187,796,o),
(204,796,qs),
(217,796,o),
(236,786,o),
(252,776,qs),
(270,763,o),
(299,750,o),
(318,750,qs),
(358,750,o),
(412,804,o),
(418,854,q),
(366,854,l),
(363,833,o),
(339,811,o),
(322,811,qs),
(309,811,o),
(287,822,o),
(273,832,qs),
(254,844,o),
(227,857,o),
(208,857,qs),
(168,857,o),
(115,803,o),
(108,752,q),
(161,752,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
8 1 6 0 10 9 6 10 105 0 7 13 11 2 9 4 7 9 105 0 0 0 1 2 0 1 103 12 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
8 1 6 0 10 9 6 10 105 0 7 13 11 2 9 4 7 9 105 0 4 12 1 5 0 4 5 104 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
12 12 0 0 12 37 12 37 35 33 29 27 25 24 22 20 16 14 0 11 0 11 17 17 17 17 17 14 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = uni1EBC;
unicode = 7868;
},
{
glyphname = uni1EBD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,480,o),
(437,441,o),
(483,366,o),
(483,314,q),
(137,314,l),
(144,392,o),
(241,480,o),
(310,480,qs)
);
},
{
closed = 1;
nodes = (
(452,123,o),
(373,68,o),
(314,68,qs),
(242,68,o),
(141,159,o),
(136,240,q),
(574,240,l),
(577,269,o),
(577,295,qs),
(577,370,o),
(512,489,o),
(392,557,o),
(314,557,qs),
(234,557,o),
(111,488,o),
(43,360,o),
(43,275,qs),
(43,190,o),
(113,61,o),
(236,-9,o),
(314,-9,qs),
(412,-9,o),
(544,90,o),
(566,169,q),
(468,169,l)
);
},
{
closed = 1;
nodes = (
(219,629,o),
(242,651,o),
(259,651,qs),
(272,651,o),
(291,641,o),
(307,631,qs),
(325,618,o),
(354,605,o),
(373,605,qs),
(413,605,o),
(467,659,o),
(473,709,q),
(421,709,l),
(418,688,o),
(394,666,o),
(377,666,qs),
(364,666,o),
(342,677,o),
(328,687,qs),
(309,699,o),
(282,712,o),
(263,712,qs),
(223,712,o),
(170,658,o),
(163,607,q),
(216,607,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 6 4 5 4 6 5 128 0 8 15 12 2 10 3 8 10 105 0 0 0 4 6 0 4 104 0 11 11 7 97 9 1 7 7 28 77 13 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
14 1 6 4 5 4 6 5 128 0 8 15 12 2 10 3 8 10 105 0 3 13 1 1 0 3 1 105 0 0 0 4 6 0 4 104 0 11 11 7 97 9 1 7 7 28 77 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
33 33 8 8 0 0 33 58 33 58 56 54 50 48 46 45 43 41 37 35 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 16 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = uni1EBD;
unicode = 7869;
},
{
glyphname = Ygrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,263,l),
(247,0,l),
(338,0,l),
(338,263,l),
(565,697,l),
(464,697,l),
(292,344,l),
(120,697,l),
(19,697,l)
);
},
{
closed = 1;
nodes = (
(390,734,l),
(390,802,l),
(177,927,l),
(177,848,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
7 4 1 3 1 0 1 76 12 11 10 9 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 0 0 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 0 1 0 133 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 8 0 8 18 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = ygrave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(285,104,l),
(113,548,l),
(12,548,l),
(233,6,l),
(125,-258,l),
(219,-258,l),
(549,548,l),
(455,548,l)
);
},
{
closed = 1;
nodes = (
(379,589,l),
(379,657,l),
(166,782,l),
(166,703,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
6 3 2 0 1 1 76 11 10 9 8 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 1 1 31 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 0 1 0 134 3 2 2 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
3 2 2 1 0 1 133 0 0 0 118 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 7 0 7 18 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni1EF8;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(247,263,l),
(247,0,l),
(338,0,l),
(338,263,l),
(565,697,l),
(464,697,l),
(292,344,l),
(120,697,l),
(19,697,l)
);
},
{
closed = 1;
nodes = (
(202,774,o),
(225,796,o),
(242,796,qs),
(255,796,o),
(274,786,o),
(290,776,qs),
(308,763,o),
(337,750,o),
(356,750,qs),
(396,750,o),
(450,804,o),
(456,854,q),
(404,854,l),
(401,833,o),
(377,811,o),
(360,811,qs),
(347,811,o),
(325,822,o),
(311,832,qs),
(292,844,o),
(265,857,o),
(246,857,qs),
(206,857,o),
(153,803,o),
(146,752,q),
(199,752,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
7 4 1 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
5 1 3 0 7 6 3 7 105 0 4 10 8 2 6 0 4 6 105 9 2 2 0 0 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
9 2 2 0 6 1 6 0 1 128 5 1 3 0 7 6 3 7 105 0 4 10 8 2 6 0 4 6 105 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
9 9 0 0 9 34 9 34 32 30 26 24 22 21 19 17 13 11 0 8 0 8 18 18 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = uni1EF8;
unicode = 7928;
},
{
glyphname = uni1EF9;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(285,104,l),
(113,548,l),
(12,548,l),
(233,6,l),
(125,-258,l),
(219,-258,l),
(549,548,l),
(455,548,l)
);
},
{
closed = 1;
nodes = (
(191,629,o),
(214,651,o),
(231,651,qs),
(244,651,o),
(263,641,o),
(279,631,qs),
(297,618,o),
(326,605,o),
(345,605,qs),
(385,605,o),
(439,659,o),
(445,709,q),
(393,709,l),
(390,688,o),
(366,666,o),
(349,666,qs),
(336,666,o),
(314,677,o),
(300,687,qs),
(281,699,o),
(254,712,o),
(235,712,qs),
(195,712,o),
(142,658,o),
(135,607,q),
(188,607,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
6 3 2 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 10 8 2 6 1 4 6 105 0 7 7 3 97 5 1 3 3 28 77 9 2 2 1 1 31 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 0 1 0 134 0 4 10 8 2 6 1 4 6 105 0 7 7 3 97 5 1 3 3 28 77 9 2 2 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
9 2 2 1 6 0 6 1 0 128 0 0 0 132 0 4 10 8 2 6 1 4 6 105 0 7 7 3 97 5 1 3 3 28 7 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
8 8 0 0 8 33 8 33 31 29 25 23 21 20 18 16 12 10 0 7 0 7 18 17 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = uni1EF9;
unicode = 7929;
},
{
glyphname = endash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(76,328,l),
(602,328,l),
(602,405,l),
(76,405,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(76,328,l),
(809,328,l),
(809,405,l),
(76,405,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 885;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,698,l),
(27,471,l),
(128,471,l),
(187,698,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 95 0 1 1 28 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,470,l),
(192,697,l),
(91,697,l),
(32,470,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 95 0 0 0 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-2,-143,l),
(59,-143,l),
(171,126,l),
(71,126,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 186;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,698,l),
(27,471,l),
(128,471,l),
(187,698,l)
);
},
{
closed = 1;
nodes = (
(291,471,l),
(350,698,l),
(286,698,l),
(190,471,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 1 0 0 1 95 2 1 1 1 28 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 3 1 0 1 0 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 386;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(268,470,l),
(364,697,l),
(263,697,l),
(204,470,l)
);
},
{
closed = 1;
nodes = (
(105,470,l),
(201,697,l),
(100,697,l),
(41,470,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 1 1 1 0 95 2 1 0 0 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-2,-143,l),
(59,-143,l),
(171,126,l),
(71,126,l)
);
},
{
closed = 1;
nodes = (
(257,-143,l),
(369,126,l),
(269,126,l),
(196,-143,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 4 2 1 0 1 133 3 1 0 0 118 0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 395;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = dagger;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(309,540,l),
(318,781,l),
(228,781,l),
(237,540,l),
(44,548,l),
(44,476,l),
(237,484,l),
(228,-260,l),
(318,-260,l),
(309,484,l),
(502,476,l),
(502,548,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 30 77 2 1 0 0 3 95 5 1 3 3 31 77 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
5 1 3 2 1 0 1 3 0 104 0 4 4 30 77 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 30 77 2 1 0 0 3 95 5 1 3 3 31 77 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
5 1 3 2 1 0 1 3 0 104 0 4 4 30 77 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 4 3 4 133 5 1 3 2 1 0 1 3 0 104 0 1 1 33 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 4 3 4 133 0 1 0 1 134 5 1 3 0 0 3 87 5 1 3 3 0 96 2 1 0 3 0 80 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(502,548,l),
(309,540,l),
(318,781,l),
(228,781,l),
(237,540,l),
(45,548,l),
(45,476,l),
(237,484,l),
(237,37,l),
(45,46,l),
(45,-27,l),
(237,-19,l),
(228,-260,l),
(318,-260,l),
(309,-19,l),
(502,-27,l),
(502,46,l),
(309,37,l),
(309,484,l),
(502,476,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 7 7 30 77 10 9 2 5 5 6 95 8 1 6 6 31 77 4 1 0 0 1 95 3 1 1 1 29 77 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
8 1 6 10 9 2 5 0 6 5 104 0 7 7 30 77 4 1 0 0 1 95 3 1 1 1 29 77 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 7 7 30 77 10 9 2 5 5 6 95 8 1 6 6 31 77 4 1 0 0 1 95 3 1 1 1 29 77 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
8 1 6 10 9 2 5 0 6 5 104 0 7 7 30 77 4 1 0 0 1 95 3 1 1 1 29 77 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
8 1 6 10 9 2 5 0 6 5 104 4 1 0 3 1 1 2 0 1 103 0 7 7 30 77 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 7 6 7 133 8 1 6 10 9 2 5 0 6 5 104 4 1 0 3 1 1 2 0 1 103 0 2 2 33 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 7 6 7 133 0 2 1 2 134 8 1 6 10 9 2 5 0 6 5 104 4 1 0 1 1 0 87 4 1 0 0 1 95 3 1 1 0 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 19 0 19 17 17 17 17 17 17 17 17 17 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 547;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(257,211,o),
(329,282,o),
(329,333,qs),
(329,385,o),
(257,456,o),
(205,456,qs),
(154,456,o),
(83,385,o),
(83,333,qs),
(83,282,o),
(154,211,o),
(205,211,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 412;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = ellipsis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(353,82,o),
(318,118,o),
(293,118,qs),
(267,118,o),
(231,82,o),
(231,56,qs),
(231,30,o),
(267,-6,o),
(293,-6,qs),
(318,-6,o),
(353,30,o),
(353,56,qs)
);
},
{
closed = 1;
nodes = (
(541,82,o),
(506,118,o),
(481,118,qs),
(455,118,o),
(419,82,o),
(419,56,qs),
(419,30,o),
(455,-6,o),
(481,-6,qs),
(506,-6,o),
(541,30,o),
(541,56,qs)
);
},
{
closed = 1;
nodes = (
(166,82,o),
(131,118,o),
(106,118,qs),
(80,118,o),
(44,82,o),
(44,56,qs),
(44,30,o),
(80,-6,o),
(106,-6,qs),
(131,-6,o),
(166,30,o),
(166,56,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
5 3 2 1 1 0 97 4 2 2 0 0 29 0 78 36 36 36 36 36 33 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = perthousand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(41,493,o),
(123,412,o),
(187,412,qs),
(250,412,o),
(333,493,o),
(333,560,qs),
(333,627,o),
(251,707,o),
(187,707,qs),
(123,707,o),
(41,627,o),
(41,560,qs)
);
},
{
closed = 1;
nodes = (
(221,651,o),
(260,604,o),
(260,560,qs),
(260,516,o),
(221,469,o),
(187,469,qs),
(153,469,o),
(113,516,o),
(113,560,qs),
(113,604,o),
(153,651,o),
(187,651,qs)
);
},
{
closed = 1;
nodes = (
(90,0,l),
(180,0,l),
(584,698,l),
(494,698,l)
);
},
{
closed = 1;
nodes = (
(343,71,o),
(425,-10,o),
(489,-10,qs),
(552,-10,o),
(634,71,o),
(634,138,qs),
(634,206,o),
(553,286,o),
(489,286,qs),
(425,286,o),
(343,206,o),
(343,138,qs)
);
},
{
closed = 1;
nodes = (
(522,229,o),
(562,183,o),
(562,138,qs),
(562,94,o),
(522,48,o),
(488,48,qs),
(454,48,o),
(414,94,o),
(414,138,qs),
(414,183,o),
(454,229,o),
(488,229,qs)
);
},
{
closed = 1;
nodes = (
(672,71,o),
(755,-10,o),
(818,-10,qs),
(882,-10,o),
(964,71,o),
(964,138,qs),
(964,206,o),
(882,286,o),
(818,286,qs),
(755,286,o),
(672,205,o),
(672,138,qs)
);
},
{
closed = 1;
nodes = (
(852,229,o),
(892,183,o),
(892,138,qs),
(892,94,o),
(852,48,o),
(818,48,qs),
(784,48,o),
(745,94,o),
(745,138,qs),
(745,183,o),
(784,229,o),
(818,229,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 2 0 1 6 2 1 105 10 1 6 17 13 16 3 9 8 6 9 106 14 1 3 3 0 97 15 5 2 0 0 28 77 12 1 8 8 4 97 11 7 2 4 4 29 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 2 0 1 6 2 1 105 10 1 6 17 13 16 3 9 8 6 9 106 14 1 3 3 0 97 15 5 2 0 0 28 77 0 4 4 29 77 12 1 8 8 7 97 11 1 7 7 29 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
15 1 5 0 3 0 5 3 128 0 2 0 1 6 2 1 105 10 1 6 17 13 16 3 9 8 6 9 106 14 1 3 3 0 97 0 0 0 28 77 0 4 4 29 77 12 1 8 8 7 97 11 1 7 7 29 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
15 1 5 0 3 0 5 3 128 0 0 14 1 3 2 0 3 105 0 2 0 1 6 2 1 105 10 1 6 17 13 16 3 9 8 6 9 106 12 1 8 11 1 7 8 7 101 0 4 4 29 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 44 values pushed */
64 64 40 40 24 24 12 12 64 75 64 74 70 68 61 59 55 53 40 51 40 50 46 44 37 35 31 29 24 27 24 27 26 25 12 23 12 22 39 36 33 18 8 25 
CALL[ ]	/* CallFunction */";
};
width = 1005;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(131,295,l),
(230,470,l),
(141,470,l),
(45,295,l),
(141,120,l),
(230,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 5 0 5 18 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(139,120,l),
(235,295,l),
(139,470,l),
(50,470,l),
(149,295,l),
(50,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = fraction;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(9,0,l),
(100,0,l),
(505,698,l),
(414,698,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 0 1 133 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 494;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = Euro;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(105,323,o),
(108,297,q),
(25,297,l),
(25,233,l),
(122,233,l),
(156,124,o),
(336,-6,o),
(454,-6,qs),
(567,-6,o),
(737,103,o),
(775,203,q),
(667,203,l),
(638,142,o),
(529,76,o),
(454,76,qs),
(373,76,o),
(248,159,o),
(219,233,q),
(454,233,l),
(454,297,l),
(203,297,l),
(199,320,o),
(199,349,qs),
(199,374,o),
(202,398,q),
(454,398,l),
(454,461,l),
(218,461,l),
(245,537,o),
(370,623,o),
(454,623,qs),
(530,623,o),
(638,557,o),
(667,495,q),
(775,495,l),
(737,596,o),
(567,706,o),
(454,706,qs),
(375,706,o),
(240,645,o),
(143,534,o),
(121,461,q),
(25,461,l),
(25,398,l),
(108,398,l),
(105,374,o),
(105,349,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 3 4 1 4 3 1 128 0 10 8 9 8 10 9 128 5 1 1 6 1 0 7 1 0 103 13 1 7 12 1 8 10 7 8 103 0 4 4 2 97 0 2 2 28 77 0 9 9 11 97 0 11 11 29 11 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 3 4 1 4 3 1 128 0 10 8 9 8 10 9 128 0 2 0 4 3 2 4 105 5 1 1 6 1 0 7 1 0 103 13 1 7 12 1 8 10 7 8 103 0 9 9 11 97 0 11 11 29 11 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
44 43 42 41 39 37 35 34 32 30 17 20 17 18 34 18 35 17 17 14 8 31 
CALL[ ]	/* CallFunction */";
};
width = 811;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = uni20BA;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(281,702,l),
(187,702,l),
(187,475,l),
(24,434,l),
(24,371,l),
(187,410,l),
(187,310,l),
(27,271,l),
(27,205,l),
(187,244,l),
(187,4,l),
(284,-18,o),
(358,-18,qs),
(548,-18,o),
(722,197,o),
(722,417,q),
(629,417,l),
(629,244,o),
(500,68,o),
(358,68,qs),
(313,68,o),
(281,75,q),
(281,267,l),
(454,309,l),
(454,375,l),
(281,333,l),
(281,433,l),
(458,476,l),
(458,542,l),
(281,498,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
29 26 25 2 1 0 6 1 3 24 23 22 21 20 19 7 6 5 4 3 11 0 1 18 1 2 0 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 1 3 0 3 1 0 128 0 3 3 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 1 3 0 3 1 0 128 0 0 0 2 0 2 101 0 3 3 28 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 1 3 133 0 1 0 1 133 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
26 34 18 40 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 830;
}
);
note = uni20BA;
unicode = 8378;
},
{
glyphname = uni20BD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(213,625,l),
(347,625,ls),
(423,625,o),
(495,556,o),
(495,493,qs),
(495,432,o),
(422,363,o),
(347,363,qs),
(213,363,l)
);
},
{
closed = 1;
nodes = (
(36,291,l),
(122,291,l),
(122,195,l),
(36,195,l),
(36,122,l),
(122,122,l),
(122,0,l),
(213,0,l),
(213,122,l),
(431,122,l),
(431,195,l),
(213,195,l),
(213,291,l),
(347,291,ls),
(469,291,o),
(588,406,o),
(588,493,qs),
(588,583,o),
(465,697,o),
(347,697,qs),
(122,697,l),
(122,363,l),
(36,363,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
12 10 11 3 0 9 1 3 4 0 3 103 8 1 4 7 1 5 6 4 5 103 0 1 1 2 95 0 2 2 28 77 0 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 2 0 1 0 2 1 103 12 10 11 3 0 9 1 3 4 0 3 103 8 1 4 7 1 5 6 4 5 103 0 6 6 29 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
9 9 1 0 9 31 9 31 30 29 28 27 26 25 24 23 22 21 20 19 18 16 12 10 7 5 0 8 1 8 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni2113;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,0,l),
(168,0,l),
(168,740,l),
(77,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = uni2113;
unicode = 8467;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(25,648,l),
(111,648,l),
(110,352,l),
(182,352,l),
(182,648,l),
(267,648,l),
(267,704,l),
(25,704,l)
);
},
{
closed = 1;
nodes = (
(389,352,l),
(389,611,l),
(497,352,l),
(548,352,l),
(657,607,l),
(658,352,l),
(725,352,l),
(725,704,l),
(637,704,l),
(525,437,l),
(416,704,l),
(323,704,l),
(323,352,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
18 15 10 3 1 0 1 76 8 7 6 3 1 0 1 134 5 4 9 3 3 0 0 3 87 5 4 9 3 3 3 0 95 2 1 0 3 0 79 0 0 20 19 17 16 14 13 12 11 9 8 0 7 0 7 17 17 17 10 6 25 
CALL[ ]	/* CallFunction */";
};
width = 781;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = uni2126;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(41,261,o),
(116,114,o),
(186,72,q),
(53,72,l),
(53,0,l),
(328,0,l),
(328,75,l),
(241,97,o),
(133,240,o),
(133,344,qs),
(133,427,o),
(200,554,o),
(318,623,o),
(393,623,qs),
(467,623,o),
(586,554,o),
(654,428,o),
(654,344,qs),
(654,240,o),
(546,97,o),
(459,75,q),
(459,0,l),
(733,0,l),
(733,72,l),
(600,72,l),
(671,114,o),
(746,261,o),
(746,350,qs),
(746,452,o),
(652,615,o),
(491,706,o),
(393,706,qs),
(296,706,o),
(135,615,o),
(41,452,o),
(41,350,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
28 14 2 1 3 1 76 0 0 0 3 1 0 3 105 5 1 1 2 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 17 23 39 17 22 34 6 6 28 
CALL[ ]	/* CallFunction */";
};
width = 787;
}
);
note = uni2126;
unicode = 8486;
},
{
glyphname = estimated;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(581,117,o),
(462,54,o),
(389,54,qs),
(320,54,o),
(221,100,o),
(182,147,q),
(182,315,l),
(714,315,l),
(714,376,ls),
(714,461,o),
(635,610,o),
(483,700,o),
(380,700,qs),
(276,700,o),
(125,603,o),
(47,435,o),
(47,331,qs),
(47,225,o),
(135,72,o),
(291,-7,o),
(389,-7,qs),
(552,-7,o),
(685,137,q),
(645,181,l)
);
},
{
closed = 1;
nodes = (
(182,379,l),
(182,544,l),
(216,592,o),
(317,640,o),
(380,640,qs),
(441,640,o),
(538,596,o),
(570,555,q),
(570,379,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
30 24 2 5 4 23 17 2 3 2 2 76 0 1 0 4 5 1 4 105 0 5 0 2 3 5 2 103 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 19 37 35 20 38 33 6 6 28 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = estimated;
unicode = 8494;
},
{
glyphname = partialdiff;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(429,256,o),
(381,138,o),
(297,68,o),
(245,68,qs),
(194,68,o),
(132,146,o),
(132,223,qs),
(132,295,o),
(178,413,o),
(260,481,o),
(312,481,qs),
(367,481,o),
(429,401,o),
(429,324,qs)
);
},
{
closed = 1;
nodes = (
(39,109,o),
(149,-10,o),
(235,-10,qs),
(318,-10,o),
(453,94,o),
(532,285,o),
(532,412,qs),
(532,567,o),
(409,740,o),
(298,740,qs),
(251,740,o),
(205,726,q),
(205,673,l),
(249,685,o),
(285,685,qs),
(361,685,o),
(435,568,o),
(438,468,q),
(421,516,o),
(356,558,o),
(309,558,qs),
(233,558,o),
(109,465,o),
(39,311,o),
(39,223,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
26 1 3 4 25 1 2 3 20 1 1 0 3 76 0 4 0 3 2 4 3 105 0 2 0 0 1 2 0 105 0 1 5 5 1 89 0 1 1 5 97 0 5 1 5 81 37 35 36 38 37 33 6 6 28 
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = partialdiff;
unicode = 8706;
},
{
glyphname = uni2206;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(20,71,l),
(20,0,l),
(660,0,l),
(660,71,l),
(378,693,l),
(302,693,l)
);
},
{
closed = 1;
nodes = (
(340,589,l),
(567,71,l),
(113,71,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
7 1 2 1 1 76 4 1 2 2 1 75 3 1 1 2 1 133 4 1 2 0 0 2 87 4 1 2 2 0 95 0 0 2 0 79 6 6 0 0 6 8 6 8 0 5 0 5 18 5 6 23 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = uni2206;
unicode = 8710;
},
{
glyphname = product;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,626,l),
(118,626,l),
(118,0,l),
(209,0,l),
(209,626,l),
(530,626,l),
(530,0,l),
(620,0,l),
(620,626,l),
(699,626,l),
(699,698,l),
(39,698,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
3 1 1 0 1 134 6 1 5 0 0 5 87 6 1 5 5 0 95 4 2 2 0 5 0 79 0 0 0 11 0 11 17 17 17 17 17 7 6 27 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = product;
unicode = 8719;
},
{
glyphname = summation;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(40,588,l),
(300,315,l),
(40,43,l),
(40,-63,l),
(429,-63,l),
(429,8,l),
(116,8,l),
(383,282,l),
(383,353,l),
(117,622,l),
(429,622,l),
(429,693,l),
(40,693,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
11 10 9 4 3 5 1 0 1 76 4 1 3 0 0 1 3 0 103 0 1 2 2 1 87 0 1 1 2 95 0 2 1 2 79 0 0 0 12 0 12 17 19 17 5 6 25 
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = summation;
unicode = 8721;
},
{
glyphname = minus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(76,328,l),
(475,328,l),
(475,405,l),
(76,405,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = uni2215;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(53,-170,l),
(143,-170,l),
(417,942,l),
(326,942,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 476;
}
);
note = uni2215;
unicode = 8725;
},
{
glyphname = uni2219;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,367,o),
(134,403,o),
(109,403,qs),
(83,403,o),
(47,367,o),
(47,341,qs),
(47,315,o),
(83,279,o),
(109,279,qs),
(134,279,o),
(169,315,o),
(169,341,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 36 33 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 212;
}
);
note = uni2219;
unicode = 8729;
},
{
glyphname = radical;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(282,-44,l),
(774,869,l),
(707,869,l),
(276,67,l),
(162,269,l),
(19,185,l),
(47,138,l),
(112,176,l),
(237,-44,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
4 3 2 1 4 1 0 1 76 0 0 1 0 133 0 1 1 118 17 21 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = radical;
unicode = 8730;
},
{
glyphname = infinity;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(472,265,o),
(419,307,o),
(387,348,q),
(408,385,o),
(471,429,o),
(506,429,qs),
(543,429,o),
(587,386,o),
(587,348,qs),
(587,309,o),
(542,265,o),
(505,265,qs)
);
},
{
closed = 1;
nodes = (
(153,266,o),
(109,309,o),
(109,347,qs),
(109,386,o),
(154,430,o),
(191,430,qs),
(222,430,o),
(273,387,o),
(307,344,q),
(286,308,o),
(224,266,o),
(190,266,qs)
);
},
{
closed = 1;
nodes = (
(33,278,o),
(117,200,o),
(183,199,qs),
(235,198,o),
(319,252,o),
(345,296,q),
(383,250,o),
(459,199,o),
(509,199,qs),
(575,199,o),
(664,280,o),
(664,348,qs),
(664,416,o),
(578,495,o),
(513,496,qs),
(460,497,o),
(376,441,o),
(350,396,q),
(313,443,o),
(237,496,o),
(187,496,qs),
(121,496,o),
(33,415,o),
(33,347,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
41 29 14 8 4 1 0 1 76 5 1 4 2 1 0 1 4 0 105 9 3 8 3 1 6 6 1 89 9 3 8 3 1 1 6 97 7 1 6 1 6 81 12 12 0 0 45 43 39 37 33 31 27 25 12 23 12 22 18 16 0 11 0 10 36 10 6 23 
CALL[ ]	/* CallFunction */";
};
width = 696;
}
);
note = infinity;
unicode = 8734;
},
{
glyphname = integral;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,-93,o),
(14,-122,o),
(-12,-122,qs),
(-32,-122,l),
(-39,-197,l),
(-16,-197,ls),
(53,-197,o),
(127,-131,o),
(134,-57,qs),
(226,779,ls),
(230,813,o),
(257,842,o),
(283,842,qs),
(300,842,l),
(308,918,l),
(286,918,ls),
(218,918,o),
(143,852,o),
(135,779,qs),
(43,-57,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 3 0 1 105 0 3 2 2 3 89 0 3 3 2 97 0 2 3 2 81 33 37 33 34 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = integral;
unicode = 8747;
},
{
glyphname = approxequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(108,231,o),
(146,266,o),
(172,266,qs),
(191,266,o),
(221,251,o),
(245,236,qs),
(274,218,o),
(314,200,o),
(340,200,qs),
(457,200,o),
(482,346,q),
(414,346,l),
(410,316,o),
(373,281,o),
(347,281,qs),
(330,281,o),
(299,295,o),
(275,310,qs),
(248,328,o),
(205,347,o),
(178,347,qs),
(63,347,o),
(37,201,q),
(104,201,l)
);
},
{
closed = 1;
nodes = (
(108,442,o),
(146,477,o),
(172,477,qs),
(191,477,o),
(221,462,o),
(245,447,qs),
(274,429,o),
(314,411,o),
(340,411,qs),
(457,411,o),
(482,557,q),
(414,557,l),
(410,527,o),
(373,492,o),
(347,492,qs),
(330,492,o),
(299,506,o),
(275,521,qs),
(248,539,o),
(205,558,o),
(178,558,qs),
(63,558,o),
(37,412,q),
(104,412,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
8 1 6 0 10 9 6 10 105 0 7 13 11 2 9 0 7 9 106 0 1 4 3 1 89 2 1 0 0 4 3 0 4 105 0 1 1 3 98 12 5 2 3 1 3 82 24 24 0 0 24 47 24 47 45 43 39 37 36 35 33 31 27 25 0 23 0 23 36 33 18 36 33 14 6 27 
CALL[ ]	/* CallFunction */";
};
width = 519;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,122,l),
(187,122,l),
(271,220,l),
(621,220,l),
(621,297,l),
(337,297,l),
(455,435,l),
(621,435,l),
(621,512,l),
(521,512,l),
(605,610,l),
(535,610,l),
(451,512,l),
(101,512,l),
(101,435,l),
(385,435,l),
(268,297,l),
(101,297,l),
(101,220,l),
(202,220,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 2 3 112 0 8 7 7 8 113 4 1 2 5 1 1 0 2 1 104 6 1 0 7 7 0 87 6 1 0 0 7 95 10 9 2 7 0 7 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 3 2 3 133 0 8 7 8 134 4 1 2 5 1 1 0 2 1 104 6 1 0 7 7 0 87 6 1 0 0 7 95 10 9 2 7 0 7 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 19 0 19 17 17 17 17 17 17 17 17 17 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = lessequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(79,86,l),
(434,86,l),
(434,155,l),
(79,155,l)
);
},
{
closed = 1;
nodes = (
(316,212,l),
(436,212,l),
(196,404,l),
(436,595,l),
(316,595,l),
(74,403,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
9 6 2 3 2 1 76 0 2 3 2 133 0 3 1 3 133 4 1 1 0 0 1 87 4 1 1 1 0 95 0 0 1 0 79 0 0 8 7 5 4 0 3 0 3 17 5 6 23 
CALL[ ]	/* CallFunction */";
};
width = 511;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = greaterequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(195,212,l),
(437,403,l),
(195,595,l),
(75,595,l),
(314,404,l),
(75,212,l)
);
},
{
closed = 1;
nodes = (
(432,86,l),
(432,155,l),
(77,155,l),
(77,86,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 511;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lozenge;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(36,350,l),
(277,108,l),
(518,350,l),
(278,591,l)
);
},
{
closed = 1;
nodes = (
(278,493,l),
(420,350,l),
(277,206,l),
(135,350,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
6 4 3 1 2 50 
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = lozenge;
unicode = 9674;
},
{
glyphname = fi;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(94,0,l),
(185,0,l),
(185,473,l),
(405,473,l),
(405,0,l),
(496,0,l),
(496,548,l),
(185,548,l),
(185,587,ls),
(185,641,o),
(234,688,o),
(294,688,q),
(294,764,l),
(189,764,o),
(94,679,o),
(94,587,qs),
(94,548,l),
(24,548,l),
(24,473,l),
(94,473,l)
);
},
{
closed = 1;
nodes = (
(477,637,o),
(512,673,o),
(512,699,qs),
(512,725,o),
(477,761,o),
(451,761,qs),
(425,761,o),
(390,725,o),
(390,699,qs),
(390,673,o),
(425,637,o),
(451,637,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 2 2 1 97 8 1 1 1 30 77 11 1 9 9 1 97 8 1 1 1 30 77 10 7 2 5 5 0 95 3 1 0 0 31 77 6 1 4 4 29 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
3 1 0 10 7 2 5 4 0 5 103 0 2 2 1 97 8 1 1 1 30 77 11 1 9 9 1 97 8 1 1 1 30 77 6 1 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 9 1 2 89 8 1 1 11 1 9 0 1 9 105 3 1 0 10 7 2 5 4 0 5 103 6 1 4 4 29 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
20 20 0 0 20 31 20 30 26 24 0 19 0 19 17 17 17 19 17 19 17 12 8 29 
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = fi;
unicode = 64257;
},
{
glyphname = fl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(94,0,l),
(185,0,l),
(185,473,l),
(300,473,l),
(300,548,l),
(185,548,l),
(185,587,ls),
(185,641,o),
(234,688,o),
(294,688,q),
(294,764,l),
(189,764,o),
(94,679,o),
(94,587,qs),
(94,548,l),
(23,548,l),
(23,473,l),
(94,473,l)
);
},
{
closed = 1;
nodes = (
(406,0,l),
(497,0,l),
(497,740,l),
(406,740,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
10 1 8 8 30 77 0 2 2 1 97 0 1 1 30 77 9 6 2 4 4 0 95 3 1 0 0 31 77 7 1 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
3 1 0 9 6 2 4 5 0 4 103 0 2 2 1 97 0 1 1 30 77 10 1 8 8 5 95 7 1 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 0 2 0 1 2 105 3 1 0 9 6 2 4 5 0 4 103 10 1 8 8 5 95 7 1 5 5 29 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
18 18 0 0 18 21 18 21 20 19 0 17 0 17 17 17 19 17 19 17 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = fl;
unicode = 64258;
},
{
glyphname = exclam.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(99,197,l),
(174,197,l),
(185,699,l),
(88,699,l)
);
},
{
closed = 1;
nodes = (
(191,0,l),
(191,112,l),
(82,112,l),
(82,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 2 0 1 131 4 1 1 1 132 0 2 2 3 95 0 3 3 21 2 78 0 0 7 6 5 4 0 3 0 3 17 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 273;
}
);
note = exclam.ss01;
},
{
glyphname = comma.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(33,2,l),
(87,2,l),
(87,-17,ls),
(87,-79,o),
(36,-79,q),
(36,-125,l),
(147,-125,o),
(147,1,qs),
(147,37,o),
(134,94,q),
(33,94,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 1 2 0 1 109 4 1 3 3 2 95 0 2 2 21 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 1 2 0 1 109 0 2 3 3 2 91 0 2 2 3 95 4 1 3 2 3 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 10 0 10 18 17 19 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 187;
}
);
note = comma.ss01;
},
{
glyphname = period.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(48,0,l),
(157,0,l),
(157,112,l),
(48,112,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 0 95 0 0 0 21 1 78 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 205;
}
);
note = period.ss01;
},
{
glyphname = colon.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(60,0,l),
(170,0,l),
(170,112,l),
(60,112,l)
);
},
{
closed = 1;
nodes = (
(170,428,l),
(170,539,l),
(60,539,l),
(60,428,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
4 1 1 1 0 95 0 0 0 21 77 0 3 3 2 95 0 2 2 20 2 78 0 0 7 6 5 4 0 3 0 3 17 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = colon.ss01;
},
{
glyphname = semicolon.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,2,l),
(89,2,l),
(89,-17,ls),
(89,-79,o),
(38,-79,q),
(38,-125,l),
(149,-125,o),
(149,1,qs),
(149,37,o),
(136,94,q),
(35,94,l)
);
},
{
closed = 1;
nodes = (
(33,427,l),
(142,427,l),
(142,539,l),
(33,539,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 109 6 1 3 3 2 95 0 2 2 21 77 0 4 4 5 95 7 1 5 5 20 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 0 0 1 2 0 1 109 0 2 6 1 3 4 2 3 107 0 4 4 5 95 7 1 5 5 20 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
11 11 0 0 11 14 11 14 13 12 0 10 0 10 18 17 19 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 189;
}
);
note = semicolon.ss01;
},
{
glyphname = question.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,0,l),
(252,0,l),
(252,112,l),
(143,112,l)
);
},
{
closed = 1;
nodes = (
(123,563,o),
(194,630,o),
(256,630,qs),
(317,630,o),
(389,560,o),
(389,500,qs),
(389,417,o),
(277,357,o),
(178,357,qs),
(149,357,l),
(149,199,l),
(235,199,l),
(235,294,l),
(346,294,o),
(476,395,o),
(476,500,qs),
(476,594,o),
(354,706,o),
(255,706,qs),
(190,706,o),
(91,656,o),
(37,565,o),
(37,505,q),
(123,505,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 4 1 3 3 4 117 9 1 7 5 6 5 7 6 131 0 3 0 5 7 3 5 110 0 6 0 2 6 2 101 8 1 1 1 0 95 0 0 0 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 4 1 3 1 4 3 131 9 1 7 5 6 5 7 6 131 0 3 0 5 7 3 5 110 0 6 0 2 6 2 101 8 1 1 1 0 95 0 0 0 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
4 4 0 0 4 27 4 27 25 23 19 17 16 15 14 13 9 7 0 3 0 3 17 10 7 23 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = question.ss01;
},
{
glyphname = exclamdown.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(99,357,l),
(174,357,l),
(185,-145,l),
(88,-145,l)
);
},
{
closed = 1;
nodes = (
(82,554,l),
(191,554,l),
(191,442,l),
(82,442,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 1 0 1 136 0 0 3 0 136 5 1 3 3 2 95 0 2 2 20 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
4 1 1 0 1 136 0 0 3 0 136 5 1 3 2 2 3 91 5 1 3 3 2 95 0 2 3 2 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23 
CALL[ ]	/* CallFunction */";
};
width = 273;
}
);
note = exclamdown.ss01;
},
{
glyphname = periodcentered.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(48,287,l),
(157,287,l),
(157,399,l),
(48,399,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 91 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 205;
}
);
note = periodcentered.ss01;
},
{
glyphname = questiondown.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(381,551,l),
(272,551,l),
(272,439,l),
(381,439,l)
);
},
{
closed = 1;
nodes = (
(401,-12,o),
(330,-79,o),
(268,-79,qs),
(207,-79,o),
(135,-9,o),
(135,51,qs),
(135,134,o),
(247,194,o),
(346,194,qs),
(375,194,l),
(375,352,l),
(289,352,l),
(289,257,l),
(178,257,o),
(48,156,o),
(48,51,qs),
(48,-43,o),
(170,-155,o),
(269,-155,qs),
(334,-155,o),
(433,-105,o),
(487,-14,o),
(487,46,q),
(401,46,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
9 1 7 6 5 6 7 5 131 0 4 3 1 3 4 117 0 2 0 6 7 2 6 109 0 5 0 3 4 5 3 109 8 1 1 1 0 95 0 0 0 20 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
9 1 7 6 5 6 7 5 131 0 4 3 1 3 4 1 131 0 2 0 6 7 2 6 109 0 5 0 3 4 5 3 109 8 1 1 1 0 95 0 0 0 20 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
9 1 7 6 5 6 7 5 131 0 4 3 1 3 4 1 131 0 2 0 6 7 2 6 109 0 5 0 3 4 5 3 109 8 1 1 0 0 1 91 8 1 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
4 4 0 0 4 27 4 27 25 23 19 17 16 15 14 13 9 7 0 3 0 3 17 10 7 23 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = questiondown.ss01;
},
{
glyphname = divide.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(78,326,l),
(588,326,l),
(588,406,l),
(78,406,l)
);
},
{
closed = 1;
nodes = (
(388,97,l),
(388,210,l),
(278,210,l),
(278,97,l)
);
},
{
closed = 1;
nodes = (
(388,523,l),
(388,635,l),
(278,635,l),
(278,523,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 0 2 0 3 2 107 0 0 6 1 1 5 0 1 107 0 5 4 4 5 91 0 5 5 4 95 0 4 5 4 79 0 0 11 10 9 8 7 6 5 4 0 3 0 3 17 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = divide.ss01;
},
{
glyphname = uni02BC.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,699,l),
(79,699,l),
(79,676,ls),
(79,649,o),
(56,622,o),
(32,622,q),
(32,580,l),
(133,580,o),
(133,693,qs),
(133,738,o),
(121,785,q),
(30,785,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 0 2 1 3 2 103 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 0 0 0 11 0 11 19 17 19 5 6 25 
CALL[ ]	/* CallFunction */";
};
width = 162;
}
);
note = uni02BC.ss01;
},
{
glyphname = quoteleft.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(132,666,l),
(83,666,l),
(83,689,ls),
(83,743,o),
(130,743,q),
(130,785,l),
(29,785,o),
(29,672,qs),
(29,633,o),
(41,580,q),
(132,580,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 0 2 1 3 2 107 0 1 0 0 1 93 0 1 1 0 97 0 0 1 0 81 0 0 0 10 0 10 18 17 19 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 162;
}
);
note = quoteleft.ss01;
},
{
glyphname = quoteright.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(30,699,l),
(79,699,l),
(79,676,ls),
(79,649,o),
(56,622,o),
(32,622,q),
(32,580,l),
(133,580,o),
(133,693,qs),
(133,738,o),
(121,785,q),
(30,785,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 0 0 1 2 0 1 109 0 2 3 3 2 91 0 2 2 3 95 4 1 3 2 3 79 0 0 0 11 0 11 19 17 19 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 162;
}
);
note = quoteright.ss01;
},
{
glyphname = quotedblleft.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(267,666,l),
(218,666,l),
(218,689,ls),
(218,743,o),
(266,743,q),
(266,785,l),
(164,785,o),
(164,672,qs),
(164,633,o),
(176,580,q),
(267,580,l)
);
},
{
closed = 1;
nodes = (
(132,666,l),
(83,666,l),
(83,689,ls),
(83,743,o),
(130,743,q),
(130,785,l),
(29,785,o),
(29,672,qs),
(29,633,o),
(41,580,q),
(132,580,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
9 7 8 3 3 6 1 2 1 3 2 107 5 1 1 0 0 1 93 5 1 1 1 0 97 4 1 0 1 0 81 11 11 0 0 11 21 11 21 20 19 17 16 15 14 0 10 0 10 18 17 19 10 7 25 
CALL[ ]	/* CallFunction */";
};
width = 297;
}
);
note = quotedblleft.ss01;
},
{
glyphname = quotedblright.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,699,l),
(215,699,l),
(215,676,ls),
(215,622,o),
(167,622,q),
(167,580,l),
(269,580,o),
(269,693,qs),
(269,733,o),
(257,785,q),
(166,785,l)
);
},
{
closed = 1;
nodes = (
(30,699,l),
(79,699,l),
(79,676,ls),
(79,649,o),
(56,622,o),
(32,622,q),
(32,580,l),
(133,580,o),
(133,693,qs),
(133,738,o),
(121,785,q),
(30,785,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
4 1 0 5 1 1 2 0 1 109 6 1 2 3 3 2 91 6 1 2 2 3 95 9 7 8 3 3 2 3 79 11 11 0 0 11 22 11 22 21 20 17 16 15 14 0 10 0 10 18 17 19 10 7 25 
CALL[ ]	/* CallFunction */";
};
width = 297;
}
);
note = quotedblright.ss01;
},
{
glyphname = ellipsis.ss01;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(48,0,l),
(157,0,l),
(157,112,l),
(48,112,l)
);
},
{
closed = 1;
nodes = (
(345,0,l),
(345,112,l),
(236,112,l),
(236,0,l)
);
},
{
closed = 1;
nodes = (
(534,0,l),
(534,112,l),
(425,112,l),
(425,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 2 6 3 1 1 0 95 5 3 2 0 0 21 1 78 0 0 11 10 9 8 7 6 5 4 0 3 0 3 17 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = ellipsis.ss01;
},
{
glyphname = a.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(520,0,l),
(520,321,ls),
(520,395,o),
(461,501,o),
(358,557,o),
(293,557,qs),
(194,557,o),
(69,447,o),
(57,357,q),
(146,357,l),
(156,414,o),
(231,478,o),
(289,478,qs),
(353,478,o),
(426,396,o),
(428,325,q),
(259,325,ls),
(153,325,o),
(43,228,o),
(43,153,qs),
(43,106,o),
(90,32,o),
(174,-10,o),
(227,-10,qs),
(293,-10,o),
(403,52,o),
(428,99,q),
(428,0,l)
);
},
{
closed = 1;
nodes = (
(135,201,o),
(197,251,o),
(259,251,qs),
(428,251,l),
(428,242,ls),
(428,188,o),
(375,110,o),
(291,70,o),
(245,70,qs),
(194,70,o),
(135,119,o),
(135,159,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
0 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 5 5 21 77 0 6 6 0 97 0 0 0 21 77 0 2 2 4 97 0 4 4 20 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 101 0 5 5 21 77 0 6 6 0 97 0 0 0 21 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 34 20 34 18 34 37 34 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = a.ss02;
},
{
glyphname = aacute.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,657,l),
(223,589,l),
(436,703,l),
(436,782,l)
);
},
{
closed = 1;
nodes = (
(520,0,l),
(520,321,ls),
(520,395,o),
(461,501,o),
(358,557,o),
(293,557,qs),
(194,557,o),
(69,447,o),
(57,357,q),
(146,357,l),
(156,414,o),
(231,478,o),
(289,478,qs),
(353,478,o),
(426,396,o),
(428,325,q),
(259,325,ls),
(153,325,o),
(43,228,o),
(43,153,qs),
(43,106,o),
(90,32,o),
(174,-10,o),
(227,-10,qs),
(293,-10,o),
(403,52,o),
(428,99,q),
(428,0,l)
);
},
{
closed = 1;
nodes = (
(135,201,o),
(197,251,o),
(259,251,qs),
(428,251,l),
(428,242,ls),
(428,188,o),
(375,110,o),
(291,70,o),
(245,70,qs),
(194,70,o),
(135,119,o),
(135,159,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 2 1 0 4 0 74 4 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 5 5 21 77 0 6 6 0 97 0 0 0 21 77 0 2 2 4 97 0 4 4 20 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 101 0 5 5 21 77 0 6 6 0 97 0 0 0 21 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 34 20 34 18 34 37 38 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = aacute.ss02;
},
{
glyphname = abreve.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(427,750,l),
(427,712,o),
(385,673,o),
(339,673,qs),
(292,673,o),
(250,712,o),
(250,750,q),
(196,750,l),
(196,733,ls),
(196,675,o),
(272,602,o),
(339,602,qs),
(406,602,o),
(481,675,o),
(481,732,qs),
(481,750,l)
);
},
{
closed = 1;
nodes = (
(520,0,l),
(520,321,ls),
(520,395,o),
(461,501,o),
(358,557,o),
(293,557,qs),
(194,557,o),
(69,447,o),
(57,357,q),
(146,357,l),
(156,414,o),
(231,478,o),
(289,478,qs),
(353,478,o),
(426,396,o),
(428,325,q),
(259,325,ls),
(153,325,o),
(43,228,o),
(43,153,qs),
(43,106,o),
(90,32,o),
(174,-10,o),
(227,-10,qs),
(293,-10,o),
(403,52,o),
(428,99,q),
(428,0,l)
);
},
{
closed = 1;
nodes = (
(135,201,o),
(197,251,o),
(259,251,qs),
(428,251,l),
(428,242,ls),
(428,188,o),
(375,110,o),
(291,70,o),
(245,70,qs),
(194,70,o),
(135,119,o),
(135,159,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
16 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 7 5 6 5 7 6 131 3 1 1 2 1 137 0 11 0 5 7 11 5 107 0 0 0 2 1 0 2 109 0 9 9 21 77 0 10 10 4 97 0 4 4 21 77 0 6 6 8 97 0 8 8 20 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 7 5 6 5 7 6 131 3 1 1 2 1 137 0 11 0 5 7 11 5 107 0 6 0 8 0 6 8 109 0 0 0 2 1 0 2 109 0 9 9 21 77 0 10 10 4 97 0 4 4 21 10 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
53 51 47 45 43 42 34 18 34 37 35 18 34 19 34 12 7 31 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = abreve.ss02;
},
{
glyphname = acircumflex.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(477,669,l),
(339,752,l),
(200,669,l),
(200,597,l),
(339,682,l),
(477,597,l)
);
},
{
closed = 1;
nodes = (
(520,0,l),
(520,321,ls),
(520,395,o),
(461,501,o),
(358,557,o),
(293,557,qs),
(194,557,o),
(69,447,o),
(57,357,q),
(146,357,l),
(156,414,o),
(231,478,o),
(289,478,qs),
(353,478,o),
(426,396,o),
(428,325,q),
(259,325,ls),
(153,325,o),
(43,228,o),
(43,153,qs),
(43,106,o),
(90,32,o),
(174,-10,o),
(227,-10,qs),
(293,-10,o),
(403,52,o),
(428,99,q),
(428,0,l)
);
},
{
closed = 1;
nodes = (
(135,201,o),
(197,251,o),
(259,251,qs),
(428,251,l),
(428,242,ls),
(428,188,o),
(375,110,o),
(291,70,o),
(245,70,qs),
(194,70,o),
(135,119,o),
(135,159,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
5 4 3 2 1 5 0 74 6 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 5 5 21 77 0 6 6 0 97 0 0 0 21 77 0 2 2 4 97 0 4 4 20 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 101 0 5 5 21 77 0 6 6 0 97 0 0 0 21 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 34 20 34 18 34 37 40 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = acircumflex.ss02;
},
{
glyphname = adieresis.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,622,o),
(310,652,o),
(310,674,qs),
(310,696,o),
(279,727,o),
(258,727,qs),
(236,727,o),
(205,696,o),
(205,674,qs),
(205,652,o),
(236,622,o),
(258,622,qs)
);
},
{
closed = 1;
nodes = (
(442,622,o),
(473,652,o),
(473,674,qs),
(473,696,o),
(442,727,o),
(420,727,qs),
(398,727,o),
(368,696,o),
(368,674,qs),
(368,652,o),
(398,622,o),
(420,622,qs)
);
},
{
closed = 1;
nodes = (
(520,0,l),
(520,321,ls),
(520,395,o),
(461,501,o),
(358,557,o),
(293,557,qs),
(194,557,o),
(69,447,o),
(57,357,q),
(146,357,l),
(156,414,o),
(231,478,o),
(289,478,qs),
(353,478,o),
(426,396,o),
(428,325,q),
(259,325,ls),
(153,325,o),
(43,228,o),
(43,153,qs),
(43,106,o),
(90,32,o),
(174,-10,o),
(227,-10,qs),
(293,-10,o),
(403,52,o),
(428,99,q),
(428,0,l)
);
},
{
closed = 1;
nodes = (
(135,201,o),
(197,251,o),
(259,251,qs),
(428,251,l),
(428,242,ls),
(428,188,o),
(375,110,o),
(291,70,o),
(245,70,qs),
(194,70,o),
(135,119,o),
(135,159,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
24 1 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 7 5 6 5 7 6 131 0 11 0 5 7 11 5 107 13 3 12 3 1 2 1 0 1 0 101 0 9 9 21 77 0 10 10 4 97 0 4 4 21 77 0 6 6 8 97 0 8 8 20 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 7 5 6 5 7 6 131 0 11 0 5 7 11 5 107 0 6 0 8 1 6 8 109 13 3 12 3 1 2 1 0 1 0 101 0 9 9 21 77 0 10 10 4 97 0 4 4 21 10 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
12 12 0 0 61 59 55 53 51 50 46 44 42 41 39 37 35 33 28 26 12 23 12 22 18 16 0 11 0 10 36 14 7 23 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = adieresis.ss02;
},
{
glyphname = agrave.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,703,l),
(436,589,l),
(436,657,l),
(223,782,l)
);
},
{
closed = 1;
nodes = (
(520,0,l),
(520,321,ls),
(520,395,o),
(461,501,o),
(358,557,o),
(293,557,qs),
(194,557,o),
(69,447,o),
(57,357,q),
(146,357,l),
(156,414,o),
(231,478,o),
(289,478,qs),
(353,478,o),
(426,396,o),
(428,325,q),
(259,325,ls),
(153,325,o),
(43,228,o),
(43,153,qs),
(43,106,o),
(90,32,o),
(174,-10,o),
(227,-10,qs),
(293,-10,o),
(403,52,o),
(428,99,q),
(428,0,l)
);
},
{
closed = 1;
nodes = (
(135,201,o),
(197,251,o),
(259,251,qs),
(428,251,l),
(428,242,ls),
(428,188,o),
(375,110,o),
(291,70,o),
(245,70,qs),
(194,70,o),
(135,119,o),
(135,159,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 2 1 0 4 0 74 4 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 5 5 21 77 0 6 6 0 97 0 0 0 21 77 0 2 2 4 97 0 4 4 20 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 101 0 5 5 21 77 0 6 6 0 97 0 0 0 21 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 34 20 34 18 34 37 38 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = agrave.ss02;
},
{
glyphname = amacron.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,641,l),
(515,641,l),
(515,709,l),
(163,709,l)
);
},
{
closed = 1;
nodes = (
(520,0,l),
(520,321,ls),
(520,395,o),
(461,501,o),
(358,557,o),
(293,557,qs),
(194,557,o),
(69,447,o),
(57,357,q),
(146,357,l),
(156,414,o),
(231,478,o),
(289,478,qs),
(353,478,o),
(426,396,o),
(428,325,q),
(259,325,ls),
(153,325,o),
(43,228,o),
(43,153,qs),
(43,106,o),
(90,32,o),
(174,-10,o),
(227,-10,qs),
(293,-10,o),
(403,52,o),
(428,99,q),
(428,0,l)
);
},
{
closed = 1;
nodes = (
(135,201,o),
(197,251,o),
(259,251,qs),
(428,251,l),
(428,242,ls),
(428,188,o),
(375,110,o),
(291,70,o),
(245,70,qs),
(194,70,o),
(135,119,o),
(135,159,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 5 3 4 3 5 4 131 0 9 0 3 5 9 3 107 0 0 10 1 1 0 1 99 0 7 7 21 77 0 8 8 2 97 0 2 2 21 77 0 4 4 6 97 0 6 6 20 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 5 3 4 3 5 4 131 0 9 0 3 5 9 3 107 0 4 0 6 0 4 6 109 0 0 10 1 1 0 1 99 0 7 7 21 77 0 8 8 2 97 0 2 2 21 8 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
0 0 41 39 35 33 31 30 26 24 22 21 19 17 15 13 8 6 0 3 0 3 17 11 7 23 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = amacron.ss02;
},
{
glyphname = aogonek.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,-206,o),
(530,-192,q),
(530,-132,l),
(493,-145,o),
(465,-145,qs),
(438,-145,o),
(406,-120,o),
(406,-97,qs),
(406,-56,o),
(466,-27,qs),
(521,0,l),
(520,2,l),
(520,321,ls),
(520,395,o),
(461,501,o),
(358,557,o),
(293,557,qs),
(194,557,o),
(69,447,o),
(57,357,q),
(146,357,l),
(156,414,o),
(231,478,o),
(289,478,qs),
(353,478,o),
(426,396,o),
(428,325,q),
(259,325,ls),
(153,325,o),
(43,228,o),
(43,153,qs),
(43,106,o),
(90,32,o),
(174,-10,o),
(227,-10,qs),
(293,-10,o),
(403,52,o),
(428,99,q),
(428,16,l),
(331,-35,o),
(331,-106,qs),
(331,-157,o),
(402,-206,o),
(453,-206,qs)
);
},
{
closed = 1;
nodes = (
(135,201,o),
(197,251,o),
(259,251,qs),
(428,251,l),
(428,242,ls),
(428,188,o),
(375,110,o),
(291,70,o),
(245,70,qs),
(194,70,o),
(135,119,o),
(135,159,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
41 40 31 5 4 5 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 3 1 2 1 3 2 131 9 1 6 0 5 0 6 5 109 0 8 0 1 3 8 1 107 0 7 7 0 97 0 0 0 21 77 0 2 2 4 97 0 4 4 20 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 1 2 1 3 2 131 9 1 6 0 5 0 6 5 109 0 8 0 1 3 8 1 107 0 2 0 4 2 4 101 0 7 7 0 97 0 0 0 21 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
0 0 53 51 47 45 0 43 0 42 42 34 18 34 37 39 10 7 28 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = aogonek.ss02;
},
{
glyphname = aring.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(294,817,o),
(232,759,o),
(232,712,qs),
(232,665,o),
(294,607,o),
(339,607,qs),
(385,607,o),
(446,664,o),
(446,712,qs),
(446,760,o),
(385,817,o),
(339,817,qs)
);
},
{
closed = 1;
nodes = (
(316,656,o),
(285,688,o),
(285,713,qs),
(285,738,o),
(316,769,o),
(339,769,qs),
(362,769,o),
(393,738,o),
(393,713,qs),
(393,688,o),
(362,656,o),
(339,656,qs)
);
},
{
closed = 1;
nodes = (
(520,0,l),
(520,321,ls),
(520,395,o),
(461,501,o),
(358,557,o),
(293,557,qs),
(194,557,o),
(69,447,o),
(57,357,q),
(146,357,l),
(156,414,o),
(231,478,o),
(289,478,qs),
(353,478,o),
(426,396,o),
(428,325,q),
(259,325,ls),
(153,325,o),
(43,228,o),
(43,153,qs),
(43,106,o),
(90,32,o),
(174,-10,o),
(227,-10,qs),
(293,-10,o),
(403,52,o),
(428,99,q),
(428,0,l)
);
},
{
closed = 1;
nodes = (
(135,201,o),
(197,251,o),
(259,251,qs),
(428,251,l),
(428,242,ls),
(428,188,o),
(375,110,o),
(291,70,o),
(245,70,qs),
(194,70,o),
(135,119,o),
(135,159,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
24 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 7 5 6 5 7 6 131 0 11 0 5 7 11 5 107 0 0 13 1 3 2 0 3 109 0 2 12 1 1 2 1 101 0 9 9 21 77 0 10 10 4 97 0 4 4 21 77 0 6 6 8 97 0 8 8 20 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 7 5 6 5 7 6 131 0 11 0 5 7 11 5 107 0 6 0 8 0 6 8 109 0 0 13 1 3 2 0 3 109 0 2 12 1 1 2 1 101 0 9 9 21 77 0 10 10 4 97 0 4 4 21 10 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
12 12 0 0 61 59 55 53 51 50 46 44 42 41 39 37 35 33 28 26 12 23 12 22 18 16 0 11 0 10 36 14 7 23 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = aring.ss02;
},
{
glyphname = atilde.ss02;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,629,o),
(271,651,o),
(288,651,qs),
(301,651,o),
(320,641,o),
(336,631,qs),
(354,618,o),
(383,605,o),
(402,605,qs),
(442,605,o),
(496,659,o),
(502,709,q),
(450,709,l),
(447,688,o),
(423,666,o),
(406,666,qs),
(393,666,o),
(371,677,o),
(357,687,qs),
(338,699,o),
(311,712,o),
(292,712,qs),
(252,712,o),
(199,658,o),
(192,607,q),
(245,607,l)
);
},
{
closed = 1;
nodes = (
(520,0,l),
(520,321,ls),
(520,395,o),
(461,501,o),
(358,557,o),
(293,557,qs),
(194,557,o),
(69,447,o),
(57,357,q),
(146,357,l),
(156,414,o),
(231,478,o),
(289,478,qs),
(353,478,o),
(426,396,o),
(428,325,q),
(259,325,ls),
(153,325,o),
(43,228,o),
(43,153,qs),
(43,106,o),
(90,32,o),
(174,-10,o),
(227,-10,qs),
(293,-10,o),
(403,52,o),
(428,99,q),
(428,0,l)
);
},
{
closed = 1;
nodes = (
(135,201,o),
(197,251,o),
(259,251,qs),
(428,251,l),
(428,242,ls),
(428,188,o),
(375,110,o),
(291,70,o),
(245,70,qs),
(194,70,o),
(135,119,o),
(135,159,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
26 1 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 9 7 8 7 9 8 131 0 13 0 7 9 13 7 107 14 5 2 3 0 1 0 3 1 109 0 4 2 1 0 4 0 101 0 11 11 21 77 0 12 12 6 97 0 6 6 21 77 0 8 8 10 97 0 10 10 20 10 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
0 9 7 8 7 9 8 131 0 2 1 0 1 2 0 131 0 13 0 7 9 13 7 107 14 5 2 3 0 1 2 3 1 109 0 4 0 0 4 0 101 0 11 11 21 77 0 12 12 6 97 0 6 6 21 77 0 8 8 10 97 0 10 10 20 10 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 9 7 8 7 9 8 131 0 13 0 7 9 13 7 107 14 5 2 3 0 1 0 3 1 109 0 4 2 1 0 4 0 101 0 11 11 21 77 0 12 12 6 97 0 6 6 21 77 0 8 8 10 97 0 10 10 20 10 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 9 7 8 7 9 8 131 0 13 0 7 9 13 7 107 0 8 0 10 3 8 10 109 14 5 2 3 0 1 0 3 1 109 0 4 2 1 0 4 0 101 0 11 11 21 77 0 12 12 6 97 0 6 6 21 12 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
0 0 63 61 57 55 53 52 48 46 44 43 41 39 37 35 30 28 0 25 0 25 36 34 18 36 34 15 7 27 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = atilde.ss02;
},
{
glyphname = ampersand.ss03;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,531,o),
(191,460,o),
(227,415,qs),
(237,404,l),
(229,404,ls),
(177,404,o),
(89,353,o),
(37,261,o),
(37,201,qs),
(37,140,o),
(93,45,o),
(188,-8,o),
(244,-8,qs),
(316,-8,o),
(425,78,o),
(440,144,q),
(556,0,l),
(665,0,l),
(292,469,ls),
(268,499,o),
(248,544,o),
(248,570,qs),
(248,606,o),
(296,656,o),
(336,656,qs),
(378,656,o),
(428,605,o),
(428,564,qs),
(428,543,o),
(422,528,q),
(512,528,l),
(519,551,o),
(519,573,qs),
(519,614,o),
(477,688,o),
(394,733,o),
(336,733,qs),
(280,733,o),
(199,687,o),
(157,613,o),
(157,571,qs)
);
},
{
closed = 1;
nodes = (
(118,260,o),
(188,332,o),
(240,332,qs),
(274,332,o),
(333,297,o),
(369,235,o),
(369,198,qs),
(369,143,o),
(297,68,o),
(245,68,qs),
(192,68,o),
(118,144,o),
(118,202,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
24 1 0 73 0 1 5 2 5 1 2 131 0 7 0 5 1 7 5 109 0 2 0 0 2 0 101 0 3 3 21 77 0 6 6 4 97 0 4 4 21 6 78 37 39 22 35 22 36 21 34 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = ampersand.ss03;
},
{
glyphname = two.ss04;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(57,0,l),
(538,0,l),
(538,76,l),
(190,76,l),
(335,216,ls),
(437,315,o),
(519,451,o),
(519,519,qs),
(519,612,o),
(398,725,o),
(293,725,qs),
(227,725,o),
(123,671,o),
(61,563,o),
(60,486,q),
(148,486,l),
(150,560,o),
(224,647,o),
(292,647,qs),
(359,647,o),
(427,578,o),
(427,519,qs),
(427,464,o),
(356,354,o),
(266,267,qs),
(57,65,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
25 1 2 73 0 1 3 0 3 1 0 131 0 0 0 2 0 2 101 0 3 3 4 95 0 4 4 21 3 78 17 22 35 18 37 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = two.ss04;
},
{
glyphname = three.ss04;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(412,-5,o),
(543,117,o),
(543,221,qs),
(543,326,o),
(420,442,o),
(310,444,q),
(510,654,l),
(510,724,l),
(94,724,l),
(94,648,l),
(401,648,l),
(201,437,l),
(201,372,l),
(303,372,ls),
(372,372,o),
(452,292,o),
(452,221,qs),
(452,151,o),
(370,71,o),
(300,71,qs),
(231,71,o),
(150,147,o),
(144,208,q),
(53,208,l),
(61,106,o),
(195,-5,o),
(298,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
19 14 2 4 73 0 0 1 2 1 0 2 131 0 2 0 5 3 2 5 109 0 3 0 4 3 4 99 0 1 1 6 97 7 1 6 6 21 1 78 0 0 0 26 0 25 18 17 18 36 34 18 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = three.ss04;
},
{
glyphname = six.ss04;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(551,303,o),
(492,410,o),
(386,469,o),
(317,469,qs),
(270,469,o),
(231,454,q),
(418,723,l),
(319,723,l),
(135,454,ls),
(58,342,o),
(58,236,qs),
(58,167,o),
(120,55,o),
(233,-9,o),
(306,-9,qs),
(377,-9,o),
(489,54,o),
(551,164,o),
(551,234,qs)
);
},
{
closed = 1;
nodes = (
(381,401,o),
(468,310,o),
(468,234,qs),
(468,158,o),
(381,67,o),
(306,67,qs),
(231,67,o),
(141,159,o),
(141,235,qs),
(141,310,o),
(231,401,o),
(306,401,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
12 1 1 73 0 1 2 1 137 5 1 4 0 2 1 4 2 109 0 3 3 0 97 0 0 0 21 3 78 19 19 19 30 19 29 40 34 22 34 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = six.ss04;
},
{
glyphname = nine.ss04;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(42,413,o),
(101,306,o),
(208,246,o),
(279,246,qs),
(323,246,o),
(362,260,q),
(174,-4,l),
(275,-4,l),
(459,262,ls),
(499,319,o),
(536,426,o),
(536,483,qs),
(536,552,o),
(474,664,o),
(362,728,o),
(289,728,qs),
(217,728,o),
(105,665,o),
(42,554,o),
(42,483,qs)
);
},
{
closed = 1;
nodes = (
(364,652,o),
(452,560,o),
(452,482,qs),
(452,405,o),
(364,313,o),
(289,313,qs),
(214,313,o),
(125,405,o),
(125,483,qs),
(125,560,o),
(214,652,o),
(289,652,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
13 1 0 73 0 2 0 3 4 2 3 109 5 1 4 0 0 4 0 101 0 1 1 21 1 78 20 20 20 31 20 30 40 34 23 34 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = nine.ss04;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = SemiBold;
properties = (
{
key = postscriptFullName;
value = "Amoeba Sans-SemiBold";
},
{
key = postscriptFontName;
value = "AmoebaSans-SemiBold";
}
);
weightClass = 600;
}
);
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2020 The Poppins Project Authors (https://github.com/itfoundry/Poppins)";
}
);
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Indian Type Foundry & Digital Amoeba";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Ninad Kale (Devanagari), Jonny Pinhorn (Latin), M Vidiantara Saputra";
}
);
},
{
key = licenseURL;
value = "http://scripts.sil.org/OFL";
},
{
key = sampleTexts;
values = (
{
language = ENG;
value = ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789;
}
);
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = "https://indiantypefoundry.com";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 3;
versionMinor = 200;
}
