{
.appVersion = "3134";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = ITFO;
},
{
name = panose;
value = (
0,
0,
5,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
15
);
},
{
name = codePageRanges;
value = (
"1252",
"1250",
"1254",
"1257",
"bit 29"
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
.null,
CR,
space,
dvR,
dvKx,
dvGx,
dvJx,
uni20A8,
uni20B9,
uni200C,
uni200D,
uni25CC,
dvEyelash,
dvRashtrasign,
dvKx_RA,
dvGx_RA,
dvJx_RA,
dvKx_R,
dvGx_R,
dvJx_R,
dvKx_KxA,
dvKx_TA,
dvKx_PHA,
dvKx_PHxA,
dvKx_BA,
dvKx_MA,
dvJx_JxA,
dvJx_YA,
dvEyelash_YA,
dvEyelash_HA,
dvmII.aLong,
dvmII_Anusvara,
dvmII_Reph,
dvmII_Reph_Anusvara,
dvmII_Anusvara.aLong,
dvmII_Reph.aLong,
dvmII_Reph_Anusvara.aLong,
dvmE_Anusvara,
dvmE_Reph,
dvmE_Reph_Anusvara,
dvmAI_Anusvara,
dvmAI_Reph,
dvmAI_Reph_Anusvara,
dvmO_Anusvara,
dvmO_Reph,
dvmO_Reph_Anusvara,
dvmAU_Anusvara,
dvmAU_Reph,
dvmAU_Reph_Anusvara,
dvmEcandra_Anusvara,
dvmOcandra_Anusvara,
dvRA_mU,
dvRA_mUU,
dvmI.a01,
dvmI.a02,
dvmI.a03,
dvmI.a04,
dvmI.a05,
dvmI.a06,
dvmI.a07,
dvmI.a08,
dvmI.a09,
dvmI.a10,
dvmI.a11,
dvmI.a12,
dvmI.a13,
dvmI.a14,
dvmI.a15,
dvmI.a16,
dvmI.a17,
dvmI.a18,
dvmI.a19,
dvmI.a20,
dvmI.a21,
dvmI.a22,
dvmI.a23,
dvmI.a24,
exclam,
quotedbl,
numbersign,
dollar,
percent,
ampersand,
quotesingle,
parenleft,
parenright,
asterisk,
plus,
comma,
hyphen,
period,
slash,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
colon,
semicolon,
less,
equal,
greater,
question,
at,
A,
B,
C,
D,
E,
F,
G,
H,
I,
J,
K,
L,
M,
N,
O,
P,
Q,
R,
S,
T,
U,
V,
W,
X,
Y,
Z,
bracketleft,
backslash,
bracketright,
asciicircum,
underscore,
grave,
a,
b,
c,
d,
e,
f,
g,
h,
i,
j,
k,
l,
m,
n,
o,
p,
q,
r,
s,
t,
u,
v,
w,
x,
y,
z,
braceleft,
bar,
braceright,
asciitilde,
uni00A0,
exclamdown,
cent,
sterling,
currency,
yen,
brokenbar,
section,
dieresis,
copyright,
ordfeminine,
guillemotleft,
logicalnot,
uni00AD,
registered,
macron,
degree,
plusminus,
uni00B2,
uni00B3,
acute,
uni00B5,
paragraph,
periodcentered,
cedilla,
uni00B9,
ordmasculine,
guillemotright,
onequarter,
onehalf,
threequarters,
questiondown,
Agrave,
Aacute,
Acircumflex,
Atilde,
Adieresis,
Aring,
AE,
Ccedilla,
Egrave,
Eacute,
Ecircumflex,
Edieresis,
Igrave,
Iacute,
Icircumflex,
Idieresis,
Eth,
Ntilde,
Ograve,
Oacute,
Ocircumflex,
Otilde,
Odieresis,
multiply,
Oslash,
Ugrave,
Uacute,
Ucircumflex,
Udieresis,
Yacute,
Thorn,
germandbls,
agrave,
aacute,
acircumflex,
atilde,
adieresis,
aring,
ae,
ccedilla,
egrave,
eacute,
ecircumflex,
edieresis,
igrave,
iacute,
icircumflex,
idieresis,
eth,
ntilde,
ograve,
oacute,
ocircumflex,
otilde,
odieresis,
divide,
oslash,
ugrave,
uacute,
ucircumflex,
udieresis,
yacute,
thorn,
ydieresis,
Amacron,
amacron,
Abreve,
abreve,
Aogonek,
aogonek,
Cacute,
cacute,
Cdotaccent,
cdotaccent,
Ccaron,
ccaron,
Dcaron,
dcaron,
Dcroat,
dcroat,
Emacron,
emacron,
Ebreve,
ebreve,
Edotaccent,
edotaccent,
Eogonek,
eogonek,
Ecaron,
ecaron,
Gbreve,
gbreve,
Gdotaccent,
gdotaccent,
uni0122,
uni0123,
Itilde,
itilde,
Imacron,
imacron,
uni012C,
uni012D,
Iogonek,
iogonek,
Idotaccent,
dotlessi,
uni0136,
uni0137,
Lacute,
lacute,
uni013B,
uni013C,
Lcaron,
lcaron,
Ldot,
ldot,
Lslash,
lslash,
Nacute,
nacute,
uni0145,
uni0146,
Ncaron,
ncaron,
Omacron,
omacron,
uni014E,
uni014F,
Ohungarumlaut,
ohungarumlaut,
OE,
oe,
Racute,
racute,
uni0156,
uni0157,
Rcaron,
rcaron,
Sacute,
sacute,
uni015E,
uni015F,
Scaron,
scaron,
uni0162,
uni0163,
Tcaron,
tcaron,
Utilde,
utilde,
Umacron,
umacron,
Ubreve,
ubreve,
Uring,
uring,
Uhungarumlaut,
uhungarumlaut,
Uogonek,
uogonek,
Wcircumflex,
wcircumflex,
Ycircumflex,
ycircumflex,
Ydieresis,
Zacute,
zacute,
Zdotaccent,
zdotaccent,
Zcaron,
zcaron,
uni018F,
florin,
uni01FC,
uni01FD,
uni0218,
uni0219,
uni021A,
uni021B,
uni0259,
uni02BC,
circumflex,
caron,
uni02C9,
breve,
dotaccent,
ring,
ogonek,
tilde,
hungarumlaut,
Wgrave,
wgrave,
Wacute,
wacute,
Wdieresis,
wdieresis,
uni1EBC,
uni1EBD,
Ygrave,
ygrave,
uni1EF8,
uni1EF9,
endash,
emdash,
quoteleft,
quoteright,
quotesinglbase,
quotedblleft,
quotedblright,
quotedblbase,
dagger,
daggerdbl,
bullet,
ellipsis,
perthousand,
guilsinglleft,
guilsinglright,
fraction,
Euro,
uni20BA,
uni20BD,
uni2113,
trademark,
uni2126,
estimated,
partialdiff,
uni2206,
product,
summation,
minus,
uni2215,
uni2219,
radical,
infinity,
integral,
approxequal,
notequal,
lessequal,
greaterequal,
lozenge,
fi,
fl,
exclam.ss01,
comma.ss01,
period.ss01,
colon.ss01,
semicolon.ss01,
question.ss01,
exclamdown.ss01,
periodcentered.ss01,
questiondown.ss01,
divide.ss01,
uni02BC.ss01,
quoteleft.ss01,
quoteright.ss01,
quotedblleft.ss01,
quotedblright.ss01,
ellipsis.ss01,
a.ss02,
aacute.ss02,
abreve.ss02,
acircumflex.ss02,
adieresis.ss02,
agrave.ss02,
amacron.ss02,
aogonek.ss02,
aring.ss02,
atilde.ss02,
ampersand.ss03,
two.ss04,
three.ss04,
six.ss04,
nine.ss04
);
}
);
date = "2017-12-22 01:45:05 +0000";
familyName = "Amoeba Sans";
featurePrefixes = (
{
code = "lookup SUB_0 {
	sub L periodcentered by Ldot;
	sub l periodcentered by ldot;
} SUB_0;
lookup SUB_1 {
	sub A by ordfeminine;
	sub O by ordmasculine;
	sub a by ordfeminine;
	sub o by ordmasculine;
} SUB_1;
";
name = Prefix;
}
);
features = (
{
code = "script DFLT;
language dflt;
lookup SUB_2 {
	sub exclam by exclam.ss01;
	sub comma by comma.ss01;
	sub period by period.ss01;
	sub colon by colon.ss01;
	sub semicolon by semicolon.ss01;
	sub question by question.ss01;
	sub exclamdown by exclamdown.ss01;
	sub periodcentered by periodcentered.ss01;
	sub questiondown by questiondown.ss01;
	sub divide by divide.ss01;
	sub quoteleft by quoteleft.ss01;
	sub quoteright by quoteright.ss01;
	sub quotedblleft by quotedblleft.ss01;
	sub quotedblright by quotedblright.ss01;
	sub ellipsis by ellipsis.ss01;
} SUB_2;
script dev2;
language dflt;
lookup SUB_2;
script deva;
language dflt;
lookup SUB_2;
";
tag = ss01;
},
{
code = "script DFLT;
language dflt;
lookup SUB_3 {
	sub a by a.ss02;
	sub agrave by agrave.ss02;
	sub aacute by aacute.ss02;
	sub acircumflex by acircumflex.ss02;
	sub atilde by atilde.ss02;
	sub adieresis by adieresis.ss02;
	sub aring by aring.ss02;
	sub amacron by amacron.ss02;
	sub abreve by abreve.ss02;
	sub aogonek by aogonek.ss02;
} SUB_3;
script dev2;
language dflt;
lookup SUB_3;
script deva;
language dflt;
lookup SUB_3;
";
tag = ss02;
},
{
code = "script DFLT;
language dflt;
lookup SUB_4 {
	sub ampersand by ampersand.ss03;
} SUB_4;
script dev2;
language dflt;
lookup SUB_4;
script deva;
language dflt;
lookup SUB_4;
";
tag = ss03;
},
{
code = "script DFLT;
language dflt;
lookup SUB_5 {
	sub two by two.ss04;
	sub three by three.ss04;
	sub six by six.ss04;
	sub nine by nine.ss04;
} SUB_5;
script dev2;
language dflt;
lookup SUB_5;
script deva;
language dflt;
lookup SUB_5;
";
tag = ss04;
},
{
code = "script DFLT;
language dflt;
lookup SUB_6 {
	sub fi by f i;
	sub fl by f l;
} SUB_6;
script dev2;
language dflt;
lookup SUB_6;
script deva;
language dflt;
lookup SUB_6;
script latn;
language dflt;
lookup SUB_6;
language CAT;
lookup SUB_6;
";
tag = ccmp;
},
{
code = "script latn;
language CAT;
lookup SUB_7 {
	sub L' lookup SUB_0 periodcentered' L;
	sub l' lookup SUB_0 periodcentered' l;
} SUB_7;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_8 {
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
} SUB_8;
script dev2;
language dflt;
lookup SUB_8;
script deva;
language dflt;
lookup SUB_8;
script latn;
language dflt;
lookup SUB_8;
language CAT;
lookup SUB_8;
";
tag = sups;
},
{
code = "script DFLT;
language dflt;
lookup SUB_9 {
	sub one slash two by onehalf;
	sub one slash four by onequarter;
	sub three slash four by threequarters;
} SUB_9;
script dev2;
language dflt;
lookup SUB_9;
script deva;
language dflt;
lookup SUB_9;
script latn;
language dflt;
lookup SUB_9;
language CAT;
lookup SUB_9;
";
tag = frac;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	@SUB_10_0_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_10_0_BT_0 [A a]' lookup SUB_1;
	@SUB_10_1_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_10_1_BT_0 [O o]' lookup SUB_1;
} SUB_10;
script dev2;
language dflt;
lookup SUB_10;
script deva;
language dflt;
lookup SUB_10;
script latn;
language dflt;
lookup SUB_10;
language CAT;
lookup SUB_10;
";
tag = ordn;
},
{
code = "script DFLT;
language dflt;
lookup SUB_11 {
	sub f i by fi;
	sub f l by fl;
} SUB_11;
script dev2;
language dflt;
lookup SUB_11;
script deva;
language dflt;
lookup SUB_11;
script latn;
language dflt;
lookup SUB_11;
language CAT;
lookup SUB_11;
";
tag = liga;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 1050;
},
{
name = typoDescender;
value = -350;
},
{
name = typoLineGap;
value = 100;
},
{
name = winAscent;
value = 1135;
},
{
name = winDescent;
value = 627;
},
{
name = hheaAscender;
value = 1050;
},
{
name = hheaDescender;
value = -350;
},
{
name = strikeoutPosition;
value = 328;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 5 values pushed */\0120 37 0 3 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01242 4 26 8 18 4 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 8 values pushed */\01246 2 34 6 22 2 3 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 10 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\0122752 1728 1216 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 13 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 5 values pushed */\01264 64 64 3 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01244 2 28 6 20 2 3 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    0,\012    24,\012    24,\012    24,\012    24,\012    540,\012    \"-9\",\012    540,\012    \"-9\",\012    153,\012    153,\012    113,\012    113,\012    717,\012    0,\012    760,\012    568,\012    0,\012    \"-279\",\012    726,\012    0,\012    785,\012    577,\012    0,\012    \"-279\",\012    24,\012    24,\012    24,\012    24,\012    710,\012    352,\012    710,\012    347\012)";
}
);
id = m01;
metricValues = (
{
pos = 1050;
},
{
pos = 698;
},
{
pos = 548;
},
{
},
{
pos = -350;
},
{
}
);
name = "SemiBold Italic";
}
);
glyphs = (
{
glyphname = .notdef;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-62,0,l),
(438,0,l),
(562,700,l),
(62,700,l)
);
},
{
closed = 1;
nodes = (
(95,605,l),
(220,350,l),
(5,95,l)
);
},
{
closed = 1;
nodes = (
(242,305,l),
(367,50,l),
(27,50,l)
);
},
{
closed = 1;
nodes = (
(473,650,l),
(258,395,l),
(133,650,l)
);
},
{
closed = 1;
nodes = (
(495,605,l),
(405,95,l),
(280,350,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
15 14 13 8 6 5 6 2 3 1 76 4 1 1 0 3 2 1 3 103 5 1 2 0 0 2 87 5 1 2 2 0 95 0 0 2 0 79 7 7 0 0 12 11 7 9 7 9 0 3 0 3 17 6 6 23 
CALL[ ]	/* CallFunction */";
};
width = 500;
}
);
note = ".notdef";
},
{
glyphname = .null;
layers = (
{
layerId = m01;
width = 0;
}
);
note = ".null";
unicode = 0;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 267;
}
);
note = CR;
unicode = 13;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 267;
}
);
note = space;
unicode = 32;
},
{
glyphname = dvR;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,-290,l),
(349,-290,l),
(260,-91,l),
(176,-91,l)
);
},
{
closed = 1;
nodes = (
(51,670,l),
(437,670,l),
(421,574,ls),
(391,407,o),
(220,407,qs),
(115,407,l),
(80,207,ls),
(63,109,o),
(143,-9,o),
(240,-9,qs),
(329,-9,o),
(451,101,o),
(468,194,qs),
(471,211,l),
(391,211,l),
(387,192,ls),
(377,134,o),
(303,63,o),
(250,63,qs),
(194,63,o),
(150,139,o),
(161,202,qs),
(185,339,l),
(236,339,ls),
(350,339,o),
(483,460,o),
(504,574,qs),
(520,670,l),
(640,670,l),
(653,740,l),
(64,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
0 5 3 4 3 5 4 128 10 1 1 6 0 6 1 0 128 0 0 0 132 11 1 9 8 1 2 7 9 2 103 0 7 0 3 5 7 3 105 0 4 6 6 4 89 0 4 4 6 97 0 6 4 6 81 4 4 0 0 4 34 4 34 33 32 30 28 25 23 20 19 16 14 11 9 6 5 0 3 0 3 17 12 6 23 
CALL[ ]	/* CallFunction */";
};
width = 535;
}
);
note = dvR;
},
{
glyphname = dvKx;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(486,0,l),
(543,322,ls),
(555,389,o),
(648,487,o),
(722,487,qs),
(785,487,o),
(854,401,o),
(841,330,q),
(926,330,l),
(938,397,o),
(903,501,o),
(818,559,o),
(758,559,qs),
(695,559,o),
(596,501,o),
(566,453,q),
(604,670,l),
(986,670,l),
(999,740,l),
(47,740,l),
(34,670,l),
(524,670,l),
(487,457,l),
(472,503,o),
(392,559,o),
(328,559,qs),
(265,559,o),
(157,503,o),
(83,399,o),
(71,330,qs),
(59,260,o),
(94,155,o),
(181,98,o),
(243,98,qs),
(309,98,o),
(410,155,o),
(442,202,q),
(406,0,l)
);
},
{
closed = 1;
nodes = (
(219,-95,o),
(257,-63,o),
(261,-40,qs),
(265,-16,o),
(239,17,o),
(215,17,qs),
(191,17,o),
(153,-16,o),
(149,-40,qs),
(145,-63,o),
(171,-95,o),
(195,-95,qs)
);
},
{
closed = 1;
nodes = (
(214,168,o),
(142,255,o),
(155,330,qs),
(168,401,o),
(272,487,o),
(338,487,qs),
(389,487,o),
(451,441,o),
(471,368,o),
(464,328,qs),
(457,289,o),
(410,216,o),
(333,168,o),
(282,168,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 100 values pushed */
21 14 2 6 7 0 1 12 6 2 76 0 6 7 12 7 6 12 128 0 8 9 10 9 8 10 128 0 3 4 1 2 1 3 2 103 5 1 1 11 1 7 6 1 7 105 14 1 12 0 0 9 12 0 105 0 9 8 10 9 89 0 9 9 10 97 13 1 10 9 10 81 50 50 38 38 50 63 50 62 58 56 38 49 38 48 44 42 19 34 19 35 17 17 19 38 34 15 6 31 
CALL[ ]	/* CallFunction */";
};
width = 738;
}
);
note = dvKx;
},
{
glyphname = dvGx;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(23,670,l),
(345,670,l),
(297,397,ls),
(290,353,o),
(242,296,o),
(196,296,qs),
(153,296,o),
(125,353,o),
(132,394,qs),
(137,425,l),
(55,425,l),
(50,395,ls),
(36,317,o),
(106,224,o),
(187,224,qs),
(270,224,o),
(368,322,o),
(382,400,qs),
(429,670,l),
(556,670,l),
(569,740,l),
(36,740,l)
);
},
{
closed = 1;
nodes = (
(180,28,o),
(218,60,o),
(222,83,qs),
(226,107,o),
(200,140,o),
(176,140,qs),
(152,140,o),
(114,107,o),
(110,83,qs),
(106,60,o),
(132,28,o),
(156,28,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
0 2 0 3 0 2 3 128 8 1 5 4 1 0 2 5 0 103 0 3 0 1 6 3 1 105 0 6 7 7 6 89 0 6 6 7 97 9 1 7 6 7 81 22 22 0 0 22 33 22 32 28 26 0 21 0 21 19 35 19 35 17 10 6 27 
CALL[ ]	/* CallFunction */";
};
width = 480;
}
);
note = dvGx;
},
{
glyphname = dvJx;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(320,131,o),
(445,242,o),
(461,332,qs),
(477,427,l),
(709,427,l),
(722,499,l),
(409,499,l),
(380,334,ls),
(370,276,o),
(296,204,o),
(244,204,qs),
(194,204,o),
(148,276,o),
(158,334,qs),
(187,499,l),
(103,499,l),
(74,332,ls),
(58,242,o),
(140,131,o),
(230,131,qs)
);
},
{
closed = 1;
nodes = (
(31,670,l),
(752,670,l),
(765,740,l),
(44,740,l)
);
},
{
closed = 1;
nodes = (
(224,-60,o),
(262,-28,o),
(266,-5,qs),
(270,19,o),
(244,52,o),
(220,52,qs),
(196,52,o),
(158,19,o),
(154,-5,qs),
(150,-28,o),
(176,-60,o),
(200,-60,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
10 1 6 0 5 0 6 5 103 2 1 0 0 3 1 0 3 103 0 1 9 1 4 7 1 4 105 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81 24 24 20 20 0 0 24 35 24 34 30 28 20 23 20 23 22 21 0 19 0 18 17 19 35 19 12 6 26 
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = dvJx;
},
{
glyphname = uni20A8;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,431,o),
(380,360,o),
(305,360,qs),
(171,360,l),
(218,625,l),
(352,625,ls),
(428,625,o),
(487,555,o),
(476,492,qs)
);
},
{
closed = 1;
nodes = (
(16,0,l),
(107,0,l),
(158,288,l),
(248,288,l),
(381,0,l),
(492,0,l),
(353,292,l),
(447,307,o),
(556,417,o),
(569,492,qs),
(585,582,o),
(482,697,o),
(364,697,qs),
(139,697,l)
);
},
{
closed = 1;
nodes = (
(612,346,o),
(653,287,o),
(720,261,o),
(778,247,qs),
(825,236,o),
(878,217,o),
(908,180,o),
(903,150,qs),
(896,111,o),
(830,64,o),
(777,64,qs),
(723,64,o),
(668,120,o),
(672,166,q),
(578,166,l),
(570,83,o),
(670,-9,o),
(764,-9,qs),
(822,-9,o),
(920,31,o),
(985,103,o),
(992,148,qs),
(1002,201,o),
(961,263,o),
(891,291,o),
(833,304,qs),
(786,315,o),
(735,333,o),
(705,369,o),
(711,399,qs),
(717,437,o),
(784,484,o),
(835,484,qs),
(889,484,o),
(938,429,o),
(934,383,q),
(1027,383,l),
(1036,464,o),
(943,557,o),
(854,557,qs),
(792,557,o),
(691,514,o),
(629,441,o),
(621,396,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 4 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 7 8 1 8 7 1 128 0 10 4 11 4 10 11 128 0 1 0 4 10 1 4 103 0 0 0 2 95 12 1 2 2 28 77 0 8 8 6 97 0 6 6 31 77 0 11 11 3 95 9 5 2 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 7 8 1 8 7 1 128 0 10 4 11 4 10 11 128 12 1 2 0 0 6 2 0 103 0 1 0 4 10 1 4 103 0 8 8 6 97 0 6 6 31 77 0 11 11 3 95 9 5 2 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 7 8 1 8 7 1 128 0 10 4 11 4 10 11 128 12 1 2 0 0 6 2 0 103 0 1 0 4 10 1 4 103 0 8 8 6 97 0 6 6 31 77 5 1 3 3 29 77 0 11 11 9 97 0 9 9 29 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 7 8 1 8 7 1 128 0 10 4 11 4 10 11 128 12 1 2 0 0 6 2 0 103 0 6 0 8 7 6 8 105 0 1 0 4 10 1 4 103 5 1 3 3 29 77 0 11 11 9 97 0 9 9 29 9 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
10 9 56 54 52 51 49 47 34 32 30 29 27 25 21 20 19 18 17 16 9 22 10 22 33 33 13 8 24 
CALL[ ]	/* CallFunction */";
};
width = 1109;
}
);
note = uni20A8;
unicode = 8360;
},
{
glyphname = uni20B9;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(102,631,l),
(431,631,l),
(415,541,l),
(412,523,l),
(83,523,l),
(71,457,l),
(396,457,l),
(380,404,o),
(321,355,o),
(209,340,o),
(95,340,q),
(70,199,ls),
(53,100,o),
(137,-10,o),
(236,-10,qs),
(332,-10,o),
(454,92,o),
(472,192,q),
(388,192,l),
(365,62,o),
(249,62,qs),
(131,62,o),
(155,197,qs),
(169,276,l),
(264,276,o),
(385,310,o),
(460,388,o),
(481,457,q),
(615,457,l),
(627,523,l),
(498,523,l),
(501,540,l),
(517,631,l),
(646,631,l),
(657,698,l),
(113,698,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 5 4 3 4 5 3 131 0 3 0 7 2 3 7 109 10 1 0 12 1 11 0 11 99 0 4 4 6 97 0 6 6 21 77 8 1 2 2 1 95 9 1 1 1 20 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
0 5 4 3 4 5 3 131 0 3 0 7 2 3 7 109 8 1 2 9 1 1 0 2 1 107 10 1 0 12 1 11 0 11 99 0 4 4 6 97 0 6 6 21 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 35 0 35 34 33 31 30 19 19 34 17 34 19 17 18 17 13 7 31 
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = uni20B9;
unicode = 8377;
},
{
glyphname = uni200C;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-68,-230,l),
(116,811,l),
(69,811,l),
(-115,-230,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni200C;
unicode = 8204;
},
{
glyphname = uni200D;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,593,l),
(102,688,l),
(215,784,l),
(188,816,l),
(75,721,l),
(-3,816,l),
(-42,783,l),
(37,688,l),
(-73,595,l),
(-46,562,l),
(36,635,l),
(-116,-230,l),
(-69,-230,l),
(83,635,l),
(142,560,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
14 13 12 11 10 9 8 7 6 5 4 3 0 13 0 74 0 0 0 118 17 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni200D;
unicode = 8205;
},
{
glyphname = uni25CC;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(586,428,o),
(566,451,o),
(547,451,qs),
(528,451,o),
(500,428,o),
(496,409,qs),
(493,390,o),
(513,367,o),
(532,367,qs),
(551,367,o),
(579,390,o),
(582,409,qs)
);
},
{
closed = 1;
nodes = (
(159,142,o),
(139,165,o),
(120,165,qs),
(101,165,o),
(73,142,o),
(70,123,qs),
(67,104,o),
(86,81,o),
(105,81,qs),
(124,81,o),
(153,104,o),
(156,123,qs)
);
},
{
closed = 1;
nodes = (
(244,66,o),
(224,89,o),
(205,89,qs),
(186,89,o),
(158,66,o),
(154,47,qs),
(151,28,o),
(171,5,o),
(190,5,qs),
(209,5,o),
(237,28,o),
(240,47,qs)
);
},
{
closed = 1;
nodes = (
(134,255,o),
(114,278,o),
(95,278,qs),
(76,278,o),
(48,255,o),
(45,236,qs),
(41,217,o),
(61,194,o),
(80,194,qs),
(99,194,o),
(127,217,o),
(131,236,qs)
);
},
{
closed = 1;
nodes = (
(365,52,o),
(345,75,o),
(326,75,qs),
(307,75,o),
(279,52,o),
(276,33,qs),
(273,14,o),
(293,-9,o),
(312,-9,qs),
(331,-9,o),
(359,14,o),
(362,33,qs)
);
},
{
closed = 1;
nodes = (
(170,376,o),
(151,399,o),
(132,399,qs),
(113,399,o),
(84,376,o),
(81,357,qs),
(78,338,o),
(98,315,o),
(117,315,qs),
(136,315,o),
(164,338,o),
(167,357,qs)
);
},
{
closed = 1;
nodes = (
(488,98,o),
(469,121,o),
(450,121,qs),
(431,121,o),
(402,98,o),
(399,79,qs),
(396,60,o),
(416,37,o),
(435,37,qs),
(454,37,o),
(482,60,o),
(485,79,qs)
);
},
{
closed = 1;
nodes = (
(264,475,o),
(244,498,o),
(225,498,qs),
(206,498,o),
(178,475,o),
(175,456,qs),
(171,437,o),
(191,414,o),
(210,414,qs),
(229,414,o),
(257,437,o),
(261,456,qs)
);
},
{
closed = 1;
nodes = (
(578,194,o),
(558,217,o),
(539,217,qs),
(520,217,o),
(492,194,o),
(489,175,qs),
(486,156,o),
(506,133,o),
(525,133,qs),
(544,133,o),
(572,156,o),
(575,175,qs)
);
},
{
closed = 1;
nodes = (
(388,517,o),
(368,540,o),
(349,540,qs),
(330,540,o),
(302,517,o),
(299,498,qs),
(296,479,o),
(316,456,o),
(335,456,qs),
(354,456,o),
(382,479,o),
(385,498,qs)
);
},
{
closed = 1;
nodes = (
(610,314,o),
(590,337,o),
(571,337,qs),
(552,337,o),
(524,314,o),
(520,295,qs),
(517,276,o),
(537,253,o),
(556,253,qs),
(575,253,o),
(603,276,o),
(606,295,qs)
);
},
{
closed = 1;
nodes = (
(507,502,o),
(487,525,o),
(468,525,qs),
(449,525,o),
(421,502,o),
(417,483,qs),
(414,464,o),
(434,441,o),
(453,441,qs),
(472,441,o),
(500,464,o),
(503,483,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 146 values pushed */
0 19 0 18 1 19 18 105 0 23 0 22 14 23 22 105 0 15 0 14 11 15 14 105 0 1 0 0 21 1 0 105 0 11 0 10 7 11 10 105 0 21 0 20 17 21 20 105 0 7 0 6 3 7 6 105 0 17 0 16 13 17 16 105 0 3 0 2 9 3 2 105 0 9 12 8 9 89 0 13 0 12 4 13 12 105 0 5 0 4 8 5 4 105 0 9 9 8 97 0 8 9 8 81 141 139 135 133 129 127 123 121 117 115 111 109 105 103 99 97 93 91 87 85 81 79 75 73 69 67 63 61 57 55 36 36 36 36 36 36 36 36 33 24 6 31 
CALL[ ]	/* CallFunction */";
};
width = 651;
}
);
note = uni25CC;
unicode = 9676;
},
{
glyphname = dvEyelash;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(331,435,ls),
(289,424,o),
(255,424,qs),
(187,424,o),
(100,488,o),
(111,558,q),
(31,558,l),
(15,457,o),
(136,362,o),
(232,362,qs),
(267,362,o),
(333,376,o),
(355,387,q),
(334,436,l)
);
},
{
closed = 1;
nodes = (
(-6,670,l),
(387,670,l),
(399,740,l),
(6,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
12 1 2 1 1 76 0 1 3 2 3 1 2 128 5 1 4 0 3 1 4 3 103 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 14 14 14 17 14 17 20 34 18 34 6 6 26 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvEyelash;
},
{
glyphname = dvRashtrasign;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-478,-97,l),
(-391,-97,l),
(-230,50,l),
(-121,-97,l),
(-34,-97,l),
(-168,82,l),
(-280,82,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
3 1 0 2 1 76 3 1 2 0 2 133 1 1 0 0 118 0 0 0 6 0 6 18 17 4 6 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvRashtrasign;
},
{
glyphname = dvKx_RA;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(530,0,l),
(587,322,ls),
(594,364,o),
(639,439,o),
(715,487,o),
(765,487,qs),
(829,487,o),
(898,401,o),
(885,330,qs),
(872,256,o),
(775,171,o),
(712,171,qs),
(686,171,o),
(671,175,q),
(659,109,l),
(683,102,o),
(720,102,qs),
(780,102,o),
(884,157,o),
(957,261,o),
(969,332,qs),
(981,398,o),
(946,501,o),
(860,559,o),
(800,559,qs),
(737,559,o),
(642,503,o),
(610,456,q),
(648,670,l),
(1125,670,l),
(1137,740,l),
(42,740,l),
(30,670,l),
(567,670,l),
(530,458,l),
(515,504,o),
(434,559,o),
(370,559,qs),
(307,559,o),
(200,503,o),
(126,399,o),
(114,330,qs),
(102,262,o),
(139,160,o),
(226,104,o),
(287,104,qs),
(289,104,l),
(108,-46,l),
(199,-46,l),
(433,151,l),
(463,172,o),
(485,205,q),
(449,0,l)
);
},
{
closed = 1;
nodes = (
(256,168,o),
(185,255,o),
(198,330,qs),
(211,401,o),
(315,487,o),
(381,487,qs),
(432,487,o),
(494,441,o),
(514,368,o),
(507,328,qs),
(499,282,o),
(439,200,o),
(392,181,q),
(385,184,l),
(374,175,l),
(352,168,o),
(324,168,qs)
);
},
{
closed = 1;
nodes = (
(49,9,o),
(85,39,o),
(89,61,qs),
(93,84,o),
(68,114,o),
(46,114,qs),
(24,114,o),
(-12,84,o),
(-16,61,qs),
(-20,39,o),
(5,9,o),
(27,9,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
55 38 24 17 0 5 8 9 37 1 1 13 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 10 14 0 14 10 0 128 0 0 0 132 0 4 5 1 3 2 4 3 103 6 1 2 11 1 9 8 2 9 105 0 13 1 14 13 89 15 12 2 8 7 1 1 14 8 1 105 0 13 13 14 97 16 1 14 13 14 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 10 14 0 14 10 0 128 0 0 0 132 0 4 5 1 3 2 4 3 103 6 1 2 11 1 9 8 2 9 105 0 8 12 1 8 89 0 13 1 14 13 89 15 1 12 7 1 1 14 12 1 105 0 13 13 14 97 16 1 14 13 14 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
0 10 14 0 14 10 0 128 0 0 0 132 0 4 5 1 3 2 4 3 103 6 1 2 11 1 9 8 2 9 105 0 13 1 14 13 89 15 12 2 8 7 1 1 14 8 1 105 0 13 13 14 97 16 1 14 13 14 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
70 70 53 53 70 81 70 80 76 74 53 69 53 68 64 62 52 51 47 45 35 38 35 17 17 19 38 33 19 17 6 31 
CALL[ ]	/* CallFunction */";
};
width = 1042;
}
);
note = dvKx_RA;
},
{
glyphname = dvGx_RA;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(496,0,l),
(577,0,l),
(695,670,l),
(827,670,l),
(839,740,l),
(40,740,l),
(28,670,l),
(350,670,l),
(311,449,ls),
(303,406,o),
(256,349,o),
(210,349,qs),
(167,349,o),
(138,406,o),
(146,448,qs),
(151,479,l),
(69,479,l),
(64,448,ls),
(50,371,o),
(120,278,o),
(201,278,qs),
(284,278,o),
(382,375,o),
(395,453,qs),
(434,670,l),
(612,670,l),
(553,337,l),
(126,-20,l),
(222,-20,l),
(540,251,l)
);
},
{
closed = 1;
nodes = (
(66,56,o),
(102,86,o),
(106,108,qs),
(110,131,o),
(85,161,o),
(63,161,qs),
(41,161,o),
(5,131,o),
(1,108,qs),
(-3,86,o),
(22,56,o),
(44,56,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
2 1 2 4 29 1 9 2 2 76 0 3 1 4 1 3 4 128 0 8 10 0 10 8 0 128 0 0 0 132 0 6 7 5 2 1 3 6 1 103 0 4 0 2 9 4 2 105 0 9 10 10 9 89 0 9 9 10 97 11 1 10 9 10 81 30 30 30 41 30 40 36 34 17 17 17 19 35 19 35 18 16 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = dvGx_RA;
},
{
glyphname = dvJx_RA;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(29,670,l),
(712,670,l),
(682,501,l),
(407,501,l),
(390,404,ls),
(380,345,o),
(306,274,o),
(254,274,qs),
(203,274,o),
(158,345,o),
(168,404,qs),
(185,501,l),
(101,501,l),
(84,402,ls),
(68,311,o),
(150,200,o),
(240,200,qs),
(329,200,o),
(452,312,o),
(468,402,qs),
(473,433,l),
(670,433,l),
(651,327,l),
(235,-34,l),
(328,-34,l),
(637,242,l),
(595,0,l),
(673,0,l),
(791,670,l),
(923,670,l),
(935,740,l),
(41,740,l)
);
},
{
closed = 1;
nodes = (
(102,-9,o),
(137,21,o),
(141,43,qs),
(145,66,o),
(121,96,o),
(99,96,qs),
(77,96,o),
(40,66,o),
(36,43,qs),
(32,21,o),
(58,-9,o),
(80,-9,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 93 values pushed */
8 1 6 3 5 1 4 6 2 76 0 1 10 11 10 1 11 128 0 2 11 2 134 12 1 9 8 1 0 5 9 0 103 7 1 5 0 3 6 5 3 103 0 6 0 4 10 6 4 105 0 10 1 11 10 89 0 10 10 11 97 13 1 11 10 11 81 32 32 0 0 32 43 32 42 38 36 0 31 0 31 17 19 35 19 35 18 18 17 17 14 6 31 
CALL[ ]	/* CallFunction */";
};
width = 840;
}
);
note = dvJx_RA;
},
{
glyphname = dvKx_R;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(530,0,l),
(587,322,ls),
(594,364,o),
(639,439,o),
(715,487,o),
(765,487,qs),
(829,487,o),
(898,401,o),
(885,330,q),
(969,330,l),
(981,397,o),
(946,501,o),
(860,559,o),
(800,559,qs),
(737,559,o),
(642,503,o),
(610,456,q),
(648,670,l),
(1029,670,l),
(1041,740,l),
(42,740,l),
(30,670,l),
(567,670,l),
(530,458,l),
(515,504,o),
(434,559,o),
(370,559,qs),
(307,559,o),
(200,503,o),
(126,399,o),
(114,330,qs),
(102,262,o),
(139,160,o),
(226,104,o),
(287,104,qs),
(289,104,l),
(108,-46,l),
(199,-46,l),
(433,151,l),
(463,172,o),
(485,205,q),
(449,0,l)
);
},
{
closed = 1;
nodes = (
(256,168,o),
(185,255,o),
(198,330,qs),
(211,401,o),
(315,487,o),
(381,487,qs),
(432,487,o),
(494,441,o),
(514,368,o),
(507,328,qs),
(499,282,o),
(439,200,o),
(392,181,q),
(385,184,l),
(374,175,l),
(352,168,o),
(324,168,qs)
);
},
{
closed = 1;
nodes = (
(49,9,o),
(85,39,o),
(89,61,qs),
(93,84,o),
(68,114,o),
(46,114,qs),
(24,114,o),
(-12,84,o),
(-16,61,qs),
(-20,39,o),
(5,9,o),
(27,9,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 107 values pushed */
24 17 2 7 8 44 0 2 11 7 2 76 0 7 8 11 8 7 11 128 0 9 13 0 13 9 0 128 0 0 0 132 0 4 5 1 3 2 4 3 103 6 1 2 10 1 8 7 2 8 105 0 12 1 13 12 89 14 1 11 0 1 13 11 1 105 0 12 12 13 97 15 1 13 12 13 81 59 59 42 42 59 70 59 69 65 63 42 58 42 57 53 51 41 40 34 19 35 17 17 19 38 33 19 16 6 31 
CALL[ ]	/* CallFunction */";
};
width = 785;
}
);
note = dvKx_R;
},
{
glyphname = dvGx_R;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(556,265,l),
(572,353,l),
(126,-20,l),
(222,-20,l)
);
},
{
closed = 1;
nodes = (
(28,670,l),
(350,670,l),
(311,449,ls),
(303,406,o),
(256,349,o),
(210,349,qs),
(167,349,o),
(138,406,o),
(146,448,qs),
(151,479,l),
(69,479,l),
(64,448,ls),
(50,371,o),
(120,278,o),
(201,278,qs),
(284,278,o),
(382,375,o),
(395,453,qs),
(434,670,l),
(628,670,l),
(640,740,l),
(40,740,l)
);
},
{
closed = 1;
nodes = (
(66,56,o),
(102,86,o),
(106,108,qs),
(110,131,o),
(85,161,o),
(63,161,qs),
(41,161,o),
(5,131,o),
(1,108,qs),
(-3,86,o),
(22,56,o),
(44,56,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
1 1 4 3 2 1 7 2 2 76 0 3 1 4 1 3 4 128 9 1 0 8 0 134 10 1 6 5 1 1 3 6 1 103 0 4 0 2 7 4 2 105 0 7 8 8 7 89 0 7 7 8 97 11 1 8 7 8 81 26 26 4 4 0 0 26 37 26 36 32 30 4 25 4 25 24 23 20 18 15 14 11 9 6 5 0 3 0 3 12 6 22 
CALL[ ]	/* CallFunction */";
};
width = 480;
}
);
note = dvGx_R;
},
{
glyphname = dvJx_R;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,-34,l),
(328,-34,l),
(681,281,l),
(696,366,l)
);
},
{
closed = 1;
nodes = (
(29,670,l),
(750,670,l),
(762,740,l),
(41,740,l)
);
},
{
closed = 1;
nodes = (
(329,200,o),
(452,312,o),
(468,402,qs),
(473,430,l),
(708,430,l),
(720,501,l),
(407,501,l),
(390,404,ls),
(380,345,o),
(306,274,o),
(254,274,qs),
(203,274,o),
(158,345,o),
(168,404,qs),
(185,501,l),
(101,501,l),
(84,402,ls),
(68,311,o),
(150,200,o),
(240,200,qs)
);
},
{
closed = 1;
nodes = (
(102,-9,o),
(137,21,o),
(141,43,qs),
(145,66,o),
(121,96,o),
(99,96,qs),
(77,96,o),
(40,66,o),
(36,43,qs),
(32,21,o),
(58,-9,o),
(80,-9,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 89 values pushed */
3 0 2 4 6 1 76 0 0 9 0 134 10 1 2 0 1 3 2 1 103 5 1 3 0 6 4 3 6 103 0 4 11 1 7 8 4 7 105 0 8 9 9 8 89 0 8 8 9 97 12 1 9 8 9 81 28 28 8 8 4 4 28 39 28 38 34 32 8 27 8 26 23 22 21 20 17 15 12 11 4 7 4 7 19 17 13 6 24 
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = dvJx_R;
},
{
glyphname = dvKx_KxA;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,-95,o),
(257,-63,o),
(261,-40,qs),
(265,-16,o),
(239,17,o),
(215,17,qs),
(191,17,o),
(153,-16,o),
(149,-40,qs),
(145,-63,o),
(171,-95,o),
(195,-95,qs)
);
},
{
closed = 1;
nodes = (
(977,-95,o),
(1015,-63,o),
(1019,-40,qs),
(1023,-16,o),
(997,17,o),
(973,17,qs),
(949,17,o),
(911,-16,o),
(907,-40,qs),
(903,-63,o),
(929,-95,o),
(953,-95,qs)
);
},
{
closed = 1;
nodes = (
(214,168,o),
(142,255,o),
(155,330,qs),
(168,401,o),
(272,487,o),
(338,487,qs),
(389,487,o),
(451,441,o),
(471,368,o),
(464,328,qs),
(457,289,o),
(410,216,o),
(333,168,o),
(282,168,qs)
);
},
{
closed = 1;
nodes = (
(971,168,o),
(899,255,o),
(912,330,qs),
(925,401,o),
(1029,487,o),
(1095,487,qs),
(1146,487,o),
(1208,441,o),
(1228,368,o),
(1221,328,qs),
(1214,289,o),
(1167,216,o),
(1090,168,o),
(1039,168,qs)
);
},
{
closed = 1;
nodes = (
(1281,670,l),
(1244,457,l),
(1229,503,o),
(1149,559,o),
(1085,559,qs),
(1028,559,o),
(929,513,o),
(892,470,q),
(876,513,o),
(804,559,o),
(752,559,qs),
(689,559,o),
(596,504,o),
(567,458,q),
(604,670,l)
);
},
{
closed = 1;
nodes = (
(1243,0,l),
(1300,322,ls),
(1312,389,o),
(1405,487,o),
(1479,487,qs),
(1542,487,o),
(1611,401,o),
(1598,330,qs),
(1585,256,o),
(1489,171,o),
(1426,171,qs),
(1400,171,o),
(1385,175,q),
(1373,109,l),
(1397,102,o),
(1434,102,qs),
(1494,102,o),
(1599,157,o),
(1671,261,o),
(1684,332,qs),
(1695,398,o),
(1660,501,o),
(1575,559,o),
(1515,559,qs),
(1452,559,o),
(1353,501,o),
(1323,453,q),
(1361,670,l),
(1839,670,l),
(1852,740,l),
(47,740,l),
(34,670,l),
(524,670,l),
(487,457,l),
(472,503,o),
(392,559,o),
(328,559,qs),
(265,559,o),
(157,503,o),
(83,399,o),
(71,330,qs),
(59,260,o),
(94,155,o),
(181,98,o),
(243,98,qs),
(309,98,o),
(410,155,o),
(442,202,q),
(406,0,l),
(486,0,l),
(543,322,ls),
(555,390,o),
(642,487,o),
(715,487,qs),
(778,487,o),
(841,401,o),
(828,330,qs),
(816,260,o),
(851,155,o),
(938,98,o),
(1000,98,qs),
(1066,98,o),
(1167,155,o),
(1199,202,q),
(1163,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
118 104 97 83 67 64 58 52 8 5 4 117 1 20 5 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
118 104 97 83 67 64 58 52 8 21 4 117 1 20 5 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
118 104 97 83 67 64 58 52 8 5 4 117 1 11 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
118 104 97 83 67 64 58 52 8 5 4 117 1 20 5 2 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 73 values pushed */
23 1 13 0 1 0 13 1 128 0 17 18 16 2 10 8 17 10 103 19 15 9 3 8 22 12 6 3 4 5 8 4 105 0 20 11 5 20 89 21 27 7 26 4 5 14 1 11 0 5 11 105 2 1 0 13 1 0 89 2 1 0 0 1 97 25 3 24 3 1 0 1 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 74 values pushed */
23 1 13 0 1 0 13 1 128 0 17 18 16 2 10 8 17 10 103 19 15 9 3 8 22 12 6 3 4 21 8 4 105 0 21 0 20 11 21 20 105 27 7 26 3 5 14 1 11 0 5 11 105 2 1 0 13 1 0 89 2 1 0 0 1 97 25 3 24 3 1 0 1 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 68 values pushed */
23 1 13 0 1 0 13 1 128 0 17 18 16 2 10 8 17 10 103 19 15 9 3 8 22 12 6 3 4 5 8 4 105 21 27 7 26 4 5 20 14 2 11 0 5 11 105 2 1 0 13 1 0 89 2 1 0 0 1 97 25 3 24 3 1 0 1 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 73 values pushed */
23 1 13 0 1 0 13 1 128 0 17 18 16 2 10 8 17 10 103 19 15 9 3 8 22 12 6 3 4 5 8 4 105 0 20 11 5 20 89 21 27 7 26 4 5 14 1 11 0 5 11 105 2 1 0 13 1 0 89 2 1 0 0 1 97 25 3 24 3 1 0 1 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 66 values pushed */
38 38 24 24 12 12 0 0 131 130 127 125 121 119 116 114 108 106 103 102 101 100 99 98 95 93 87 85 82 81 78 76 71 69 66 65 62 60 56 54 38 51 38 50 46 44 24 37 24 36 32 30 12 23 12 22 18 16 0 11 0 10 36 28 6 23 
CALL[ ]	/* CallFunction */";
};
width = 1752;
}
);
note = dvKx_KxA;
},
{
glyphname = dvKx_TA;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(682,552,o),
(594,501,o),
(567,457,q),
(604,670,l),
(1298,670,l),
(1268,498,l),
(1118,498,ls),
(976,498,o),
(890,428,q),
(882,489,o),
(803,552,o),
(741,552,qs)
);
},
{
closed = 1;
nodes = (
(219,-95,o),
(257,-63,o),
(261,-40,qs),
(265,-16,o),
(239,17,o),
(215,17,qs),
(191,17,o),
(153,-16,o),
(149,-40,qs),
(145,-63,o),
(171,-95,o),
(195,-95,qs)
);
},
{
closed = 1;
nodes = (
(214,168,o),
(142,255,o),
(155,330,qs),
(168,401,o),
(272,487,o),
(338,487,qs),
(389,487,o),
(451,441,o),
(471,368,o),
(464,328,qs),
(457,289,o),
(410,216,o),
(333,168,o),
(282,168,qs)
);
},
{
closed = 1;
nodes = (
(543,322,ls),
(555,388,o),
(637,484,o),
(707,484,qs),
(768,484,o),
(825,391,o),
(802,301,q),
(795,280,o),
(789,249,qs),
(768,129,o),
(886,2,o),
(1005,2,qs),
(1038,2,l),
(1050,69,l),
(1028,69,ls),
(937,69,o),
(858,163,o),
(873,248,qs),
(888,336,o),
(1013,426,o),
(1109,426,qs),
(1255,426,l),
(1180,0,l),
(1264,0,l),
(1382,670,l),
(1514,670,l),
(1527,740,l),
(47,740,l),
(34,670,l),
(524,670,l),
(487,457,l),
(472,503,o),
(392,559,o),
(328,559,qs),
(265,559,o),
(157,503,o),
(83,399,o),
(71,330,qs),
(59,260,o),
(94,155,o),
(181,98,o),
(243,98,qs),
(309,98,o),
(410,155,o),
(442,202,q),
(406,0,l),
(486,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
53 8 2 3 13 5 39 1 6 13 2 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
53 8 2 3 13 16 39 1 6 13 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
53 8 2 3 13 5 39 1 6 13 2 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 71 values pushed */
0 10 11 9 2 1 8 10 1 103 0 8 2 5 8 89 18 1 2 16 1 5 13 2 5 105 0 0 0 13 6 0 13 103 20 1 6 0 7 14 6 7 105 0 3 12 4 3 89 0 14 21 17 15 3 12 4 14 12 103 0 3 3 4 97 19 1 4 3 4 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
0 10 11 9 2 1 8 10 1 103 0 8 0 5 16 8 5 105 18 1 2 0 16 13 2 16 105 0 0 0 13 6 0 13 103 20 1 6 0 7 14 6 7 105 0 3 12 4 3 89 0 14 21 17 15 3 12 4 14 12 103 0 3 3 4 97 19 1 4 3 4 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 71 values pushed */
0 10 11 9 2 1 8 10 1 103 0 8 2 5 8 89 18 1 2 16 1 5 13 2 5 105 0 0 0 13 6 0 13 103 20 1 6 0 7 14 6 7 105 0 3 12 4 3 89 0 14 21 17 15 3 12 4 14 12 103 0 3 3 4 97 19 1 4 3 4 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 53 values pushed */
38 38 24 24 12 12 0 0 38 84 38 84 81 79 73 71 70 68 64 62 61 60 59 58 57 56 55 54 51 49 43 41 24 37 24 36 32 30 12 23 12 22 18 16 0 11 0 10 17 35 22 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1426;
}
);
note = dvKx_TA;
},
{
glyphname = dvKx_PHA;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(876,670,l),
(851,527,l),
(811,555,o),
(751,555,qs),
(688,555,o),
(596,502,o),
(567,456,q),
(604,670,l)
);
},
{
closed = 1;
nodes = (
(958,268,o),
(904,359,o),
(919,441,qs),
(959,670,l),
(1239,670,l),
(1195,419,ls),
(1184,355,o),
(1094,268,o),
(1029,268,qs)
);
},
{
closed = 1;
nodes = (
(543,322,ls),
(555,390,o),
(642,487,o),
(715,487,qs),
(762,487,o),
(824,436,o),
(830,392,q),
(825,301,o),
(910,197,o),
(998,197,qs),
(1052,197,o),
(1140,241,o),
(1171,281,q),
(1121,0,l),
(1204,0,l),
(1259,313,ls),
(1272,384,o),
(1367,487,o),
(1443,487,qs),
(1507,487,o),
(1576,401,o),
(1563,330,qs),
(1550,257,o),
(1454,170,o),
(1391,170,qs),
(1368,170,o),
(1347,175,q),
(1336,110,l),
(1361,102,o),
(1398,102,qs),
(1458,102,o),
(1563,157,o),
(1635,262,o),
(1648,334,qs),
(1660,400,o),
(1625,502,o),
(1540,559,o),
(1480,559,qs),
(1415,559,o),
(1315,502,o),
(1284,454,q),
(1322,670,l),
(1803,670,l),
(1816,740,l),
(47,740,l),
(34,670,l),
(524,670,l),
(487,457,l),
(472,503,o),
(392,559,o),
(328,559,qs),
(265,559,o),
(157,503,o),
(83,399,o),
(71,330,qs),
(59,260,o),
(94,155,o),
(181,98,o),
(243,98,qs),
(309,98,o),
(410,155,o),
(442,202,q),
(406,0,l),
(486,0,l)
);
},
{
closed = 1;
nodes = (
(219,-95,o),
(257,-63,o),
(261,-40,qs),
(265,-16,o),
(239,17,o),
(215,17,qs),
(191,17,o),
(153,-16,o),
(149,-40,qs),
(145,-63,o),
(171,-95,o),
(195,-95,qs)
);
},
{
closed = 1;
nodes = (
(214,168,o),
(142,255,o),
(155,330,qs),
(168,401,o),
(272,487,o),
(338,487,qs),
(389,487,o),
(451,441,o),
(471,368,o),
(464,328,qs),
(457,289,o),
(410,216,o),
(333,168,o),
(282,168,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 12 0 67 39 32 0 4 3 12 18 1 14 3 53 1 11 14 52 1 10 11 5 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 12 0 67 39 32 0 4 3 12 18 1 14 3 53 1 11 14 52 1 4 11 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
5 1 12 0 67 39 32 0 4 3 12 18 1 14 3 53 1 11 14 52 1 10 11 5 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 80 values pushed */
22 16 2 13 17 18 17 13 18 128 0 7 8 6 2 3 1 5 7 1 103 9 1 5 0 12 5 89 0 0 19 15 2 12 3 0 12 105 21 1 3 0 14 11 3 14 105 0 10 4 11 10 89 24 20 2 11 0 4 17 11 4 105 0 17 13 18 17 89 0 17 17 18 97 23 1 18 17 18 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 70 values pushed */
22 16 2 13 17 18 17 13 18 128 0 7 8 6 2 3 1 0 7 1 103 9 5 2 0 19 15 2 12 3 0 12 105 21 1 3 0 14 11 3 14 105 24 20 2 11 10 1 4 17 11 4 105 0 17 13 18 17 89 0 17 17 18 97 23 1 18 17 18 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 80 values pushed */
22 16 2 13 17 18 17 13 18 128 0 7 8 6 2 3 1 5 7 1 103 9 1 5 0 12 5 89 0 0 19 15 2 12 3 0 12 105 21 1 3 0 14 11 3 14 105 0 10 4 11 10 89 24 20 2 11 0 4 17 11 4 105 0 17 13 18 17 89 0 17 17 18 97 23 1 18 17 18 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 58 values pushed */
93 93 81 81 17 17 8 8 93 106 93 105 101 99 81 92 81 91 87 85 17 80 17 80 77 75 71 69 66 65 62 60 56 54 51 49 43 41 38 37 36 35 34 33 30 28 22 20 8 16 8 15 20 18 34 25 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1716;
}
);
note = dvKx_PHA;
},
{
glyphname = dvKx_PHxA;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(877,670,l),
(852,526,l),
(811,555,o),
(751,555,qs),
(688,555,o),
(596,502,o),
(567,456,q),
(604,670,l)
);
},
{
closed = 1;
nodes = (
(219,-95,o),
(257,-63,o),
(261,-40,qs),
(265,-16,o),
(239,17,o),
(215,17,qs),
(191,17,o),
(153,-16,o),
(149,-40,qs),
(145,-63,o),
(171,-95,o),
(195,-95,qs)
);
},
{
closed = 1;
nodes = (
(960,9,o),
(997,41,o),
(1001,64,qs),
(1006,88,o),
(979,121,o),
(955,121,qs),
(931,121,o),
(894,88,o),
(889,64,qs),
(885,41,o),
(912,9,o),
(936,9,qs)
);
},
{
closed = 1;
nodes = (
(214,168,o),
(142,255,o),
(155,330,qs),
(168,401,o),
(272,487,o),
(338,487,qs),
(389,487,o),
(451,441,o),
(471,368,o),
(464,328,qs),
(457,289,o),
(410,216,o),
(333,168,o),
(282,168,qs)
);
},
{
closed = 1;
nodes = (
(959,268,o),
(905,359,o),
(920,441,qs),
(960,670,l),
(1240,670,l),
(1196,419,ls),
(1185,355,o),
(1095,268,o),
(1030,268,qs)
);
},
{
closed = 1;
nodes = (
(543,322,ls),
(555,390,o),
(642,487,o),
(715,487,qs),
(764,487,o),
(826,433,o),
(831,386,q),
(828,297,o),
(912,197,o),
(999,197,qs),
(1053,197,o),
(1141,241,o),
(1172,281,q),
(1122,0,l),
(1205,0,l),
(1260,313,ls),
(1273,384,o),
(1368,487,o),
(1444,487,qs),
(1508,487,o),
(1577,401,o),
(1564,330,qs),
(1551,257,o),
(1455,170,o),
(1392,170,qs),
(1369,170,o),
(1348,175,q),
(1337,110,l),
(1362,102,o),
(1399,102,qs),
(1459,102,o),
(1564,157,o),
(1636,262,o),
(1649,334,qs),
(1661,400,o),
(1626,502,o),
(1541,559,o),
(1481,559,qs),
(1416,559,o),
(1316,502,o),
(1285,454,q),
(1323,670,l),
(1804,670,l),
(1817,740,l),
(47,740,l),
(34,670,l),
(524,670,l),
(487,457,l),
(472,503,o),
(392,559,o),
(328,559,qs),
(265,559,o),
(157,503,o),
(83,399,o),
(71,330,qs),
(59,260,o),
(94,155,o),
(181,98,o),
(243,98,qs),
(309,98,o),
(410,155,o),
(442,202,q),
(406,0,l),
(486,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 6 0 105 77 70 0 4 9 6 56 1 20 9 91 1 7 20 90 1 16 4 5 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 6 0 105 77 70 0 4 9 6 56 1 20 9 91 1 7 20 90 1 10 4 5 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
5 1 6 0 105 77 70 0 4 9 6 56 1 20 9 91 1 7 20 90 1 16 4 5 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 89 values pushed */
27 22 2 19 5 3 5 19 3 128 0 13 14 12 8 3 1 11 13 1 103 15 1 11 0 6 11 89 0 0 21 18 2 6 9 0 6 105 26 1 9 0 20 7 9 20 105 0 16 10 7 16 89 17 25 2 7 0 10 2 7 10 105 0 2 5 3 2 89 0 4 24 1 5 19 4 5 105 0 2 2 3 97 23 1 3 2 3 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 79 values pushed */
27 22 2 19 5 3 5 19 3 128 0 13 14 12 8 3 1 0 13 1 103 15 11 2 0 21 18 2 6 9 0 6 105 26 1 9 0 20 7 9 20 105 17 25 2 7 16 1 10 2 7 10 105 0 2 5 3 2 89 0 4 24 1 5 19 4 5 105 0 2 2 3 97 23 1 3 2 3 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 89 values pushed */
27 22 2 19 5 3 5 19 3 128 0 13 14 12 8 3 1 11 13 1 103 15 1 11 0 6 11 89 0 0 21 18 2 6 9 0 6 105 26 1 9 0 20 7 9 20 105 0 16 10 7 16 89 17 25 2 7 0 10 2 7 10 105 0 2 5 3 2 89 0 4 24 1 5 19 4 5 105 0 2 2 3 97 23 1 3 2 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 66 values pushed */
55 55 46 46 32 32 20 20 8 8 55 118 55 118 115 113 109 107 104 103 100 98 94 92 89 87 81 79 76 75 74 73 72 71 68 66 60 58 46 54 46 53 50 49 32 45 32 44 40 38 20 31 20 30 26 24 8 19 8 18 37 18 34 28 6 25 
CALL[ ]	/* CallFunction */";
};
width = 1717;
}
);
note = dvKx_PHxA;
},
{
glyphname = dvKx_BA;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1322,670,l),
(1286,463,l),
(1267,510,o),
(1178,569,o),
(1110,569,qs),
(1047,569,o),
(933,517,o),
(893,469,q),
(876,512,o),
(804,559,o),
(752,559,qs),
(689,559,o),
(596,504,o),
(567,458,q),
(604,670,l)
);
},
{
closed = 1;
nodes = (
(1284,0,l),
(1402,670,l),
(1533,670,l),
(1546,740,l),
(47,740,l),
(34,670,l),
(524,670,l),
(487,457,l),
(472,503,o),
(392,559,o),
(328,559,qs),
(265,559,o),
(157,503,o),
(83,399,o),
(71,330,qs),
(59,260,o),
(94,155,o),
(181,98,o),
(243,98,qs),
(309,98,o),
(410,155,o),
(442,202,q),
(406,0,l),
(486,0,l),
(543,322,ls),
(555,390,o),
(642,487,o),
(715,487,qs),
(778,487,o),
(841,401,o),
(828,330,qs),
(816,259,o),
(861,150,o),
(961,91,o),
(1029,91,qs),
(1097,91,o),
(1205,149,o),
(1239,196,q),
(1204,0,l)
);
},
{
closed = 1;
nodes = (
(219,-95,o),
(257,-63,o),
(261,-40,qs),
(265,-16,o),
(239,17,o),
(215,17,qs),
(191,17,o),
(153,-16,o),
(149,-40,qs),
(145,-63,o),
(171,-95,o),
(195,-95,qs)
);
},
{
closed = 1;
nodes = (
(214,168,o),
(142,255,o),
(155,330,qs),
(168,401,o),
(272,487,o),
(338,487,qs),
(389,487,o),
(451,441,o),
(471,368,o),
(464,328,qs),
(457,289,o),
(410,216,o),
(333,168,o),
(282,168,qs)
);
},
{
closed = 1;
nodes = (
(1174,512,o),
(1247,460,o),
(1274,377,o),
(1266,332,qs),
(1255,274,o),
(1216,228,q),
(986,468,l),
(1013,489,o),
(1081,512,o),
(1116,512,qs)
);
},
{
closed = 1;
nodes = (
(1004,153,o),
(928,195,o),
(893,276,o),
(902,330,qs),
(913,392,o),
(953,438,q),
(1186,198,l),
(1130,153,o),
(1055,153,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 134 values pushed */
92 91 83 82 45 31 15 12 6 0 10 15 4 1 76 11 1 5 12 13 12 5 13 128 0 9 10 8 2 2 1 9 2 103 0 1 20 1 16 4 1 16 105 7 1 0 14 1 4 15 0 4 105 19 1 15 0 6 3 15 6 105 21 1 17 0 3 12 17 3 105 0 12 5 13 12 89 0 12 12 13 97 18 1 13 12 13 81 90 90 80 80 66 66 54 54 90 98 90 97 80 89 80 88 66 79 66 78 74 72 54 65 54 64 60 58 53 52 51 50 49 48 19 38 35 19 37 35 19 36 34 22 6 31 
CALL[ ]	/* CallFunction */";
};
width = 1446;
}
);
note = dvKx_BA;
},
{
glyphname = dvKx_MA;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(688,555,o),
(595,501,o),
(567,456,q),
(604,670,l),
(1165,670,l),
(1127,454,l),
(1032,454,ls),
(961,454,o),
(909,423,q),
(900,485,o),
(818,555,o),
(751,555,qs)
);
},
{
closed = 1;
nodes = (
(219,-95,o),
(257,-63,o),
(261,-40,qs),
(265,-16,o),
(239,17,o),
(215,17,qs),
(191,17,o),
(153,-16,o),
(149,-40,qs),
(145,-63,o),
(171,-95,o),
(195,-95,qs)
);
},
{
closed = 1;
nodes = (
(214,168,o),
(142,255,o),
(155,330,qs),
(168,401,o),
(272,487,o),
(338,487,qs),
(389,487,o),
(451,441,o),
(471,368,o),
(464,328,qs),
(457,289,o),
(410,216,o),
(333,168,o),
(282,168,qs)
);
},
{
closed = 1;
nodes = (
(927,172,o),
(878,230,o),
(886,278,qs),
(895,327,o),
(970,385,o),
(1022,385,qs),
(1115,385,l),
(1101,304,ls),
(1090,242,o),
(1022,172,o),
(973,172,qs)
);
},
{
closed = 1;
nodes = (
(1388,454,l),
(1205,454,l),
(1243,670,l),
(1426,670,l)
);
},
{
closed = 1;
nodes = (
(543,322,ls),
(555,390,o),
(642,487,o),
(715,487,qs),
(775,487,o),
(838,409,o),
(831,343,q),
(814,313,o),
(808,278,qs),
(794,198,o),
(878,101,o),
(961,101,qs),
(1049,101,o),
(1162,208,o),
(1179,308,qs),
(1193,385,l),
(1376,385,l),
(1308,0,l),
(1392,0,l),
(1510,670,l),
(1641,670,l),
(1654,740,l),
(47,740,l),
(34,670,l),
(524,670,l),
(487,457,l),
(472,503,o),
(392,559,o),
(328,559,qs),
(265,559,o),
(157,503,o),
(83,399,o),
(71,330,qs),
(59,260,o),
(94,155,o),
(181,98,o),
(243,98,qs),
(309,98,o),
(410,155,o),
(442,202,q),
(406,0,l),
(486,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
68 8 2 0 5 2 1 7 0 87 54 2 8 7 3 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
68 8 2 0 5 2 1 7 0 87 54 2 6 7 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
68 8 2 0 5 2 1 7 0 87 54 2 8 7 3 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 82 values pushed */
26 20 2 16 3 4 3 16 4 128 0 14 15 13 25 10 4 1 12 14 1 103 0 12 2 5 12 89 21 1 2 19 1 5 0 2 5 105 9 1 0 17 1 7 8 0 7 103 24 1 8 6 11 8 89 23 1 6 18 1 11 3 6 11 105 0 3 16 4 3 89 0 3 3 4 97 22 1 4 3 4 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 83 values pushed */
26 20 2 16 3 4 3 16 4 128 0 14 15 13 25 10 4 1 12 14 1 103 0 12 2 5 12 89 21 1 2 19 1 5 0 2 5 105 9 1 0 17 1 7 8 0 7 103 24 1 8 0 18 11 8 18 105 23 1 6 0 11 3 6 11 105 0 3 16 4 3 89 0 3 3 4 97 22 1 4 3 4 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 72 values pushed */
26 20 2 16 3 4 3 16 4 128 0 14 15 13 25 10 4 1 2 14 1 103 12 21 2 2 19 1 5 0 2 5 105 9 1 0 17 1 7 6 0 7 103 24 8 23 3 6 18 1 11 3 6 11 105 0 3 16 4 3 89 0 3 3 4 97 22 1 4 3 4 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 82 values pushed */
26 20 2 16 3 4 3 16 4 128 0 14 15 13 25 10 4 1 12 14 1 103 0 12 2 5 12 89 21 1 2 19 1 5 0 2 5 105 9 1 0 17 1 7 8 0 7 103 24 1 8 6 11 8 89 23 1 6 18 1 11 3 6 11 105 0 3 16 4 3 89 0 3 3 4 97 22 1 4 3 4 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 67 values pushed */
53 53 49 49 38 38 24 24 12 12 0 0 53 94 53 94 91 89 83 81 78 77 76 75 74 73 72 71 70 69 66 64 58 56 49 52 49 52 51 50 38 48 38 47 43 41 24 37 24 36 32 30 12 23 12 22 18 16 0 11 0 10 17 35 27 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1549;
}
);
note = dvKx_MA;
},
{
glyphname = dvJx_JxA;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(224,-60,o),
(262,-28,o),
(266,-5,qs),
(270,19,o),
(244,52,o),
(220,52,qs),
(196,52,o),
(158,19,o),
(154,-5,qs),
(150,-28,o),
(176,-60,o),
(200,-60,qs)
);
},
{
closed = 1;
nodes = (
(793,-60,o),
(831,-28,o),
(835,-5,qs),
(839,19,o),
(813,52,o),
(789,52,qs),
(765,52,o),
(727,19,o),
(723,-5,qs),
(719,-28,o),
(745,-60,o),
(769,-60,qs)
);
},
{
closed = 1;
nodes = (
(1244,0,l),
(1362,670,l),
(1494,670,l),
(1507,740,l),
(44,740,l),
(31,670,l),
(1279,670,l),
(1249,499,l),
(978,499,l),
(949,334,ls),
(939,276,o),
(865,204,o),
(813,204,qs),
(763,204,o),
(717,276,o),
(727,334,qs),
(756,499,l),
(409,499,l),
(380,334,ls),
(370,276,o),
(296,204,o),
(244,204,qs),
(194,204,o),
(148,276,o),
(158,334,qs),
(187,499,l),
(103,499,l),
(74,332,ls),
(58,242,o),
(140,131,o),
(230,131,qs),
(320,131,o),
(445,242,o),
(461,332,qs),
(477,427,l),
(659,427,l),
(643,332,ls),
(627,242,o),
(709,131,o),
(799,131,qs),
(889,131,o),
(1014,242,o),
(1030,332,qs),
(1046,427,l),
(1236,427,l),
(1161,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
0 16 0 1 0 16 1 128 0 14 15 1 13 8 14 13 103 12 10 2 8 6 1 4 9 8 4 103 11 1 9 7 1 5 0 9 5 105 2 1 0 16 1 0 89 2 1 0 0 1 97 18 3 17 3 1 0 1 81 12 12 0 0 69 68 67 66 65 64 63 62 61 60 57 55 52 51 48 46 43 42 39 37 34 33 30 28 25 24 12 23 12 22 18 16 0 11 0 10 36 19 6 23 
CALL[ ]	/* CallFunction */";
};
width = 1409;
}
);
note = dvJx_JxA;
},
{
glyphname = dvJx_YA;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(787,182,o),
(703,299,o),
(721,400,qs),
(721,405,l),
(816,410,o),
(935,501,o),
(951,587,qs),
(965,670,l),
(1166,670,l),
(1113,370,ls),
(1104,315,o),
(1036,229,o),
(937,182,o),
(881,182,qs)
);
},
{
closed = 1;
nodes = (
(1132,0,l),
(1250,670,l),
(1381,670,l),
(1394,740,l),
(44,740,l),
(31,670,l),
(882,670,l),
(870,601,ls),
(857,527,o),
(756,464,o),
(667,464,qs),
(403,464,l),
(380,334,ls),
(370,276,o),
(296,204,o),
(244,204,qs),
(194,204,o),
(148,276,o),
(158,334,qs),
(181,464,l),
(97,464,l),
(74,332,ls),
(58,242,o),
(140,131,o),
(230,131,qs),
(320,131,o),
(445,242,o),
(461,332,qs),
(472,394,l),
(603,394,l),
(638,394,l),
(619,263,o),
(732,112,o),
(853,112,qs),
(929,112,o),
(1048,170,o),
(1086,218,q),
(1048,0,l)
);
},
{
closed = 1;
nodes = (
(224,-60,o),
(262,-28,o),
(266,-5,qs),
(270,19,o),
(244,52,o),
(220,52,qs),
(196,52,o),
(158,19,o),
(154,-5,qs),
(150,-28,o),
(176,-60,o),
(200,-60,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 113 values pushed */
14 1 7 4 1 76 0 4 1 7 1 4 114 0 12 13 14 13 12 14 128 0 10 11 9 2 0 6 10 0 103 8 1 6 0 1 4 6 1 105 0 7 0 5 3 7 5 105 15 1 2 0 3 13 2 3 105 0 13 12 14 13 89 0 13 13 14 97 16 1 14 13 14 81 52 52 0 0 52 63 52 62 58 56 51 50 49 48 47 46 45 44 41 39 36 34 31 30 27 25 22 20 18 16 0 13 0 12 19 20 17 6 24 
CALL[ ]	/* CallFunction */";
};
width = 1297;
}
);
note = dvJx_YA;
},
{
glyphname = dvEyelash_YA;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(415,182,o),
(329,291,o),
(346,386,qs),
(347,393,l),
(545,401,o),
(578,587,qs),
(593,670,l),
(794,670,l),
(741,370,ls),
(731,315,o),
(664,229,o),
(565,182,o),
(509,182,qs)
);
},
{
closed = 1;
nodes = (
(759,0,l),
(877,670,l),
(1009,670,l),
(1021,740,l),
(38,740,l),
(26,670,l),
(510,670,l),
(498,601,ls),
(483,515,o),
(381,442,o),
(293,441,qs),
(226,442,o),
(137,506,o),
(149,573,q),
(71,573,l),
(55,476,o),
(169,380,o),
(262,375,q),
(245,253,o),
(359,112,o),
(480,112,qs),
(557,112,o),
(677,171,o),
(714,219,q),
(676,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 89 values pushed */
13 1 2 4 1 76 0 5 0 6 0 5 6 128 0 4 1 2 1 4 114 0 10 3 10 134 0 8 9 7 2 0 5 8 0 103 0 6 0 1 4 6 1 105 11 1 2 3 3 2 89 11 1 2 2 3 97 0 3 2 3 81 0 0 37 36 35 34 33 32 31 30 27 25 23 22 20 19 17 15 0 12 0 11 18 20 12 6 24 
CALL[ ]	/* CallFunction */";
};
width = 929;
}
);
note = dvEyelash_YA;
},
{
glyphname = dvEyelash_HA;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,23,o),
(480,-34,o),
(422,-34,qs),
(352,-34,o),
(288,50,o),
(299,116,qs),
(311,181,o),
(405,267,o),
(475,267,qs),
(534,267,o),
(597,208,o),
(600,169,q),
(680,169,l),
(680,239,o),
(586,334,o),
(489,334,qs),
(461,334,o),
(432,329,q),
(402,338,o),
(370,381,o),
(375,411,qs),
(383,453,o),
(450,492,o),
(497,492,qs),
(680,492,l),
(711,670,l),
(852,670,l),
(864,740,l),
(47,740,l),
(35,670,l),
(632,670,l),
(611,553,l),
(480,553,ls),
(407,553,o),
(307,488,o),
(296,426,qs),
(289,387,o),
(303,357,q),
(278,353,o),
(261,353,qs),
(203,353,o),
(130,416,o),
(142,481,q),
(64,481,l),
(52,416,o),
(97,328,o),
(183,286,o),
(235,286,qs),
(298,286,o),
(349,310,q),
(359,305,l),
(303,278,o),
(229,180,o),
(218,117,qs),
(206,54,o),
(243,-46,o),
(338,-104,o),
(410,-104,qs),
(473,-104,o),
(576,-59,o),
(646,17,o),
(661,62,q),
(581,62,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 111 values pushed */
24 1 3 2 44 12 11 3 1 9 2 76 0 2 8 3 8 2 3 128 0 10 11 13 11 10 13 128 14 1 13 12 11 13 12 126 0 6 7 1 5 4 6 5 103 0 4 0 8 2 4 8 103 0 3 0 1 11 3 1 105 0 9 0 11 10 9 11 105 0 12 0 0 12 89 0 12 12 0 97 0 0 12 0 81 0 0 0 62 0 62 60 58 54 52 50 49 47 45 33 17 17 17 37 34 19 40 35 15 6 31 
CALL[ ]	/* CallFunction */";
};
width = 764;
}
);
note = dvEyelash_HA;
},
{
glyphname = dvmII.aLong;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-413,720,l),
(-408,749,ls),
(-393,834,o),
(-254,939,o),
(-94,939,qs),
(67,939,o),
(165,835,o),
(150,749,qs),
(149,740,l),
(15,740,l),
(2,670,l),
(134,670,l),
(16,0,l),
(100,0,l),
(218,670,l),
(349,670,l),
(362,740,l),
(231,740,l),
(233,754,ls),
(254,872,o),
(114,1009,o),
(-82,1009,qs),
(-275,1009,o),
(-466,871,o),
(-487,754,qs),
(-493,720,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 7 1 2 1 7 2 128 0 3 2 3 134 0 0 0 6 1 0 6 105 5 1 1 7 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 19 35 17 17 17 17 19 34 8 6 30 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmII.aLong;
},
{
glyphname = dvmII_Anusvara;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-68,720,l),
(-57,782,ls),
(-46,844,o),
(17,926,o),
(76,926,qs),
(134,926,o),
(168,844,o),
(157,782,qs),
(150,740,l),
(16,740,l),
(3,670,l),
(135,670,l),
(17,0,l),
(101,0,l),
(219,670,l),
(350,670,l),
(363,740,l),
(232,740,l),
(238,778,ls),
(256,878,o),
(189,996,o),
(89,996,qs),
(-10,996,o),
(-122,877,o),
(-140,778,qs),
(-150,720,l)
);
},
{
closed = 1;
nodes = (
(390,829,o),
(429,862,o),
(433,885,qs),
(437,908,o),
(410,941,o),
(387,941,qs),
(363,941,o),
(324,908,o),
(320,885,qs),
(316,862,o),
(343,829,o),
(367,829,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
0 7 1 2 1 7 2 128 0 3 2 3 134 0 0 0 6 9 0 6 105 0 8 10 1 9 1 8 9 105 5 1 1 7 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 26 26 26 37 26 36 37 19 35 17 17 17 17 19 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmII_Anusvara;
},
{
glyphname = dvmII_Reph;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-68,720,l),
(-57,782,ls),
(-46,844,o),
(17,926,o),
(76,926,qs),
(134,926,o),
(168,844,o),
(157,782,qs),
(150,740,l),
(16,740,l),
(3,670,l),
(135,670,l),
(17,0,l),
(101,0,l),
(219,670,l),
(350,670,l),
(363,740,l),
(232,740,l),
(246,821,ls),
(254,865,o),
(300,915,o),
(336,915,qs),
(371,915,o),
(398,869,o),
(389,829,q),
(464,829,l),
(481,901,o),
(426,982,o),
(366,982,qs),
(321,982,o),
(256,940,o),
(237,905,q),
(209,996,o),
(89,996,qs),
(-10,996,o),
(-122,877,o),
(-140,778,qs),
(-150,720,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
5 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 2 3 4 3 2 114 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 2 3 4 3 2 4 128 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
37 36 33 31 17 17 17 17 19 34 18 35 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmII_Reph;
},
{
glyphname = dvmII_Reph_Anusvara;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-68,720,l),
(-57,782,ls),
(-46,844,o),
(17,926,o),
(76,926,qs),
(134,926,o),
(168,844,o),
(157,782,qs),
(150,740,l),
(16,740,l),
(3,670,l),
(135,670,l),
(17,0,l),
(101,0,l),
(219,670,l),
(350,670,l),
(363,740,l),
(232,740,l),
(245,817,ls),
(254,867,o),
(310,924,o),
(351,924,qs),
(389,924,o),
(426,877,o),
(418,840,q),
(486,840,l),
(503,907,o),
(444,990,o),
(379,990,qs),
(331,990,o),
(258,945,o),
(236,907,q),
(208,996,o),
(89,996,qs),
(-10,996,o),
(-122,877,o),
(-140,778,qs),
(-150,720,l)
);
},
{
closed = 1;
nodes = (
(344,786,o),
(375,813,o),
(378,831,qs),
(381,850,o),
(360,876,o),
(341,876,qs),
(322,876,o),
(291,850,o),
(288,831,qs),
(285,813,o),
(306,786,o),
(325,786,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 94 values pushed */
5 1 11 3 1 76 0 2 11 12 11 2 12 128 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 1 3 0 89 0 1 9 1 3 11 1 3 105 0 11 13 1 12 4 11 12 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 38 38 38 49 38 48 44 42 37 36 33 31 17 17 17 17 19 34 18 35 34 14 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmII_Reph_Anusvara;
},
{
glyphname = dvmII_Anusvara.aLong;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-413,720,l),
(-408,749,ls),
(-393,834,o),
(-254,939,o),
(-94,939,qs),
(67,939,o),
(165,835,o),
(150,749,qs),
(149,740,l),
(15,740,l),
(2,670,l),
(134,670,l),
(16,0,l),
(100,0,l),
(218,670,l),
(349,670,l),
(362,740,l),
(231,740,l),
(233,754,ls),
(254,872,o),
(114,1009,o),
(-82,1009,qs),
(-275,1009,o),
(-466,871,o),
(-487,754,qs),
(-493,720,l)
);
},
{
closed = 1;
nodes = (
(389,829,o),
(428,862,o),
(432,885,qs),
(436,908,o),
(409,941,o),
(386,941,qs),
(362,941,o),
(323,908,o),
(319,885,qs),
(315,862,o),
(342,829,o),
(366,829,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
0 7 1 2 1 7 2 128 0 3 2 3 134 0 0 0 6 9 0 6 105 0 8 10 1 9 1 8 9 105 5 1 1 7 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 26 26 26 37 26 36 37 19 35 17 17 17 17 19 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmII_Anusvara.aLong;
},
{
glyphname = dvmII_Reph.aLong;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-413,720,l),
(-408,749,ls),
(-393,834,o),
(-254,939,o),
(-94,939,qs),
(67,939,o),
(165,835,o),
(150,749,qs),
(149,740,l),
(15,740,l),
(2,670,l),
(134,670,l),
(16,0,l),
(100,0,l),
(218,670,l),
(349,670,l),
(362,740,l),
(231,740,l),
(245,821,ls),
(253,865,o),
(298,915,o),
(334,915,qs),
(369,915,o),
(397,869,o),
(388,829,q),
(463,829,l),
(480,901,o),
(425,982,o),
(365,982,qs),
(312,982,o),
(241,927,o),
(225,882,q),
(173,1009,o),
(-82,1009,qs),
(-275,1009,o),
(-466,871,o),
(-487,754,qs),
(-493,720,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
5 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 2 3 4 3 2 114 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 2 3 4 3 2 4 128 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 2 1 3 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
37 36 33 31 17 17 17 17 19 34 18 35 34 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmII_Reph.aLong;
},
{
glyphname = dvmII_Reph_Anusvara.aLong;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-413,720,l),
(-408,749,ls),
(-393,834,o),
(-254,939,o),
(-94,939,qs),
(67,939,o),
(165,835,o),
(150,749,qs),
(149,740,l),
(15,740,l),
(2,670,l),
(134,670,l),
(16,0,l),
(100,0,l),
(218,670,l),
(349,670,l),
(362,740,l),
(231,740,l),
(244,817,ls),
(253,867,o),
(309,924,o),
(350,924,qs),
(388,924,o),
(425,877,o),
(417,840,q),
(485,840,l),
(502,907,o),
(443,990,o),
(378,990,qs),
(323,990,o),
(242,931,o),
(224,884,q),
(173,1009,o),
(-82,1009,qs),
(-275,1009,o),
(-466,871,o),
(-487,754,qs),
(-493,720,l)
);
},
{
closed = 1;
nodes = (
(343,786,o),
(373,813,o),
(377,831,qs),
(380,850,o),
(359,876,o),
(340,876,qs),
(321,876,o),
(290,850,o),
(287,831,qs),
(283,813,o),
(305,786,o),
(324,786,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 95 values pushed */
5 1 11 3 1 76 0 2 11 12 11 2 12 128 0 10 4 5 4 10 5 128 0 6 5 6 134 0 0 0 9 3 0 9 105 0 1 0 3 11 1 3 105 0 11 13 1 12 4 11 12 105 8 1 4 10 5 4 87 8 1 4 4 5 95 7 1 5 4 5 79 38 38 38 49 38 48 44 42 37 36 33 31 17 17 17 17 19 34 18 35 34 14 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmII_Reph_Anusvara.aLong;
},
{
glyphname = dvmE_Anusvara;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-174,849,o),
(-246,951,o),
(-326,981,o),
(-399,981,qs),
(-440,981,l),
(-452,913,l),
(-410,913,ls),
(-356,913,o),
(-298,891,o),
(-244,818,o),
(-207,736,q),
(-128,736,l)
);
},
{
closed = 1;
nodes = (
(-16,830,o),
(23,863,o),
(27,886,qs),
(31,909,o),
(4,942,o),
(-19,942,qs),
(-43,942,o),
(-82,909,o),
(-86,886,qs),
(-90,863,o),
(-63,830,o),
(-39,830,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
5 1 2 4 2 134 0 3 0 4 3 89 0 1 0 0 4 1 0 105 0 3 3 4 97 6 1 4 3 4 81 12 12 0 0 12 23 12 22 18 16 0 11 0 11 33 35 7 6 24 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmE_Anusvara;
},
{
glyphname = dvmE_Reph;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-142,775,o),
(-135,815,qs),
(-126,863,o),
(-72,915,o),
(-32,915,qs),
(3,915,o),
(36,869,o),
(28,833,q),
(100,833,l),
(116,898,o),
(58,980,o),
(-5,980,qs),
(-73,980,o),
(-156,895,o),
(-166,835,qs),
(-168,827,l),
(-201,896,o),
(-264,961,o),
(-337,981,o),
(-399,981,qs),
(-440,981,l),
(-452,913,l),
(-410,913,ls),
(-356,913,o),
(-298,891,o),
(-244,818,o),
(-207,736,q),
(-128,736,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
11 1 5 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 0 5 0 3 114 6 1 5 5 132 2 1 1 0 0 1 89 2 1 1 1 0 97 4 1 0 1 0 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 3 0 5 0 3 5 128 6 1 5 5 132 2 1 1 0 0 1 89 2 1 1 1 0 97 4 1 0 1 0 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 27 0 27 34 18 38 33 35 7 6 27 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmE_Reph;
},
{
glyphname = dvmE_Reph_Anusvara;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-143,779,o),
(-136,821,qs),
(-127,872,o),
(-60,930,o),
(-13,930,qs),
(30,930,o),
(71,878,o),
(66,837,q),
(125,837,l),
(138,904,o),
(74,985,o),
(6,985,qs),
(-68,985,o),
(-161,897,o),
(-171,835,qs),
(-172,834,l),
(-205,900,o),
(-266,963,o),
(-338,981,o),
(-400,981,qs),
(-441,981,l),
(-453,913,l),
(-411,913,ls),
(-357,913,o),
(-299,891,o),
(-244,818,o),
(-207,736,q),
(-128,736,l)
);
},
{
closed = 1;
nodes = (
(-25,788,o),
(6,815,o),
(9,833,qs),
(13,852,o),
(-9,878,o),
(-28,878,qs),
(-47,878,o),
(-77,852,o),
(-81,833,qs),
(-84,815,o),
(-63,788,o),
(-44,788,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
11 1 7 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 3 6 7 6 3 7 128 8 1 5 7 5 134 0 2 0 4 0 2 4 105 0 1 0 0 6 1 0 105 0 6 3 7 6 89 0 6 6 7 97 9 1 7 6 7 81 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 3 6 7 6 3 7 128 8 1 5 7 5 134 0 4 0 1 4 89 2 1 1 0 0 6 1 0 105 0 6 3 7 6 89 0 6 6 7 97 9 1 7 6 7 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 3 6 7 6 3 7 128 8 1 5 7 5 134 0 2 0 4 0 2 4 105 0 1 0 0 6 1 0 105 0 6 3 7 6 89 0 6 6 7 97 9 1 7 6 7 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
28 28 0 0 28 39 28 38 34 32 0 27 0 27 34 18 38 33 35 10 6 27 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmE_Reph_Anusvara;
},
{
glyphname = dvmAI_Anusvara;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-182,884,o),
(-250,1008,o),
(-324,1041,o),
(-398,1041,qs),
(-441,1041,l),
(-451,986,l),
(-407,986,ls),
(-356,986,o),
(-298,967,o),
(-243,891,o),
(-212,807,q),
(-253,847,o),
(-310,881,o),
(-369,889,o),
(-427,889,qs),
(-468,889,l),
(-478,835,l),
(-435,835,ls),
(-376,835,o),
(-316,824,o),
(-257,785,o),
(-205,737,q),
(-133,737,l)
);
},
{
closed = 1;
nodes = (
(-17,829,o),
(22,862,o),
(26,885,qs),
(30,908,o),
(3,941,o),
(-20,941,qs),
(-44,941,o),
(-83,908,o),
(-87,885,qs),
(-91,862,o),
(-64,829,o),
(-40,829,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
11 1 4 6 1 76 7 1 4 6 4 134 0 3 0 2 5 3 2 105 0 5 1 6 5 89 0 1 0 0 6 1 0 105 0 5 5 6 97 8 1 6 5 6 81 23 23 0 0 23 34 23 33 29 27 0 22 0 22 33 38 33 35 9 6 26 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmAI_Anusvara;
},
{
glyphname = dvmAI_Reph;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-137,751,ls),
(-146,784,o),
(-140,815,qs),
(-132,863,o),
(-77,915,o),
(-37,915,qs),
(-2,915,o),
(30,869,o),
(22,833,q),
(87,833,l),
(103,898,o),
(48,980,o),
(-12,980,qs),
(-77,980,o),
(-157,900,o),
(-170,842,q),
(-206,936,o),
(-265,1019,o),
(-333,1041,o),
(-398,1041,qs),
(-441,1041,l),
(-451,986,l),
(-407,986,ls),
(-356,986,o),
(-298,967,o),
(-243,891,o),
(-212,807,q),
(-253,847,o),
(-310,881,o),
(-369,889,o),
(-427,889,qs),
(-468,889,l),
(-478,835,l),
(-435,835,ls),
(-376,835,o),
(-316,824,o),
(-257,785,o),
(-205,737,q),
(-133,737,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
22 1 0 1 11 1 7 0 2 76 8 1 7 0 7 134 0 3 0 2 4 3 2 105 0 4 0 6 1 4 6 105 0 1 0 0 1 89 0 1 1 0 97 5 1 0 1 0 81 0 0 0 38 0 38 34 18 37 33 38 33 35 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmAI_Reph;
},
{
glyphname = dvmAI_Reph_Anusvara;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-136,747,ls),
(-147,785,o),
(-141,819,qs),
(-132,872,o),
(-66,930,o),
(-18,930,qs),
(25,930,o),
(66,878,o),
(61,837,q),
(120,837,l),
(133,903,o),
(69,985,o),
(1,985,qs),
(-68,985,o),
(-159,906,o),
(-172,848,q),
(-207,939,o),
(-266,1019,o),
(-334,1041,o),
(-398,1041,qs),
(-441,1041,l),
(-451,986,l),
(-407,986,ls),
(-356,986,o),
(-298,967,o),
(-243,891,o),
(-212,807,q),
(-253,847,o),
(-310,881,o),
(-369,889,o),
(-427,889,qs),
(-468,889,l),
(-478,835,l),
(-435,835,ls),
(-376,835,o),
(-316,824,o),
(-257,785,o),
(-205,737,q),
(-133,737,l)
);
},
{
closed = 1;
nodes = (
(-32,788,o),
(-1,815,o),
(2,833,qs),
(5,852,o),
(-16,878,o),
(-35,878,qs),
(-54,878,o),
(-85,852,o),
(-88,833,qs),
(-91,815,o),
(-70,788,o),
(-51,788,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 82 values pushed */
22 1 0 8 11 1 9 0 2 76 10 1 7 9 7 134 0 3 0 2 4 3 2 105 0 4 0 6 1 4 6 105 0 8 0 9 8 89 0 1 5 1 0 9 1 0 105 0 8 8 9 97 11 1 9 8 9 81 39 39 0 0 39 50 39 49 45 43 0 38 0 38 34 18 37 33 38 33 35 12 6 29 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmAI_Reph_Anusvara;
},
{
glyphname = dvmO_Anusvara;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(103,0,l),
(221,670,l),
(352,670,l),
(364,740,l),
(230,740,l),
(185,851,o),
(113,952,o),
(32,981,o),
(-41,981,qs),
(-82,981,l),
(-94,913,l),
(-52,913,ls),
(1,913,o),
(60,892,o),
(113,820,o),
(150,740,q),
(17,740,l),
(5,670,l),
(137,670,l),
(19,0,l)
);
},
{
closed = 1;
nodes = (
(343,830,o),
(382,863,o),
(386,886,qs),
(390,909,o),
(363,942,o),
(340,942,qs),
(316,942,o),
(277,909,o),
(273,886,qs),
(269,863,o),
(296,830,o),
(320,830,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 6 0 6 134 0 3 0 2 8 3 2 105 0 7 9 1 8 1 7 8 105 4 1 1 0 0 1 87 4 1 1 1 0 95 5 1 0 1 0 79 20 20 20 31 20 30 37 17 17 19 33 35 17 16 10 6 30 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmO_Anusvara;
},
{
glyphname = dvmO_Reph;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(103,0,l),
(221,670,l),
(352,670,l),
(364,740,l),
(230,740,l),
(225,755,o),
(221,796,o),
(224,815,qs),
(233,863,o),
(287,915,o),
(327,915,qs),
(362,915,o),
(395,869,o),
(386,833,q),
(458,833,l),
(475,898,o),
(417,980,o),
(354,980,qs),
(286,980,o),
(203,895,o),
(193,835,qs),
(191,827,l),
(158,896,o),
(95,961,o),
(21,981,o),
(-41,981,qs),
(-82,981,l),
(-94,913,l),
(-52,913,ls),
(1,913,o),
(60,892,o),
(113,820,o),
(150,740,q),
(17,740,l),
(5,670,l),
(137,670,l),
(19,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 1 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
16 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 5 2 1 2 5 114 0 9 0 9 134 4 1 3 6 1 2 5 3 2 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 5 2 1 2 5 1 128 0 9 0 9 134 4 1 3 6 1 2 5 3 2 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
36 35 17 21 34 18 38 33 35 17 16 10 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmO_Reph;
},
{
glyphname = dvmO_Reph_Anusvara;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(102,0,l),
(220,670,l),
(351,670,l),
(364,740,l),
(230,740,l),
(216,779,o),
(223,821,qs),
(232,872,o),
(299,930,o),
(346,930,qs),
(389,930,o),
(430,878,o),
(425,837,q),
(484,837,l),
(497,904,o),
(433,985,o),
(365,985,qs),
(291,985,o),
(198,897,o),
(187,835,qs),
(187,834,l),
(154,900,o),
(93,963,o),
(21,981,o),
(-41,981,qs),
(-82,981,l),
(-94,913,l),
(-52,913,ls),
(1,913,o),
(59,892,o),
(113,820,o),
(150,740,q),
(17,740,l),
(4,670,l),
(136,670,l),
(18,0,l)
);
},
{
closed = 1;
nodes = (
(334,788,o),
(365,815,o),
(368,833,qs),
(371,852,o),
(350,878,o),
(331,878,qs),
(312,878,o),
(281,852,o),
(278,833,qs),
(275,815,o),
(296,788,o),
(315,788,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 11 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 5 10 11 10 5 11 128 0 9 0 9 134 0 4 0 6 2 4 6 105 0 3 0 2 10 3 2 105 0 10 12 1 11 1 10 11 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 5 10 11 10 5 11 128 0 9 0 9 134 0 6 2 3 6 89 4 1 3 0 2 10 3 2 105 0 10 12 1 11 1 10 11 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 5 10 11 10 5 11 128 0 9 0 9 134 0 4 0 6 2 4 6 105 0 3 0 2 10 3 2 105 0 10 12 1 11 1 10 11 105 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
36 36 36 47 36 46 42 40 35 34 17 20 34 18 38 33 35 17 16 13 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmO_Reph_Anusvara;
},
{
glyphname = dvmAU_Anusvara;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(97,0,l),
(215,670,l),
(346,670,l),
(359,740,l),
(222,740,l),
(173,885,o),
(105,1009,o),
(32,1041,o),
(-42,1041,qs),
(-85,1041,l),
(-95,986,l),
(-51,986,ls),
(0,986,o),
(58,967,o),
(113,891,o),
(144,807,q),
(103,847,o),
(46,881,o),
(-13,889,o),
(-71,889,qs),
(-112,889,l),
(-122,835,l),
(-79,835,ls),
(-21,835,o),
(39,824,o),
(97,786,o),
(148,740,q),
(12,740,l),
(-1,670,l),
(131,670,l),
(13,0,l)
);
},
{
closed = 1;
nodes = (
(339,829,o),
(378,862,o),
(382,885,qs),
(386,908,o),
(359,941,o),
(336,941,qs),
(312,941,o),
(273,908,o),
(269,885,qs),
(265,862,o),
(292,829,o),
(316,829,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
14 1 1 10 1 76 0 8 0 8 134 0 5 0 4 9 5 4 105 0 3 0 2 10 3 2 105 0 9 11 1 10 1 9 10 105 6 1 1 0 0 1 87 6 1 1 1 0 95 7 1 0 1 0 79 31 31 31 42 31 41 37 35 17 17 19 33 38 33 35 17 16 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmAU_Anusvara;
},
{
glyphname = dvmAU_Reph;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(97,0,l),
(215,670,l),
(346,670,l),
(359,740,l),
(222,740,l),
(222,741,o),
(219,751,qs),
(210,784,o),
(216,815,qs),
(224,863,o),
(279,915,o),
(319,915,qs),
(354,915,o),
(386,869,o),
(378,833,q),
(443,833,l),
(459,898,o),
(404,980,o),
(344,980,qs),
(279,980,o),
(199,900,o),
(186,842,q),
(150,936,o),
(91,1019,o),
(23,1041,o),
(-42,1041,qs),
(-85,1041,l),
(-95,986,l),
(-51,986,ls),
(0,986,o),
(58,967,o),
(113,891,o),
(144,807,q),
(103,847,o),
(46,881,o),
(-13,889,o),
(-71,889,qs),
(-112,889,l),
(-122,835,l),
(-79,835,ls),
(-21,835,o),
(39,824,o),
(97,786,o),
(148,740,q),
(12,740,l),
(-1,670,l),
(131,670,l),
(13,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */
25 1 2 3 14 1 1 2 2 76 0 11 0 11 134 0 5 0 4 6 5 4 105 0 6 0 8 3 6 8 105 0 3 7 1 2 1 3 2 105 9 1 1 0 0 1 87 9 1 1 1 0 95 10 1 0 1 0 79 47 46 45 44 43 41 34 18 37 33 38 33 35 17 16 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmAU_Reph;
},
{
glyphname = dvmAU_Reph_Anusvara;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(97,0,l),
(215,670,l),
(346,670,l),
(359,740,l),
(222,740,l),
(220,747,ls),
(209,785,o),
(215,819,qs),
(224,872,o),
(290,930,o),
(338,930,qs),
(381,930,o),
(422,878,o),
(417,837,q),
(476,837,l),
(489,903,o),
(425,985,o),
(357,985,qs),
(288,985,o),
(197,906,o),
(184,848,q),
(149,939,o),
(90,1019,o),
(22,1041,o),
(-42,1041,qs),
(-85,1041,l),
(-95,986,l),
(-51,986,ls),
(0,986,o),
(58,967,o),
(113,891,o),
(144,807,q),
(103,847,o),
(46,881,o),
(-13,889,o),
(-71,889,qs),
(-112,889,l),
(-122,835,l),
(-79,835,ls),
(-21,835,o),
(39,824,o),
(97,786,o),
(148,740,q),
(12,740,l),
(-1,670,l),
(131,670,l),
(13,0,l)
);
},
{
closed = 1;
nodes = (
(324,788,o),
(355,815,o),
(358,833,qs),
(361,852,o),
(340,878,o),
(321,878,qs),
(302,878,o),
(271,852,o),
(268,833,qs),
(265,815,o),
(286,788,o),
(305,788,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 94 values pushed */
25 1 2 12 14 1 13 2 2 76 0 11 0 11 134 0 5 0 4 6 5 4 105 0 6 0 8 3 6 8 105 0 3 7 1 2 13 3 2 105 0 12 14 1 13 1 12 13 105 9 1 1 0 0 1 87 9 1 1 1 0 95 10 1 0 1 0 79 47 47 47 58 47 57 53 51 46 45 44 43 42 41 34 18 37 33 38 33 35 17 16 15 6 31 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmAU_Reph_Anusvara;
},
{
glyphname = dvmEcandra_Anusvara;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-102,818,o),
(-2,865,o),
(58,945,o),
(66,994,q),
(-2,994,l),
(-10,948,o),
(-92,879,o),
(-157,879,qs),
(-222,879,o),
(-280,948,o),
(-272,994,q),
(-341,994,l),
(-349,945,o),
(-317,865,o),
(-234,818,o),
(-168,818,qs)
);
},
{
closed = 1;
nodes = (
(-121,982,o),
(-93,1006,o),
(-90,1023,qs),
(-87,1040,o),
(-106,1065,o),
(-124,1065,qs),
(-141,1065,o),
(-170,1040,o),
(-173,1023,qs),
(-176,1006,o),
(-156,982,o),
(-139,982,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
2 1 0 4 5 4 0 5 128 0 4 7 1 5 1 4 5 105 0 1 3 3 1 89 0 1 1 3 97 6 1 3 1 3 81 16 16 0 0 16 27 16 26 22 20 0 15 0 14 18 34 19 8 6 25 
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = dvmEcandra_Anusvara;
},
{
glyphname = dvmOcandra_Anusvara;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(11,0,l),
(95,0,l),
(213,670,l),
(344,670,l),
(357,740,l),
(10,740,l),
(-3,670,l),
(129,670,l)
);
},
{
closed = 1;
nodes = (
(263,818,o),
(363,865,o),
(423,945,o),
(431,994,q),
(363,994,l),
(355,948,o),
(273,879,o),
(208,879,qs),
(143,879,o),
(85,948,o),
(93,994,q),
(24,994,l),
(16,945,o),
(48,865,o),
(131,818,o),
(197,818,qs)
);
},
{
closed = 1;
nodes = (
(244,982,o),
(272,1006,o),
(275,1023,qs),
(278,1040,o),
(259,1065,o),
(241,1065,qs),
(224,1065,o),
(195,1040,o),
(192,1023,qs),
(189,1006,o),
(209,982,o),
(226,982,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 82 values pushed */
6 1 4 8 9 8 4 9 128 0 2 1 2 134 0 8 12 1 9 5 8 9 105 0 5 11 1 7 0 5 7 105 0 0 1 1 0 87 0 0 0 1 95 10 3 2 1 0 1 79 24 24 8 8 0 0 24 35 24 34 30 28 8 23 8 22 19 18 16 14 12 11 0 7 0 7 17 17 17 13 6 25 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmOcandra_Anusvara;
},
{
glyphname = dvRA_mU;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,348,l),
(163,352,l),
(170,352,l)
);
},
{
closed = 1;
nodes = (
(27,670,l),
(413,670,l),
(397,581,ls),
(368,414,o),
(197,414,qs),
(92,414,l),
(55,207,ls),
(38,109,o),
(118,-9,o),
(215,-9,qs),
(304,-9,o),
(426,100,o),
(443,193,qs),
(445,207,l),
(365,207,l),
(362,191,ls),
(352,133,o),
(279,63,o),
(226,63,qs),
(170,63,o),
(125,139,o),
(136,202,qs),
(161,345,l),
(581,345,ls),
(637,345,o),
(693,290,o),
(684,240,qs),
(675,191,o),
(607,138,o),
(556,138,qs),
(527,138,o),
(506,145,q),
(494,76,l),
(527,70,o),
(551,70,qs),
(633,70,o),
(746,160,o),
(759,236,qs),
(774,321,o),
(686,414,o),
(588,414,qs),
(392,414,l),
(461,475,o),
(480,581,qs),
(496,670,l),
(930,670,l),
(942,740,l),
(39,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
2 1 4 1 18 1 3 6 17 1 2 3 3 76 0 6 4 3 4 6 3 128 11 1 10 9 1 0 1 10 0 103 8 1 1 0 4 6 1 4 103 0 3 0 2 5 3 2 105 0 5 7 7 5 89 0 5 5 7 97 0 7 5 7 81 3 3 3 50 3 50 49 48 35 35 19 35 36 35 36 35 20 12 6 31 
CALL[ ]	/* CallFunction */";
};
width = 829;
}
);
note = dvRA_mU;
},
{
glyphname = dvRA_mUU;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(162,348,l),
(163,352,l),
(170,352,l)
);
},
{
closed = 1;
nodes = (
(27,670,l),
(413,670,l),
(397,581,ls),
(368,414,o),
(197,414,qs),
(92,414,l),
(55,207,ls),
(38,109,o),
(118,-9,o),
(215,-9,qs),
(304,-9,o),
(426,100,o),
(443,193,qs),
(445,207,l),
(365,207,l),
(362,191,ls),
(352,133,o),
(279,63,o),
(226,63,qs),
(170,63,o),
(125,139,o),
(136,202,qs),
(161,345,l),
(468,345,ls),
(537,345,o),
(600,278,o),
(588,215,qs),
(571,118,l),
(649,118,l),
(667,216,ls),
(683,311,o),
(593,414,o),
(489,414,qs),
(392,414,l),
(461,475,o),
(480,581,qs),
(496,670,l),
(834,670,l),
(846,740,l),
(39,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 74 values pushed */
2 1 3 1 1 76 0 5 3 2 3 5 2 128 0 2 4 3 2 4 126 10 1 9 8 1 0 1 9 0 103 7 1 1 0 3 5 1 3 103 0 4 6 6 4 89 0 4 4 6 97 0 6 4 6 81 3 3 3 42 3 42 18 35 35 19 35 35 19 35 20 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
note = dvRA_mUU;
},
{
glyphname = dvmI.a01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,670,l),
(350,670,l),
(363,740,l),
(231,740,l),
(249,843,o),
(401,927,o),
(498,927,qs),
(555,927,o),
(654,890,o),
(709,804,o),
(697,736,qs),
(694,720,l),
(776,720,l),
(779,737,ls),
(794,822,o),
(729,939,o),
(596,996,o),
(510,996,qs),
(374,996,o),
(173,870,o),
(148,740,q),
(16,740,l),
(3,670,l),
(135,670,l),
(17,0,l),
(101,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 25 0 25 17 18 36 20 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a01;
},
{
glyphname = dvmI.a02;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,670,l),
(350,670,l),
(363,740,l),
(231,740,l),
(249,843,o),
(409,928,o),
(523,928,qs),
(634,928,o),
(768,835,o),
(751,735,qs),
(748,719,l),
(829,719,l),
(832,737,ls),
(847,822,o),
(779,939,o),
(634,997,o),
(535,997,qs),
(381,997,o),
(173,872,o),
(148,740,q),
(16,740,l),
(3,670,l),
(135,670,l),
(17,0,l),
(101,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 24 0 24 17 18 35 20 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a02;
},
{
glyphname = dvmI.a03;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,670,l),
(350,670,l),
(362,740,l),
(230,740,l),
(249,844,o),
(416,929,o),
(549,929,qs),
(680,929,o),
(822,836,o),
(804,733,qs),
(802,719,l),
(884,719,l),
(887,735,ls),
(909,864,o),
(732,998,o),
(561,998,qs),
(389,998,o),
(173,873,o),
(147,740,q),
(15,740,l),
(3,670,l),
(135,670,l),
(17,0,l),
(101,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 23 0 23 17 18 35 19 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a03;
},
{
glyphname = dvmI.a04;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,670,l),
(350,670,l),
(362,740,l),
(230,740,l),
(249,844,o),
(424,930,o),
(574,930,qs),
(723,930,o),
(875,835,o),
(857,732,qs),
(855,718,l),
(937,718,l),
(940,735,ls),
(962,864,o),
(777,999,o),
(587,999,qs),
(397,999,o),
(174,874,o),
(147,740,q),
(15,740,l),
(3,670,l),
(135,670,l),
(17,0,l),
(101,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 23 0 23 17 18 35 19 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a04;
},
{
glyphname = dvmI.a05;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,670,l),
(350,670,l),
(362,740,l),
(230,740,l),
(249,845,o),
(431,931,o),
(599,931,qs),
(767,931,o),
(929,836,o),
(911,732,qs),
(908,717,l),
(990,717,l),
(993,734,ls),
(1016,865,o),
(821,1000,o),
(612,1000,qs),
(404,1000,o),
(174,875,o),
(147,740,q),
(15,740,l),
(3,670,l),
(135,670,l),
(17,0,l),
(101,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 23 0 23 17 18 35 19 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a05;
},
{
glyphname = dvmI.a06;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,670,l),
(350,670,l),
(362,740,l),
(230,740,l),
(244,812,o),
(340,896,o),
(502,932,o),
(625,932,qs),
(811,932,o),
(982,836,o),
(964,731,qs),
(961,716,l),
(1043,716,l),
(1046,732,ls),
(1069,865,o),
(866,1001,o),
(639,1001,qs),
(413,1001,o),
(174,876,o),
(147,740,q),
(15,740,l),
(3,670,l),
(135,670,l),
(17,0,l),
(101,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 24 0 24 17 19 35 19 34 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a06;
},
{
glyphname = dvmI.a07;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,670,l),
(350,670,l),
(362,740,l),
(230,740,l),
(244,812,o),
(342,895,o),
(515,932,o),
(651,932,qs),
(856,932,o),
(1037,836,o),
(1018,730,qs),
(1016,717,l),
(1098,716,l),
(1101,731,ls),
(1148,1001,o),
(665,1001,qs),
(502,1001,o),
(286,946,o),
(165,831,o),
(147,740,q),
(15,740,l),
(3,670,l),
(135,670,l),
(17,0,l),
(101,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 24 0 24 17 19 35 18 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a07;
},
{
glyphname = dvmI.a08;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,670,l),
(350,670,l),
(362,740,l),
(230,740,l),
(245,812,o),
(344,896,o),
(528,933,o),
(676,933,qs),
(900,933,o),
(1091,835,o),
(1072,729,qs),
(1070,717,l),
(1151,716,l),
(1154,731,ls),
(1177,865,o),
(955,1002,o),
(691,1002,qs),
(514,1002,o),
(288,947,o),
(165,832,o),
(147,740,q),
(15,740,l),
(3,670,l),
(135,670,l),
(17,0,l),
(101,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 25 0 25 17 19 35 19 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a08;
},
{
glyphname = dvmI.a09;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,670,l),
(350,670,l),
(362,740,l),
(230,740,l),
(245,812,o),
(347,896,o),
(541,934,o),
(701,934,qs),
(864,934,o),
(1059,890,o),
(1137,799,o),
(1125,727,qs),
(1123,716,l),
(1205,715,l),
(1207,730,ls),
(1231,865,o),
(998,1003,o),
(715,1003,qs),
(527,1003,o),
(291,948,o),
(166,833,o),
(147,740,q),
(15,740,l),
(3,670,l),
(135,670,l),
(17,0,l),
(101,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 26 0 26 17 19 36 19 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a09;
},
{
glyphname = dvmI.a10;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,670,l),
(350,670,l),
(362,740,l),
(230,740,l),
(245,812,o),
(349,897,o),
(555,935,o),
(727,935,qs),
(903,935,o),
(1109,890,o),
(1191,799,o),
(1179,727,qs),
(1177,715,l),
(1258,714,l),
(1261,729,ls),
(1285,865,o),
(1044,1004,o),
(742,1004,qs),
(541,1004,o),
(293,948,o),
(166,833,o),
(147,740,q),
(15,740,l),
(3,670,l),
(135,670,l),
(16,0,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 26 0 26 17 19 36 19 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a10;
},
{
glyphname = dvmI.a11;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,670,l),
(350,670,l),
(362,740,l),
(230,740,l),
(245,812,o),
(351,897,o),
(567,936,o),
(752,936,qs),
(941,936,o),
(1160,890,o),
(1246,798,o),
(1233,726,qs),
(1231,714,l),
(1312,713,l),
(1315,728,ls),
(1331,819,o),
(1236,941,o),
(985,1005,o),
(768,1005,qs),
(555,1005,o),
(296,948,o),
(166,833,o),
(147,740,q),
(15,740,l),
(3,670,l),
(135,670,l),
(16,0,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a11;
},
{
glyphname = dvmI.a12;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,670,l),
(349,670,l),
(362,740,l),
(230,740,l),
(244,811,o),
(353,896,o),
(583,937,o),
(779,937,qs),
(980,937,o),
(1211,890,o),
(1300,797,o),
(1287,725,qs),
(1285,714,l),
(1366,713,l),
(1368,726,ls),
(1384,817,o),
(1287,940,o),
(1024,1006,o),
(794,1006,qs),
(568,1006,o),
(298,949,o),
(166,834,o),
(147,740,q),
(15,740,l),
(2,670,l),
(134,670,l),
(16,0,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a12;
},
{
glyphname = dvmI.a13;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,670,l),
(349,670,l),
(362,740,l),
(230,740,l),
(244,812,o),
(355,897,o),
(595,938,o),
(804,938,qs),
(1018,938,o),
(1261,890,o),
(1352,797,o),
(1339,724,qs),
(1337,713,l),
(1420,713,l),
(1422,726,ls),
(1438,818,o),
(1338,941,o),
(1062,1007,o),
(819,1007,qs),
(582,1007,o),
(301,949,o),
(166,834,o),
(147,740,q),
(15,740,l),
(2,670,l),
(134,670,l),
(16,0,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a13;
},
{
glyphname = dvmI.a14;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,670,l),
(349,670,l),
(362,740,l),
(230,740,l),
(245,811,o),
(358,897,o),
(610,939,o),
(829,939,qs),
(1056,939,o),
(1311,890,o),
(1405,795,o),
(1392,722,qs),
(1391,713,l),
(1474,712,l),
(1476,724,ls),
(1492,817,o),
(1389,941,o),
(1101,1008,o),
(846,1008,qs),
(595,1008,o),
(303,950,o),
(166,834,o),
(147,740,q),
(15,740,l),
(2,670,l),
(134,670,l),
(16,0,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a14;
},
{
glyphname = dvmI.a15;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,670,l),
(349,670,l),
(362,740,l),
(230,740,l),
(245,812,o),
(360,898,o),
(622,940,o),
(856,940,qs),
(1096,940,o),
(1363,890,o),
(1460,795,o),
(1447,722,qs),
(1446,712,l),
(1527,711,l),
(1530,724,ls),
(1546,816,o),
(1440,941,o),
(1140,1009,o),
(872,1009,qs),
(609,1009,o),
(306,950,o),
(166,834,o),
(147,740,q),
(15,740,l),
(2,670,l),
(134,670,l),
(16,0,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a15;
},
{
glyphname = dvmI.a16;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,670,l),
(349,670,l),
(361,740,l),
(229,740,l),
(245,811,o),
(363,897,o),
(637,941,o),
(881,941,qs),
(1134,941,o),
(1413,890,o),
(1513,795,o),
(1500,722,qs),
(1498,711,l),
(1581,711,l),
(1583,723,ls),
(1600,816,o),
(1491,941,o),
(1178,1010,o),
(897,1010,qs),
(622,1010,o),
(308,951,o),
(166,834,o),
(146,740,q),
(14,740,l),
(2,670,l),
(134,670,l),
(16,0,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a16;
},
{
glyphname = dvmI.a17;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,670,l),
(349,670,l),
(361,740,l),
(229,740,l),
(245,811,o),
(365,898,o),
(650,942,o),
(906,942,qs),
(1171,942,o),
(1464,890,o),
(1567,794,o),
(1554,720,qs),
(1552,711,l),
(1634,710,l),
(1636,721,ls),
(1653,815,o),
(1541,942,o),
(1217,1011,o),
(923,1011,qs),
(636,1011,o),
(311,951,o),
(166,835,o),
(146,740,q),
(14,740,l),
(2,670,l),
(134,670,l),
(16,0,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a17;
},
{
glyphname = dvmI.a18;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,670,l),
(349,670,l),
(361,740,l),
(229,740,l),
(245,812,o),
(369,898,o),
(664,943,o),
(932,943,qs),
(1210,943,o),
(1514,890,o),
(1620,792,o),
(1608,719,qs),
(1606,711,l),
(1688,710,l),
(1690,721,ls),
(1706,815,o),
(1592,941,o),
(1255,1012,o),
(948,1012,qs),
(649,1012,o),
(312,951,o),
(166,835,o),
(146,740,q),
(14,740,l),
(2,670,l),
(134,670,l),
(16,0,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a18;
},
{
glyphname = dvmI.a19;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,670,l),
(349,670,l),
(361,740,l),
(229,740,l),
(245,811,o),
(371,898,o),
(678,944,o),
(957,944,qs),
(1248,944,o),
(1565,890,o),
(1674,792,o),
(1661,718,qs),
(1660,710,l),
(1743,709,l),
(1745,721,ls),
(1761,815,o),
(1644,942,o),
(1294,1013,o),
(974,1013,qs),
(663,1013,o),
(316,952,o),
(166,835,o),
(146,740,q),
(14,740,l),
(2,670,l),
(134,670,l),
(16,0,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a19;
},
{
glyphname = dvmI.a20;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,670,l),
(349,670,l),
(361,740,l),
(229,740,l),
(245,811,o),
(374,898,o),
(692,945,o),
(982,945,qs),
(1286,945,o),
(1616,890,o),
(1727,791,o),
(1714,717,qs),
(1713,710,l),
(1796,709,l),
(1797,719,ls),
(1814,814,o),
(1694,942,o),
(1333,1014,o),
(1000,1014,qs),
(677,1014,o),
(317,952,o),
(166,835,o),
(146,740,q),
(14,740,l),
(2,670,l),
(134,670,l),
(16,0,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a20;
},
{
glyphname = dvmI.a21;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,670,l),
(349,670,l),
(361,740,l),
(229,740,l),
(245,811,o),
(376,898,o),
(705,945,o),
(1008,945,qs),
(1324,945,o),
(1666,890,o),
(1781,790,o),
(1768,716,qs),
(1767,709,l),
(1849,708,l),
(1851,718,ls),
(1868,813,o),
(1745,941,o),
(1372,1014,o),
(1026,1014,qs),
(690,1014,o),
(320,952,o),
(166,835,o),
(146,740,q),
(14,740,l),
(2,670,l),
(134,670,l),
(16,0,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a21;
},
{
glyphname = dvmI.a22;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,670,l),
(349,670,l),
(361,740,l),
(229,740,l),
(245,811,o),
(378,898,o),
(718,946,o),
(1033,946,qs),
(1362,946,o),
(1716,889,o),
(1835,789,o),
(1822,715,qs),
(1821,709,l),
(1902,707,l),
(1904,717,ls),
(1921,812,o),
(1794,941,o),
(1410,1015,o),
(1052,1015,qs),
(704,1015,o),
(323,953,o),
(166,836,o),
(146,740,q),
(14,740,l),
(2,670,l),
(134,670,l),
(16,0,l),
(100,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a22;
},
{
glyphname = dvmI.a23;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,670,l),
(349,670,l),
(361,740,l),
(229,740,l),
(245,811,o),
(382,898,o),
(733,947,o),
(1059,947,qs),
(1401,947,o),
(1767,890,o),
(1889,789,o),
(1875,714,qs),
(1874,708,l),
(1957,707,l),
(1959,716,ls),
(1976,812,o),
(1847,942,o),
(1450,1016,o),
(1078,1016,qs),
(719,1016,o),
(326,953,o),
(167,835,o),
(146,740,q),
(14,740,l),
(2,670,l),
(134,670,l),
(15,0,l),
(99,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a23;
},
{
glyphname = dvmI.a24;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,670,l),
(348,670,l),
(361,740,l),
(229,740,l),
(245,811,o),
(384,899,o),
(747,948,o),
(1085,948,qs),
(1439,948,o),
(1817,890,o),
(1942,788,o),
(1929,713,qs),
(1928,707,l),
(2011,706,l),
(2012,715,ls),
(2029,811,o),
(1897,942,o),
(1489,1017,o),
(1105,1017,qs),
(733,1017,o),
(328,953,o),
(167,836,o),
(146,740,q),
(14,740,l),
(1,670,l),
(133,670,l),
(15,0,l),
(99,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
0 3 1 0 1 3 0 128 8 1 7 0 7 134 0 2 0 4 1 2 4 105 5 1 1 3 0 1 87 5 1 1 1 0 95 6 1 0 1 0 79 0 0 0 27 0 27 17 19 36 20 35 17 17 9 6 29 
CALL[ ]	/* CallFunction */";
};
width = 294;
}
);
note = dvmI.a24;
},
{
glyphname = exclam;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(50,188,o),
(55,182,o),
(59,182,qs),
(175,182,ls),
(179,182,o),
(186,188,o),
(187,192,qs),
(288,702,ls),
(290,712,o),
(280,712,qs),
(142,712,ls),
(132,712,o),
(130,702,qs),
(51,192,ls)
);
},
{
closed = 1;
nodes = (
(194,87,o),
(152,133,o),
(113,133,qs),
(74,133,o),
(12,86,o),
(7,56,qs),
(2,26,o),
(46,-21,o),
(85,-21,qs),
(124,-21,o),
(183,25,o),
(189,56,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
6 1 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 1 1 0 95 0 0 0 28 77 0 3 3 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
0 3 0 2 3 2 101 0 1 1 0 95 0 0 0 28 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
36 37 36 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 298;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = quotedbl;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-2,593,o),
(4,587,o),
(8,587,qs),
(91,587,ls),
(95,587,o),
(102,593,o),
(102,597,qs),
(147,795,ls),
(149,806,o),
(139,806,qs),
(35,806,ls),
(25,806,o),
(23,795,qs),
(-2,597,ls)
);
},
{
closed = 1;
nodes = (
(153,593,o),
(159,587,o),
(163,587,qs),
(246,587,ls),
(250,587,o),
(257,593,o),
(257,597,qs),
(302,795,ls),
(304,806,o),
(294,806,qs),
(190,806,ls),
(180,806,o),
(178,795,qs),
(153,597,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
20 6 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 36 53 36 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 292;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = numbersign;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(479,305,o),
(457,290,o),
(445,290,qs),
(349,290,ls),
(330,290,o),
(312,316,o),
(320,336,qs),
(353,423,ls),
(357,435,o),
(379,450,o),
(391,450,qs),
(487,450,ls),
(506,450,o),
(524,424,o),
(516,404,qs),
(483,317,ls)
);
},
{
closed = 1;
nodes = (
(358,-2,o),
(364,-10,o),
(369,-10,qs),
(474,-10,ls),
(477,-10,o),
(484,-5,o),
(485,-2,qs),
(550,164,ls),
(554,176,o),
(575,190,o),
(587,190,qs),
(707,190,ls),
(717,190,o),
(719,200,qs),
(733,280,ls),
(735,290,o),
(725,290,qs),
(646,290,ls),
(627,290,o),
(609,316,o),
(617,336,qs),
(650,423,ls),
(654,435,o),
(676,450,o),
(688,450,qs),
(809,450,ls),
(819,450,o),
(821,460,qs),
(835,540,ls),
(837,550,o),
(827,550,qs),
(748,550,ls),
(729,550,o),
(710,577,o),
(718,596,qs),
(773,737,ls),
(775,742,o),
(769,750,o),
(764,750,qs),
(659,750,ls),
(656,750,o),
(649,745,o),
(648,742,qs),
(583,576,ls),
(579,564,o),
(558,550,o),
(546,550,qs),
(451,550,ls),
(432,550,o),
(413,577,o),
(421,596,qs),
(476,737,ls),
(478,742,o),
(472,750,o),
(467,750,qs),
(362,750,ls),
(359,750,o),
(352,745,o),
(351,742,qs),
(286,576,ls),
(282,564,o),
(261,550,o),
(249,550,qs),
(112,550,ls),
(102,550,o),
(100,540,qs),
(86,460,ls),
(84,450,o),
(94,450,qs),
(190,450,ls),
(209,450,o),
(227,424,o),
(219,404,qs),
(186,317,ls),
(182,305,o),
(160,290,o),
(148,290,qs),
(9,290,ls),
(-1,290,o),
(-3,280,qs),
(-17,200,ls),
(-19,190,o),
(-9,190,qs),
(88,190,ls),
(107,190,o),
(126,163,o),
(118,144,qs),
(63,3,ls),
(61,-2,o),
(67,-10,o),
(72,-10,qs),
(177,-10,ls),
(180,-10,o),
(187,-5,o),
(188,-2,qs),
(253,164,ls),
(257,176,o),
(278,190,o),
(290,190,qs),
(385,190,ls),
(404,190,o),
(423,163,o),
(415,144,qs),
(360,3,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
13 5 2 1 14 4 2 2 3 1 2 103 10 1 8 8 30 77 12 6 2 0 0 7 95 11 9 2 7 7 31 77 15 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
11 9 2 7 12 6 2 0 1 7 0 104 13 5 2 1 14 4 2 2 3 1 2 103 10 1 8 8 30 77 15 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
10 1 8 7 8 133 11 9 2 7 12 6 2 0 1 7 0 104 13 5 2 1 14 4 2 2 3 1 2 103 15 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 46 values pushed */
10 1 8 7 8 133 15 1 3 2 3 134 11 9 2 7 12 6 2 0 1 7 0 104 13 5 2 1 2 2 1 87 13 5 2 1 1 2 95 14 4 2 2 1 2 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
116 114 109 106 103 100 95 92 89 86 80 78 73 70 37 51 53 51 54 37 53 53 50 16 8 31 
CALL[ ]	/* CallFunction */";
};
width = 840;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = dollar;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(168,-97,o),
(178,-97,qs),
(252,-97,ls),
(262,-97,o),
(264,-87,qs),
(277,-14,l),
(344,-6,o),
(448,56,o),
(510,143,o),
(519,191,qs),
(530,255,o),
(486,334,o),
(407,374,o),
(348,390,q),
(387,610,l),
(410,598,o),
(433,553,o),
(432,526,qs),
(432,517,o),
(440,517,qs),
(557,517,ls),
(562,517,o),
(570,524,o),
(569,528,q),
(574,602,o),
(488,701,o),
(405,713,q),
(418,788,ls),
(420,798,o),
(410,798,qs),
(336,798,ls),
(326,798,o),
(324,788,qs),
(311,713,l),
(214,702,o),
(83,592,o),
(68,512,qs),
(57,448,o),
(101,370,o),
(180,329,o),
(240,313,q),
(200,85,l),
(171,96,o),
(146,147,o),
(148,182,q),
(148,191,o),
(140,191,qs),
(23,191,ls),
(19,191,o),
(12,185,o),
(11,181,qs),
(-2,103,o),
(93,-1,o),
(183,-14,q),
(170,-87,ls)
);
},
{
closed = 1;
nodes = (
(380,147,o),
(331,92,o),
(294,82,q),
(330,286,l),
(364,272,o),
(394,227,o),
(387,186,qs)
);
},
{
closed = 1;
nodes = (
(217,601,o),
(294,617,q),
(259,418,l),
(224,432,o),
(195,477,o),
(202,517,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
65 39 27 20 4 2 1 64 57 40 13 4 0 2 58 48 12 3 0 5 3 0 3 76 0 2 1 0 1 2 0 128 0 0 3 1 0 3 126 0 1 2 3 1 87 0 1 1 3 95 0 3 1 3 79 53 50 39 63 37 4 8 25 
CALL[ ]	/* CallFunction */";
};
width = 622;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = percent;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,487,o),
(125,400,o),
(197,400,qs),
(270,400,o),
(378,487,o),
(391,560,qs),
(404,632,o),
(326,719,o),
(253,719,qs),
(181,719,o),
(72,632,o),
(59,560,qs)
);
},
{
closed = 1;
nodes = (
(266,643,o),
(287,604,o),
(279,560,qs),
(264,476,o),
(210,476,qs),
(157,476,o),
(172,560,qs),
(180,605,o),
(214,643,o),
(240,643,qs)
);
},
{
closed = 1;
nodes = (
(51,2,o),
(56,-10,o),
(64,-10,qs),
(167,-10,ls),
(173,-10,o),
(175,-6,qs),
(701,689,ls),
(706,696,o),
(701,708,o),
(693,708,qs),
(590,708,ls),
(584,708,o),
(582,704,qs),
(56,9,ls)
);
},
{
closed = 1;
nodes = (
(355,66,o),
(434,-22,o),
(506,-22,qs),
(578,-22,o),
(686,66,o),
(699,138,qs),
(712,211,o),
(634,298,o),
(562,298,qs),
(489,298,o),
(381,211,o),
(368,138,qs)
);
},
{
closed = 1;
nodes = (
(574,221,o),
(595,182,o),
(587,138,qs),
(579,94,o),
(544,56,o),
(518,56,qs),
(492,56,o),
(471,94,o),
(479,138,qs),
(487,182,o),
(522,221,o),
(548,221,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 0 1 6 2 1 105 0 6 11 1 9 8 6 9 106 10 1 3 3 0 97 4 1 0 0 28 77 0 8 8 5 97 7 1 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 2 0 1 6 2 1 105 0 6 11 1 9 8 6 9 106 10 1 3 3 0 97 4 1 0 0 28 77 0 5 5 29 77 0 8 8 7 97 0 7 7 29 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 2 0 1 6 2 1 105 0 6 11 1 9 8 6 9 106 0 8 0 7 8 7 101 0 4 4 28 77 10 1 3 3 0 97 0 0 0 28 77 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 5 8 7 8 5 7 128 0 2 0 1 6 2 1 105 0 6 11 1 9 8 6 9 106 0 8 0 7 8 7 101 0 4 4 28 77 10 1 3 3 0 97 0 0 0 28 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
48 48 12 12 48 59 48 58 54 52 45 43 39 37 32 31 25 24 12 21 12 20 38 36 33 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 759;
}
);
note = percent;
unicode = 37;
},
{
glyphname = ampersand;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(548,538,o),
(552,547,q),
(563,597,o),
(531,676,o),
(450,721,o),
(391,721,qs),
(330,721,o),
(229,678,o),
(166,603,o),
(157,556,qs),
(151,519,o),
(166,457,o),
(190,419,q),
(103,384,o),
(3,271,o),
(-9,200,qs),
(-21,134,o),
(27,34,o),
(137,-22,o),
(215,-22,qs),
(357,-22,o),
(472,71,q),
(536,-8,ls),
(538,-10,o),
(541,-10,qs),
(664,-10,ls),
(675,-10,o),
(685,8,o),
(678,15,qs),
(561,157,l),
(599,204,o),
(607,215,qs),
(712,353,ls),
(717,360,o),
(712,372,o),
(704,372,qs),
(593,372,ls),
(587,372,o),
(584,368,qs),
(496,253,l),
(490,245,l),
(333,436,ls),
(305,473,o),
(283,527,o),
(288,556,qs),
(294,590,o),
(338,626,o),
(370,626,qs),
(400,626,o),
(429,588,o),
(421,549,qs),
(420,544,o),
(425,538,o),
(429,538,qs),
(540,538,ls)
);
},
{
closed = 1;
nodes = (
(173,76,o),
(112,145,o),
(122,203,qs),
(131,252,o),
(193,320,o),
(249,343,q),
(405,152,l),
(360,111,o),
(280,76,o),
(233,76,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
52 1 5 0 41 1 1 5 58 57 24 13 4 6 1 32 1 2 6 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
7 1 5 0 1 0 5 1 128 0 0 0 4 97 0 4 4 28 77 0 1 1 2 97 3 1 2 2 29 77 8 1 6 6 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
7 1 5 0 1 0 5 1 128 0 0 0 4 97 0 4 4 28 77 0 1 1 2 95 0 2 2 29 77 8 1 6 6 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 0 1 0 5 1 128 8 1 6 0 3 6 3 101 0 0 0 4 97 0 4 4 28 77 0 1 1 2 95 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
7 1 5 0 1 0 5 1 128 0 1 0 2 3 1 2 103 8 1 6 0 3 6 3 101 0 0 0 4 97 0 4 4 28 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
55 55 0 0 55 64 55 63 0 54 0 53 44 36 41 26 37 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = quotesingle;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(10,592,o),
(15,587,o),
(19,587,qs),
(102,587,ls),
(106,587,o),
(113,592,o),
(113,596,qs),
(160,795,ls),
(162,806,o),
(152,806,qs),
(44,806,ls),
(34,806,o),
(32,795,qs),
(10,596,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
6 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 36 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 159;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = parenleft;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(325,-196,o),
(327,-186,qs),
(328,-179,ls),
(329,-176,o),
(327,-174,qs),
(244,-72,o),
(187,210,o),
(215,366,qs),
(243,527,o),
(407,820,o),
(535,922,q),
(538,924,o),
(539,928,qs),
(540,934,ls),
(540,938,o),
(536,944,o),
(532,944,qs),
(419,944,ls),
(416,944,o),
(413,942,qs),
(283,838,o),
(117,537,o),
(87,366,qs),
(57,199,o),
(112,-93,o),
(198,-194,qs),
(199,-196,o),
(202,-196,qs),
(315,-196,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
26 15 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 28 0 27 56 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 454;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(58,-196,o),
(61,-194,qs),
(183,-93,o),
(340,199,o),
(370,366,qs),
(400,537,o),
(340,838,o),
(246,942,qs),
(245,944,o),
(242,944,qs),
(129,944,ls),
(125,944,o),
(117,938,o),
(117,934,qs),
(116,928,ls),
(115,924,o),
(118,922,q),
(210,820,o),
(270,527,o),
(242,366,qs),
(214,210,o),
(57,-72,o),
(-62,-174,qs),
(-64,-176,o),
(-65,-179,qs),
(-66,-186,ls),
(-68,-196,o),
(-58,-196,qs),
(55,-196,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
13 1 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 2 1 0 1 0 79 1 0 18 16 0 28 1 26 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 454;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = asterisk;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(336,736,o),
(331,744,o),
(326,744,qs),
(232,744,ls),
(227,744,o),
(218,736,o),
(219,732,q),
(212,646,ls),
(212,636,o),
(195,627,o),
(188,633,qs),
(116,693,l),
(56,611,ls),
(54,607,o),
(55,598,o),
(59,596,qs),
(139,561,ls),
(149,557,o),
(146,538,o),
(136,534,qs),
(41,498,ls),
(37,496,o),
(32,487,o),
(34,482,q),
(63,410,ls),
(64,406,o),
(73,404,o),
(77,407,qs),
(157,458,ls),
(166,464,o),
(180,456,o),
(177,446,qs),
(153,362,l),
(152,358,o),
(157,350,o),
(162,350,qs),
(255,350,ls),
(260,350,o),
(269,358,o),
(268,362,q),
(274,446,ls),
(275,456,o),
(292,465,o),
(298,459,qs),
(359,408,ls),
(363,405,o),
(373,407,o),
(376,411,qs),
(429,483,l),
(432,488,o),
(431,496,o),
(426,498,qs),
(344,534,ls),
(335,539,o),
(338,556,o),
(348,560,qs),
(443,597,l),
(447,598,o),
(452,608,o),
(450,612,qs),
(425,682,ls),
(424,686,o),
(414,688,o),
(409,685,qs),
(329,634,ls),
(320,628,o),
(307,637,o),
(310,647,qs),
(335,732,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
61 56 44 28 8 5 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 95 0 1 1 30 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
65 63 32 30 2 8 22 
CALL[ ]	/* CallFunction */";
};
width = 486;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = plus;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(326,631,o),
(324,621,qs),
(292,439,ls),
(290,429,o),
(273,414,o),
(262,414,qs),
(85,414,ls),
(75,414,o),
(74,404,qs),
(60,327,ls),
(58,317,o),
(68,317,qs),
(245,317,ls),
(256,317,o),
(268,303,o),
(266,292,qs),
(234,111,ls),
(232,101,o),
(242,101,qs),
(347,101,ls),
(357,101,o),
(359,111,qs),
(391,292,ls),
(393,303,o),
(410,317,o),
(420,317,qs),
(598,317,ls),
(608,317,o),
(610,327,qs),
(624,404,ls),
(625,414,o),
(615,414,qs),
(437,414,ls),
(427,414,o),
(415,429,o),
(417,439,qs),
(449,621,ls),
(451,631,o),
(441,631,qs),
(336,631,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
6 1 0 1 3 0 87 5 1 1 4 1 2 3 1 2 103 6 1 0 0 3 95 0 3 0 3 79 1 0 34 31 28 25 21 18 14 11 8 5 0 39 1 38 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 683;
}
);
note = plus;
unicode = 43;
},
{
glyphname = comma;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-47,-144,o),
(-41,-153,o),
(-35,-153,qs),
(44,-153,ls),
(51,-153,o),
(53,-147,q),
(211,120,ls),
(214,126,o),
(209,136,o),
(202,136,qs),
(86,136,ls),
(78,136,o),
(76,129,q),
(-44,-139,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 22 18 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 198;
}
);
note = comma;
unicode = 44;
},
{
glyphname = hyphen;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(29,271,o),
(39,271,qs),
(458,271,ls),
(468,271,o),
(470,281,qs),
(484,358,ls),
(486,368,o),
(476,368,qs),
(57,368,ls),
(47,368,o),
(45,358,qs),
(31,281,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 51 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = period;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(191,85,o),
(153,128,o),
(119,128,qs),
(84,128,o),
(29,85,o),
(24,56,qs),
(19,27,o),
(58,-16,o),
(93,-16,qs),
(127,-16,o),
(181,27,o),
(186,56,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
36 33 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 210;
}
);
note = period;
unicode = 46;
},
{
glyphname = slash;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-65,-172,o),
(-60,-180,o),
(-55,-180,qs),
(54,-180,ls),
(62,-180,o),
(64,-173,q),
(533,938,ls),
(535,944,o),
(530,952,o),
(525,952,qs),
(415,952,ls),
(407,952,o),
(405,945,q),
(-63,-166,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 0 1 0 133 0 1 1 118 22 18 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 476;
}
);
note = slash;
unicode = 47;
},
{
glyphname = zero;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,188,o),
(89,-20,o),
(246,-20,qs),
(403,-20,o),
(563,188,o),
(595,369,qs),
(627,548,o),
(539,754,o),
(382,754,qs),
(225,754,o),
(64,548,o),
(32,369,qs)
);
},
{
closed = 1;
nodes = (
(430,281,o),
(391,168,o),
(321,103,o),
(267,103,qs),
(212,103,o),
(166,168,o),
(167,281,o),
(182,369,qs),
(197,454,o),
(237,566,o),
(306,631,o),
(361,631,qs),
(415,631,o),
(461,566,o),
(460,454,o),
(445,369,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 0 97 0 0 0 30 77 0 3 3 1 97 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 3 0 1 3 1 101 0 2 2 0 97 0 0 0 30 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 37 36 33 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(175,-10,l),
(299,688,ls),
(302,708,o),
(280,733,o),
(257,733,qs),
(127,733,l),
(65,630,l),
(146,630,ls),
(157,630,o),
(164,619,o),
(162,605,qs),
(53,-10,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 1 95 0 1 1 28 77 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
0 1 0 0 2 1 0 103 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 0 2 134 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
19 33 34 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 320;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-44,4,o),
(-23,-12,o),
(-7,-12,qs),
(454,-12,ls),
(470,-12,o),
(497,4,o),
(500,18,qs),
(505,49,ls),
(509,72,o),
(479,104,o),
(450,104,qs),
(160,104,l),
(160,86,o),
(163,76,o),
(168,78,q),
(277,156,o),
(428,280,o),
(553,439,o),
(567,522,qs),
(580,593,o),
(536,699,o),
(432,756,o),
(355,756,qs),
(282,756,o),
(157,699,o),
(67,590,o),
(50,513,qs),
(46,499,o),
(67,482,o),
(83,482,qs),
(128,482,ls),
(156,482,o),
(195,509,o),
(204,531,qs),
(224,585,o),
(286,638,o),
(335,638,qs),
(391,638,o),
(427,578,o),
(417,518,qs),
(405,452,o),
(286,315,o),
(122,187,o),
(-17,89,q),
(-31,77,o),
(-33,65,qs),
(-41,18,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
19 1 1 0 31 1 4 3 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 3 0 1 3 128 0 0 0 2 97 0 2 2 30 77 0 3 3 4 95 0 4 4 29 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 3 4 95 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 0 3 0 1 3 128 0 2 0 0 1 2 0 105 0 3 4 4 3 87 0 3 3 4 95 0 4 3 4 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
53 42 37 52 40 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,521,o),
(210,546,o),
(219,566,qs),
(240,603,o),
(298,639,o),
(342,639,qs),
(445,639,o),
(428,542,qs),
(418,486,o),
(339,441,o),
(254,440,qs),
(230,440,o),
(195,412,o),
(190,385,qs),
(189,379,ls),
(185,353,o),
(209,324,o),
(233,324,qs),
(325,324,o),
(394,271,o),
(382,203,qs),
(363,92,o),
(250,92,qs),
(199,92,o),
(146,138,o),
(139,183,qs),
(137,202,o),
(108,228,o),
(81,228,qs),
(36,228,ls),
(19,228,o),
(-10,210,o),
(-10,195,qs),
(-16,91,o),
(117,-25,o),
(230,-25,qs),
(312,-25,o),
(439,33,o),
(517,133,o),
(528,195,qs),
(542,277,o),
(471,383,o),
(393,402,q),
(390,384,l),
(406,385,o),
(414,378,qs),
(418,375,o),
(423,374,o),
(430,377,qs),
(490,401,o),
(567,493,o),
(578,551,qs),
(588,609,o),
(545,702,o),
(443,757,o),
(366,757,qs),
(256,757,o),
(92,648,o),
(64,554,qs),
(60,539,o),
(81,521,o),
(98,521,qs),
(145,521,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
19 1 2 7 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
9 1 0 8 7 8 0 7 128 0 2 7 6 7 2 6 128 0 4 6 5 6 4 5 128 0 7 0 6 4 7 6 105 0 5 0 3 5 3 101 0 8 8 1 97 0 1 1 30 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
9 1 0 8 7 8 0 7 128 0 2 7 6 7 2 6 128 0 4 6 5 6 4 5 128 0 1 0 8 0 1 8 105 0 7 0 6 4 7 6 105 0 5 3 3 5 89 0 5 5 3 97 0 3 5 3 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
1 0 57 55 52 50 45 43 40 38 34 31 27 25 18 17 7 5 0 62 1 61 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 589;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(316,-4,o),
(337,-20,o),
(353,-20,qs),
(423,-20,ls),
(439,-20,o),
(466,-4,o),
(469,10,qs),
(494,151,ls),
(493,146,o),
(484,141,q),
(552,141,ls),
(568,141,o),
(595,157,o),
(597,171,qs),
(607,230,ls),
(610,244,o),
(589,260,o),
(573,260,qs),
(518,260,ls),
(514,260,o),
(514,266,o),
(515,275,qs),
(591,706,ls),
(594,720,o),
(573,736,o),
(557,736,qs),
(466,736,ls),
(454,736,o),
(428,727,o),
(423,717,q),
(1,248,ls),
(-6,241,o),
(-13,230,o),
(-14,223,qs),
(-23,171,ls),
(-25,157,o),
(-4,141,o),
(12,141,qs),
(350,141,l),
(343,146,o),
(344,151,qs),
(319,10,ls)
);
},
{
closed = 1;
nodes = (
(142,247,o),
(155,238,o),
(158,241,q),
(434,554,l),
(437,573,o),
(434,595,o),
(427,603,o),
(427,600,qs),
(365,250,ls),
(366,255,o),
(375,260,q),
(143,260,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
49 45 2 2 1 50 7 0 3 0 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 5 2 2 3 1 0 4 2 0 105 0 1 1 28 77 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 1 2 4 1 87 6 5 2 2 3 1 0 4 2 0 105 0 1 1 4 97 0 4 1 4 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
42 42 42 53 42 53 53 37 38 57 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 629;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(166,744,ls),
(150,744,o),
(123,728,o),
(120,714,qs),
(52,326,ls),
(49,312,o),
(71,296,o),
(87,296,qs),
(155,296,ls),
(167,296,o),
(194,308,o),
(199,320,q),
(224,356,o),
(287,391,o),
(329,391,qs),
(396,391,o),
(445,322,o),
(432,248,qs),
(419,174,o),
(342,95,o),
(276,95,qs),
(225,95,o),
(170,141,o),
(164,189,q),
(164,202,o),
(140,216,o),
(127,216,qs),
(58,216,ls),
(39,216,o),
(14,198,o),
(13,181,q),
(15,90,o),
(140,-22,o),
(254,-22,qs),
(345,-22,o),
(482,50,o),
(566,174,o),
(579,250,qs),
(591,314,o),
(561,432,o),
(457,509,o),
(363,509,qs),
(309,509,o),
(204,469,o),
(173,440,q),
(169,432,o),
(189,422,o),
(213,426,o),
(215,434,qs),
(250,634,ls),
(249,629,o),
(240,624,q),
(534,624,ls),
(563,624,o),
(605,656,o),
(609,679,qs),
(621,744,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 1 5 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 6 5 3 5 6 3 128 0 3 4 5 3 4 126 0 1 0 5 6 1 5 105 0 0 0 7 95 0 7 7 30 77 0 4 4 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 6 5 3 5 6 3 128 0 3 4 5 3 4 126 0 1 0 5 6 1 5 105 0 4 0 2 4 2 101 0 0 0 7 95 0 7 7 30 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 6 5 3 5 6 3 128 0 3 4 5 3 4 126 0 7 0 0 1 7 0 103 0 1 0 5 6 1 5 105 0 4 2 2 4 89 0 4 4 2 97 0 2 4 2 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
37 52 36 36 52 38 41 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,531,o),
(612,550,o),
(613,566,qs),
(612,648,o),
(505,758,o),
(398,758,qs),
(250,758,o),
(76,556,o),
(44,371,qs),
(22,249,o),
(42,78,o),
(154,-22,o),
(269,-22,qs),
(355,-22,o),
(488,48,o),
(568,166,o),
(581,238,qs),
(595,318,o),
(552,436,o),
(447,499,o),
(371,499,qs),
(325,499,o),
(236,473,o),
(199,449,q),
(226,555,o),
(310,642,o),
(376,642,qs),
(419,642,o),
(457,612,o),
(465,575,qs),
(468,556,o),
(499,531,o),
(525,531,qs),
(567,531,ls)
);
},
{
closed = 1;
nodes = (
(395,382,o),
(446,309,o),
(433,235,qs),
(420,166,o),
(344,94,o),
(285,94,qs),
(215,94,o),
(159,174,o),
(171,245,qs),
(184,315,o),
(271,382,o),
(331,382,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 1 6 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
7 1 0 1 2 1 0 2 128 0 2 8 1 6 5 2 6 105 0 1 1 4 97 0 4 4 30 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
7 1 0 1 2 1 0 2 128 0 2 8 1 6 5 2 6 105 0 5 0 3 5 3 101 0 1 1 4 97 0 4 4 30 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
7 1 0 1 2 1 0 2 128 0 4 0 1 0 4 1 105 0 2 8 1 6 5 2 6 105 0 5 3 3 5 89 0 5 5 3 97 0 3 5 3 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
34 34 1 0 34 45 34 44 40 38 28 26 21 19 13 11 7 5 0 33 1 32 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(94,741,o),
(67,725,o),
(65,711,qs),
(59,678,ls),
(55,655,o),
(85,623,o),
(114,623,qs),
(420,623,ls),
(424,623,o),
(422,617,o),
(417,610,q),
(54,20,ls),
(42,0,o),
(64,-20,o),
(83,-20,qs),
(154,-20,ls),
(165,-20,o),
(191,-10,o),
(196,0,qs),
(572,623,ls),
(588,649,o),
(592,674,qs),
(595,687,ls),
(599,711,o),
(569,741,o),
(539,741,qs),
(110,741,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 2 2 0 95 3 1 0 0 30 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 1 2 1 134 3 1 0 2 2 0 87 3 1 0 0 2 95 0 2 0 2 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
1 0 20 18 12 9 0 26 1 25 4 8 22 
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,351,o),
(12,256,o),
(1,195,qs),
(-11,125,o),
(41,19,o),
(161,-40,o),
(245,-40,qs),
(329,-40,o),
(469,19,o),
(561,125,o),
(573,195,qs),
(584,256,o),
(542,350,o),
(493,378,q),
(544,406,o),
(606,490,o),
(616,542,qs),
(626,600,o),
(580,697,o),
(469,754,o),
(385,754,qs),
(301,754,o),
(170,697,o),
(91,601,o),
(81,542,qs),
(61,433,o),
(145,378,q)
);
},
{
closed = 1;
nodes = (
(271,426,o),
(218,479,o),
(227,530,qs),
(236,586,o),
(306,638,o),
(365,638,qs),
(425,638,o),
(476,587,o),
(466,531,qs),
(457,480,o),
(384,426,o),
(327,426,qs)
);
},
{
closed = 1;
nodes = (
(445,316,o),
(424,198,qs),
(414,139,o),
(331,76,o),
(265,76,qs),
(198,76,o),
(139,139,o),
(149,198,qs),
(160,261,o),
(242,316,o),
(308,316,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
26 12 2 5 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 3 7 1 5 4 3 5 105 0 4 0 1 4 1 101 0 2 2 0 97 0 0 0 30 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 0 0 2 3 0 2 105 6 1 3 7 1 5 4 3 5 105 0 4 1 1 4 89 0 4 4 1 97 0 1 4 1 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
39 39 27 27 39 49 39 48 45 43 27 38 27 37 43 44 36 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 631;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(62,214,o),
(34,196,o),
(33,181,qs),
(29,94,o),
(137,-21,o),
(250,-21,qs),
(354,-21,o),
(492,72,o),
(572,245,o),
(595,375,qs),
(628,561,o),
(536,757,o),
(380,757,qs),
(295,757,o),
(162,691,o),
(79,574,o),
(66,499,qs),
(52,419,o),
(99,304,o),
(207,243,o),
(283,243,qs),
(324,243,o),
(405,265,o),
(438,285,q),
(413,178,o),
(337,95,o),
(276,95,qs),
(231,95,o),
(187,130,o),
(180,170,qs),
(177,189,o),
(147,214,o),
(121,214,qs),
(79,214,ls)
);
},
{
closed = 1;
nodes = (
(189,360,o),
(213,501,qs),
(225,569,o),
(302,641,o),
(361,641,qs),
(425,641,o),
(478,565,o),
(465,494,qs),
(454,428,o),
(376,360,o),
(319,360,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
9 1 2 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
7 1 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 5 5 3 97 0 3 3 30 77 0 1 1 4 97 0 4 4 29 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
7 1 0 2 1 2 0 1 128 8 1 6 0 2 0 6 2 105 0 1 0 4 1 4 101 0 5 5 3 97 0 3 3 30 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
7 1 0 2 1 2 0 1 128 0 3 0 5 6 3 5 105 8 1 6 0 2 0 6 2 105 0 1 4 4 1 89 0 1 1 4 97 0 4 1 4 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
34 34 1 0 34 44 34 43 40 38 28 26 21 19 13 11 7 5 0 33 1 32 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 630;
}
);
note = nine;
unicode = 57;
},
{
glyphname = colon;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(153,85,o),
(115,128,o),
(81,128,qs),
(46,128,o),
(-9,85,o),
(-14,56,qs),
(-19,27,o),
(21,-16,o),
(56,-16,qs),
(90,-16,o),
(143,27,o),
(148,56,qs)
);
},
{
closed = 1;
nodes = (
(229,513,o),
(190,556,o),
(156,556,qs),
(121,556,o),
(67,513,o),
(62,484,qs),
(57,455,o),
(96,412,o),
(131,412,qs),
(165,412,o),
(219,455,o),
(224,484,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 97 0 3 3 31 77 0 1 1 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 1 0 0 1 0 101 0 2 2 3 97 0 3 3 31 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 2 1 3 2 105 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
36 36 36 33 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 213;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(265,514,o),
(227,557,o),
(193,557,qs),
(158,557,o),
(103,514,o),
(98,485,qs),
(93,456,o),
(132,413,o),
(167,413,qs),
(201,413,o),
(255,456,o),
(260,485,qs)
);
},
{
closed = 1;
nodes = (
(-63,-153,l),
(37,-153,l),
(208,136,l),
(67,136,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
4 1 3 0 2 3 2 99 0 0 0 1 97 0 1 1 31 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 0 3 1 0 105 4 1 3 2 2 3 87 4 1 3 3 2 95 0 2 3 2 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
12 12 12 15 12 15 20 36 33 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 264;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = less;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(229,355,o),
(233,377,o),
(242,385,qs),
(483,580,ls),
(492,588,o),
(488,605,o),
(477,605,qs),
(359,605,ls),
(356,605,o),
(354,603,qs),
(86,385,ls),
(77,377,o),
(73,355,o),
(80,347,qs),
(270,128,ls),
(272,126,o),
(275,126,qs),
(393,126,ls),
(404,126,o),
(414,144,o),
(407,151,qs),
(236,347,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 71 34 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 555;
}
);
note = less;
unicode = 60;
},
{
glyphname = equal;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(53,210,o),
(63,210,qs),
(603,210,ls),
(613,210,o),
(615,220,qs),
(629,297,ls),
(631,307,o),
(621,307,qs),
(81,307,ls),
(71,307,o),
(69,297,qs),
(55,220,ls)
);
},
{
closed = 1;
nodes = (
(91,425,o),
(101,425,qs),
(641,425,ls),
(651,425,o),
(653,435,qs),
(667,512,ls),
(669,522,o),
(659,522,qs),
(119,522,ls),
(109,522,o),
(107,512,qs),
(93,435,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 3 0 2 3 103 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 51 51 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 723;
}
);
note = equal;
unicode = 61;
},
{
glyphname = greater;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(34,144,o),
(38,126,o),
(48,126,qs),
(166,126,ls),
(169,126,o),
(171,128,qs),
(439,347,ls),
(448,355,o),
(452,377,o),
(445,385,qs),
(255,603,ls),
(253,605,o),
(250,605,qs),
(132,605,ls),
(122,605,o),
(112,588,o),
(118,580,q),
(289,385,ls),
(296,377,o),
(292,355,o),
(283,347,qs),
(42,151,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 71 38 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 539;
}
);
note = greater;
unicode = 62;
},
{
glyphname = question;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,495,o),
(171,506,qs),
(181,562,o),
(250,620,o),
(304,620,qs),
(357,620,o),
(406,558,o),
(395,500,qs),
(386,445,o),
(329,387,o),
(243,367,o),
(181,367,qs),
(132,367,l),
(106,199,ls),
(106,195,o),
(111,189,o),
(115,189,qs),
(214,189,ls),
(218,189,o),
(225,195,o),
(225,199,qs),
(243,284,l),
(354,289,o),
(504,396,o),
(522,500,qs),
(534,565,o),
(490,663,o),
(391,716,o),
(320,716,qs),
(250,716,o),
(131,663,o),
(55,567,o),
(44,505,qs),
(44,501,o),
(49,495,o),
(53,495,qs),
(159,495,ls)
);
},
{
closed = 1;
nodes = (
(225,85,o),
(187,128,o),
(153,128,qs),
(118,128,o),
(63,85,o),
(58,56,qs),
(53,27,o),
(92,-16,o),
(127,-16,qs),
(161,-16,o),
(215,27,o),
(220,56,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
15 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
8 1 5 4 3 4 5 3 128 0 1 3 2 3 1 2 128 0 3 0 2 7 3 2 103 0 4 4 0 97 0 0 0 28 77 0 7 7 6 97 0 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
8 1 5 4 3 4 5 3 128 0 1 3 2 3 1 2 128 0 3 0 2 7 3 2 103 0 7 0 6 7 6 101 0 4 4 0 97 0 0 0 28 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 46 44 40 38 0 36 0 35 37 36 35 21 38 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = question;
unicode = 63;
},
{
glyphname = at;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(755,-17,o),
(880,77,o),
(961,226,o),
(975,307,qs),
(993,409,o),
(928,565,o),
(769,651,o),
(653,651,qs),
(503,651,o),
(238,513,o),
(62,276,o),
(36,133,qs),
(18,30,o),
(86,-125,o),
(242,-209,o),
(355,-209,qs),
(411,-209,o),
(523,-188,o),
(572,-169,qs),
(581,-165,o),
(580,-159,q),
(579,-128,ls),
(579,-108,o),
(550,-92,o),
(528,-100,qs),
(462,-124,o),
(388,-124,qs),
(253,-124,o),
(130,11,o),
(154,141,qs),
(175,262,o),
(312,456,o),
(514,567,o),
(627,567,qs),
(763,567,o),
(883,431,o),
(860,302,qs),
(851,247,o),
(804,137,o),
(742,65,o),
(709,65,qs),
(685,65,o),
(680,105,o),
(694,148,qs),
(783,405,ls),
(790,423,o),
(773,449,o),
(754,449,qs),
(688,449,ls),
(685,449,o),
(679,444,o),
(678,441,qs),
(670,422,l),
(635,459,o),
(561,459,qs),
(483,459,o),
(348,377,o),
(257,242,o),
(243,165,qs),
(228,81,o),
(310,-17,o),
(394,-17,qs),
(441,-17,o),
(535,18,o),
(574,49,q),
(581,18,o),
(636,-17,o),
(681,-17,qs)
);
},
{
closed = 1;
nodes = (
(600,197,o),
(546,118,o),
(475,74,o),
(437,74,qs),
(395,74,o),
(362,128,o),
(371,179,qs),
(379,229,o),
(430,316,o),
(503,369,o),
(545,369,qs),
(592,369,o),
(626,303,o),
(612,248,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
14 1 9 1 81 1 3 9 2 1 0 3 46 1 6 5 4 76 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
14 1 9 2 81 1 3 9 2 1 0 3 46 1 6 5 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
14 1 9 2 81 1 10 9 2 1 0 3 46 1 6 5 4 76 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 7 0 4 1 7 4 105 2 1 1 0 9 3 1 9 105 0 5 0 6 5 6 101 10 1 3 3 0 98 11 8 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 2 1 9 1 2 9 128 0 7 0 4 1 7 4 105 0 1 0 9 3 1 9 105 0 5 0 6 5 6 101 10 1 3 3 0 98 11 8 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 2 1 9 1 2 9 128 0 7 0 4 1 7 4 105 0 1 0 9 10 1 9 105 0 5 0 6 5 6 101 0 10 10 0 97 11 8 2 0 0 29 77 0 3 3 0 98 11 8 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 2 1 9 1 2 9 128 0 7 0 4 1 7 4 105 0 1 0 9 10 1 9 105 0 10 3 0 10 89 0 3 11 8 2 0 5 3 0 106 0 5 6 6 5 89 0 5 5 6 97 0 6 5 6 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
0 0 78 76 71 69 0 67 0 66 38 41 37 37 37 52 37 36 12 8 30 
CALL[ ]	/* CallFunction */";
};
width = 1013;
}
);
note = at;
unicode = 64;
},
{
glyphname = A;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(455,22,o),
(487,0,o),
(512,0,qs),
(615,0,l),
(484,672,ls),
(480,691,o),
(448,713,o),
(423,713,qs),
(378,713,ls),
(353,713,o),
(313,691,o),
(303,672,qs),
(-67,0,l),
(36,0,ls),
(61,0,o),
(101,22,o),
(111,41,qs),
(167,143,ls),
(172,151,o),
(181,151,qs),
(421,151,ls),
(430,151,o),
(431,143,qs),
(451,41,ls)
);
},
{
closed = 1;
nodes = (
(408,262,o),
(397,262,qs),
(243,262,ls),
(232,262,o),
(237,272,qs),
(353,485,ls),
(356,491,o),
(366,491,o),
(367,485,qs),
(407,272,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 4 0 0 1 4 0 104 0 2 2 28 77 3 1 1 1 29 1 78 56 35 51 36 49 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = A;
unicode = 65;
},
{
glyphname = B;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(408,160,o),
(344,112,o),
(286,112,qs),
(155,112,l),
(187,298,ls),
(189,306,o),
(191,312,o),
(195,312,qs),
(318,312,ls),
(375,312,o),
(426,262,o),
(417,210,qs)
);
},
{
closed = 1;
nodes = (
(444,468,o),
(387,424,o),
(333,424,qs),
(210,424,l),
(239,591,ls),
(240,599,o),
(242,605,o),
(246,605,qs),
(362,605,ls),
(418,605,o),
(461,561,o),
(453,515,qs)
);
},
{
closed = 1;
nodes = (
(576,255,o),
(532,346,o),
(486,372,q),
(590,424,o),
(607,525,qs),
(617,578,o),
(573,665,o),
(469,717,o),
(390,717,qs),
(150,717,ls),
(134,717,o),
(107,701,o),
(105,688,qs),
(-11,29,ls),
(-13,16,o),
(8,0,o),
(24,0,qs),
(274,0,ls),
(352,0,o),
(478,54,o),
(556,145,o),
(566,201,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
42 1 0 3 1 76 0 3 0 0 1 3 0 103 0 2 2 5 95 0 5 5 28 77 0 1 1 4 95 0 4 4 29 4 78 53 53 36 36 36 33 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 613;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-5,259,o),
(65,93,o),
(221,0,o),
(327,0,qs),
(446,0,o),
(650,108,o),
(709,202,qs),
(720,221,o),
(698,240,o),
(679,240,qs),
(611,240,ls),
(588,240,o),
(551,222,o),
(538,207,qs),
(501,159,o),
(408,115,o),
(347,115,qs),
(282,115,o),
(190,173,o),
(152,285,o),
(166,362,qs),
(180,440,o),
(257,552,o),
(369,610,o),
(435,610,qs),
(496,610,o),
(573,565,o),
(593,517,qs),
(601,502,o),
(631,484,o),
(654,484,qs),
(722,484,ls),
(741,484,o),
(770,503,o),
(765,522,qs),
(740,617,o),
(574,726,o),
(455,726,qs),
(350,726,o),
(160,632,o),
(31,466,o),
(13,362,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 34 77 0 3 3 5 97 0 5 5 29 5 78 36 52 38 36 52 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = C;
unicode = 67;
},
{
glyphname = D;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(146,717,o),
(105,686,o),
(101,663,qs),
(-11,29,ls),
(-13,16,o),
(8,0,o),
(24,0,qs),
(231,0,ls),
(353,0,o),
(549,87,o),
(675,248,o),
(694,357,qs),
(713,466,o),
(645,628,o),
(479,717,o),
(357,717,qs),
(175,717,ls)
);
},
{
closed = 1;
nodes = (
(154,107,o),
(153,102,qs),
(239,592,ls),
(241,600,o),
(243,606,o),
(247,606,qs),
(338,606,ls),
(461,606,o),
(562,480,o),
(541,357,qs),
(519,235,o),
(375,112,o),
(251,112,qs),
(147,112,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
28 1 1 2 1 76 0 3 3 0 95 4 1 0 0 28 77 5 1 2 2 1 95 0 1 1 29 1 78 18 17 1 0 24 22 17 30 18 30 10 7 0 16 1 15 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 707;
}
);
note = D;
unicode = 68;
},
{
glyphname = E;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(545,718,o),
(535,718,qs),
(120,718,ls),
(114,718,o),
(110,714,o),
(109,708,qs),
(-15,10,ls),
(-16,4,o),
(-12,0,o),
(-6,0,qs),
(409,0,ls),
(419,0,o),
(420,10,qs),
(429,58,ls),
(433,81,o),
(402,112,o),
(373,112,qs),
(164,112,ls),
(154,112,o),
(156,122,qs),
(187,297,ls),
(189,306,o),
(199,306,qs),
(433,306,ls),
(443,306,o),
(444,316,qs),
(461,409,ls),
(462,418,o),
(452,418,qs),
(218,418,ls),
(208,418,o),
(210,428,qs),
(240,596,ls),
(242,606,o),
(252,606,qs),
(461,606,ls),
(490,606,o),
(531,637,o),
(535,660,qs),
(544,708,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
33 1 0 5 1 76 0 1 0 2 3 1 2 103 0 0 0 5 95 0 5 5 28 77 0 3 3 4 95 0 4 4 29 4 78 54 36 51 51 51 50 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = E;
unicode = 69;
},
{
glyphname = F;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-35,0,o),
(-25,0,qs),
(106,0,ls),
(116,0,o),
(118,10,qs),
(171,315,ls),
(170,310,o),
(162,305,q),
(406,305,ls),
(416,305,o),
(417,315,qs),
(434,407,ls),
(435,416,o),
(425,416,qs),
(181,416,l),
(188,412,o),
(188,407,qs),
(217,572,ls),
(220,589,o),
(242,606,o),
(258,606,qs),
(461,606,ls),
(490,606,o),
(531,637,o),
(535,660,qs),
(543,707,ls),
(545,717,o),
(535,717,qs),
(126,717,ls),
(110,717,o),
(88,699,o),
(85,683,qs),
(-33,10,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
15 1 3 2 1 76 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 28 77 0 4 4 29 4 78 52 35 37 52 50 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 504;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,725,o),
(160,631,o),
(31,466,o),
(13,362,qs),
(-5,259,o),
(65,93,o),
(223,0,o),
(329,0,qs),
(429,0,o),
(608,86,o),
(734,233,o),
(758,321,q),
(768,378,ls),
(770,392,o),
(749,407,o),
(733,407,qs),
(403,407,ls),
(374,407,o),
(332,376,o),
(329,354,qs),
(320,307,ls),
(318,297,o),
(328,297,qs),
(615,297,l),
(613,307,o),
(605,314,o),
(598,311,o),
(597,308,qs),
(568,215,o),
(440,118,o),
(350,118,qs),
(284,118,o),
(191,176,o),
(153,286,o),
(166,362,qs),
(179,438,o),
(257,549,o),
(370,607,o),
(436,607,qs),
(502,607,o),
(583,551,o),
(603,491,qs),
(604,484,o),
(612,484,qs),
(760,484,ls),
(765,484,o),
(771,489,o),
(771,494,q),
(760,565,o),
(674,669,o),
(540,725,o),
(457,725,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
39 1 3 4 1 76 0 0 1 4 1 0 4 128 0 4 0 3 2 4 3 103 0 1 1 6 97 7 1 6 6 34 77 0 2 2 5 97 0 5 5 29 5 78 0 0 0 51 0 50 38 52 38 38 36 37 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = G;
unicode = 71;
},
{
glyphname = H;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(434,23,o),
(462,0,o),
(485,0,qs),
(571,0,ls),
(581,0,o),
(583,10,qs),
(705,707,ls),
(707,717,o),
(697,717,qs),
(566,717,ls),
(556,717,o),
(554,707,qs),
(510,453,ls),
(507,438,o),
(486,419,o),
(469,419,qs),
(219,419,ls),
(209,419,o),
(210,429,qs),
(253,673,ls),
(257,694,o),
(229,717,o),
(206,717,qs),
(120,717,ls),
(110,717,o),
(108,707,qs),
(-14,10,ls),
(-16,0,o),
(-6,0,qs),
(125,0,ls),
(135,0,o),
(137,10,qs),
(183,273,ls),
(186,290,o),
(208,307,o),
(224,307,qs),
(474,307,ls),
(484,307,o),
(482,298,qs),
(438,44,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 3 0 0 1 3 0 103 4 1 2 2 28 77 5 1 1 1 29 1 78 51 52 52 51 52 49 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 691;
}
);
note = H;
unicode = 72;
},
{
glyphname = I;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-13,18,o),
(3,0,o),
(19,0,qs),
(125,0,ls),
(135,0,o),
(137,10,qs),
(255,683,ls),
(258,699,o),
(243,717,o),
(226,717,qs),
(120,717,ls),
(110,717,o),
(108,707,qs),
(-10,34,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 0 0 28 77 0 1 1 29 1 78 52 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = I;
unicode = 73;
},
{
glyphname = J;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,117,o),
(192,117,qs),
(160,117,o),
(135,146,o),
(134,180,qs),
(131,227,o),
(76,227,qs),
(28,227,ls),
(12,227,o),
(-15,212,o),
(-17,199,qs),
(-30,108,o),
(73,0,o),
(172,0,qs),
(238,0,o),
(348,50,o),
(420,142,o),
(430,201,qs),
(519,707,ls),
(521,717,o),
(511,717,qs),
(434,717,ls),
(405,717,o),
(364,686,o),
(360,664,qs),
(278,201,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 0 3 3 2 114 0 0 0 28 77 0 3 3 1 98 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 3 0 2 3 128 0 0 0 28 77 0 3 3 1 98 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
35 52 37 50 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 530;
}
);
note = J;
unicode = 74;
},
{
glyphname = K;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,367,o),
(271,374,qs),
(617,672,ls),
(634,686,o),
(631,706,o),
(609,717,o),
(597,717,qs),
(525,717,ls),
(487,717,o),
(456,693,q),
(209,468,ls),
(204,463,o),
(197,465,o),
(198,472,qs),
(232,663,ls),
(236,686,o),
(205,717,o),
(176,717,qs),
(100,717,ls),
(90,717,o),
(88,707,qs),
(-27,54,ls),
(-31,31,o),
(0,0,o),
(29,0,qs),
(105,0,ls),
(115,0,o),
(117,10,qs),
(157,241,ls),
(159,248,o),
(167,250,o),
(170,245,qs),
(344,16,l),
(345,8,o),
(368,0,o),
(379,0,qs),
(474,0,ls),
(496,0,o),
(524,24,o),
(510,45,qs),
(268,360,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
26 1 0 2 1 76 3 1 2 2 28 77 1 1 0 0 29 0 78 56 52 56 50 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = K;
unicode = 75;
},
{
glyphname = L;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(83,717,o),
(81,707,qs),
(-38,29,ls),
(-40,16,o),
(-19,0,o),
(-3,0,qs),
(312,0,ls),
(328,0,o),
(355,16,o),
(357,29,qs),
(370,101,ls),
(371,111,o),
(361,111,qs),
(163,111,ls),
(148,111,o),
(131,131,o),
(134,146,qs),
(225,663,ls),
(229,686,o),
(198,717,o),
(169,717,qs),
(93,717,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
3 1 0 0 28 77 0 1 1 2 96 0 2 2 29 2 78 1 0 16 13 9 6 0 21 1 20 4 8 22 
CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = L;
unicode = 76;
},
{
glyphname = M;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-14,9,o),
(-7,0,o),
(-1,0,qs),
(70,0,ls),
(99,0,o),
(141,31,o),
(145,53,qs),
(204,389,l),
(306,23,ls),
(311,8,o),
(323,0,o),
(339,0,qs),
(397,0,ls),
(413,0,o),
(429,8,o),
(438,23,qs),
(668,387,l),
(610,53,ls),
(606,31,o),
(636,0,o),
(665,0,qs),
(736,0,ls),
(742,0,o),
(753,9,o),
(754,15,qs),
(874,697,ls),
(875,703,o),
(868,712,o),
(862,712,qs),
(779,712,ls),
(755,712,o),
(713,693,o),
(703,675,q),
(431,246,ls),
(422,232,o),
(396,232,o),
(393,246,qs),
(271,675,l),
(267,693,o),
(233,712,o),
(209,712,qs),
(125,712,ls),
(119,712,o),
(108,703,o),
(107,697,qs),
(-13,15,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
37 28 0 3 1 0 20 1 3 1 2 76 2 1 0 0 28 77 0 1 1 3 95 5 4 2 3 3 29 3 78 38 54 54 36 20 50 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 861;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(576,718,o),
(566,709,o),
(565,703,qs),
(473,181,ls),
(473,186,o),
(510,201,q),
(267,686,ls),
(260,700,o),
(227,718,o),
(204,718,qs),
(125,718,ls),
(119,718,o),
(109,709,o),
(108,703,qs),
(-7,54,ls),
(-11,31,o),
(20,0,o),
(49,0,qs),
(125,0,ls),
(135,0,o),
(136,10,qs),
(230,538,ls),
(229,533,o),
(192,518,q),
(435,32,ls),
(442,18,o),
(475,0,o),
(498,0,qs),
(582,0,ls),
(592,0,o),
(593,10,qs),
(709,664,ls),
(713,687,o),
(682,718,o),
(653,718,qs),
(582,718,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
32 29 21 11 4 1 0 1 76 3 4 2 0 0 28 77 2 1 1 1 29 1 78 1 0 26 23 18 15 8 5 0 35 1 34 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 700;
}
);
note = N;
unicode = 78;
},
{
glyphname = O;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(791,467,o),
(720,631,o),
(563,725,o),
(457,725,qs),
(351,725,o),
(160,631,o),
(31,467,o),
(13,363,qs),
(-5,258,o),
(66,94,o),
(223,0,o),
(329,0,qs),
(435,0,o),
(626,94,o),
(755,258,o),
(773,363,qs)
);
},
{
closed = 1;
nodes = (
(180,441,o),
(257,552,o),
(371,610,o),
(437,610,qs),
(503,610,o),
(595,552,o),
(634,441,o),
(620,363,qs),
(606,285,o),
(529,174,o),
(415,115,o),
(349,115,qs),
(283,115,o),
(191,174,o),
(152,285,o),
(166,363,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 34 77 0 2 2 0 97 0 0 0 29 0 78 38 38 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = O;
unicode = 79;
},
{
glyphname = P;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,570,ls),
(238,585,o),
(262,605,o),
(277,605,qs),
(345,605,ls),
(410,605,o),
(455,556,o),
(445,499,qs),
(435,444,o),
(373,395,o),
(308,395,qs),
(204,395,l)
);
},
{
closed = 1;
nodes = (
(609,560,o),
(565,660,o),
(453,717,o),
(365,717,qs),
(175,717,ls),
(146,717,o),
(105,686,o),
(101,663,qs),
(-14,10,ls),
(-16,0,o),
(-6,0,qs),
(70,0,ls),
(99,0,o),
(140,31,o),
(144,54,qs),
(185,283,l),
(289,283,ls),
(381,283,o),
(513,342,o),
(588,441,o),
(598,499,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 0 0 2 3 0 2 103 0 1 1 4 95 0 4 4 28 77 0 3 3 29 3 78 1 0 29 26 22 19 16 14 8 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = P;
unicode = 80;
},
{
glyphname = Q;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(191,439,o),
(268,552,o),
(382,610,o),
(448,610,qs),
(514,610,o),
(606,552,o),
(645,439,o),
(631,361,qs),
(617,283,o),
(539,171,o),
(426,112,o),
(360,112,qs),
(294,112,o),
(201,171,o),
(163,283,o),
(177,361,qs)
);
},
{
closed = 1;
nodes = (
(802,465,o),
(731,631,o),
(574,725,o),
(468,725,qs),
(362,725,o),
(171,631,o),
(42,465,o),
(24,361,qs),
(5,256,o),
(76,90,o),
(233,-4,o),
(339,-4,qs),
(397,-4,o),
(443,8,q),
(443,7,o),
(427,13,q),
(525,-101,ls),
(545,-125,o),
(586,-125,qs),
(662,-125,ls),
(674,-125,o),
(700,-115,o),
(709,-95,o),
(697,-80,qs),
(558,81,l),
(544,69,l),
(644,106,o),
(766,261,o),
(784,361,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
28 19 18 3 3 0 1 76 0 2 3 2 134 0 1 1 4 97 0 4 4 34 77 0 0 0 3 97 0 3 3 29 3 78 38 37 59 38 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(429,443,o),
(363,387,o),
(301,387,qs),
(189,387,l),
(196,382,o),
(195,377,qs),
(229,570,ls),
(232,585,o),
(256,605,o),
(271,605,qs),
(339,605,ls),
(404,605,o),
(449,555,o),
(439,498,qs)
);
},
{
closed = 1;
nodes = (
(140,717,o),
(99,686,o),
(95,663,qs),
(-20,10,ls),
(-22,0,o),
(-12,0,qs),
(119,0,ls),
(129,0,o),
(131,10,qs),
(179,287,ls),
(179,282,o),
(170,277,q),
(237,277,l),
(234,280,o),
(341,33,q),
(348,19,o),
(381,0,o),
(403,0,qs),
(506,0,ls),
(514,0,o),
(523,12,o),
(520,18,qs),
(394,304,ls),
(392,309,o),
(371,308,o),
(359,295,o),
(366,284,q),
(466,306,o),
(579,423,o),
(593,498,qs),
(603,559,o),
(560,659,o),
(447,717,o),
(359,717,qs),
(169,717,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
7 1 3 1 21 1 5 3 2 76 0 3 1 5 1 3 5 128 0 1 0 5 4 1 5 103 0 0 0 2 95 7 1 2 2 28 77 6 1 4 4 29 4 78 15 14 43 40 36 34 31 28 24 23 14 48 15 47 37 49 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = R;
unicode = 82;
},
{
glyphname = S;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,283,o),
(494,371,o),
(408,411,o),
(338,428,qs),
(292,440,o),
(238,460,o),
(207,495,o),
(212,524,qs),
(221,571,o),
(283,614,o),
(332,612,qs),
(405,611,o),
(421,554,qs),
(426,537,o),
(456,515,o),
(481,515,qs),
(539,515,ls),
(556,515,o),
(584,532,o),
(585,548,qs),
(585,600,o),
(530,681,o),
(427,726,o),
(356,726,qs),
(279,726,o),
(151,674,o),
(69,580,o),
(59,521,qs),
(45,445,o),
(97,359,o),
(183,321,o),
(253,304,qs),
(300,292,o),
(355,272,o),
(385,235,o),
(380,205,qs),
(372,161,o),
(308,113,o),
(254,113,qs),
(207,113,o),
(163,148,o),
(157,181,qs),
(154,201,o),
(125,225,o),
(98,225,qs),
(43,225,ls),
(27,225,o),
(0,209,o),
(-2,196,qs),
(-9,138,o),
(48,49,o),
(160,0,o),
(234,0,qs),
(315,0,o),
(445,60,o),
(524,156,o),
(533,209,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 34 77 0 2 2 0 97 0 0 0 29 0 78 35 53 45 36 53 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = S;
unicode = 83;
},
{
glyphname = T;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(48,606,o),
(58,606,qs),
(204,606,ls),
(221,606,o),
(236,589,o),
(233,572,qs),
(134,10,ls),
(132,0,o),
(142,0,qs),
(273,0,ls),
(283,0,o),
(285,10,qs),
(384,572,ls),
(387,589,o),
(409,606,o),
(425,606,qs),
(570,606,ls),
(580,606,o),
(581,616,qs),
(597,707,ls),
(599,717,o),
(589,717,qs),
(77,717,ls),
(67,717,o),
(65,707,qs),
(49,616,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
3 1 1 1 0 95 0 0 0 28 77 0 2 2 29 2 78 52 52 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = T;
unicode = 84;
},
{
glyphname = U;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(14,184,o),
(70,61,o),
(192,0,o),
(274,0,qs),
(356,0,o),
(500,61,o),
(599,184,o),
(615,274,qs),
(691,707,ls),
(693,717,o),
(683,717,qs),
(607,717,ls),
(578,717,o),
(537,686,o),
(533,664,qs),
(464,273,ls),
(449,188,o),
(365,116,o),
(295,116,qs),
(225,116,o),
(166,188,o),
(181,273,qs),
(250,664,ls),
(254,686,o),
(223,717,o),
(194,717,qs),
(118,717,ls),
(108,717,o),
(106,707,qs),
(30,274,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 28 77 0 1 1 3 97 0 3 3 29 3 78 37 53 37 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = U;
unicode = 85;
},
{
glyphname = V;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,236,o),
(300,236,o),
(297,252,qs),
(210,696,ls),
(208,705,o),
(185,717,o),
(173,717,qs),
(64,717,ls),
(58,717,o),
(50,708,o),
(50,701,qs),
(191,39,ls),
(194,21,o),
(227,0,o),
(252,0,qs),
(297,0,ls),
(322,0,o),
(361,21,o),
(372,39,qs),
(745,701,ls),
(749,708,o),
(743,717,o),
(737,717,qs),
(629,717,ls),
(617,717,o),
(590,705,o),
(586,696,qs),
(341,252,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 28 77 0 3 3 1 97 0 1 1 29 1 78 20 53 54 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(127,23,o),
(160,0,o),
(186,0,qs),
(226,1,ls),
(252,1,o),
(292,25,o),
(300,43,qs),
(493,441,ls),
(496,447,o),
(509,447,o),
(509,441,q),
(556,43,ls),
(559,23,o),
(592,1,o),
(617,1,qs),
(657,1,ls),
(682,1,o),
(723,23,o),
(732,43,qs),
(1046,703,ls),
(1049,708,o),
(1043,717,o),
(1037,717,qs),
(927,717,ls),
(913,717,o),
(886,703,o),
(882,693,qs),
(693,267,ls),
(691,261,o),
(677,261,o),
(676,267,qs),
(635,674,ls),
(633,693,o),
(599,717,o),
(574,717,qs),
(534,717,ls),
(508,717,o),
(468,693,o),
(460,674,qs),
(264,259,l),
(262,253,o),
(249,255,o),
(248,260,q),
(211,693,ls),
(211,704,o),
(187,717,o),
(174,717,qs),
(66,717,ls),
(60,717,o),
(52,708,o),
(53,703,qs),
(126,43,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 2 0 0 28 77 4 1 3 3 29 3 78 57 54 41 57 50 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 996;
}
);
note = W;
unicode = 87;
},
{
glyphname = X;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(387,11,o),
(407,0,o),
(418,0,qs),
(535,0,ls),
(543,0,o),
(552,12,o),
(549,18,qs),
(399,346,ls),
(397,351,o),
(399,365,o),
(403,370,qs),
(670,699,ls),
(675,705,o),
(670,717,o),
(662,717,qs),
(546,717,ls),
(535,717,o),
(511,706,o),
(503,699,q),
(357,510,ls),
(350,500,o),
(329,499,o),
(325,509,qs),
(239,699,l),
(233,706,o),
(213,717,o),
(202,717,qs),
(86,717,ls),
(78,717,o),
(69,705,o),
(72,699,qs),
(222,370,ls),
(224,365,o),
(222,351,o),
(218,346,qs),
(-47,18,ls),
(-52,12,o),
(-47,0,o),
(-39,0,qs),
(76,0,ls),
(87,0,o),
(111,11,o),
(119,18,q),
(264,206,ls),
(271,216,o),
(292,216,o),
(296,206,qs),
(381,18,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 3 0 0 1 3 0 105 4 1 2 2 28 77 5 1 1 1 29 1 78 58 36 20 58 36 17 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 621;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(202,271,o),
(198,253,qs),
(159,29,ls),
(157,16,o),
(178,0,o),
(194,0,qs),
(265,0,ls),
(281,0,o),
(308,16,o),
(310,29,qs),
(349,253,ls),
(353,271,o),
(362,285,qs),
(658,699,ls),
(662,706,o),
(657,717,o),
(650,717,qs),
(535,717,ls),
(523,717,o),
(496,706,o),
(492,699,qs),
(318,439,ls),
(313,431,o),
(297,431,o),
(294,439,qs),
(212,699,ls),
(210,706,o),
(187,717,o),
(175,717,qs),
(59,717,ls),
(51,717,o),
(42,706,o),
(45,699,qs),
(197,285,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 28 77 0 1 1 3 95 0 3 3 29 3 78 57 36 20 50 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Z;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(582,701,o),
(561,717,o),
(545,717,qs),
(93,717,ls),
(83,717,o),
(81,707,qs),
(72,655,ls),
(68,632,o),
(99,601,o),
(128,601,qs),
(360,601,ls),
(368,601,o),
(373,590,o),
(368,583,qs),
(-23,101,l),
(-32,87,o),
(-33,83,qs),
(-42,29,ls),
(-44,16,o),
(-23,0,o),
(-7,0,qs),
(451,0,ls),
(461,0,o),
(463,10,qs),
(472,62,ls),
(476,85,o),
(445,116,o),
(416,116,qs),
(178,116,ls),
(170,116,o),
(165,127,o),
(170,134,qs),
(561,616,l),
(570,630,o),
(571,634,qs),
(580,688,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 18 1 1 0 2 76 0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 52 56 52 53 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = Z;
unicode = 90;
},
{
glyphname = bracketleft;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(12,-196,o),
(22,-196,qs),
(222,-196,ls),
(232,-196,o),
(234,-186,qs),
(248,-110,ls),
(249,-100,o),
(239,-100,qs),
(190,-100,ls),
(175,-100,o),
(158,-79,o),
(161,-64,qs),
(315,813,ls),
(318,828,o),
(343,849,o),
(358,849,qs),
(407,849,ls),
(417,849,o),
(419,859,qs),
(432,934,ls),
(434,944,o),
(424,944,qs),
(224,944,ls),
(214,944,o),
(212,934,qs),
(14,-186,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 105 0 2 3 3 2 89 0 2 2 3 95 0 3 2 3 79 51 53 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 423;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = backslash;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(319,942,l),
(229,942,l),
(346,-170,l),
(436,-170,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 658;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = bracketright;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(434,944,o),
(424,944,qs),
(224,944,ls),
(214,944,o),
(212,934,qs),
(199,859,ls),
(197,849,o),
(207,849,qs),
(256,849,ls),
(271,849,o),
(288,828,o),
(285,813,qs),
(131,-64,ls),
(128,-79,o),
(103,-100,o),
(88,-100,qs),
(39,-100,ls),
(29,-100,o),
(28,-110,qs),
(14,-186,ls),
(12,-196,o),
(22,-196,qs),
(222,-196,ls),
(232,-196,o),
(234,-186,qs),
(432,934,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 3 0 2 1 3 2 105 0 1 0 0 1 89 0 1 1 0 95 0 0 1 0 79 51 53 51 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 423;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = asciicircum;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(434,159,o),
(440,159,qs),
(552,159,ls),
(559,159,o),
(567,170,o),
(565,176,qs),
(426,684,ls),
(423,692,o),
(410,703,o),
(401,703,qs),
(325,703,ls),
(316,703,o),
(298,692,o),
(293,684,qs),
(-25,176,ls),
(-29,170,o),
(-25,159,o),
(-18,159,qs),
(93,159,ls),
(99,159,o),
(102,164,qs),
(272,436,ls),
(284,456,o),
(322,471,o),
(355,455,o),
(361,435,qs),
(433,164,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 1 133 2 1 0 0 118 37 54 23 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 629;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = underscore;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(76,-132,o),
(86,-132,qs),
(638,-132,ls),
(648,-132,o),
(650,-122,qs),
(664,-38,ls),
(666,-28,o),
(656,-28,qs),
(104,-28,ls),
(94,-28,o),
(92,-38,qs),
(78,-122,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 51 49 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 733;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = grave;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-1,699,o),
(4,697,q),
(212,574,ls),
(219,570,o),
(231,577,o),
(232,585,qs),
(245,655,ls),
(246,661,o),
(242,663,qs),
(36,797,ls),
(29,801,o),
(16,794,o),
(15,786,qs),
(0,705,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
9 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 257;
}
);
note = grave;
unicode = 96;
},
{
glyphname = a;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(434,39,o),
(465,9,o),
(494,9,qs),
(570,9,ls),
(580,9,o),
(581,18,qs),
(671,526,ls),
(675,548,o),
(644,578,o),
(615,578,qs),
(539,578,ls),
(529,578,o),
(527,568,qs),
(519,520,l),
(489,546,o),
(406,576,o),
(354,576,qs),
(271,576,o),
(126,502,o),
(27,370,o),
(12,286,qs),
(-2,202,o),
(50,71,o),
(169,0,o),
(252,0,qs),
(304,0,o),
(398,29,o),
(437,54,q),
(438,61,ls)
);
},
{
closed = 1;
nodes = (
(154,342,o),
(213,423,o),
(294,465,o),
(340,465,qs),
(385,465,o),
(453,423,o),
(482,342,o),
(473,287,qs),
(463,232,o),
(405,152,o),
(322,110,o),
(277,110,qs),
(206,110,o),
(130,203,o),
(144,286,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
14 1 5 1 28 1 0 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
14 1 5 1 28 1 3 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 5 5 1 97 2 1 1 1 37 77 0 4 4 0 97 3 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 5 5 1 97 2 1 1 1 37 77 0 3 3 29 77 0 4 4 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
38 36 52 52 38 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = a;
unicode = 97;
},
{
glyphname = b;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,30,o),
(254,0,o),
(306,0,qs),
(389,0,o),
(534,72,o),
(632,204,o),
(647,290,qs),
(662,374,o),
(611,508,o),
(492,583,o),
(409,583,qs),
(357,583,o),
(262,552,o),
(224,526,q),
(263,750,ls),
(265,760,o),
(255,760,qs),
(179,760,ls),
(150,760,o),
(109,729,o),
(105,707,qs),
(-17,18,ls),
(-18,9,o),
(-8,9,qs),
(68,9,ls),
(97,9,o),
(138,39,o),
(142,62,qs),
(141,55,l)
);
},
{
closed = 1;
nodes = (
(486,208,o),
(387,121,o),
(321,121,qs),
(257,121,o),
(188,210,o),
(202,291,qs),
(217,372,o),
(317,461,o),
(381,461,qs),
(446,461,o),
(514,371,o),
(500,290,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
14 1 4 2 28 1 0 5 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 1 30 77 0 4 4 2 97 0 2 2 37 77 0 5 5 0 97 3 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 1 1 30 77 0 4 4 2 97 0 2 2 37 77 0 0 0 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 2 97 0 2 2 37 77 0 1 1 0 95 0 0 0 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 36 38 36 52 50 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-2,203,o),
(51,71,o),
(173,0,o),
(259,0,qs),
(336,0,o),
(467,53,o),
(558,146,o),
(579,204,qs),
(581,209,o),
(577,214,o),
(572,214,qs),
(482,214,ls),
(457,214,o),
(418,193,o),
(406,176,qs),
(383,142,o),
(323,111,o),
(279,111,qs),
(212,111,o),
(150,200,o),
(166,289,qs),
(182,378,o),
(274,466,o),
(341,466,qs),
(385,466,o),
(435,435,o),
(447,401,qs),
(452,384,o),
(483,363,o),
(508,363,qs),
(597,363,ls),
(602,363,o),
(608,368,o),
(608,373,qs),
(608,466,o),
(477,577,o),
(361,577,qs),
(275,577,o),
(127,506,o),
(28,375,o),
(13,289,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 37 77 0 3 3 5 97 0 5 5 29 5 78 38 36 36 36 52 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = c;
unicode = 99;
},
{
glyphname = d;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(418,39,o),
(449,9,o),
(478,9,qs),
(554,9,ls),
(564,9,o),
(565,18,qs),
(687,707,ls),
(691,729,o),
(660,760,o),
(631,760,qs),
(555,760,ls),
(545,760,o),
(543,750,qs),
(504,526,l),
(474,552,o),
(391,583,o),
(339,583,qs),
(256,583,o),
(111,508,o),
(12,374,o),
(-3,290,qs),
(-18,204,o),
(34,72,o),
(153,0,o),
(236,0,qs),
(288,0,o),
(382,30,o),
(421,55,q),
(422,62,ls)
);
},
{
closed = 1;
nodes = (
(158,371,o),
(258,461,o),
(323,461,qs),
(387,461,o),
(457,372,o),
(442,291,qs),
(428,210,o),
(327,121,o),
(263,121,qs),
(197,121,o),
(130,208,o),
(144,290,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
14 1 5 1 28 1 0 4 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
14 1 5 1 28 1 3 4 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 2 2 30 77 0 5 5 1 97 0 1 1 37 77 0 4 4 0 97 3 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 2 2 30 77 0 5 5 1 97 0 1 1 37 77 0 3 3 29 77 0 4 4 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 5 5 1 97 0 1 1 37 77 0 2 2 3 95 0 3 3 29 77 0 4 4 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 36 52 52 38 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = d;
unicode = 100;
},
{
glyphname = e;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(397,466,o),
(464,411,o),
(463,357,qs),
(463,351,o),
(456,346,o),
(451,346,qs),
(191,346,ls),
(180,346,o),
(184,356,qs),
(207,410,o),
(289,466,o),
(341,466,qs)
);
},
{
closed = 1;
nodes = (
(458,208,o),
(421,188,o),
(410,173,qs),
(385,141,o),
(326,111,o),
(283,111,qs),
(227,111,o),
(161,169,o),
(159,227,qs),
(159,237,o),
(170,237,qs),
(555,237,ls),
(568,237,o),
(596,250,o),
(601,263,qs),
(608,297,o),
(610,308,qs),
(624,384,o),
(574,507,o),
(452,577,o),
(365,577,qs),
(277,577,o),
(127,506,o),
(28,375,o),
(13,289,qs),
(-2,204,o),
(52,72,o),
(176,0,o),
(263,0,qs),
(342,0,o),
(475,57,o),
(567,151,o),
(587,208,q),
(483,208,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
30 1 4 0 1 76 8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 37 77 0 5 5 2 97 0 2 2 29 2 78 12 12 0 0 12 45 12 44 40 38 35 32 25 23 17 15 0 11 0 10 35 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = e;
unicode = 101;
},
{
glyphname = f;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-3,0,o),
(7,0,qs),
(138,0,ls),
(148,0,o),
(150,10,qs),
(228,452,ls),
(229,461,o),
(239,461,qs),
(334,461,ls),
(344,461,o),
(346,471,qs),
(362,564,ls),
(364,573,o),
(354,573,qs),
(241,573,l),
(248,569,o),
(247,564,qs),
(252,592,ls),
(260,633,o),
(285,664,o),
(314,669,qs),
(343,673,o),
(381,701,o),
(385,724,qs),
(393,773,ls),
(395,783,o),
(385,783,qs),
(259,788,o),
(119,694,o),
(101,592,qs),
(96,564,ls),
(97,569,o),
(106,573,q),
(37,573,ls),
(27,573,o),
(25,564,qs),
(9,471,ls),
(7,461,o),
(17,461,qs),
(43,461,ls),
(60,461,o),
(75,444,o),
(72,427,qs),
(-1,10,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
26 1 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 36 77 4 1 0 0 1 97 3 1 1 1 37 77 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 36 77 4 1 0 0 1 97 3 1 1 1 31 77 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 36 77 4 1 0 0 1 97 3 1 1 1 37 77 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 36 77 4 1 0 0 1 97 3 1 1 1 31 77 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 36 77 4 1 0 0 1 97 3 1 1 1 37 77 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 2 1 2 133 4 1 0 0 1 97 3 1 1 1 37 77 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
51 51 43 37 35 50 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 329;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,88,o),
(152,187,o),
(167,276,qs),
(183,365,o),
(292,461,o),
(364,461,qs),
(410,461,o),
(476,418,o),
(506,334,o),
(495,275,qs),
(479,186,o),
(369,88,o),
(298,88,qs)
);
},
{
closed = 1;
nodes = (
(571,568,o),
(549,550,o),
(546,533,qs),
(543,520,l),
(514,546,o),
(430,577,o),
(378,577,qs),
(295,577,o),
(150,502,o),
(51,365,o),
(35,276,qs),
(20,188,o),
(70,49,o),
(189,-29,o),
(272,-29,qs),
(324,-29,o),
(418,3,o),
(457,30,q),
(452,0,ls),
(438,-80,o),
(349,-159,o),
(284,-159,qs),
(174,-159,o),
(155,-69,qs),
(154,-60,o),
(130,-48,o),
(119,-48,qs),
(6,-48,l),
(-2,-116,o),
(58,-220,o),
(180,-278,o),
(263,-278,qs),
(352,-278,o),
(495,-206,o),
(589,-80,o),
(603,0,qs),
(701,558,ls),
(703,568,o),
(693,568,qs),
(587,568,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
48 1 0 2 34 1 6 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 4 6 5 6 4 5 128 8 1 1 0 6 4 1 6 105 0 0 0 2 97 7 9 2 2 2 31 77 0 5 5 3 97 0 3 3 33 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 4 6 5 6 4 5 128 8 1 1 0 6 4 1 6 105 9 1 2 2 31 77 0 0 0 7 97 0 7 7 37 77 0 5 5 3 97 0 3 3 33 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
14 13 0 0 46 44 38 36 31 29 26 24 21 19 13 52 14 51 0 12 0 11 37 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = g;
unicode = 103;
},
{
glyphname = h;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(381,0,o),
(391,0,qs),
(521,0,ls),
(531,0,o),
(533,10,qs),
(590,334,ls),
(604,413,o),
(559,525,o),
(454,583,o),
(380,583,qs),
(340,583,o),
(260,561,o),
(227,542,q),
(257,716,ls),
(261,737,o),
(233,760,o),
(210,760,qs),
(124,760,ls),
(114,760,o),
(112,750,qs),
(-18,10,ls),
(-20,0,o),
(-10,0,qs),
(121,0,ls),
(131,0,o),
(133,10,qs),
(187,315,ls),
(213,467,o),
(340,467,qs),
(400,467,o),
(451,397,o),
(438,322,qs),
(383,10,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
19 1 0 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 30 77 0 0 0 3 97 0 3 3 37 77 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 3 97 0 3 3 37 77 0 2 2 1 95 4 1 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
53 37 51 51 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = h;
unicode = 104;
},
{
glyphname = i;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-14,44,ls),
(-18,23,o),
(10,0,o),
(33,0,qs),
(129,0,l),
(222,530,ls),
(226,550,o),
(198,573,o),
(175,573,qs),
(79,573,l)
);
},
{
closed = 1;
nodes = (
(203,637,o),
(259,681,o),
(264,711,qs),
(269,741,o),
(229,785,o),
(193,785,qs),
(156,785,o),
(99,741,o),
(94,711,qs),
(89,681,o),
(130,637,o),
(167,637,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
5 1 3 3 2 97 0 2 2 36 77 4 1 0 0 31 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 5 1 3 0 2 3 105 4 1 0 0 31 77 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
10 10 1 0 10 21 10 20 16 14 6 4 0 9 1 9 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = i;
unicode = 105;
},
{
glyphname = j;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(107,568,o),
(105,558,qs),
(-14,-117,ls),
(-19,-142,o),
(-29,-161,o),
(-52,-165,o),
(-81,-162,qs),
(-98,-161,o),
(-132,-179,o),
(-135,-196,qs),
(-150,-280,l),
(-67,-280,ls),
(18,-280,o),
(122,-199,o),
(136,-119,qs),
(248,513,ls),
(252,536,o),
(222,568,o),
(193,568,qs),
(117,568,ls)
);
},
{
closed = 1;
nodes = (
(229,622,o),
(285,667,o),
(291,698,qs),
(296,729,o),
(256,774,o),
(220,774,qs),
(183,774,o),
(126,729,o),
(121,698,qs),
(115,667,o),
(156,622,o),
(193,622,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 4 4 3 97 0 3 3 36 77 5 1 0 0 31 77 0 2 2 1 96 0 1 1 33 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 6 1 4 0 3 4 105 5 1 0 0 31 77 0 2 2 1 96 0 1 1 33 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
20 20 1 0 20 31 20 30 26 24 12 11 8 6 0 19 1 18 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 248;
}
);
note = j;
unicode = 106;
},
{
glyphname = k;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-61,12,o),
(-31,-20,o),
(-2,-20,qs),
(74,-20,ls),
(84,-20,o),
(86,-10,qs),
(127,223,l),
(127,223,o),
(123,222,q),
(105,212,o),
(90,208,q),
(241,-4,l),
(244,-11,o),
(265,-20,o),
(276,-20,qs),
(376,-20,ls),
(399,-20,o),
(425,4,o),
(411,26,q),
(222,275,l),
(216,270,l),
(536,556,ls),
(541,561,o),
(539,568,o),
(533,568,qs),
(395,568,ls),
(353,568,o),
(325,542,qs),
(193,414,ls),
(154,376,o),
(154,378,qs),
(212,705,ls),
(216,728,o),
(186,760,o),
(157,760,qs),
(81,760,ls),
(71,760,o),
(69,750,qs),
(-57,35,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
29 27 18 7 4 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 30 77 0 1 1 31 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
3 1 2 2 0 95 0 0 0 30 77 3 1 2 2 1 95 0 1 1 31 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
0 0 1 2 0 87 3 1 2 2 1 95 0 1 1 31 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
57 56 39 49 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 515;
}
);
note = k;
unicode = 107;
},
{
glyphname = l;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-16,12,o),
(14,-20,o),
(43,-20,qs),
(119,-20,ls),
(129,-20,o),
(131,-10,qs),
(265,750,ls),
(267,760,o),
(257,760,qs),
(126,760,ls),
(116,760,o),
(114,750,qs),
(-12,35,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 30 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 95 0 0 0 30 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
51 49 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = l;
unicode = 108;
},
{
glyphname = m;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(661,580,o),
(564,532,q),
(544,551,o),
(450,580,o),
(395,580,qs),
(350,580,o),
(257,548,o),
(241,534,q),
(242,537,o),
(227,555,o),
(200,570,o),
(182,570,qs),
(111,570,ls),
(105,570,o),
(95,562,o),
(94,556,qs),
(-2,10,ls),
(-4,0,o),
(6,0,qs),
(137,0,ls),
(147,0,o),
(149,10,qs),
(202,313,ls),
(229,465,o),
(356,465,qs),
(416,465,o),
(467,395,o),
(453,320,qs),
(403,35,ls),
(400,20,o),
(418,0,o),
(433,0,qs),
(537,0,ls),
(547,0,o),
(549,10,qs),
(601,307,ls),
(615,389,o),
(688,465,o),
(747,465,qs),
(807,465,o),
(858,395,o),
(844,320,qs),
(794,35,ls),
(791,20,o),
(809,0,o),
(824,0,qs),
(928,0,ls),
(938,0,o),
(940,10,qs),
(997,333,ls),
(1010,411,o),
(965,523,o),
(860,580,o),
(786,580,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
51 37 2 1 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
3 1 1 1 5 97 8 7 6 3 5 5 31 77 4 2 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 5 5 31 77 3 1 1 1 6 97 8 7 2 6 6 37 77 4 2 2 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 53 0 52 37 52 51 37 52 37 53 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 1030;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(406,21,o),
(423,0,o),
(438,0,qs),
(532,0,ls),
(542,0,o),
(544,10,qs),
(601,331,ls),
(614,409,o),
(570,519,o),
(467,575,o),
(395,575,qs),
(345,575,o),
(255,543,o),
(233,516,q),
(237,538,o),
(210,565,o),
(182,565,qs),
(116,565,ls),
(110,565,o),
(99,556,o),
(98,551,qs),
(3,10,ls),
(1,0,o),
(11,0,qs),
(132,0,ls),
(142,0,o),
(144,10,qs),
(197,311,ls),
(211,392,o),
(294,468,o),
(357,468,qs),
(485,468,o),
(458,318,qs),
(408,35,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 12 2 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 2 97 3 1 2 2 31 77 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 31 77 0 0 0 3 97 0 3 3 37 77 4 1 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
53 36 52 52 33 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = n;
unicode = 110;
},
{
glyphname = o;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(642,375,o),
(585,506,o),
(458,577,o),
(371,577,qs),
(285,577,o),
(132,506,o),
(28,375,o),
(13,289,qs),
(-2,204,o),
(54,72,o),
(179,0,o),
(265,0,qs),
(352,0,o),
(507,72,o),
(612,204,o),
(627,289,qs)
);
},
{
closed = 1;
nodes = (
(182,378,o),
(282,464,o),
(350,464,qs),
(417,464,o),
(490,377,o),
(474,289,qs),
(459,202,o),
(353,114,o),
(285,114,qs),
(218,114,o),
(150,200,o),
(166,289,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 29 0 78 36 37 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = o;
unicode = 111;
},
{
glyphname = p;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(266,536,o),
(236,568,o),
(207,568,qs),
(131,568,ls),
(121,568,o),
(119,558,qs),
(-19,-225,ls),
(-23,-248,o),
(7,-280,o),
(36,-280,qs),
(112,-280,ls),
(122,-280,o),
(124,-270,qs),
(177,30,l),
(206,3,o),
(290,-29,o),
(342,-29,qs),
(425,-29,o),
(570,49,o),
(670,188,o),
(685,276,qs),
(701,365,o),
(650,502,o),
(532,577,o),
(449,577,qs),
(397,577,o),
(302,546,o),
(264,520,q),
(262,513,ls)
);
},
{
closed = 1;
nodes = (
(523,191,o),
(423,98,o),
(358,98,qs),
(294,98,o),
(225,190,o),
(240,275,qs),
(255,359,o),
(356,451,o),
(420,451,qs),
(486,451,o),
(553,361,o),
(538,276,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
28 1 4 0 14 1 1 5 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
28 1 4 3 14 1 1 5 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 0 1 2 5 1 105 0 4 4 0 97 3 1 0 0 37 77 0 2 2 33 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 5 0 1 2 5 1 105 0 3 3 31 77 0 4 4 0 97 0 0 0 37 77 0 2 2 33 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 36 52 52 38 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = p;
unicode = 112;
},
{
glyphname = q;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,546,o),
(431,577,o),
(379,577,qs),
(296,577,o),
(150,502,o),
(51,365,o),
(35,276,qs),
(20,188,o),
(70,49,o),
(189,-29,o),
(272,-29,qs),
(324,-29,o),
(418,3,o),
(457,30,q),
(404,-270,ls),
(402,-280,o),
(412,-280,qs),
(488,-280,ls),
(517,-280,o),
(559,-248,o),
(563,-225,qs),
(701,558,ls),
(703,568,o),
(693,568,qs),
(617,568,ls),
(588,568,o),
(546,536,o),
(542,513,qs),
(544,520,l)
);
},
{
closed = 1;
nodes = (
(197,361,o),
(296,451,o),
(362,451,qs),
(426,451,o),
(495,359,o),
(480,275,qs),
(465,190,o),
(364,98,o),
(300,98,qs),
(235,98,o),
(167,191,o),
(182,276,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
28 1 5 0 14 1 2 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 4 0 2 1 4 2 105 0 5 5 0 97 3 1 0 0 31 77 0 1 1 33 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 4 0 2 1 4 2 105 0 0 0 31 77 0 5 5 3 97 0 3 3 37 77 0 1 1 33 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
36 36 38 36 52 50 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(381,480,o),
(344,456,o),
(318,452,qs),
(264,447,o),
(194,381,o),
(182,312,qs),
(129,10,ls),
(127,0,o),
(117,0,qs),
(-14,0,ls),
(-24,0,o),
(-22,10,qs),
(75,559,ls),
(76,568,o),
(86,568,qs),
(172,568,ls),
(195,568,o),
(223,545,o),
(220,525,qs),
(221,535,l),
(288,573,o),
(373,578,qs),
(392,578,o),
(411,561,o),
(406,544,q),
(389,500,ls)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
5 1 2 0 1 76 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
5 1 2 1 1 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
1 1 0 0 37 77 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 37 77 0 1 1 31 77 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
51 52 34 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = r;
unicode = 114;
},
{
glyphname = s;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,229,o),
(441,298,o),
(364,330,o),
(303,346,qs),
(246,360,o),
(196,387,o),
(201,412,qs),
(206,440,o),
(247,466,o),
(287,466,qs),
(322,466,o),
(356,442,o),
(362,416,qs),
(366,399,o),
(394,375,o),
(421,375,qs),
(471,375,ls),
(487,375,o),
(515,391,o),
(516,406,qs),
(521,485,o),
(409,577,o),
(310,577,qs),
(242,577,o),
(129,532,o),
(58,457,o),
(50,412,qs),
(40,359,o),
(89,292,o),
(165,258,o),
(226,239,qs),
(284,222,o),
(335,194,o),
(331,169,qs),
(321,111,o),
(239,111,qs),
(201,111,o),
(161,134,o),
(154,160,q),
(140,200,o),
(94,200,qs),
(41,200,ls),
(25,200,o),
(-2,184,o),
(-3,169,qs),
(-6,121,o),
(50,44,o),
(152,0,o),
(220,0,qs),
(288,0,o),
(401,45,o),
(472,122,o),
(480,169,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 37 77 0 2 2 0 97 0 0 0 29 0 78 36 52 43 35 53 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = s;
unicode = 115;
},
{
glyphname = t;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(21,0,o),
(203,0,qs),
(315,0,l),
(325,60,ls),
(329,83,o),
(299,114,o),
(270,114,qs),
(238,114,ls),
(216,114,o),
(199,121,o),
(197,141,o),
(201,165,qs),
(255,470,ls),
(254,465,o),
(245,460,q),
(386,460,ls),
(396,460,o),
(398,470,qs),
(414,562,ls),
(416,572,o),
(406,572,qs),
(265,572,l),
(272,567,o),
(271,562,qs),
(294,696,ls),
(296,706,o),
(286,706,qs),
(155,706,ls),
(145,706,o),
(143,696,qs),
(128,607,ls),
(125,592,o),
(101,572,o),
(86,572,qs),
(61,572,ls),
(51,572,o),
(49,562,qs),
(33,470,ls),
(31,460,o),
(41,460,qs),
(110,460,l),
(103,465,o),
(104,470,qs),
(50,165,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 0 2 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 2 28 77 4 1 0 0 1 97 3 1 1 1 31 77 0 5 5 6 95 0 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 2 1 2 133 4 1 0 0 1 97 3 1 1 1 31 77 0 5 5 6 95 0 6 6 29 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
35 54 35 36 52 51 34 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 389;
}
);
note = t;
unicode = 116;
},
{
glyphname = u;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(239,554,o),
(214,574,o),
(193,574,qs),
(113,574,ls),
(103,574,o),
(101,564,qs),
(44,244,ls),
(31,166,o),
(75,56,o),
(178,0,o),
(250,0,qs),
(300,0,o),
(390,32,o),
(412,59,q),
(408,37,o),
(435,10,o),
(463,10,qs),
(544,10,l),
(642,564,ls),
(644,574,o),
(634,574,qs),
(513,574,ls),
(503,574,o),
(501,564,qs),
(448,264,ls),
(434,183,o),
(351,106,o),
(288,106,qs),
(160,106,o),
(187,257,qs),
(236,535,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
16 1 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 1 1 1 31 77 0 0 0 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
4 1 1 1 31 77 0 2 2 29 77 0 0 0 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 1 95 4 1 1 1 31 77 0 0 0 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
53 36 34 52 33 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = u;
unicode = 117;
},
{
glyphname = v;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(49,568,o),
(44,561,o),
(45,556,qs),
(164,38,ls),
(168,21,o),
(202,0,o),
(226,0,qs),
(272,0,ls),
(296,0,o),
(338,21,o),
(348,38,qs),
(649,556,ls),
(652,561,o),
(649,568,o),
(644,568,qs),
(550,568,ls),
(525,568,o),
(485,546,o),
(475,527,qs),
(302,218,ls),
(297,208,o),
(277,208,o),
(274,218,qs),
(210,527,ls),
(206,546,o),
(174,568,o),
(149,568,qs),
(54,568,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
2 4 2 0 0 31 77 0 1 1 3 97 0 3 3 29 3 78 1 0 21 18 12 10 6 5 0 27 1 26 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(61,568,o),
(62,557,qs),
(139,40,ls),
(142,21,o),
(171,0,o),
(193,0,qs),
(230,0,ls),
(253,0,o),
(291,22,o),
(298,40,q),
(445,332,ls),
(449,338,o),
(462,338,o),
(461,332,q),
(505,40,ls),
(508,21,o),
(537,0,o),
(559,0,qs),
(596,0,ls),
(619,0,o),
(657,22,o),
(664,40,q),
(924,557,ls),
(929,568,o),
(918,568,qs),
(839,568,ls),
(818,568,o),
(781,547,o),
(772,527,qs),
(625,223,l),
(623,217,o),
(610,217,o),
(609,223,qs),
(570,527,l),
(569,546,o),
(541,567,o),
(521,568,qs),
(464,568,l),
(445,565,o),
(413,544,o),
(406,527,q),
(259,223,l),
(257,217,o),
(244,217,o),
(243,223,qs),
(204,527,l),
(203,546,o),
(172,568,o),
(151,568,qs),
(72,568,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
2 1 5 3 0 0 31 77 4 1 3 3 29 3 78 1 0 44 41 32 29 25 22 13 11 0 49 1 48 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 854;
}
);
note = w;
unicode = 119;
},
{
glyphname = x;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,9,o),
(342,0,o),
(352,0,qs),
(469,0,ls),
(477,0,o),
(486,13,o),
(483,19,qs),
(359,275,ls),
(356,280,o),
(359,294,o),
(363,298,q),
(575,549,ls),
(581,556,o),
(576,568,o),
(568,568,qs),
(459,568,ls),
(448,568,o),
(424,557,o),
(416,550,q),
(316,426,ls),
(309,417,o),
(289,415,o),
(285,425,qs),
(223,553,ls),
(220,559,o),
(199,568,o),
(189,568,qs),
(72,568,ls),
(64,568,o),
(55,555,o),
(58,549,qs),
(182,293,ls),
(185,288,o),
(182,274,o),
(178,270,q),
(-35,19,ls),
(-40,13,o),
(-35,0,o),
(-27,0,qs),
(81,0,ls),
(92,0,o),
(116,11,o),
(124,18,q),
(225,143,ls),
(232,152,o),
(252,153,o),
(256,143,qs),
(318,15,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
0 0 2 1 2 0 1 128 3 1 2 2 31 77 4 1 1 1 29 1 78 58 41 58 36 17 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 533;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(306,210,o),
(286,210,o),
(284,220,qs),
(213,562,l),
(213,568,o),
(206,568,qs),
(65,568,ls),
(58,568,o),
(50,558,o),
(51,552,qs),
(178,6,l),
(10,-278,l),
(166,-278,l),
(654,552,ls),
(657,558,o),
(653,568,o),
(646,568,qs),
(512,568,ls),
(506,568,o),
(503,562,qs),
(312,220,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 1 1 3 1 76 0 3 0 1 0 3 1 128 2 1 0 0 31 77 0 1 1 33 1 78 20 36 20 18 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = y;
unicode = 121;
},
{
glyphname = z;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(489,553,o),
(468,568,o),
(452,568,qs),
(73,568,ls),
(63,568,o),
(61,558,qs),
(53,511,ls),
(49,489,o),
(80,458,o),
(109,458,qs),
(268,458,ls),
(276,458,o),
(280,445,o),
(275,439,qs),
(-15,103,l),
(-23,89,o),
(-24,85,qs),
(-34,29,ls),
(-36,15,o),
(-15,0,o),
(1,0,qs),
(384,0,ls),
(394,0,o),
(396,10,qs),
(404,58,ls),
(408,80,o),
(377,111,o),
(348,111,qs),
(184,111,ls),
(176,111,o),
(171,124,o),
(177,130,qs),
(468,466,l),
(477,480,o),
(477,484,qs),
(487,539,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 2 3 18 1 1 0 2 76 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 52 56 52 53 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 477;
}
);
note = z;
unicode = 122;
},
{
glyphname = braceleft;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(290,405,o),
(332,470,o),
(339,511,qs),
(347,555,o),
(354,651,qs),
(357,686,o),
(364,757,o),
(368,780,qs),
(374,818,o),
(405,845,o),
(436,845,qs),
(487,845,ls),
(497,845,o),
(499,855,qs),
(513,934,ls),
(515,944,o),
(505,944,qs),
(437,944,ls),
(362,944,o),
(253,863,o),
(240,786,qs),
(232,742,o),
(225,644,qs),
(218,552,o),
(212,514,qs),
(205,477,o),
(163,431,o),
(121,421,qs),
(108,418,o),
(90,400,o),
(88,388,qs),
(82,359,ls),
(80,347,o),
(92,329,o),
(105,326,qs),
(143,316,o),
(169,270,o),
(162,233,qs),
(156,195,o),
(129,103,qs),
(102,5,o),
(94,-39,qs),
(81,-116,o),
(160,-197,o),
(235,-197,qs),
(303,-197,ls),
(313,-197,o),
(315,-187,qs),
(329,-108,ls),
(331,-98,o),
(321,-98,qs),
(270,-98,ls),
(239,-98,o),
(218,-71,o),
(224,-33,qs),
(228,-10,o),
(247,61,o),
(256,96,qs),
(283,192,o),
(291,236,qs),
(298,277,o),
(278,342,o),
(251,361,qs),
(241,369,o),
(243,380,o),
(255,387,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
0 2 0 3 0 2 3 105 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 55 52 49 46 51 60 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 462;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = bar;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(161,805,l),
(-1,-116,l),
(130,-116,l),
(292,805,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 291;
}
);
note = bar;
unicode = 124;
},
{
glyphname = braceright;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(258,380,o),
(256,369,o),
(244,361,qs),
(209,342,o),
(167,277,o),
(160,236,qs),
(152,192,o),
(145,96,qs),
(142,61,o),
(135,-10,o),
(131,-33,qs),
(125,-71,o),
(94,-98,o),
(63,-98,qs),
(12,-98,ls),
(2,-98,o),
(0,-108,qs),
(-14,-187,ls),
(-16,-197,o),
(-6,-197,qs),
(62,-197,ls),
(137,-197,o),
(246,-116,o),
(259,-39,qs),
(267,5,o),
(274,103,qs),
(281,195,o),
(287,233,qs),
(294,270,o),
(336,316,o),
(378,326,qs),
(391,329,o),
(409,347,o),
(411,359,qs),
(417,388,ls),
(419,400,o),
(407,418,o),
(394,421,qs),
(356,431,o),
(330,477,o),
(337,514,qs),
(343,552,o),
(370,644,qs),
(397,742,o),
(405,786,qs),
(418,863,o),
(339,944,o),
(264,944,qs),
(196,944,ls),
(186,944,o),
(184,934,qs),
(170,855,ls),
(168,845,o),
(178,845,qs),
(229,845,ls),
(260,845,o),
(281,818,o),
(275,780,qs),
(271,757,o),
(252,686,o),
(243,651,qs),
(216,555,o),
(208,511,qs),
(201,470,o),
(221,405,o),
(248,387,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
0 1 0 0 3 1 0 105 0 3 2 2 3 89 0 3 3 2 97 0 2 3 2 81 52 49 46 43 51 57 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 462;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = asciitilde;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(107,238,o),
(111,247,qs),
(130,303,o),
(169,303,qs),
(181,303,o),
(203,291,o),
(219,279,qs),
(243,259,o),
(290,237,o),
(325,237,qs),
(391,237,o),
(487,315,o),
(513,391,qs),
(515,396,o),
(511,403,o),
(506,403,qs),
(419,403,ls),
(411,403,o),
(407,394,qs),
(389,338,o),
(350,338,qs),
(339,338,o),
(318,349,o),
(302,362,qs),
(277,382,o),
(229,404,o),
(193,404,qs),
(128,404,o),
(32,326,o),
(5,251,qs),
(3,246,o),
(8,238,o),
(13,238,qs),
(99,238,ls)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 1 4 3 1 89 2 1 0 0 4 3 0 4 105 0 1 1 3 98 6 5 2 3 1 3 82 0 0 0 33 0 32 36 37 34 36 37 7 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 519;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 267;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = exclamdown;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(134,361,l),
(210,361,l),
(133,-139,l),
(35,-139,l)
);
},
{
closed = 1;
nodes = (
(256,476,o),
(215,440,o),
(190,440,qs),
(164,440,o),
(134,476,o),
(139,502,qs),
(144,528,o),
(186,564,o),
(212,564,qs),
(237,564,o),
(266,528,o),
(261,502,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
0 0 4 1 1 0 1 99 0 3 3 2 97 0 2 2 31 3 78 0 0 13 11 7 5 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 298;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = cent;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(438,135,o),
(351,80,o),
(290,80,qs),
(214,80,o),
(136,176,o),
(151,262,qs),
(166,348,o),
(278,445,o),
(354,445,qs),
(415,445,o),
(482,389,o),
(485,341,q),
(570,341,l),
(574,414,o),
(478,512,o),
(392,519,q),
(409,611,l),
(355,611,l),
(338,519,l),
(229,510,o),
(84,369,o),
(65,262,qs),
(46,155,o),
(141,14,o),
(248,5,q),
(231,-89,l),
(285,-89,l),
(302,5,l),
(390,12,o),
(520,110,o),
(542,184,q),
(457,184,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
15 12 2 3 1 6 3 2 0 4 2 76 0 2 3 5 3 2 5 128 6 1 5 4 3 5 4 126 0 1 0 3 2 1 3 105 0 4 0 0 4 89 0 4 4 0 95 0 0 4 0 79 0 0 0 31 0 31 36 34 20 24 20 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 665;
}
);
note = cent;
unicode = 162;
},
{
glyphname = sterling;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,470,o),
(131,407,o),
(137,372,q),
(46,372,l),
(35,308,l),
(148,308,l),
(151,272,o),
(146,246,qs),
(135,183,o),
(79,97,o),
(29,50,q),
(35,-2,l),
(481,-2,l),
(495,74,l),
(131,74,l),
(215,151,o),
(232,246,qs),
(237,272,o),
(234,308,q),
(408,308,l),
(419,372,l),
(225,372,l),
(218,412,o),
(215,471,o),
(221,504,qs),
(233,574,o),
(318,642,o),
(376,642,qs),
(439,642,o),
(493,570,o),
(485,511,q),
(569,511,l),
(581,601,o),
(492,719,o),
(390,719,qs),
(326,719,o),
(217,667,o),
(146,572,o),
(134,508,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
27 1 6 5 1 76 0 1 2 3 2 1 3 128 8 1 3 7 1 4 5 3 4 103 0 2 2 0 97 0 0 0 28 77 0 5 5 6 95 0 6 6 29 6 78 17 22 17 20 17 21 34 18 34 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = currency;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(359,322,o),
(288,259,o),
(246,259,qs),
(203,259,o),
(158,321,o),
(168,377,qs),
(178,433,o),
(246,496,o),
(288,496,qs),
(331,496,o),
(379,432,o),
(369,377,qs)
);
},
{
closed = 1;
nodes = (
(444,212,l),
(395,271,l),
(435,317,o),
(446,377,qs),
(457,440,o),
(432,484,q),
(502,544,l),
(469,586,l),
(397,525,l),
(358,554,o),
(299,554,qs),
(240,554,o),
(192,525,q),
(142,586,l),
(92,544,l),
(143,484,l),
(103,439,o),
(92,377,qs),
(81,317,o),
(103,271,q),
(34,212,l),
(68,170,l),
(138,229,l),
(176,200,o),
(236,200,qs),
(294,200,o),
(346,230,q),
(395,170,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
32 30 26 24 4 0 3 37 33 23 19 4 1 0 38 18 16 3 2 1 3 76 31 25 2 3 74 39 17 2 2 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 1 0 2 1 2 101 0 0 0 3 97 0 3 3 31 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 3 0 0 1 3 0 105 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
44 36 36 33 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 537;
}
);
note = currency;
unicode = 164;
},
{
glyphname = yen;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(238,263,l),
(231,224,l),
(31,224,l),
(19,157,l),
(219,157,l),
(192,0,l),
(283,0,l),
(310,157,l),
(510,157,l),
(522,224,l),
(322,224,l),
(329,263,l),
(365,315,l),
(538,317,l),
(550,383,l),
(413,383,l),
(632,697,l),
(530,697,l),
(297,345,l),
(188,697,l),
(86,697,l),
(196,383,l),
(59,383,l),
(47,317,l),
(219,315,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
5 1 4 0 23 12 2 5 4 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
3 1 0 11 10 2 4 5 0 4 104 9 1 5 8 1 6 7 5 6 103 2 1 1 1 28 77 0 7 7 29 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
2 1 1 0 1 133 3 1 0 11 10 2 4 5 0 4 104 9 1 5 8 1 6 7 5 6 103 0 7 7 29 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 24 0 24 22 21 17 17 17 18 17 17 18 17 17 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = yen;
unicode = 165;
},
{
glyphname = brokenbar;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(87,273,l),
(21,-106,l),
(112,-106,l),
(178,273,l)
);
},
{
closed = 1;
nodes = (
(204,417,l),
(270,795,l),
(179,795,l),
(113,417,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 2 0 3 1 2 3 103 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 291;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = section;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,508,o),
(166,445,o),
(213,420,q),
(142,401,o),
(56,314,o),
(46,258,qs),
(34,188,o),
(118,104,o),
(214,70,qs),
(274,49,o),
(336,16,o),
(359,-21,o),
(354,-46,qs),
(347,-89,o),
(280,-132,o),
(226,-132,qs),
(169,-132,o),
(120,-76,o),
(124,-31,q),
(33,-31,l),
(21,-109,o),
(123,-196,o),
(215,-196,qs),
(277,-196,o),
(377,-154,o),
(439,-82,o),
(447,-39,qs),
(455,8,o),
(409,72,o),
(362,95,q),
(434,116,o),
(519,202,o),
(529,258,qs),
(541,328,o),
(456,412,o),
(361,445,qs),
(301,466,o),
(239,500,o),
(216,537,o),
(221,563,qs),
(228,604,o),
(296,647,o),
(350,647,qs),
(407,647,o),
(456,590,o),
(451,546,q),
(542,546,l),
(554,624,o),
(453,712,o),
(361,712,qs),
(298,712,o),
(198,670,o),
(136,598,o),
(128,555,qs)
);
},
{
closed = 1;
nodes = (
(428,210,o),
(337,143,o),
(270,143,qs),
(201,143,o),
(130,209,o),
(139,258,qs),
(147,306,o),
(238,372,o),
(306,372,qs),
(374,372,o),
(445,308,o),
(436,258,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
50 1 6 1 23 1 4 7 2 76 0 1 2 6 2 1 6 128 0 6 7 2 6 7 126 0 7 4 2 7 4 126 0 4 5 2 4 5 126 0 5 0 3 5 3 102 0 2 2 0 97 0 0 0 28 2 78 63 61 57 55 38 36 34 33 31 29 34 18 34 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 575;
}
);
note = section;
unicode = 167;
},
{
glyphname = dieresis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,622,o),
(124,652,o),
(128,674,qs),
(132,696,o),
(106,727,o),
(85,727,qs),
(63,727,o),
(27,696,o),
(23,674,qs),
(19,652,o),
(45,622,o),
(67,622,qs)
);
},
{
closed = 1;
nodes = (
(251,622,o),
(287,652,o),
(291,674,qs),
(295,696,o),
(269,727,o),
(247,727,qs),
(225,727,o),
(190,696,o),
(186,674,qs),
(182,652,o),
(207,622,o),
(229,622,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 89 2 1 0 0 1 97 5 3 4 3 1 0 1 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 314;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = copyright;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(31,246,o),
(90,85,o),
(232,-6,o),
(334,-6,qs),
(435,-6,o),
(609,85,o),
(725,246,o),
(743,349,qs),
(761,452,o),
(703,613,o),
(561,704,o),
(460,704,qs),
(358,704,o),
(184,613,o),
(67,452,o),
(49,349,qs)
);
},
{
closed = 1;
nodes = (
(684,256,o),
(584,113,o),
(433,33,o),
(341,33,qs),
(248,33,o),
(124,113,o),
(76,256,o),
(92,349,qs),
(109,443,o),
(208,585,o),
(360,664,o),
(453,664,qs),
(545,664,o),
(668,585,o),
(717,443,o),
(700,349,qs)
);
},
{
closed = 1;
nodes = (
(525,472,o),
(468,515,o),
(424,515,qs),
(364,515,o),
(273,429,o),
(259,349,qs),
(245,270,o),
(306,184,o),
(366,184,qs),
(457,184,o),
(502,267,q),
(586,267,l),
(554,199,o),
(429,118,o),
(354,118,qs),
(294,118,o),
(205,175,o),
(166,280,o),
(178,350,qs),
(191,420,o),
(267,525,o),
(376,581,o),
(436,581,qs),
(512,581,o),
(608,503,o),
(615,432,q),
(531,432,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 55 values pushed */
0 4 2 8 2 4 114 0 5 7 3 3 5 114 0 0 0 2 4 0 2 105 10 1 9 0 6 7 9 6 103 0 8 0 7 5 8 7 105 0 3 1 1 3 89 0 3 3 1 98 0 1 3 1 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 4 2 8 2 4 8 128 0 5 7 3 7 5 3 128 0 0 0 2 4 0 2 105 10 1 9 0 6 7 9 6 103 0 8 0 7 5 8 7 105 0 3 1 1 3 89 0 3 3 1 98 0 1 3 1 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
32 32 32 58 32 58 36 33 18 38 38 38 38 38 34 11 8 31 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 792;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = ordfeminine;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,347,o),
(290,384,o),
(311,413,q),
(300,353,l),
(372,353,l),
(434,703,l),
(362,703,l),
(351,642,l),
(339,672,o),
(279,709,o),
(232,709,qs),
(185,709,o),
(101,664,o),
(43,582,o),
(33,530,qs),
(24,477,o),
(53,394,o),
(122,347,o),
(170,347,qs)
);
},
{
closed = 1;
nodes = (
(289,652,o),
(341,585,o),
(331,528,qs),
(321,471,o),
(245,404,o),
(197,404,qs),
(150,404,o),
(98,472,o),
(108,529,qs),
(118,586,o),
(194,652,o),
(241,652,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
15 10 2 4 5 1 76 0 1 1 44 77 7 1 5 5 0 97 0 0 0 44 77 0 2 2 45 77 0 4 4 3 97 6 1 3 3 47 3 78 19 19 0 0 19 30 19 29 25 23 0 18 0 17 17 19 38 8 9 25 
CALL[ ]	/* CallFunction */";
};
width = 450;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = guillemotleft;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(131,295,l),
(261,470,l),
(172,470,l),
(45,295,l),
(110,120,l),
(199,120,l)
);
},
{
closed = 1;
nodes = (
(290,120,l),
(380,120,l),
(312,295,l),
(442,470,l),
(352,470,l),
(226,295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
11 8 4 1 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 4 2 1 0 1 79 0 0 10 9 7 6 0 5 0 5 18 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 461;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = logicalnot;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(47,360,l),
(521,360,l),
(496,220,l),
(587,220,l),
(625,432,l),
(60,432,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 1 1 0 113 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 1 0 134 3 1 2 1 1 2 87 3 1 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 5 0 5 17 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 650;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = uni00AD;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(51,328,l),
(450,328,l),
(464,405,l),
(65,405,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = uni00AD;
unicode = 173;
},
{
glyphname = registered;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,667,o),
(429,575,o),
(416,502,qs),
(403,429,o),
(298,337,o),
(226,337,qs),
(153,337,o),
(82,429,o),
(95,502,qs),
(108,575,o),
(211,667,o),
(284,667,qs)
);
},
{
closed = 1;
nodes = (
(277,297,o),
(378,350,o),
(447,444,o),
(457,502,qs),
(467,560,o),
(432,653,o),
(349,706,o),
(291,706,qs),
(232,706,o),
(131,653,o),
(62,560,o),
(52,502,qs),
(42,444,o),
(77,350,o),
(160,297,o),
(219,297,qs)
);
},
{
closed = 1;
nodes = (
(358,575,o),
(323,611,o),
(289,611,qs),
(193,611,l),
(155,396,l),
(207,396,l),
(222,476,l),
(239,476,l),
(272,396,l),
(336,397,l),
(294,480,l),
(317,487,o),
(348,520,o),
(352,544,qs)
);
},
{
closed = 1;
nodes = (
(278,564,ls),
(289,564,o),
(302,553,o),
(300,542,qs),
(298,531,o),
(281,519,o),
(270,519,qs),
(229,519,l),
(237,564,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 87 values pushed */
30 1 5 8 1 76 6 1 4 5 0 5 4 0 128 0 2 10 1 1 7 2 1 105 0 7 0 9 8 7 9 105 0 8 0 5 4 8 5 103 0 0 3 3 0 89 0 0 0 3 97 11 1 3 0 3 81 12 12 0 0 50 48 44 42 39 37 36 35 34 33 32 31 12 27 12 26 20 18 0 11 0 10 36 12 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 509;
}
);
note = registered;
unicode = 174;
},
{
glyphname = macron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(11,641,l),
(363,641,l),
(375,709,l),
(23,709,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 387;
}
);
note = macron;
unicode = 175;
},
{
glyphname = degree;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(14,444,o),
(94,347,o),
(172,347,qs),
(223,347,o),
(312,391,o),
(372,471,o),
(381,524,qs),
(395,603,o),
(314,699,o),
(236,699,qs),
(158,699,o),
(42,603,o),
(28,524,qs)
);
},
{
closed = 1;
nodes = (
(298,466,o),
(227,402,o),
(182,402,qs),
(137,402,o),
(91,465,o),
(101,524,qs),
(111,581,o),
(182,646,o),
(226,646,qs),
(271,646,o),
(318,581,o),
(308,524,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 31 values pushed */
0 0 0 2 3 0 2 105 0 3 1 1 3 89 0 3 3 1 97 0 1 3 1 81 36 36 37 33 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 410;
}
);
note = degree;
unicode = 176;
},
{
glyphname = plusminus;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(346,624,l),
(316,454,l),
(103,454,l),
(89,377,l),
(302,377,l),
(270,195,l),
(57,195,l),
(43,118,l),
(552,118,l),
(566,195,l),
(355,195,l),
(387,377,l),
(598,377,l),
(612,454,l),
(401,454,l),
(431,624,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 7 0 7 133 6 1 0 5 1 1 2 0 1 103 4 1 2 3 3 2 87 4 1 2 2 3 96 0 3 2 3 80 17 17 17 17 17 17 17 16 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = uni00B2;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(123,627,o),
(155,654,o),
(179,654,qs),
(202,654,o),
(225,624,o),
(221,597,qs),
(216,568,o),
(172,519,o),
(134,492,qs),
(10,404,l),
(0,352,l),
(257,352,l),
(268,411,l),
(92,411,l),
(181,467,ls),
(236,503,o),
(290,562,o),
(297,600,qs),
(305,646,o),
(248,710,o),
(191,710,qs),
(132,710,o),
(53,650,o),
(43,603,q),
(116,603,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
5 1 4 3 1 3 4 114 0 3 3 0 97 0 0 0 44 77 0 1 1 2 95 0 2 2 45 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
5 1 4 3 1 3 4 1 128 0 3 3 0 97 0 0 0 44 77 0 1 1 2 95 0 2 2 45 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 24 0 24 39 17 22 34 6 9 26 
CALL[ ]	/* CallFunction */";
};
width = 330;
}
);
note = uni00B2;
unicode = 178;
},
{
glyphname = uni00B3;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(119,631,o),
(154,655,o),
(180,655,qs),
(208,655,o),
(235,626,o),
(231,603,qs),
(227,579,o),
(188,553,o),
(159,553,qs),
(118,553,l),
(110,505,l),
(153,505,ls),
(181,505,o),
(211,477,o),
(207,453,qs),
(202,429,o),
(165,401,o),
(137,401,qs),
(110,401,o),
(81,427,o),
(82,454,q),
(10,454,l),
(5,403,o),
(68,347,o),
(128,347,qs),
(189,347,o),
(276,403,o),
(283,444,qs),
(288,474,o),
(259,517,o),
(233,527,q),
(233,529,l),
(262,537,o),
(304,577,o),
(309,607,qs),
(316,650,o),
(251,710,o),
(195,710,qs),
(137,710,o),
(54,655,o),
(42,611,q),
(111,611,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
9 1 4 5 1 76 8 1 7 6 5 6 7 5 128 0 2 4 3 4 2 3 128 0 5 0 4 2 5 4 105 0 6 6 0 97 0 0 0 44 77 0 3 3 1 97 0 1 1 47 1 78 0 0 0 41 0 41 36 33 36 34 18 43 34 9 9 29 
CALL[ ]	/* CallFunction */";
};
width = 332;
}
);
note = uni00B3;
unicode = 179;
},
{
glyphname = acute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(12,657,l),
(0,589,l),
(233,703,l),
(247,782,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 247;
}
);
note = acute;
unicode = 180;
},
{
glyphname = uni00B5;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(639,548,l),
(548,548,l),
(495,245,ls),
(480,159,o),
(381,69,o),
(310,69,qs),
(239,69,o),
(170,161,o),
(185,248,qs),
(238,548,l),
(148,548,l),
(6,-260,l),
(96,-260,l),
(151,54,l),
(166,21,o),
(228,-9,o),
(268,-9,qs),
(329,-9,o),
(434,46,o),
(469,100,q),
(452,0,l),
(543,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
1 1 3 2 7 1 0 3 2 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
1 1 3 2 7 1 5 3 2 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
4 1 2 2 31 77 0 3 3 0 97 6 5 2 0 0 29 77 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 1 2 1 83 4 1 2 2 0 97 6 5 2 0 0 29 77 0 3 3 0 97 6 5 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 1 2 1 83 4 1 2 2 5 95 6 1 5 5 29 77 0 3 3 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 21 0 21 19 35 17 19 35 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 645;
}
);
note = uni00B5;
unicode = 181;
},
{
glyphname = paragraph;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(329,692,ls),
(213,692,o),
(72,578,o),
(56,488,qs),
(40,398,o),
(140,286,o),
(257,286,qs),
(268,286,l),
(218,0,l),
(299,0,l),
(408,621,l),
(485,621,l),
(376,0,l),
(457,0,l),
(579,692,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 3 1 0 1 3 0 128 0 4 0 1 3 4 1 103 2 1 0 0 29 0 78 36 33 17 17 16 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = periodcentered;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,367,o),
(145,403,o),
(120,403,qs),
(94,403,o),
(52,367,o),
(47,341,qs),
(42,315,o),
(72,279,o),
(98,279,qs),
(123,279,o),
(164,315,o),
(169,341,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 36 33 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 212;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = cedilla;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,7,l),
(66,-114,l),
(116,-114,ls),
(149,-114,o),
(177,-134,o),
(173,-157,qs),
(168,-181,o),
(134,-201,o),
(101,-201,qs),
(4,-201,l),
(-7,-260,l),
(108,-260,ls),
(162,-260,o),
(240,-204,o),
(249,-157,qs),
(257,-109,o),
(196,-57,o),
(137,-58,q),
(149,7,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 4 3 4 0 114 0 4 0 3 2 4 3 105 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 0 4 3 4 0 3 128 0 4 0 3 2 4 3 105 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
17 36 33 36 16 5 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 272;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = uni00B9;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(48,352,l),
(120,352,l),
(182,704,l),
(56,704,l),
(46,648,l),
(100,648,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
3 1 2 2 0 95 0 0 0 44 77 0 1 1 45 1 78 0 0 0 5 0 5 17 17 4 9 24 
CALL[ ]	/* CallFunction */";
};
width = 196;
}
);
note = uni00B9;
unicode = 185;
},
{
glyphname = ordmasculine;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(24,474,o),
(57,392,o),
(132,346,o),
(185,346,qs),
(237,346,o),
(330,392,o),
(394,475,o),
(403,528,qs),
(413,582,o),
(379,664,o),
(303,709,o),
(250,709,qs),
(198,709,o),
(105,664,o),
(43,582,o),
(33,528,qs)
);
},
{
closed = 1;
nodes = (
(319,470,o),
(241,404,o),
(195,404,qs),
(148,404,o),
(98,469,o),
(108,527,qs),
(118,586,o),
(193,652,o),
(240,652,qs),
(286,652,o),
(339,586,o),
(329,527,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 2 2 0 97 0 0 0 44 77 0 3 3 1 97 0 1 1 47 1 78 36 37 38 34 4 9 26 
CALL[ ]	/* CallFunction */";
};
width = 436;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = guillemotright;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(289,120,l),
(416,295,l),
(351,470,l),
(262,470,l),
(329,295,l),
(200,120,l)
);
},
{
closed = 1;
nodes = (
(108,120,l),
(235,295,l),
(170,470,l),
(81,470,l),
(149,295,l),
(19,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
9 3 2 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 18 18 18 17 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 461;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = onequarter;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,0,l),
(86,0,l),
(583,698,l),
(497,698,l)
);
},
{
closed = 1;
nodes = (
(144,648,l),
(92,352,l),
(164,352,l),
(226,704,l),
(100,704,l),
(90,648,l)
);
},
{
closed = 1;
nodes = (
(434,69,l),
(422,0,l),
(494,0,l),
(506,69,l),
(554,69,l),
(562,116,l),
(514,116,l),
(556,353,l),
(459,353,l),
(259,111,l),
(251,69,l)
);
},
{
closed = 1;
nodes = (
(475,291,l),
(444,116,l),
(333,116,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 10 values pushed */
22 1 6 3 10 1 7 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 5 4 3 4 5 3 128 0 3 6 4 3 6 126 8 1 0 7 0 134 2 11 2 1 0 4 5 1 4 103 12 10 2 6 7 7 6 87 12 10 2 6 6 7 96 9 1 7 6 7 80 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
11 1 1 2 4 2 1 4 128 0 5 4 3 4 5 3 128 0 3 6 4 3 6 126 8 1 0 7 0 134 0 2 0 4 5 2 4 103 12 10 2 6 7 7 6 87 12 10 2 6 6 7 96 9 1 7 6 7 80 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
21 21 0 0 21 23 21 23 20 19 18 17 16 15 14 13 12 11 9 8 7 6 5 4 0 3 0 3 17 13 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 640;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = onehalf;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-5,0,l),
(82,0,l),
(570,698,l),
(484,698,l)
);
},
{
closed = 1;
nodes = (
(90,352,l),
(162,352,l),
(224,704,l),
(98,704,l),
(88,648,l),
(142,648,l)
);
},
{
closed = 1;
nodes = (
(430,274,o),
(462,301,o),
(486,301,qs),
(509,301,o),
(533,271,o),
(528,244,qs),
(523,215,o),
(479,166,o),
(442,139,qs),
(317,51,l),
(308,-1,l),
(565,-1,l),
(575,58,l),
(399,58,l),
(488,114,ls),
(543,150,o),
(598,209,o),
(605,247,qs),
(613,293,o),
(555,357,o),
(498,357,qs),
(439,357,o),
(360,297,o),
(350,250,q),
(423,250,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 6 values pushed */
24 1 0 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 3 5 8 5 3 8 128 12 1 9 8 6 8 9 114 2 10 2 1 11 1 4 5 1 4 103 0 5 0 8 9 5 8 106 0 6 0 0 6 87 0 6 6 0 95 7 1 0 6 0 79 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
39 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 3 5 8 5 3 8 128 12 1 9 8 6 8 9 6 128 2 10 2 1 11 1 4 5 1 4 103 0 5 0 8 9 5 8 106 0 6 0 0 6 87 0 6 6 0 95 7 1 0 6 0 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
10 1 1 2 4 2 1 4 128 0 3 5 8 5 3 8 128 12 1 9 8 6 8 9 6 128 0 2 11 1 4 5 2 4 103 0 5 0 8 9 5 8 106 0 6 0 0 6 87 0 6 6 0 95 7 1 0 6 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
10 10 4 4 0 0 10 34 10 34 32 30 23 22 21 20 14 12 4 9 4 9 8 7 6 5 0 3 0 3 17 13 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 675;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = threequarters;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(80,0,l),
(165,0,l),
(677,698,l),
(591,698,l)
);
},
{
closed = 1;
nodes = (
(593,116,l),
(635,353,l),
(538,353,l),
(337,111,l),
(330,69,l),
(513,69,l),
(500,0,l),
(572,0,l),
(585,69,l),
(632,69,l),
(640,116,l)
);
},
{
closed = 1;
nodes = (
(411,116,l),
(553,291,l),
(522,116,l)
);
},
{
closed = 1;
nodes = (
(162,631,o),
(197,655,o),
(223,655,qs),
(251,655,o),
(278,626,o),
(274,603,qs),
(269,579,o),
(231,553,o),
(202,553,qs),
(161,553,l),
(152,505,l),
(195,505,ls),
(223,505,o),
(254,477,o),
(249,453,qs),
(245,429,o),
(207,401,o),
(179,401,qs),
(152,401,o),
(124,427,o),
(124,454,q),
(52,454,l),
(47,403,o),
(111,347,o),
(171,347,qs),
(232,347,o),
(318,403,o),
(326,444,qs),
(331,474,o),
(302,517,o),
(275,527,q),
(276,529,l),
(305,537,o),
(346,577,o),
(351,607,qs),
(359,650,o),
(294,710,o),
(238,710,qs),
(180,710,o),
(97,655,o),
(84,611,q),
(153,611,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 14 values pushed */
27 1 12 13 15 1 6 9 10 1 2 6 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
18 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 77 values pushed */
17 1 15 14 13 14 15 13 128 0 10 12 11 12 10 11 128 0 5 11 9 11 5 9 128 3 1 0 2 2 0 113 8 16 2 1 0 14 15 1 14 105 0 13 0 12 10 13 12 105 0 11 0 9 6 11 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 76 values pushed */
17 1 15 14 13 14 15 13 128 0 10 12 11 12 10 11 128 0 5 11 9 11 5 9 128 3 1 0 2 0 134 8 16 2 1 0 14 15 1 14 105 0 13 0 12 10 13 12 105 0 11 0 9 6 11 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 83 values pushed */
16 1 1 8 14 8 1 14 128 17 1 15 14 13 14 15 13 128 0 10 12 11 12 10 11 128 0 5 11 9 11 5 9 128 3 1 0 2 0 134 0 8 0 14 15 8 14 105 0 13 0 12 10 13 12 105 0 11 0 9 6 11 9 105 7 1 6 2 2 6 87 7 1 6 6 2 96 4 1 2 6 2 80 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
18 18 0 0 18 59 18 59 57 55 51 49 48 46 42 40 38 37 35 33 22 20 17 16 14 13 12 11 9 8 7 6 5 4 0 3 0 3 17 18 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 709;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = questiondown;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(361,-13,o),
(279,-80,o),
(217,-80,qs),
(156,-80,o),
(96,-10,o),
(107,50,qs),
(121,133,o),
(244,193,o),
(343,193,qs),
(372,193,l),
(396,351,l),
(317,351,l),
(297,256,l),
(186,256,o),
(38,155,o),
(20,50,qs),
(3,-44,o),
(105,-156,o),
(204,-156,qs),
(269,-156,o),
(377,-106,o),
(447,-15,o),
(458,45,q),
(372,45,l)
);
},
{
closed = 1;
nodes = (
(317,468,o),
(346,432,o),
(371,432,qs),
(397,432,o),
(439,468,o),
(444,494,qs),
(448,520,o),
(419,556,o),
(393,556,qs),
(368,556,o),
(326,520,o),
(322,494,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 7 1 1 2 114 8 1 5 3 4 3 5 4 128 0 1 0 3 5 1 3 106 0 4 0 0 4 0 101 0 7 7 6 97 0 6 6 31 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 2 7 1 7 2 1 128 8 1 5 3 4 3 5 4 128 0 1 0 3 5 1 3 106 0 4 0 0 4 0 101 0 7 7 6 97 0 6 6 31 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 2 7 1 7 2 1 128 8 1 5 3 4 3 5 4 128 0 6 0 7 2 6 7 105 0 1 0 3 5 1 3 106 0 4 0 0 4 89 0 4 4 0 97 0 0 4 0 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 33 31 27 25 0 23 0 23 36 33 17 20 35 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 519;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = Agrave;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(463,0,l),
(559,0,l),
(430,693,l),
(325,693,l),
(-49,0,l),
(47,0,l),
(131,155,l),
(435,155,l)
);
},
{
closed = 1;
nodes = (
(358,581,l),
(422,229,l),
(170,229,l)
);
},
{
closed = 1;
nodes = (
(483,734,l),
(495,802,l),
(304,927,l),
(290,848,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
9 1 4 1 1 76 14 13 12 11 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 1 4 1 133 6 1 4 5 1 3 0 4 3 104 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 1 4 1 133 6 1 4 5 1 3 0 4 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
8 8 0 0 8 10 8 10 0 7 0 7 17 17 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Aacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(463,0,l),
(559,0,l),
(430,693,l),
(325,693,l),
(-49,0,l),
(47,0,l),
(131,155,l),
(435,155,l)
);
},
{
closed = 1;
nodes = (
(358,581,l),
(422,229,l),
(170,229,l)
);
},
{
closed = 1;
nodes = (
(503,848,l),
(517,927,l),
(282,802,l),
(270,734,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
9 1 4 1 1 76 14 13 12 11 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 1 4 1 133 6 1 4 5 1 3 0 4 3 104 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 1 4 1 133 6 1 4 5 1 3 0 4 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
8 8 0 0 8 10 8 10 0 7 0 7 17 17 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Acircumflex;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,0,l),
(562,0,l),
(433,693,l),
(328,693,l),
(-46,0,l),
(50,0,l),
(133,155,l),
(437,155,l)
);
},
{
closed = 1;
nodes = (
(405,827,l),
(528,742,l),
(540,814,l),
(417,897,l),
(263,814,l),
(251,742,l)
);
},
{
closed = 1;
nodes = (
(360,581,l),
(424,229,l),
(172,229,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
15 1 4 1 1 76 13 12 11 10 9 8 6 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 1 4 1 133 6 1 4 5 1 3 0 4 3 104 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 1 4 5 1 3 0 4 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 1 4 1 133 6 1 4 5 1 3 0 4 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
14 14 0 0 14 16 14 16 0 7 0 7 17 17 17 7 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Atilde;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(469,0,l),
(565,0,l),
(437,693,l),
(332,693,l),
(-43,0,l),
(53,0,l),
(137,155,l),
(441,155,l)
);
},
{
closed = 1;
nodes = (
(307,774,o),
(334,796,o),
(351,796,qs),
(364,796,o),
(381,786,o),
(395,776,qs),
(411,763,o),
(438,750,o),
(457,750,qs),
(497,750,o),
(560,804,o),
(575,854,q),
(523,854,l),
(516,833,o),
(488,811,o),
(471,811,qs),
(458,811,o),
(438,822,o),
(426,832,qs),
(409,844,o),
(385,857,o),
(366,857,qs),
(326,857,o),
(263,803,o),
(247,752,q),
(300,752,l)
);
},
{
closed = 1;
nodes = (
(428,229,l),
(176,229,l),
(364,581,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
36 1 10 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 4 0 8 7 4 8 105 0 5 12 9 2 7 1 5 7 105 0 10 11 1 3 0 10 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 1 7 10 7 1 10 128 6 1 4 0 8 7 4 8 105 0 5 12 9 2 7 1 5 7 105 0 10 11 1 3 0 10 3 104 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 4 0 8 7 4 8 105 0 5 12 9 2 7 1 5 7 105 0 10 11 1 3 0 10 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 1 7 10 7 1 10 128 6 1 4 0 8 7 4 8 105 0 5 12 9 2 7 1 5 7 105 0 10 11 1 3 0 10 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
8 8 0 0 35 34 8 33 8 33 31 29 25 23 21 20 18 16 12 10 0 7 0 7 17 17 17 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = Adieresis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,0,l),
(564,0,l),
(435,693,l),
(330,693,l),
(-44,0,l),
(52,0,l),
(135,155,l),
(439,155,l)
);
},
{
closed = 1;
nodes = (
(336,767,o),
(373,797,o),
(377,819,qs),
(380,841,o),
(355,872,o),
(334,872,qs),
(312,872,o),
(275,841,o),
(272,819,qs),
(268,797,o),
(293,767,o),
(315,767,qs)
);
},
{
closed = 1;
nodes = (
(499,767,o),
(536,797,o),
(540,819,qs),
(543,841,o),
(518,872,o),
(496,872,qs),
(474,872,o),
(438,841,o),
(435,819,qs),
(431,797,o),
(455,767,o),
(477,767,qs)
);
},
{
closed = 1;
nodes = (
(427,229,l),
(175,229,l),
(363,581,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
34 1 8 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
6 1 4 11 7 10 3 5 1 4 5 105 0 8 9 1 3 0 8 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 5 8 5 1 8 128 6 1 4 11 7 10 3 5 1 4 5 105 0 8 9 1 3 0 8 3 104 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
6 1 4 11 7 10 3 5 1 4 5 105 0 8 9 1 3 0 8 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 1 5 8 5 1 8 128 6 1 4 11 7 10 3 5 1 4 5 105 0 8 9 1 3 0 8 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
20 20 8 8 0 0 33 32 20 31 20 30 26 24 8 19 8 18 14 12 0 7 0 7 17 17 17 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Aring;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(460,0,l),
(556,0,l),
(427,693,l),
(322,693,l),
(-52,0,l),
(44,0,l),
(128,155,l),
(432,155,l)
);
},
{
closed = 1;
nodes = (
(371,801,o),
(346,833,o),
(350,858,qs),
(355,883,o),
(391,914,o),
(414,914,qs),
(437,914,o),
(463,883,o),
(458,858,qs),
(454,833,o),
(417,801,o),
(394,801,qs)
);
},
{
closed = 1;
nodes = (
(378,962,o),
(306,904,o),
(297,857,qs),
(289,810,o),
(341,752,o),
(386,752,qs),
(432,752,o),
(503,809,o),
(511,857,qs),
(520,905,o),
(469,962,o),
(423,962,qs)
);
},
{
closed = 1;
nodes = (
(419,229,l),
(167,229,l),
(355,581,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
34 1 8 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
11 1 7 0 4 5 7 4 105 0 8 9 1 3 0 8 3 104 0 6 6 5 97 10 1 5 5 36 77 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 6 8 6 1 8 128 11 1 7 0 4 5 7 4 105 0 8 9 1 3 0 8 3 104 0 6 6 5 97 10 1 5 5 36 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
11 1 7 0 4 5 7 4 105 0 8 9 1 3 0 8 3 104 0 6 6 5 97 10 1 5 5 36 77 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 6 8 6 1 8 128 11 1 7 0 4 5 7 4 105 0 8 9 1 3 0 8 3 104 0 6 6 5 97 10 1 5 5 36 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 1 6 8 6 1 8 128 11 1 7 0 4 5 7 4 105 10 1 5 0 6 1 5 6 105 0 8 9 1 3 0 8 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
20 20 8 8 0 0 33 32 20 31 20 30 26 24 8 19 8 18 14 12 0 7 0 7 17 17 17 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = AE;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,629,l),
(443,226,l),
(216,226,l)
);
},
{
closed = 1;
nodes = (
(49,0,l),
(164,155,l),
(431,155,l),
(403,0,l),
(776,0,l),
(789,72,l),
(507,72,l),
(550,317,l),
(802,317,l),
(815,387,l),
(563,387,l),
(605,626,l),
(887,626,l),
(900,698,l),
(469,698,l),
(-50,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 3 0 4 0 3 4 103 9 1 0 0 7 5 0 7 103 0 2 2 1 95 0 1 1 28 77 0 5 5 6 95 8 1 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 1 0 2 3 1 2 103 0 3 0 4 0 3 4 103 9 1 0 0 7 5 0 7 103 0 5 5 6 95 8 1 6 6 29 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
0 0 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 0 2 0 2 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 900;
}
);
note = AE;
unicode = 198;
},
{
glyphname = Ccedilla;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(48,251,o),
(104,94,o),
(235,1,o),
(325,-5,q),
(306,-114,l),
(356,-114,ls),
(389,-114,o),
(416,-134,o),
(412,-157,qs),
(408,-181,o),
(373,-201,o),
(340,-201,qs),
(243,-201,l),
(233,-260,l),
(348,-260,ls),
(402,-260,o),
(480,-204,o),
(488,-157,qs),
(496,-109,o),
(436,-57,o),
(376,-58,q),
(386,-5,l),
(488,3,o),
(658,111,o),
(710,203,q),
(601,203,l),
(561,140,o),
(441,73,o),
(365,73,qs),
(292,73,o),
(188,141,o),
(144,266,o),
(158,349,qs),
(173,433,o),
(261,558,o),
(389,626,o),
(462,626,qs),
(538,626,o),
(635,558,o),
(653,495,q),
(762,495,l),
(741,596,o),
(590,706,o),
(476,706,qs),
(379,706,o),
(204,614,o),
(83,451,o),
(65,349,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 5 9 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 5 0 8 7 5 8 105 0 2 2 0 97 0 0 0 28 77 0 3 3 9 97 0 9 9 29 77 0 7 7 6 95 0 6 6 33 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 5 0 8 7 5 8 105 0 7 0 6 7 6 99 0 2 2 0 97 0 0 0 28 77 0 3 3 9 97 0 9 9 29 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 5 0 8 7 5 8 105 0 7 0 6 7 6 99 0 3 3 9 97 0 9 9 29 9 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
44 43 36 33 36 20 18 38 34 18 34 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Egrave;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,698,l),
(118,698,l),
(-5,0,l),
(370,0,l),
(383,75,l),
(99,75,l),
(142,315,l),
(396,315,l),
(409,390,l),
(155,390,l),
(196,623,l),
(480,623,l)
);
},
{
closed = 1;
nodes = (
(400,734,l),
(412,802,l),
(221,927,l),
(207,848,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
15 14 13 12 4 4 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 4 6 1 5 0 4 5 103 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Eacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,698,l),
(118,698,l),
(-5,0,l),
(370,0,l),
(383,75,l),
(99,75,l),
(142,315,l),
(396,315,l),
(409,390,l),
(155,390,l),
(196,623,l),
(480,623,l)
);
},
{
closed = 1;
nodes = (
(420,848,l),
(434,927,l),
(199,802,l),
(187,734,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
15 14 13 12 4 4 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 4 6 1 5 0 4 5 103 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ecircumflex;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(496,698,l),
(121,698,l),
(-2,0,l),
(373,0,l),
(386,75,l),
(102,75,l),
(144,315,l),
(398,315,l),
(412,390,l),
(158,390,l),
(199,623,l),
(483,623,l)
);
},
{
closed = 1;
nodes = (
(322,827,l),
(445,742,l),
(457,814,l),
(334,897,l),
(180,814,l),
(168,742,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
17 16 15 14 13 12 6 4 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 4 6 1 5 0 4 5 103 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(498,698,l),
(123,698,l),
(0,0,l),
(375,0,l),
(388,75,l),
(104,75,l),
(147,315,l),
(401,315,l),
(414,390,l),
(160,390,l),
(201,623,l),
(485,623,l)
);
},
{
closed = 1;
nodes = (
(253,767,o),
(290,797,o),
(294,819,qs),
(297,841,o),
(272,872,o),
(251,872,qs),
(229,872,o),
(192,841,o),
(189,819,qs),
(185,797,o),
(210,767,o),
(232,767,qs)
);
},
{
closed = 1;
nodes = (
(416,767,o),
(453,797,o),
(457,819,qs),
(460,841,o),
(435,872,o),
(413,872,qs),
(391,872,o),
(355,841,o),
(352,819,qs),
(348,797,o),
(372,767,o),
(394,767,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
8 1 6 12 9 11 3 7 4 6 7 105 0 0 0 1 2 0 1 103 10 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
8 1 6 12 9 11 3 7 4 6 7 105 0 4 10 1 5 0 4 5 103 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
24 24 12 12 0 0 24 35 24 34 30 28 12 23 12 22 18 16 0 11 0 11 17 17 17 17 17 13 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Igrave;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-5,0,l),
(86,0,l),
(209,697,l),
(118,697,l)
);
},
{
closed = 1;
nodes = (
(268,734,l),
(280,802,l),
(89,927,l),
(75,848,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 6 5 4 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Iacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-5,0,l),
(86,0,l),
(209,697,l),
(118,697,l)
);
},
{
closed = 1;
nodes = (
(288,848,l),
(302,927,l),
(67,802,l),
(55,734,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 6 5 4 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Icircumflex;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-2,0,l),
(89,0,l),
(212,697,l),
(121,697,l)
);
},
{
closed = 1;
nodes = (
(190,827,l),
(313,742,l),
(325,814,l),
(202,897,l),
(48,814,l),
(36,742,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
9 8 7 6 5 4 6 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(0,0,l),
(91,0,l),
(214,697,l),
(123,697,l)
);
},
{
closed = 1;
nodes = (
(121,767,o),
(158,797,o),
(162,819,qs),
(165,841,o),
(140,872,o),
(119,872,qs),
(97,872,o),
(60,841,o),
(57,819,qs),
(53,797,o),
(78,767,o),
(100,767,qs)
);
},
{
closed = 1;
nodes = (
(284,767,o),
(321,797,o),
(325,819,qs),
(328,841,o),
(303,872,o),
(281,872,qs),
(259,872,o),
(223,841,o),
(220,819,qs),
(216,797,o),
(240,767,o),
(262,767,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
4 1 2 8 5 7 3 3 1 2 3 105 6 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
4 1 2 8 5 7 3 3 1 2 3 105 6 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
16 16 4 4 0 0 16 27 16 26 22 20 4 15 4 14 10 8 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Eth;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(103,389,l),
(16,389,l),
(1,305,l),
(88,305,l),
(35,0,l),
(252,0,ls),
(365,0,o),
(546,83,o),
(663,240,o),
(682,347,qs),
(701,454,o),
(639,612,o),
(487,697,o),
(374,697,qs),
(157,697,l)
);
},
{
closed = 1;
nodes = (
(179,305,l),
(371,305,l),
(386,389,l),
(194,389,l),
(235,623,l),
(361,623,ls),
(495,623,o),
(612,477,o),
(589,347,qs),
(566,217,o),
(398,70,o),
(264,70,qs),
(138,70,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
6 1 3 7 1 2 4 3 2 103 0 5 5 0 95 8 1 0 0 28 77 9 1 4 4 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
8 1 0 0 5 3 0 5 103 6 1 3 7 1 2 4 3 2 103 9 1 4 4 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
16 15 1 0 26 25 24 23 22 20 15 27 16 27 13 12 11 10 9 7 0 14 1 14 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = Ntilde;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(582,698,l),
(484,144,l),
(216,698,l),
(125,698,l),
(1,0,l),
(92,0,l),
(190,555,l),
(458,0,l),
(549,0,l),
(673,698,l)
);
},
{
closed = 1;
nodes = (
(322,774,o),
(349,796,o),
(366,796,qs),
(379,796,o),
(396,786,o),
(410,776,qs),
(426,763,o),
(453,750,o),
(472,750,qs),
(512,750,o),
(575,804,o),
(590,854,q),
(538,854,l),
(531,833,o),
(503,811,o),
(486,811,qs),
(473,811,o),
(453,822,o),
(441,832,qs),
(424,844,o),
(400,857,o),
(381,857,qs),
(341,857,o),
(278,803,o),
(262,752,q),
(315,752,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 2 2 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 0 8 7 4 8 105 0 5 10 9 2 7 2 5 7 105 3 1 2 2 28 77 1 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
6 1 4 0 8 7 4 8 105 0 5 10 9 2 7 2 5 7 105 3 1 2 2 0 95 1 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
10 10 10 35 10 35 36 34 18 36 35 18 17 18 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Ograve;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(742,452,o),
(678,614,o),
(534,705,o),
(436,705,qs),
(339,705,o),
(163,614,o),
(41,451,o),
(23,349,qs),
(5,247,o),
(70,84,o),
(214,-7,o),
(311,-7,qs),
(409,-7,o),
(585,84,o),
(705,246,o),
(723,349,qs)
);
},
{
closed = 1;
nodes = (
(131,433,o),
(220,558,o),
(348,626,o),
(422,626,qs),
(496,626,o),
(600,558,o),
(645,433,o),
(630,349,qs),
(616,266,o),
(527,140,o),
(398,72,o),
(325,72,qs),
(252,72,o),
(147,140,o),
(102,266,o),
(116,349,qs)
);
},
{
closed = 1;
nodes = (
(348,848,l),
(541,734,l),
(553,802,l),
(362,927,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 34 33 32 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 1 97 0 1 1 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 38 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Oacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(742,452,o),
(678,614,o),
(534,705,o),
(436,705,qs),
(339,705,o),
(163,614,o),
(41,451,o),
(23,349,qs),
(5,247,o),
(70,84,o),
(214,-7,o),
(311,-7,qs),
(409,-7,o),
(585,84,o),
(705,246,o),
(723,349,qs)
);
},
{
closed = 1;
nodes = (
(131,433,o),
(220,558,o),
(348,626,o),
(422,626,qs),
(496,626,o),
(600,558,o),
(645,433,o),
(630,349,qs),
(616,266,o),
(527,140,o),
(398,72,o),
(325,72,qs),
(252,72,o),
(147,140,o),
(102,266,o),
(116,349,qs)
);
},
{
closed = 1;
nodes = (
(340,802,l),
(328,734,l),
(561,848,l),
(575,927,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 34 33 32 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 1 97 0 1 1 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 38 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(744,452,o),
(681,614,o),
(537,705,o),
(439,705,qs),
(342,705,o),
(166,614,o),
(44,451,o),
(26,349,qs),
(8,247,o),
(72,84,o),
(216,-7,o),
(313,-7,qs),
(411,-7,o),
(587,84,o),
(708,246,o),
(726,349,qs)
);
},
{
closed = 1;
nodes = (
(134,433,o),
(223,558,o),
(351,626,o),
(425,626,qs),
(499,626,o),
(603,558,o),
(648,433,o),
(633,349,qs),
(618,266,o),
(529,140,o),
(400,72,o),
(327,72,qs),
(254,72,o),
(149,140,o),
(104,266,o),
(119,349,qs)
);
},
{
closed = 1;
nodes = (
(599,814,l),
(476,897,l),
(322,814,l),
(309,742,l),
(463,827,l),
(586,742,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
37 36 35 34 33 5 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 1 97 0 1 1 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 38 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Otilde;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(748,452,o),
(684,614,o),
(540,705,o),
(442,705,qs),
(345,705,o),
(169,614,o),
(48,451,o),
(30,349,qs),
(12,247,o),
(76,84,o),
(220,-7,o),
(317,-7,qs),
(415,-7,o),
(591,84,o),
(711,246,o),
(730,349,qs)
);
},
{
closed = 1;
nodes = (
(137,433,o),
(226,558,o),
(354,626,o),
(428,626,qs),
(502,626,o),
(606,558,o),
(651,433,o),
(637,349,qs),
(622,266,o),
(533,140,o),
(404,72,o),
(331,72,qs),
(258,72,o),
(153,140,o),
(108,266,o),
(123,349,qs)
);
},
{
closed = 1;
nodes = (
(367,774,o),
(393,796,o),
(410,796,qs),
(423,796,o),
(441,786,o),
(455,776,qs),
(471,763,o),
(497,750,o),
(516,750,qs),
(556,750,o),
(620,804,o),
(635,854,q),
(583,854,l),
(576,833,o),
(548,811,o),
(531,811,qs),
(518,811,o),
(498,822,o),
(486,832,qs),
(469,844,o),
(444,857,o),
(425,857,qs),
(385,857,o),
(323,803,o),
(307,752,q),
(360,752,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 4 0 8 7 4 8 105 0 5 10 9 2 7 1 5 7 105 0 3 3 1 97 0 1 1 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
6 1 4 0 8 7 4 8 105 0 5 10 9 2 7 1 5 7 105 0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
32 32 32 57 32 57 36 34 18 36 38 38 38 38 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = Odieresis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(746,452,o),
(683,614,o),
(539,705,o),
(441,705,qs),
(344,705,o),
(168,614,o),
(46,451,o),
(28,349,qs),
(10,247,o),
(75,84,o),
(219,-7,o),
(316,-7,qs),
(414,-7,o),
(590,84,o),
(710,246,o),
(728,349,qs)
);
},
{
closed = 1;
nodes = (
(136,433,o),
(225,558,o),
(353,626,o),
(427,626,qs),
(501,626,o),
(605,558,o),
(650,433,o),
(635,349,qs),
(621,266,o),
(531,140,o),
(402,72,o),
(329,72,qs),
(256,72,o),
(151,140,o),
(107,266,o),
(121,349,qs)
);
},
{
closed = 1;
nodes = (
(395,767,o),
(431,797,o),
(435,819,qs),
(439,841,o),
(413,872,o),
(392,872,qs),
(370,872,o),
(334,841,o),
(330,819,qs),
(326,797,o),
(352,767,o),
(374,767,qs)
);
},
{
closed = 1;
nodes = (
(558,767,o),
(594,797,o),
(598,819,qs),
(602,841,o),
(576,872,o),
(554,872,qs),
(532,872,o),
(497,841,o),
(493,819,qs),
(489,797,o),
(514,767,o),
(536,767,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
6 1 4 9 7 8 3 5 1 4 5 105 0 3 3 1 97 0 1 1 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
6 1 4 9 7 8 3 5 1 4 5 105 0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
44 44 32 32 44 55 44 54 50 48 32 43 32 42 40 38 38 38 34 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = multiply;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(125,150,l),
(312,309,l),
(443,150,l),
(511,208,l),
(381,367,l),
(566,524,l),
(516,584,l),
(332,427,l),
(202,584,l),
(134,525,l),
(262,369,l),
(75,210,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
8 2 1 50 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = Oslash;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(756,421,o),
(732,546,o),
(697,593,q),
(813,698,l),
(739,698,l),
(664,630,l),
(625,666,o),
(519,705,o),
(456,705,qs),
(359,705,o),
(183,614,o),
(61,451,o),
(43,349,qs),
(30,278,o),
(56,154,o),
(89,106,q),
(-27,0,l),
(47,0,l),
(122,68,l),
(161,32,o),
(267,-7,o),
(330,-7,qs),
(428,-7,o),
(604,84,o),
(725,246,o),
(743,349,qs)
);
},
{
closed = 1;
nodes = (
(151,433,o),
(240,558,o),
(368,626,o),
(442,626,qs),
(539,626,o),
(597,569,q),
(159,169,l),
(117,241,o),
(136,349,qs)
);
},
{
closed = 1;
nodes = (
(247,72,o),
(189,129,q),
(628,529,l),
(669,456,o),
(650,349,qs),
(635,266,o),
(546,140,o),
(417,72,o),
(344,72,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
19 1 4 2 41 40 28 27 22 9 6 5 4 6 1 0 5 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
19 1 4 3 41 40 28 27 22 9 6 5 4 6 1 1 5 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 4 2 97 3 1 2 2 28 77 6 1 5 5 0 97 1 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 2 4 2 3 4 128 0 4 4 2 97 0 2 2 28 77 0 1 1 29 77 6 1 5 5 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 3 2 4 2 3 4 128 0 2 0 4 5 2 4 105 0 1 1 29 77 6 1 5 5 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
35 35 35 43 35 42 40 19 39 19 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Ugrave;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,257,ls),
(24,170,o),
(72,51,o),
(181,-7,o),
(255,-7,qs),
(329,-7,o),
(458,51,o),
(549,170,o),
(564,257,qs),
(642,697,l),
(551,697,l),
(473,256,ls),
(457,163,o),
(350,73,o),
(270,73,qs),
(189,73,o),
(114,163,o),
(130,256,qs),
(208,697,l),
(117,697,l)
);
},
{
closed = 1;
nodes = (
(290,848,l),
(483,734,l),
(495,802,l),
(304,927,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
23 22 21 20 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
4 3 2 1 0 1 133 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 19 0 19 36 19 35 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(39,257,ls),
(24,170,o),
(72,51,o),
(181,-7,o),
(255,-7,qs),
(329,-7,o),
(458,51,o),
(549,170,o),
(564,257,qs),
(642,697,l),
(551,697,l),
(473,256,ls),
(457,163,o),
(350,73,o),
(270,73,qs),
(189,73,o),
(114,163,o),
(130,256,qs),
(208,697,l),
(117,697,l)
);
},
{
closed = 1;
nodes = (
(282,802,l),
(270,734,l),
(503,848,l),
(517,927,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
23 22 21 20 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
4 3 2 1 0 1 133 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 19 0 19 36 19 35 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ucircumflex;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(42,257,ls),
(27,170,o),
(75,51,o),
(183,-7,o),
(257,-7,qs),
(331,-7,o),
(461,51,o),
(552,170,o),
(567,257,qs),
(644,697,l),
(553,697,l),
(476,256,ls),
(459,163,o),
(352,73,o),
(272,73,qs),
(191,73,o),
(116,163,o),
(133,256,qs),
(210,697,l),
(119,697,l)
);
},
{
closed = 1;
nodes = (
(541,814,l),
(418,897,l),
(264,814,l),
(251,742,l),
(405,827,l),
(528,742,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
25 24 23 22 21 5 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
4 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
4 3 2 1 0 1 133 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 19 0 19 36 19 35 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(44,257,ls),
(29,170,o),
(77,51,o),
(186,-7,o),
(260,-7,qs),
(334,-7,o),
(463,51,o),
(554,170,o),
(569,257,qs),
(647,697,l),
(556,697,l),
(478,256,ls),
(461,163,o),
(355,73,o),
(275,73,qs),
(194,73,o),
(118,163,o),
(135,256,qs),
(213,697,l),
(122,697,l)
);
},
{
closed = 1;
nodes = (
(337,767,o),
(373,797,o),
(377,819,qs),
(381,841,o),
(355,872,o),
(334,872,qs),
(312,872,o),
(276,841,o),
(272,819,qs),
(268,797,o),
(294,767,o),
(316,767,qs)
);
},
{
closed = 1;
nodes = (
(500,767,o),
(536,797,o),
(540,819,qs),
(544,841,o),
(518,872,o),
(496,872,qs),
(474,872,o),
(439,841,o),
(435,819,qs),
(431,797,o),
(456,767,o),
(478,767,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 4 10 7 9 3 5 1 4 5 105 8 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
8 3 2 1 5 0 5 1 0 128 6 1 4 10 7 9 3 5 1 4 5 105 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
32 32 20 20 0 0 32 43 32 42 38 36 20 31 20 30 26 24 0 19 0 19 36 19 35 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Yacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,263,l),
(165,0,l),
(256,0,l),
(303,263,l),
(606,697,l),
(505,697,l),
(271,344,l),
(161,697,l),
(60,697,l)
);
},
{
closed = 1;
nodes = (
(458,848,l),
(472,927,l),
(237,802,l),
(225,734,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
7 4 1 3 1 0 1 76 12 11 10 9 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 0 0 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 0 1 0 133 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 8 0 8 18 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Thorn;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(191,481,l),
(325,481,ls),
(400,481,o),
(461,411,o),
(450,349,qs),
(439,288,o),
(354,219,o),
(279,219,qs),
(145,219,l)
);
},
{
closed = 1;
nodes = (
(559,439,o),
(456,553,o),
(338,553,qs),
(204,553,l),
(230,698,l),
(139,698,l),
(15,0,l),
(106,0,l),
(132,146,l),
(266,146,ls),
(388,146,o),
(527,261,o),
(543,349,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 0 0 2 3 0 2 103 0 4 4 28 77 0 1 1 5 95 0 5 5 31 77 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 0 0 2 3 0 2 103 0 1 1 5 95 0 5 5 31 77 0 4 4 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 5 0 1 0 5 1 103 6 1 0 0 2 3 0 2 103 0 4 4 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 19 17 16 15 14 13 12 10 7 5 0 8 1 8 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = germandbls;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(84,0,l),
(181,550,ls),
(206,694,o),
(349,694,qs),
(409,694,o),
(469,643,o),
(461,598,qs),
(456,570,o),
(416,526,o),
(376,495,qs),
(333,462,o),
(286,410,o),
(280,375,qs),
(272,329,o),
(330,269,o),
(407,242,qs),
(458,224,o),
(495,180,o),
(488,144,qs),
(481,105,o),
(424,63,o),
(377,63,qs),
(327,63,o),
(278,121,o),
(284,170,q),
(192,170,l),
(184,86,o),
(277,-10,o),
(364,-10,qs),
(453,-10,o),
(570,79,o),
(583,151,qs),
(593,210,o),
(541,287,o),
(472,311,qs),
(411,333,o),
(370,365,o),
(374,387,qs),
(377,403,o),
(406,432,o),
(437,455,qs),
(485,490,o),
(545,557,o),
(554,605,qs),
(561,649,o),
(524,725,o),
(433,771,o),
(364,771,qs),
(248,771,o),
(108,654,o),
(92,561,qs),
(-7,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 30 77 0 3 3 1 97 5 1 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 2 4 3 4 2 3 128 0 4 4 0 97 0 0 0 30 77 0 5 5 29 77 0 3 3 1 97 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 2 4 3 4 2 3 128 0 0 0 4 2 0 4 105 0 5 5 29 77 0 3 3 1 97 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 2 4 3 4 2 3 128 0 0 0 4 2 0 4 105 0 3 0 1 3 1 101 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
51 50 48 46 30 28 26 25 23 21 34 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 681;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = agrave;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(9,193,o),
(54,63,o),
(159,-9,o),
(232,-9,qs),
(303,-9,o),
(421,54,o),
(457,102,q),
(439,0,l),
(531,0,l),
(627,548,l),
(535,548,l),
(518,448,l),
(500,495,o),
(405,557,o),
(333,557,qs),
(260,557,o),
(129,487,o),
(38,360,o),
(24,276,qs)
);
},
{
closed = 1;
nodes = (
(476,213,o),
(410,120,o),
(316,71,o),
(265,71,qs),
(214,71,o),
(139,120,o),
(105,213,o),
(117,276,qs),
(127,338,o),
(194,430,o),
(286,478,o),
(337,478,qs),
(388,478,o),
(464,429,o),
(498,337,o),
(487,275,qs)
);
},
{
closed = 1;
nodes = (
(279,703,l),
(472,589,l),
(484,657,l),
(293,782,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
11 6 2 5 4 1 76 38 37 36 35 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 0 0 4 5 0 4 105 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
38 38 35 17 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = aacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(9,193,o),
(54,63,o),
(159,-9,o),
(232,-9,qs),
(303,-9,o),
(421,54,o),
(457,102,q),
(439,0,l),
(531,0,l),
(627,548,l),
(535,548,l),
(518,448,l),
(500,495,o),
(405,557,o),
(333,557,qs),
(260,557,o),
(129,487,o),
(38,360,o),
(24,276,qs)
);
},
{
closed = 1;
nodes = (
(476,213,o),
(410,120,o),
(316,71,o),
(265,71,qs),
(214,71,o),
(139,120,o),
(105,213,o),
(117,276,qs),
(127,338,o),
(194,430,o),
(286,478,o),
(337,478,qs),
(388,478,o),
(464,429,o),
(498,337,o),
(487,275,qs)
);
},
{
closed = 1;
nodes = (
(271,657,l),
(259,589,l),
(492,703,l),
(506,782,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
11 6 2 5 4 1 76 38 37 36 35 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 0 0 4 5 0 4 105 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
38 38 35 17 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = acircumflex;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(12,193,o),
(57,63,o),
(162,-9,o),
(235,-9,qs),
(306,-9,o),
(424,54,o),
(459,102,q),
(441,0,l),
(533,0,l),
(630,548,l),
(538,548,l),
(520,448,l),
(503,495,o),
(408,557,o),
(336,557,qs),
(263,557,o),
(131,487,o),
(41,360,o),
(26,276,qs)
);
},
{
closed = 1;
nodes = (
(479,213,o),
(413,120,o),
(319,71,o),
(268,71,qs),
(217,71,o),
(142,120,o),
(108,213,o),
(119,276,qs),
(130,338,o),
(196,430,o),
(289,478,o),
(340,478,qs),
(391,478,o),
(467,429,o),
(501,337,o),
(490,275,qs)
);
},
{
closed = 1;
nodes = (
(529,669,l),
(406,752,l),
(252,669,l),
(240,597,l),
(394,682,l),
(517,597,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
11 6 2 5 4 1 76 40 39 38 37 36 5 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 0 0 4 5 0 4 105 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
38 38 35 17 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = atilde;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(15,193,o),
(60,63,o),
(165,-9,o),
(238,-9,qs),
(309,-9,o),
(428,54,o),
(463,102,q),
(445,0,l),
(537,0,l),
(634,548,l),
(542,548,l),
(524,448,l),
(506,495,o),
(411,557,o),
(339,557,qs),
(266,557,o),
(135,487,o),
(44,360,o),
(30,276,qs)
);
},
{
closed = 1;
nodes = (
(483,213,o),
(416,120,o),
(323,71,o),
(272,71,qs),
(221,71,o),
(145,120,o),
(112,213,o),
(123,276,qs),
(134,338,o),
(200,430,o),
(292,478,o),
(343,478,qs),
(394,478,o),
(471,429,o),
(504,337,o),
(494,275,qs)
);
},
{
closed = 1;
nodes = (
(297,629,o),
(324,651,o),
(341,651,qs),
(354,651,o),
(371,641,o),
(385,631,qs),
(401,618,o),
(428,605,o),
(447,605,qs),
(487,605,o),
(550,659,o),
(565,709,q),
(513,709,l),
(506,688,o),
(478,666,o),
(461,666,qs),
(448,666,o),
(428,677,o),
(416,687,qs),
(399,699,o),
(375,712,o),
(356,712,qs),
(316,712,o),
(253,658,o),
(237,607,q),
(290,607,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
11 6 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 7 12 11 2 9 0 7 9 105 0 10 10 6 97 8 1 6 6 28 77 0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 7 12 11 2 9 0 7 9 105 0 10 10 6 97 8 1 6 6 28 77 0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 7 12 11 2 9 0 7 9 105 0 0 0 4 5 0 4 105 0 10 10 6 97 8 1 6 6 28 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
35 35 35 60 35 60 58 56 52 50 18 36 38 38 38 35 17 19 34 13 8 31 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = adieresis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(14,193,o),
(59,63,o),
(164,-9,o),
(237,-9,qs),
(308,-9,o),
(426,54,o),
(462,102,q),
(444,0,l),
(536,0,l),
(632,548,l),
(540,548,l),
(523,448,l),
(505,495,o),
(410,557,o),
(338,557,qs),
(265,557,o),
(134,487,o),
(43,360,o),
(28,276,qs)
);
},
{
closed = 1;
nodes = (
(481,213,o),
(415,120,o),
(321,71,o),
(270,71,qs),
(219,71,o),
(144,120,o),
(110,213,o),
(121,276,qs),
(132,338,o),
(199,430,o),
(291,478,o),
(342,478,qs),
(393,478,o),
(469,429,o),
(503,337,o),
(492,275,qs)
);
},
{
closed = 1;
nodes = (
(325,622,o),
(362,652,o),
(366,674,qs),
(369,696,o),
(344,727,o),
(323,727,qs),
(301,727,o),
(264,696,o),
(261,674,qs),
(257,652,o),
(282,622,o),
(304,622,qs)
);
},
{
closed = 1;
nodes = (
(488,622,o),
(525,652,o),
(529,674,qs),
(532,696,o),
(507,727,o),
(485,727,qs),
(463,727,o),
(427,696,o),
(424,674,qs),
(420,652,o),
(444,622,o),
(466,622,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
11 6 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
11 9 10 3 7 7 6 97 8 1 6 6 34 77 0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
11 9 10 3 7 7 6 97 8 1 6 6 34 77 0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 0 0 4 5 0 4 105 11 9 10 3 7 7 6 97 8 1 6 6 34 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
47 47 35 35 47 58 47 57 53 51 35 46 35 45 40 38 38 35 17 19 34 12 8 29 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = aring;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(6,193,o),
(51,63,o),
(156,-9,o),
(229,-9,qs),
(300,-9,o),
(418,54,o),
(454,102,q),
(436,0,l),
(528,0,l),
(624,548,l),
(532,548,l),
(515,448,l),
(497,495,o),
(402,557,o),
(330,557,qs),
(257,557,o),
(126,487,o),
(35,360,o),
(20,276,qs)
);
},
{
closed = 1;
nodes = (
(473,213,o),
(407,120,o),
(313,71,o),
(262,71,qs),
(211,71,o),
(136,120,o),
(102,213,o),
(113,276,qs),
(124,338,o),
(191,430,o),
(283,478,o),
(334,478,qs),
(385,478,o),
(461,429,o),
(495,337,o),
(484,275,qs)
);
},
{
closed = 1;
nodes = (
(367,817,o),
(295,759,o),
(286,712,qs),
(278,665,o),
(330,607,o),
(375,607,qs),
(421,607,o),
(492,664,o),
(500,712,qs),
(509,760,o),
(458,817,o),
(412,817,qs)
);
},
{
closed = 1;
nodes = (
(360,656,o),
(335,688,o),
(339,713,qs),
(344,738,o),
(380,769,o),
(403,769,qs),
(426,769,o),
(452,738,o),
(447,713,qs),
(443,688,o),
(406,656,o),
(383,656,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
11 6 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
10 1 7 0 8 9 7 8 105 11 1 9 0 6 0 9 6 105 0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
10 1 7 0 8 9 7 8 105 11 1 9 0 6 0 9 6 105 0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
10 1 7 0 8 9 7 8 105 11 1 9 0 6 0 9 6 105 0 0 0 4 5 0 4 105 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
47 47 35 35 47 58 47 57 53 51 35 46 35 45 40 38 38 35 17 19 34 12 8 29 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = aring;
unicode = 229;
},
{
glyphname = ae;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(869,480,o),
(943,439,o),
(977,362,o),
(967,309,q),
(606,309,l),
(627,388,o),
(748,480,o),
(820,480,qs)
);
},
{
closed = 1;
nodes = (
(904,123,o),
(811,68,o),
(747,68,qs),
(703,68,o),
(630,108,o),
(590,187,o),
(595,243,q),
(1046,243,l),
(1054,268,o),
(1059,297,qs),
(1072,369,o),
(1029,488,o),
(924,557,o),
(848,557,qs),
(710,557,o),
(620,447,q),
(637,548,l),
(561,548,l),
(544,447,l),
(520,500,o),
(425,557,o),
(358,557,qs),
(282,557,o),
(150,487,o),
(58,360,o),
(43,276,qs),
(29,193,o),
(74,63,o),
(180,-9,o),
(253,-9,qs),
(322,-9,o),
(441,54,o),
(480,105,q),
(462,0,l),
(541,0,l),
(559,106,l),
(579,53,o),
(681,-9,o),
(748,-9,qs),
(843,-9,o),
(989,90,o),
(1024,169,q),
(926,169,l)
);
},
{
closed = 1;
nodes = (
(147,338,o),
(214,430,o),
(306,478,o),
(357,478,qs),
(408,478,o),
(484,429,o),
(518,337,o),
(507,275,qs),
(496,213,o),
(430,120,o),
(336,71,o),
(285,71,qs),
(234,71,o),
(159,120,o),
(125,213,o),
(136,276,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
34 31 2 0 1 17 14 2 9 10 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
14 1 10 8 9 8 10 9 128 0 0 0 8 10 0 8 103 12 13 2 1 1 5 97 7 6 2 5 5 31 77 11 1 9 9 2 97 4 3 2 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
14 1 10 8 9 8 10 9 128 0 0 0 8 10 0 8 103 12 13 2 1 1 5 97 7 1 5 5 31 77 0 6 6 3 95 0 3 3 29 77 11 1 9 9 2 97 4 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
14 1 10 8 9 8 10 9 128 7 1 5 12 13 2 1 0 5 1 105 0 0 0 8 10 0 8 103 0 6 6 3 95 0 3 3 29 77 11 1 9 9 2 97 4 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
8 8 0 0 63 61 55 53 8 50 8 50 48 46 43 42 37 35 33 32 29 27 21 19 16 15 12 10 0 7 0 6 18 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 1097;
}
);
note = ae;
unicode = 230;
},
{
glyphname = ccedilla;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(51,196,o),
(89,73,o),
(182,0,o),
(250,-7,q),
(231,-114,l),
(281,-114,ls),
(314,-114,o),
(341,-134,o),
(337,-157,qs),
(333,-181,o),
(298,-201,o),
(265,-201,qs),
(168,-201,l),
(158,-260,l),
(273,-260,ls),
(327,-260,o),
(405,-204,o),
(413,-157,qs),
(422,-109,o),
(361,-57,o),
(302,-58,q),
(310,-8,l),
(400,-1,o),
(534,98,o),
(568,176,q),
(470,176,l),
(446,124,o),
(356,68,o),
(296,68,qs),
(218,68,o),
(141,176,o),
(158,275,qs),
(176,373,o),
(290,480,o),
(368,480,qs),
(428,480,o),
(499,422,o),
(504,372,q),
(602,372,l),
(597,459,o),
(483,557,o),
(382,557,qs),
(304,557,o),
(171,487,o),
(80,360,o),
(65,275,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
41 23 2 5 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 3 5 5 3 112 0 5 0 8 7 5 8 106 0 2 2 0 97 0 0 0 31 77 0 7 7 6 95 0 6 6 33 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 3 5 2 3 5 126 0 5 0 8 7 5 8 106 0 2 2 0 97 0 0 0 31 77 0 7 7 6 95 0 6 6 33 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 3 5 2 3 5 126 0 5 0 8 7 5 8 106 0 7 0 6 7 6 99 0 2 2 0 97 0 0 0 31 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 3 5 2 3 5 126 0 0 0 2 1 0 2 105 0 5 0 8 7 5 8 106 0 7 6 6 7 87 0 7 7 6 95 0 6 7 6 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
36 33 36 20 18 36 34 18 34 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = egrave;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,480,o),
(447,441,o),
(479,366,o),
(470,314,q),
(124,314,l),
(145,392,o),
(257,480,o),
(326,480,qs)
);
},
{
closed = 1;
nodes = (
(406,123,o),
(317,68,o),
(258,68,qs),
(186,68,o),
(101,159,o),
(110,240,q),
(548,240,l),
(556,269,o),
(561,295,qs),
(574,370,o),
(530,489,o),
(422,557,o),
(344,557,qs),
(264,557,o),
(129,488,o),
(38,360,o),
(23,275,qs),
(8,190,o),
(56,61,o),
(166,-9,o),
(244,-9,qs),
(342,-9,o),
(492,90,o),
(528,169,q),
(430,169,l)
);
},
{
closed = 1;
nodes = (
(251,703,l),
(444,589,l),
(456,657,l),
(265,782,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
36 35 34 33 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
8 1 6 4 5 4 6 5 128 0 3 7 1 1 0 3 1 105 0 0 0 4 6 0 4 103 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
8 8 0 0 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = eacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,480,o),
(447,441,o),
(479,366,o),
(470,314,q),
(124,314,l),
(145,392,o),
(257,480,o),
(326,480,qs)
);
},
{
closed = 1;
nodes = (
(406,123,o),
(317,68,o),
(258,68,qs),
(186,68,o),
(101,159,o),
(110,240,q),
(548,240,l),
(556,269,o),
(561,295,qs),
(574,370,o),
(530,489,o),
(422,557,o),
(344,557,qs),
(264,557,o),
(129,488,o),
(38,360,o),
(23,275,qs),
(8,190,o),
(56,61,o),
(166,-9,o),
(244,-9,qs),
(342,-9,o),
(492,90,o),
(528,169,q),
(430,169,l)
);
},
{
closed = 1;
nodes = (
(243,657,l),
(231,589,l),
(464,703,l),
(478,782,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
36 35 34 33 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
8 1 6 4 5 4 6 5 128 0 3 7 1 1 0 3 1 105 0 0 0 4 6 0 4 103 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
8 8 0 0 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ecircumflex;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,480,o),
(449,441,o),
(482,366,o),
(473,314,q),
(127,314,l),
(148,392,o),
(260,480,o),
(329,480,qs)
);
},
{
closed = 1;
nodes = (
(408,123,o),
(319,68,o),
(260,68,qs),
(188,68,o),
(104,159,o),
(113,240,q),
(551,240,l),
(559,269,o),
(564,295,qs),
(577,370,o),
(533,489,o),
(425,557,o),
(347,557,qs),
(267,557,o),
(132,488,o),
(41,360,o),
(26,275,qs),
(11,190,o),
(58,61,o),
(169,-9,o),
(247,-9,qs),
(345,-9,o),
(494,90,o),
(530,169,q),
(432,169,l)
);
},
{
closed = 1;
nodes = (
(501,669,l),
(378,752,l),
(224,669,l),
(212,597,l),
(366,682,l),
(489,597,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
38 37 36 35 34 5 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
8 1 6 4 5 4 6 5 128 0 3 7 1 1 0 3 1 105 0 0 0 4 6 0 4 103 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
8 8 0 0 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(379,480,o),
(451,441,o),
(484,366,o),
(475,314,q),
(129,314,l),
(150,392,o),
(262,480,o),
(331,480,qs)
);
},
{
closed = 1;
nodes = (
(410,123,o),
(322,68,o),
(263,68,qs),
(191,68,o),
(106,159,o),
(115,240,q),
(553,240,l),
(561,269,o),
(566,295,qs),
(579,370,o),
(535,489,o),
(427,557,o),
(349,557,qs),
(269,557,o),
(134,488,o),
(43,360,o),
(28,275,qs),
(13,190,o),
(60,61,o),
(171,-9,o),
(249,-9,qs),
(347,-9,o),
(497,90,o),
(532,169,q),
(434,169,l)
);
},
{
closed = 1;
nodes = (
(296,622,o),
(333,652,o),
(337,674,qs),
(340,696,o),
(315,727,o),
(294,727,qs),
(272,727,o),
(235,696,o),
(232,674,qs),
(228,652,o),
(253,622,o),
(275,622,qs)
);
},
{
closed = 1;
nodes = (
(459,622,o),
(496,652,o),
(500,674,qs),
(503,696,o),
(478,727,o),
(456,727,qs),
(434,727,o),
(398,696,o),
(395,674,qs),
(391,652,o),
(415,622,o),
(437,622,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
12 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 14 10 13 3 8 8 7 97 9 1 7 7 34 77 11 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
12 1 6 4 5 4 6 5 128 0 3 11 1 1 0 3 1 105 0 0 0 4 6 0 4 103 14 10 13 3 8 8 7 97 9 1 7 7 34 77 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
45 45 33 33 8 8 0 0 45 56 45 55 51 49 33 44 33 43 39 37 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = igrave;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(8,0,l),
(99,0,l),
(196,548,l),
(105,548,l)
);
},
{
closed = 1;
nodes = (
(255,589,l),
(267,657,l),
(76,782,l),
(62,703,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 6 5 4 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = iacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(8,0,l),
(99,0,l),
(196,548,l),
(105,548,l)
);
},
{
closed = 1;
nodes = (
(275,703,l),
(289,782,l),
(54,657,l),
(42,589,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 6 5 4 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = icircumflex;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(11,0,l),
(102,0,l),
(198,548,l),
(107,548,l)
);
},
{
closed = 1;
nodes = (
(177,682,l),
(300,597,l),
(313,669,l),
(189,752,l),
(36,669,l),
(23,597,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
9 8 7 6 5 4 6 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(13,0,l),
(104,0,l),
(201,548,l),
(110,548,l)
);
},
{
closed = 1;
nodes = (
(109,622,o),
(145,652,o),
(149,674,qs),
(153,696,o),
(127,727,o),
(106,727,qs),
(84,727,o),
(48,696,o),
(44,674,qs),
(40,652,o),
(66,622,o),
(88,622,qs)
);
},
{
closed = 1;
nodes = (
(272,622,o),
(308,652,o),
(312,674,qs),
(316,696,o),
(290,727,o),
(268,727,qs),
(246,727,o),
(211,696,o),
(207,674,qs),
(203,652,o),
(228,622,o),
(250,622,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
8 5 7 3 3 3 2 97 4 1 2 2 34 77 6 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
8 5 7 3 3 3 2 97 4 1 2 2 34 77 6 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
16 16 4 4 0 0 16 27 16 26 22 20 4 15 4 14 10 8 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = eth;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(301,594,l),
(439,638,l),
(494,561,o),
(509,466,q),
(464,558,o),
(345,558,qs),
(269,558,o),
(134,488,o),
(42,361,o),
(27,278,qs),
(12,193,o),
(58,62,o),
(171,-9,o),
(250,-9,qs),
(331,-9,o),
(471,65,o),
(568,210,o),
(587,315,qs),
(621,507,o),
(510,660,q),
(609,692,l),
(618,743,l),
(480,699,l),
(475,705,o),
(441,740,q),
(348,740,l),
(383,707,o),
(409,676,q),
(310,644,l)
);
},
{
closed = 1;
nodes = (
(132,343,o),
(197,434,o),
(288,481,o),
(338,481,qs),
(388,481,o),
(464,434,o),
(497,340,o),
(486,275,qs),
(474,210,o),
(407,116,o),
(313,68,o),
(263,68,qs),
(213,68,o),
(140,117,o),
(109,212,o),
(120,278,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
28 27 26 8 7 5 6 2 0 24 1 3 4 2 76 6 1 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 30 77 0 4 4 2 97 0 2 2 31 77 0 3 3 1 97 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 0 2 0 133 0 4 4 2 97 0 2 2 31 77 0 3 3 1 97 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
0 0 2 0 133 0 2 0 4 3 2 4 106 0 3 3 1 97 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
38 40 38 42 18 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 638;
}
);
note = eth;
unicode = 240;
},
{
glyphname = ntilde;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(159,303,ls),
(174,389,o),
(275,479,o),
(347,479,qs),
(418,479,o),
(484,392,o),
(470,310,qs),
(415,0,l),
(505,0,l),
(562,323,ls),
(582,437,o),
(480,558,o),
(380,558,qs),
(324,558,o),
(223,512,o),
(188,470,q),
(202,548,l),
(111,548,l),
(14,0,l),
(105,0,l)
);
},
{
closed = 1;
nodes = (
(279,629,o),
(306,651,o),
(323,651,qs),
(336,651,o),
(353,641,o),
(367,631,qs),
(383,618,o),
(410,605,o),
(429,605,qs),
(469,605,o),
(532,659,o),
(547,709,q),
(495,709,l),
(489,688,o),
(461,666,o),
(444,666,qs),
(431,666,o),
(411,677,o),
(398,687,qs),
(381,699,o),
(357,712,o),
(338,712,qs),
(298,712,o),
(235,658,o),
(219,607,q),
(272,607,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 6 12 10 2 8 0 6 8 105 0 9 9 5 97 7 1 5 5 28 77 0 3 3 0 97 1 1 0 0 31 77 11 4 2 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 6 12 10 2 8 1 6 8 105 0 9 9 5 97 7 1 5 5 28 77 0 0 0 31 77 0 3 3 1 97 0 1 1 31 77 11 4 2 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 6 12 10 2 8 1 6 8 105 0 9 9 5 97 7 1 5 5 28 77 0 3 3 1 97 0 1 1 31 77 0 0 0 2 95 11 4 2 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 6 12 10 2 8 1 6 8 105 0 1 0 3 2 1 3 105 0 9 9 5 97 7 1 5 5 28 77 0 0 0 2 95 11 4 2 2 2 29 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
20 20 0 0 20 45 20 45 43 41 37 35 33 32 30 28 24 22 0 19 0 19 35 19 35 17 13 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = ograve;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(592,360,o),
(541,488,o),
(427,557,o),
(349,557,qs),
(271,557,o),
(133,488,o),
(38,359,o),
(23,275,qs),
(8,190,o),
(56,61,o),
(169,-9,o),
(246,-9,qs),
(324,-9,o),
(464,61,o),
(562,190,o),
(577,275,qs)
);
},
{
closed = 1;
nodes = (
(127,341,o),
(194,433,o),
(285,478,o),
(335,478,qs),
(384,478,o),
(460,433,o),
(495,341,o),
(484,275,qs),
(472,209,o),
(403,117,o),
(309,71,o),
(260,71,qs),
(211,71,o),
(137,116,o),
(104,208,o),
(116,275,qs)
);
},
{
closed = 1;
nodes = (
(261,710,l),
(454,596,l),
(466,664,l),
(275,789,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 34 33 32 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 38 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = oacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(592,360,o),
(541,488,o),
(427,557,o),
(349,557,qs),
(271,557,o),
(133,488,o),
(38,359,o),
(23,275,qs),
(8,190,o),
(56,61,o),
(169,-9,o),
(246,-9,qs),
(324,-9,o),
(464,61,o),
(562,190,o),
(577,275,qs)
);
},
{
closed = 1;
nodes = (
(127,341,o),
(194,433,o),
(285,478,o),
(335,478,qs),
(384,478,o),
(460,433,o),
(495,341,o),
(484,275,qs),
(472,209,o),
(403,117,o),
(309,71,o),
(260,71,qs),
(211,71,o),
(137,116,o),
(104,208,o),
(116,275,qs)
);
},
{
closed = 1;
nodes = (
(253,664,l),
(241,596,l),
(474,710,l),
(488,789,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 34 33 32 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 38 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,360,o),
(544,488,o),
(430,557,o),
(352,557,qs),
(274,557,o),
(136,488,o),
(40,359,o),
(25,275,qs),
(10,190,o),
(59,61,o),
(171,-9,o),
(248,-9,qs),
(326,-9,o),
(467,61,o),
(564,190,o),
(579,275,qs)
);
},
{
closed = 1;
nodes = (
(130,341,o),
(196,433,o),
(287,478,o),
(337,478,qs),
(386,478,o),
(462,433,o),
(498,341,o),
(486,275,qs),
(475,209,o),
(406,117,o),
(311,71,o),
(262,71,qs),
(213,71,o),
(139,116,o),
(107,208,o),
(118,275,qs)
);
},
{
closed = 1;
nodes = (
(512,676,l),
(389,759,l),
(235,676,l),
(222,604,l),
(376,689,l),
(499,604,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
37 36 35 34 33 5 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
38 38 38 34 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = otilde;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(598,360,o),
(547,488,o),
(434,557,o),
(356,557,qs),
(278,557,o),
(139,488,o),
(44,359,o),
(29,275,qs),
(14,190,o),
(62,61,o),
(175,-9,o),
(252,-9,qs),
(330,-9,o),
(470,61,o),
(568,190,o),
(583,275,qs)
);
},
{
closed = 1;
nodes = (
(134,341,o),
(200,433,o),
(291,478,o),
(341,478,qs),
(390,478,o),
(466,433,o),
(502,341,o),
(490,275,qs),
(478,209,o),
(409,117,o),
(315,71,o),
(266,71,qs),
(217,71,o),
(143,116,o),
(110,208,o),
(122,275,qs)
);
},
{
closed = 1;
nodes = (
(280,636,o),
(306,658,o),
(323,658,qs),
(336,658,o),
(354,648,o),
(368,638,qs),
(384,625,o),
(410,612,o),
(429,612,qs),
(469,612,o),
(533,666,o),
(548,716,q),
(496,716,l),
(489,695,o),
(461,673,o),
(444,673,qs),
(431,673,o),
(411,684,o),
(399,694,qs),
(382,706,o),
(357,719,o),
(338,719,qs),
(298,719,o),
(236,665,o),
(220,614,q),
(273,614,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 5 10 9 2 7 1 5 7 105 0 8 8 4 97 6 1 4 4 28 77 0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 5 10 9 2 7 1 5 7 105 0 1 0 3 2 1 3 105 0 8 8 4 97 6 1 4 4 28 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
32 32 32 57 32 57 36 34 18 36 38 38 38 38 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = odieresis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,360,o),
(546,488,o),
(432,557,o),
(354,557,qs),
(276,557,o),
(138,488,o),
(42,359,o),
(28,275,qs),
(13,190,o),
(61,61,o),
(173,-9,o),
(250,-9,qs),
(328,-9,o),
(469,61,o),
(567,190,o),
(582,275,qs)
);
},
{
closed = 1;
nodes = (
(132,341,o),
(198,433,o),
(289,478,o),
(339,478,qs),
(388,478,o),
(464,433,o),
(500,341,o),
(489,275,qs),
(477,209,o),
(408,117,o),
(314,71,o),
(265,71,qs),
(216,71,o),
(142,116,o),
(109,208,o),
(121,275,qs)
);
},
{
closed = 1;
nodes = (
(308,629,o),
(344,659,o),
(348,681,qs),
(352,703,o),
(327,734,o),
(306,734,qs),
(284,734,o),
(247,703,o),
(243,681,qs),
(239,659,o),
(265,629,o),
(287,629,qs)
);
},
{
closed = 1;
nodes = (
(471,629,o),
(507,659,o),
(511,681,qs),
(515,703,o),
(490,734,o),
(468,734,qs),
(446,734,o),
(410,703,o),
(406,681,qs),
(402,659,o),
(427,629,o),
(449,629,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
9 7 8 3 5 5 4 97 6 1 4 4 34 77 0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 0 3 2 1 3 105 9 7 8 3 5 5 4 97 6 1 4 4 34 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
44 44 32 32 44 55 44 54 50 48 32 43 32 42 40 38 38 38 34 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = divide;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(71,328,l),
(581,328,l),
(595,405,l),
(85,405,l)
);
},
{
closed = 1;
nodes = (
(362,179,o),
(333,215,o),
(308,215,qs),
(282,215,o),
(240,179,o),
(235,153,qs),
(231,127,o),
(260,91,o),
(286,91,qs),
(311,91,o),
(353,127,o),
(357,153,qs)
);
},
{
closed = 1;
nodes = (
(437,608,o),
(409,644,o),
(384,644,qs),
(358,644,o),
(315,608,o),
(311,582,qs),
(306,556,o),
(336,520,o),
(362,520,qs),
(387,520,o),
(428,556,o),
(433,582,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 5 0 4 1 5 4 105 6 1 1 0 0 3 1 0 103 0 3 2 2 3 89 0 3 3 2 97 0 2 3 2 81 0 0 25 23 19 17 13 11 7 5 0 3 0 3 17 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = divide;
unicode = 247;
},
{
glyphname = oslash;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(607,333,o),
(590,431,o),
(564,468,q),
(651,548,l),
(586,548,l),
(535,500,l),
(471,557,o),
(370,557,qs),
(292,557,o),
(154,488,o),
(58,359,o),
(43,275,qs),
(33,216,o),
(50,117,o),
(76,79,q),
(-10,0,l),
(55,0,l),
(105,46,l),
(169,-9,o),
(266,-9,qs),
(344,-9,o),
(484,61,o),
(582,190,o),
(597,275,qs)
);
},
{
closed = 1;
nodes = (
(148,341,o),
(214,433,o),
(305,478,o),
(355,478,qs),
(425,478,o),
(466,437,q),
(148,145,l),
(123,198,o),
(136,275,qs)
);
},
{
closed = 1;
nodes = (
(214,71,o),
(174,109,q),
(491,401,l),
(518,352,o),
(504,275,qs),
(493,209,o),
(423,117,o),
(329,71,o),
(280,71,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
17 1 4 2 39 38 26 25 20 8 6 5 4 5 1 0 5 3 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
17 1 4 3 39 38 26 25 20 8 6 5 4 5 1 1 5 3 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 4 2 97 3 1 2 2 31 77 6 1 5 5 0 97 1 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 3 2 4 2 3 4 128 0 4 4 2 97 0 2 2 31 77 0 1 1 29 77 6 1 5 5 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 3 2 4 2 3 4 128 0 2 0 4 5 2 4 105 0 1 1 29 77 6 1 5 5 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
33 33 33 41 33 40 40 18 39 18 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = ugrave;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(591,548,l),
(500,548,l),
(447,247,ls),
(432,161,o),
(332,71,o),
(259,71,qs),
(188,71,o),
(122,158,o),
(136,239,qs),
(190,548,l),
(100,548,l),
(44,227,ls),
(30,151,o),
(71,45,o),
(163,-8,o),
(227,-8,qs),
(283,-8,o),
(385,39,o),
(418,81,q),
(404,0,l),
(495,0,l)
);
},
{
closed = 1;
nodes = (
(261,703,l),
(454,589,l),
(466,657,l),
(275,782,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
1 1 2 1 1 76 24 23 22 21 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 31 77 0 2 2 0 97 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
3 1 1 1 0 97 5 4 2 0 0 29 77 0 2 2 0 97 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 1 4 95 5 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 20 0 20 19 35 20 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(591,548,l),
(500,548,l),
(447,247,ls),
(432,161,o),
(332,71,o),
(259,71,qs),
(188,71,o),
(122,158,o),
(136,239,qs),
(190,548,l),
(100,548,l),
(44,227,ls),
(30,151,o),
(71,45,o),
(163,-8,o),
(227,-8,qs),
(283,-8,o),
(385,39,o),
(418,81,q),
(404,0,l),
(495,0,l)
);
},
{
closed = 1;
nodes = (
(253,657,l),
(241,589,l),
(474,703,l),
(488,782,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
1 1 2 1 1 76 24 23 22 21 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 31 77 0 2 2 0 97 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
3 1 1 1 0 97 5 4 2 0 0 29 77 0 2 2 0 97 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 1 4 95 5 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 20 0 20 19 35 20 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ucircumflex;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,548,l),
(503,548,l),
(450,247,ls),
(435,161,o),
(335,71,o),
(262,71,qs),
(191,71,o),
(124,158,o),
(139,239,qs),
(193,548,l),
(103,548,l),
(46,227,ls),
(33,151,o),
(73,45,o),
(166,-8,o),
(230,-8,qs),
(286,-8,o),
(387,39,o),
(421,81,q),
(406,0,l),
(497,0,l)
);
},
{
closed = 1;
nodes = (
(511,669,l),
(388,752,l),
(234,669,l),
(222,597,l),
(376,682,l),
(499,597,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
1 1 2 1 1 76 26 25 24 23 22 5 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 31 77 0 2 2 0 97 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
3 1 1 1 0 97 5 4 2 0 0 29 77 0 2 2 0 97 5 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 1 4 95 5 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 20 0 20 19 35 20 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(596,548,l),
(505,548,l),
(452,247,ls),
(437,161,o),
(337,71,o),
(264,71,qs),
(193,71,o),
(126,158,o),
(141,239,qs),
(195,548,l),
(105,548,l),
(49,227,ls),
(35,151,o),
(76,45,o),
(168,-8,o),
(232,-8,qs),
(288,-8,o),
(389,39,o),
(423,81,q),
(409,0,l),
(500,0,l)
);
},
{
closed = 1;
nodes = (
(307,622,o),
(344,652,o),
(347,674,qs),
(351,696,o),
(326,727,o),
(305,727,qs),
(283,727,o),
(246,696,o),
(242,674,qs),
(239,652,o),
(264,622,o),
(286,622,qs)
);
},
{
closed = 1;
nodes = (
(470,622,o),
(507,652,o),
(510,674,qs),
(514,696,o),
(489,727,o),
(467,727,qs),
(445,727,o),
(409,696,o),
(405,674,qs),
(402,652,o),
(426,622,o),
(448,622,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
11 8 10 3 6 6 5 97 7 1 5 5 34 77 3 1 1 1 31 77 0 2 2 0 97 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
11 8 10 3 6 6 5 97 7 1 5 5 34 77 3 1 1 1 0 97 9 4 2 0 0 29 77 0 2 2 0 97 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
11 8 10 3 6 6 5 97 7 1 5 5 34 77 3 1 1 1 4 95 9 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
33 33 21 21 0 0 33 44 33 43 39 37 21 32 21 31 27 25 0 20 0 20 19 35 20 35 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = yacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(257,104,l),
(163,548,l),
(62,548,l),
(188,6,l),
(33,-258,l),
(127,-258,l),
(599,548,l),
(505,548,l)
);
},
{
closed = 1;
nodes = (
(457,703,l),
(471,782,l),
(236,657,l),
(224,589,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
6 3 2 0 1 1 76 11 10 9 8 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 1 1 31 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 0 1 0 134 3 2 2 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
3 2 2 1 0 1 133 0 0 0 118 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 7 0 7 18 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = thorn;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,740,l),
(-11,-260,l),
(80,-260,l),
(147,120,l),
(164,62,o),
(257,-9,o),
(329,-9,qs),
(402,-9,o),
(534,63,o),
(625,193,o),
(639,276,qs),
(654,360,o),
(609,487,o),
(502,557,o),
(429,557,qs),
(357,557,o),
(238,488,o),
(202,432,q),
(256,740,l)
);
},
{
closed = 1;
nodes = (
(535,213,o),
(469,120,o),
(375,71,o),
(324,71,qs),
(274,71,o),
(198,120,o),
(163,213,o),
(174,275,qs),
(185,336,o),
(252,429,o),
(346,478,o),
(396,478,qs),
(447,478,o),
(524,430,o),
(557,338,o),
(546,276,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
14 0 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 3 3 30 77 0 4 4 0 97 0 0 0 31 77 0 5 5 1 97 0 1 1 29 77 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 3 0 2 3 2 99 0 4 4 0 97 0 0 0 31 77 0 5 5 1 97 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 4 5 0 4 105 0 3 0 2 3 2 99 0 5 5 1 97 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
38 35 17 19 38 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = ydieresis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(262,104,l),
(168,548,l),
(67,548,l),
(193,6,l),
(38,-258,l),
(132,-258,l),
(604,548,l),
(510,548,l)
);
},
{
closed = 1;
nodes = (
(290,622,o),
(327,652,o),
(330,674,qs),
(334,696,o),
(309,727,o),
(288,727,qs),
(266,727,o),
(229,696,o),
(225,674,qs),
(222,652,o),
(247,622,o),
(269,622,qs)
);
},
{
closed = 1;
nodes = (
(453,622,o),
(490,652,o),
(493,674,qs),
(497,696,o),
(472,727,o),
(450,727,qs),
(428,727,o),
(392,696,o),
(388,674,qs),
(385,652,o),
(409,622,o),
(431,622,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
6 3 2 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
9 6 8 3 4 4 3 97 5 1 3 3 34 77 7 2 2 1 1 31 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 0 134 9 6 8 3 4 4 3 97 5 1 3 3 34 77 7 2 2 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
7 2 2 1 4 0 4 1 0 128 0 0 0 132 9 6 8 3 4 4 3 97 5 1 3 3 34 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
20 20 8 8 0 0 20 31 20 30 26 24 8 19 8 18 14 12 0 7 0 7 18 17 10 8 24 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = Amacron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,0,l),
(566,0,l),
(437,693,l),
(332,693,l),
(-42,0,l),
(54,0,l),
(137,155,l),
(441,155,l)
);
},
{
closed = 1;
nodes = (
(576,786,l),
(588,854,l),
(236,854,l),
(224,786,l)
);
},
{
closed = 1;
nodes = (
(364,581,l),
(428,229,l),
(176,229,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
13 1 6 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 5 1 4 5 103 8 1 6 7 1 3 0 6 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 1 5 6 5 1 6 128 0 4 0 5 1 4 5 103 8 1 6 7 1 3 0 6 3 104 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 5 1 4 5 103 8 1 6 7 1 3 0 6 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 5 6 5 1 6 128 0 4 0 5 1 4 5 103 8 1 6 7 1 3 0 6 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
12 12 0 0 12 14 12 14 11 10 9 8 0 7 0 7 17 17 17 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = amacron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(15,193,o),
(60,63,o),
(166,-9,o),
(239,-9,qs),
(310,-9,o),
(428,54,o),
(463,102,q),
(445,0,l),
(537,0,l),
(634,548,l),
(542,548,l),
(524,448,l),
(507,495,o),
(411,557,o),
(339,557,qs),
(266,557,o),
(135,487,o),
(45,360,o),
(30,276,qs)
);
},
{
closed = 1;
nodes = (
(483,213,o),
(416,120,o),
(323,71,o),
(272,71,qs),
(221,71,o),
(145,120,o),
(112,213,o),
(123,276,qs),
(134,338,o),
(200,430,o),
(293,478,o),
(344,478,qs),
(395,478,o),
(471,429,o),
(505,337,o),
(494,275,qs)
);
},
{
closed = 1;
nodes = (
(214,641,l),
(566,641,l),
(578,709,l),
(226,709,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
11 6 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 6 6 7 95 8 1 7 7 28 77 0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 97 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 6 6 7 95 8 1 7 7 28 77 0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 0 0 4 5 0 4 105 0 6 6 7 95 8 1 7 7 28 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 97 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
35 35 35 38 35 38 21 38 38 35 17 19 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = Abreve;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,0,l),
(562,0,l),
(433,693,l),
(328,693,l),
(-46,0,l),
(50,0,l),
(133,155,l),
(437,155,l)
);
},
{
closed = 1;
nodes = (
(505,895,l),
(498,857,o),
(449,818,o),
(403,818,qs),
(356,818,o),
(321,857,o),
(328,895,q),
(274,895,l),
(271,878,ls),
(261,820,o),
(324,747,o),
(391,747,qs),
(458,747,o),
(546,820,o),
(556,877,qs),
(559,895,l)
);
},
{
closed = 1;
nodes = (
(424,229,l),
(172,229,l),
(361,581,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
26 1 8 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 8 9 1 3 0 8 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 5 133 0 1 4 8 4 1 8 128 0 6 0 4 1 6 4 105 0 8 9 1 3 0 8 3 104 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 8 9 1 3 0 8 3 104 0 1 1 28 77 2 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 5 133 0 1 4 8 4 1 8 128 0 6 0 4 1 6 4 105 0 8 9 1 3 0 8 3 104 2 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 25 24 23 22 20 18 16 15 12 10 0 7 0 7 17 17 17 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = abreve;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(12,193,o),
(57,63,o),
(162,-9,o),
(235,-9,qs),
(306,-9,o),
(424,54,o),
(460,102,q),
(442,0,l),
(534,0,l),
(630,548,l),
(538,548,l),
(521,448,l),
(503,495,o),
(408,557,o),
(336,557,qs),
(263,557,o),
(132,487,o),
(41,360,o),
(26,276,qs)
);
},
{
closed = 1;
nodes = (
(479,213,o),
(413,120,o),
(319,71,o),
(268,71,qs),
(217,71,o),
(142,120,o),
(108,213,o),
(119,276,qs),
(130,338,o),
(196,430,o),
(289,478,o),
(340,478,qs),
(391,478,o),
(467,429,o),
(501,337,o),
(490,275,qs)
);
},
{
closed = 1;
nodes = (
(494,750,l),
(487,712,o),
(438,673,o),
(392,673,qs),
(345,673,o),
(310,712,o),
(317,750,q),
(263,750,l),
(260,733,ls),
(250,675,o),
(313,602,o),
(380,602,qs),
(447,602,o),
(535,675,o),
(545,732,qs),
(548,750,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
11 6 2 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 8 0 6 0 8 6 105 9 1 7 7 30 77 0 4 4 0 97 1 1 0 0 31 77 0 5 5 2 98 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 8 0 6 0 8 6 105 9 1 7 7 30 77 0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 98 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
9 1 7 8 7 133 0 8 0 6 0 8 6 105 0 4 4 0 97 0 0 0 31 77 0 1 1 2 95 0 2 2 29 77 0 5 5 3 98 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
9 1 7 8 7 133 0 8 0 6 0 8 6 105 0 0 0 4 5 0 4 105 0 1 1 2 95 0 2 2 29 77 0 5 5 3 98 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
50 49 34 19 38 38 38 35 17 19 34 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = Aogonek;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(364,693,l),
(-10,0,l),
(86,0,l),
(169,155,l),
(473,155,l),
(500,12,l),
(448,-14,o),
(395,-72,o),
(389,-106,qs),
(380,-157,o),
(444,-206,o),
(495,-206,qs),
(533,-206,o),
(573,-192,q),
(584,-132,l),
(545,-145,o),
(516,-145,qs),
(489,-145,o),
(462,-120,o),
(466,-97,qs),
(469,-77,o),
(503,-43,o),
(539,-27,qs),
(598,0,l),
(469,693,l)
);
},
{
closed = 1;
nodes = (
(460,229,l),
(208,229,l),
(397,581,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
27 1 5 4 18 1 3 2 9 1 0 3 10 1 1 0 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 5 0 2 3 5 2 104 0 0 0 1 0 1 101 0 4 4 28 77 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 5 4 133 0 5 0 2 3 5 2 104 0 0 0 1 0 1 101 0 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 5 0 2 3 5 2 104 0 0 0 1 0 1 101 0 4 4 28 77 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 4 5 4 133 0 5 0 2 3 5 2 104 0 0 0 1 0 1 101 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 17 22 35 38 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = aogonek;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,193,o),
(91,63,o),
(196,-9,o),
(269,-9,qs),
(340,-9,o),
(459,54,o),
(494,102,q),
(479,17,l),
(372,-35,o),
(359,-106,qs),
(350,-157,o),
(413,-206,o),
(464,-206,qs),
(501,-206,o),
(543,-192,q),
(554,-132,l),
(514,-145,o),
(486,-145,qs),
(459,-145,o),
(432,-120,o),
(436,-97,qs),
(443,-56,o),
(508,-27,qs),
(568,0,l),
(665,548,l),
(573,548,l),
(555,448,l),
(537,495,o),
(442,557,o),
(370,557,qs),
(297,557,o),
(166,487,o),
(76,360,o),
(61,276,qs)
);
},
{
closed = 1;
nodes = (
(514,213,o),
(447,120,o),
(354,71,o),
(303,71,qs),
(252,71,o),
(176,120,o),
(143,213,o),
(154,276,qs),
(165,338,o),
(231,430,o),
(323,478,o),
(374,478,qs),
(425,478,o),
(502,429,o),
(535,337,o),
(525,275,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
26 6 2 6 5 25 9 2 4 6 17 1 2 4 18 1 3 2 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 0 3 2 3 102 0 5 5 0 97 1 1 0 0 31 77 0 6 6 4 97 0 4 4 29 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 0 5 0 1 5 128 0 2 0 3 2 3 102 0 5 5 0 97 0 0 0 31 77 0 6 6 4 97 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 1 0 5 0 1 5 128 0 0 0 5 6 0 5 105 0 2 0 3 2 3 102 0 6 6 4 97 0 4 4 29 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
38 38 39 35 38 19 34 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = Cacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(5,247,o),
(68,85,o),
(211,-6,o),
(308,-6,qs),
(422,-6,o),
(611,103,o),
(668,203,q),
(559,203,l),
(519,140,o),
(398,73,o),
(322,73,qs),
(249,73,o),
(145,141,o),
(101,266,o),
(116,349,qs),
(131,433,o),
(219,558,o),
(347,626,o),
(420,626,qs),
(496,626,o),
(593,558,o),
(611,495,q),
(720,495,l),
(698,596,o),
(548,706,o),
(434,706,qs),
(337,706,o),
(162,614,o),
(41,451,o),
(23,349,qs)
);
},
{
closed = 1;
nodes = (
(342,808,l),
(330,740,l),
(563,854,l),
(577,933,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
33 32 31 30 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 28 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 3 5 97 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 38 34 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = cacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(8,189,o),
(54,61,o),
(162,-9,o),
(240,-9,qs),
(339,-9,o),
(489,92,o),
(526,176,q),
(428,176,l),
(404,124,o),
(314,68,o),
(254,68,qs),
(176,68,o),
(99,176,o),
(116,275,qs),
(134,373,o),
(248,480,o),
(326,480,qs),
(386,480,o),
(457,422,o),
(462,372,q),
(560,372,l),
(555,459,o),
(441,557,o),
(340,557,qs),
(262,557,o),
(129,487,o),
(38,360,o),
(23,275,qs)
);
},
{
closed = 1;
nodes = (
(237,657,l),
(225,589,l),
(458,703,l),
(472,782,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
31 30 29 28 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 31 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 3 5 97 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 36 34 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = Cdotaccent;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(10,247,o),
(74,85,o),
(217,-6,o),
(314,-6,qs),
(428,-6,o),
(617,103,o),
(673,203,q),
(564,203,l),
(524,140,o),
(404,73,o),
(328,73,qs),
(255,73,o),
(151,141,o),
(107,266,o),
(121,349,qs),
(136,433,o),
(224,558,o),
(352,626,o),
(425,626,qs),
(501,626,o),
(598,558,o),
(616,495,q),
(725,495,l),
(704,596,o),
(553,706,o),
(439,706,qs),
(342,706,o),
(167,614,o),
(46,451,o),
(28,349,qs)
);
},
{
closed = 1;
nodes = (
(478,767,o),
(513,797,o),
(517,819,qs),
(521,841,o),
(496,872,o),
(474,872,qs),
(452,872,o),
(416,841,o),
(412,819,qs),
(408,797,o),
(434,767,o),
(456,767,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 6 8 1 7 0 6 7 105 0 2 2 0 97 0 0 0 28 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 6 8 1 7 0 6 7 105 0 0 0 2 1 0 2 105 0 3 3 5 97 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
30 30 30 41 30 40 40 34 18 38 34 18 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = cdotaccent;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(13,189,o),
(59,61,o),
(168,-9,o),
(246,-9,qs),
(345,-9,o),
(494,92,o),
(531,176,q),
(433,176,l),
(409,124,o),
(319,68,o),
(259,68,qs),
(181,68,o),
(104,176,o),
(122,275,qs),
(139,373,o),
(254,480,o),
(332,480,qs),
(392,480,o),
(463,422,o),
(468,372,q),
(566,372,l),
(560,459,o),
(446,557,o),
(345,557,qs),
(267,557,o),
(134,487,o),
(44,360,o),
(29,275,qs)
);
},
{
closed = 1;
nodes = (
(372,617,o),
(407,647,o),
(411,669,qs),
(415,691,o),
(390,722,o),
(368,722,qs),
(346,722,o),
(310,691,o),
(306,669,qs),
(302,647,o),
(328,617,o),
(350,617,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 8 1 7 7 6 97 0 6 6 34 77 0 2 2 0 97 0 0 0 31 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 8 1 7 7 6 97 0 6 6 28 77 0 2 2 0 97 0 0 0 31 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 8 1 7 7 6 97 0 6 6 34 77 0 2 2 0 97 0 0 0 31 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 8 1 7 7 6 97 0 6 6 28 77 0 2 2 0 97 0 0 0 31 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 8 1 7 7 6 97 0 6 6 34 77 0 2 2 0 97 0 0 0 31 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 8 1 7 7 6 97 0 6 6 34 77 0 3 3 5 97 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
28 28 28 39 28 38 40 34 18 36 34 18 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = Ccaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(8,247,o),
(71,85,o),
(214,-6,o),
(311,-6,qs),
(425,-6,o),
(614,103,o),
(671,203,q),
(562,203,l),
(522,140,o),
(401,73,o),
(325,73,qs),
(252,73,o),
(148,141,o),
(104,266,o),
(119,349,qs),
(133,433,o),
(221,558,o),
(349,626,o),
(422,626,qs),
(498,626,o),
(595,558,o),
(613,495,q),
(722,495,l),
(701,596,o),
(550,706,o),
(436,706,qs),
(339,706,o),
(164,614,o),
(44,451,o),
(26,349,qs)
);
},
{
closed = 1;
nodes = (
(462,817,l),
(338,902,l),
(325,830,l),
(450,748,l),
(602,830,l),
(615,902,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
35 34 33 32 31 30 6 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 28 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 3 5 97 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 38 34 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 772;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = ccaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(11,189,o),
(56,61,o),
(165,-9,o),
(243,-9,qs),
(342,-9,o),
(492,92,o),
(529,176,q),
(431,176,l),
(406,124,o),
(317,68,o),
(257,68,qs),
(179,68,o),
(102,176,o),
(119,275,qs),
(136,373,o),
(251,480,o),
(329,480,qs),
(389,480,o),
(460,422,o),
(465,372,q),
(563,372,l),
(558,459,o),
(444,557,o),
(343,557,qs),
(265,557,o),
(131,487,o),
(41,360,o),
(26,275,qs)
);
},
{
closed = 1;
nodes = (
(356,666,l),
(232,751,l),
(219,679,l),
(344,597,l),
(496,679,l),
(509,751,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
33 32 31 30 29 28 6 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 0 0 0 31 77 0 3 3 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 0 0 2 1 0 2 105 0 3 3 5 97 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 36 34 18 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = Dcaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-2,0,l),
(215,0,ls),
(329,0,o),
(511,83,o),
(627,240,o),
(646,347,qs),
(665,454,o),
(604,612,o),
(452,697,o),
(338,697,qs),
(121,697,l)
);
},
{
closed = 1;
nodes = (
(199,623,l),
(325,623,ls),
(459,623,o),
(576,477,o),
(553,347,qs),
(530,218,o),
(363,75,o),
(228,75,qs),
(102,75,l)
);
},
{
closed = 1;
nodes = (
(416,811,l),
(292,896,l),
(279,824,l),
(404,742,l),
(556,824,l),
(569,896,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
25 24 23 22 21 20 6 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 3 3 0 95 4 1 0 0 28 77 5 1 2 2 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
4 1 0 0 3 2 0 3 103 5 1 2 2 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
12 11 1 0 18 16 11 19 12 19 9 7 0 10 1 10 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 707;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = dcaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(702,654,l),
(751,654,l),
(747,631,ls),
(742,604,o),
(715,578,o),
(689,578,q),
(682,535,l),
(733,535,o),
(794,590,o),
(804,648,qs),
(810,685,o),
(809,740,q),
(717,740,l)
);
},
{
closed = 1;
nodes = (
(13,193,o),
(58,63,o),
(164,-9,o),
(237,-9,qs),
(308,-9,o),
(425,54,o),
(461,103,q),
(443,0,l),
(535,0,l),
(665,740,l),
(573,740,l),
(522,450,l),
(501,498,o),
(402,557,o),
(338,557,qs),
(264,557,o),
(132,487,o),
(42,360,o),
(27,276,qs)
);
},
{
closed = 1;
nodes = (
(480,213,o),
(414,120,o),
(320,71,o),
(269,71,qs),
(218,71,o),
(143,120,o),
(109,213,o),
(120,276,qs),
(131,338,o),
(197,430,o),
(290,478,o),
(341,478,qs),
(392,478,o),
(468,429,o),
(502,337,o),
(491,275,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
24 19 2 9 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 2 2 3 95 5 10 2 3 3 30 77 0 0 0 1 97 4 1 1 1 37 77 0 8 8 1 97 4 1 1 1 37 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 2 2 3 95 5 10 2 3 3 30 77 0 0 0 1 97 0 1 1 37 77 0 8 8 4 97 0 4 4 31 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
5 10 2 3 0 2 1 3 2 103 0 0 0 1 97 0 1 1 37 77 0 8 8 4 97 0 4 4 31 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 2 1 3 2 87 0 0 0 1 97 0 1 1 37 77 0 8 8 4 97 0 4 4 31 77 5 10 2 3 3 6 95 0 6 6 29 77 0 9 9 7 97 0 7 7 29 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 2 1 3 2 87 0 4 0 8 9 4 8 105 0 0 0 1 97 0 1 1 37 77 5 10 2 3 3 6 95 0 6 6 29 77 0 9 9 7 97 0 7 7 29 7 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 44 42 36 34 28 26 23 22 21 20 17 15 0 12 0 12 19 17 20 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 754;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = Dcroat;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(103,389,l),
(16,389,l),
(1,305,l),
(88,305,l),
(35,0,l),
(252,0,ls),
(365,0,o),
(546,83,o),
(663,240,o),
(682,347,qs),
(701,454,o),
(639,612,o),
(487,697,o),
(374,697,qs),
(157,697,l)
);
},
{
closed = 1;
nodes = (
(179,305,l),
(371,305,l),
(386,389,l),
(194,389,l),
(235,623,l),
(361,623,ls),
(495,623,o),
(612,477,o),
(589,347,qs),
(566,217,o),
(398,70,o),
(264,70,qs),
(138,70,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
6 1 3 7 1 2 4 3 2 103 0 5 5 0 95 8 1 0 0 28 77 9 1 4 4 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
8 1 0 0 5 3 0 5 103 6 1 3 7 1 2 4 3 2 103 9 1 4 4 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
16 15 1 0 26 25 24 23 22 20 15 27 16 27 13 12 11 10 9 7 0 14 1 14 10 8 22 
CALL[ ]	/* CallFunction */";
};
width = 725;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = dcroat;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(13,193,o),
(58,63,o),
(164,-9,o),
(237,-9,qs),
(308,-9,o),
(425,54,o),
(461,103,q),
(443,0,l),
(535,0,l),
(641,605,l),
(702,605,l),
(712,659,l),
(651,659,l),
(665,740,l),
(573,740,l),
(559,659,l),
(447,659,l),
(437,605,l),
(549,605,l),
(522,450,l),
(501,498,o),
(402,557,o),
(338,557,qs),
(264,557,o),
(132,487,o),
(42,360,o),
(27,276,qs)
);
},
{
closed = 1;
nodes = (
(480,213,o),
(414,120,o),
(320,71,o),
(269,71,qs),
(218,71,o),
(143,120,o),
(109,213,o),
(120,276,qs),
(131,338,o),
(197,430,o),
(290,478,o),
(341,478,qs),
(392,478,o),
(468,429,o),
(502,337,o),
(491,275,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
19 6 2 9 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 30 77 0 8 8 0 97 0 0 0 31 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
4 1 2 5 1 1 0 2 1 103 0 3 3 6 97 7 1 6 6 29 77 0 8 8 0 97 0 0 0 31 77 0 9 9 6 97 7 1 6 6 29 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
4 1 2 5 1 1 0 2 1 103 0 8 8 0 97 0 0 0 31 77 0 3 3 6 95 0 6 6 29 77 0 9 9 7 97 0 7 7 29 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
4 1 2 5 1 1 0 2 1 103 0 0 0 8 9 0 8 105 0 3 3 6 95 0 6 6 29 77 0 9 9 7 97 0 7 7 29 7 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
39 37 38 35 17 17 17 17 17 19 34 10 8 31 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = Emacron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,698,l),
(125,698,l),
(2,0,l),
(377,0,l),
(390,75,l),
(106,75,l),
(148,315,l),
(402,315,l),
(415,390,l),
(161,390,l),
(203,623,l),
(487,623,l)
);
},
{
closed = 1;
nodes = (
(493,786,l),
(505,854,l),
(153,854,l),
(141,786,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 6 0 7 4 6 7 103 0 0 0 1 2 0 1 103 8 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 6 0 7 4 6 7 103 0 4 8 1 5 0 4 5 103 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 15 14 13 12 0 11 0 11 17 17 17 17 17 9 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = emacron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(381,480,o),
(453,441,o),
(486,366,o),
(477,314,q),
(131,314,l),
(151,392,o),
(264,480,o),
(333,480,qs)
);
},
{
closed = 1;
nodes = (
(412,123,o),
(323,68,o),
(264,68,qs),
(192,68,o),
(107,159,o),
(117,240,q),
(555,240,l),
(563,269,o),
(567,295,qs),
(581,370,o),
(537,489,o),
(428,557,o),
(350,557,qs),
(270,557,o),
(135,488,o),
(45,360,o),
(30,275,qs),
(15,190,o),
(62,61,o),
(173,-9,o),
(251,-9,qs),
(349,-9,o),
(498,90,o),
(534,169,q),
(436,169,l)
);
},
{
closed = 1;
nodes = (
(185,641,l),
(537,641,l),
(549,709,l),
(197,709,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 0 7 7 8 95 11 1 8 8 28 77 9 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
10 1 6 4 5 4 6 5 128 0 3 9 1 1 0 3 1 105 0 0 0 4 6 0 4 103 0 7 7 8 95 11 1 8 8 28 77 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
33 33 8 8 0 0 33 36 33 36 35 34 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = Ebreve;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(496,698,l),
(121,698,l),
(-2,0,l),
(373,0,l),
(386,75,l),
(102,75,l),
(145,315,l),
(399,315,l),
(412,390,l),
(158,390,l),
(199,623,l),
(483,623,l)
);
},
{
closed = 1;
nodes = (
(422,895,l),
(415,857,o),
(366,818,o),
(320,818,qs),
(273,818,o),
(238,857,o),
(245,895,q),
(191,895,l),
(188,878,ls),
(178,820,o),
(241,747,o),
(308,747,qs),
(375,747,o),
(463,820,o),
(473,877,qs),
(476,895,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
9 1 7 8 7 133 0 8 0 6 4 8 6 105 0 0 0 1 2 0 1 103 10 1 5 5 4 95 0 4 4 28 77 0 2 2 3 96 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
9 1 7 8 7 133 0 8 0 6 4 8 6 105 0 4 10 1 5 0 4 5 104 0 0 0 1 2 0 1 103 0 2 2 3 96 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 27 26 24 22 20 19 16 14 0 11 0 11 17 17 17 17 17 11 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = ebreve;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,480,o),
(449,441,o),
(482,366,o),
(473,314,q),
(127,314,l),
(148,392,o),
(260,480,o),
(329,480,qs)
);
},
{
closed = 1;
nodes = (
(408,123,o),
(320,68,o),
(261,68,qs),
(189,68,o),
(104,159,o),
(113,240,q),
(551,240,l),
(559,269,o),
(564,295,qs),
(577,370,o),
(533,489,o),
(425,557,o),
(347,557,qs),
(267,557,o),
(132,488,o),
(41,360,o),
(26,275,qs),
(11,190,o),
(58,61,o),
(169,-9,o),
(247,-9,qs),
(345,-9,o),
(495,90,o),
(530,169,q),
(432,169,l)
);
},
{
closed = 1;
nodes = (
(466,750,l),
(459,712,o),
(410,673,o),
(364,673,qs),
(317,673,o),
(282,712,o),
(289,750,q),
(235,750,l),
(232,733,ls),
(222,675,o),
(285,602,o),
(352,602,qs),
(419,602,o),
(507,675,o),
(517,732,qs),
(520,750,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
12 1 6 4 5 4 6 5 128 0 9 0 7 3 9 7 105 0 0 0 4 6 0 4 104 10 1 8 8 30 77 11 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
10 1 8 9 8 133 12 1 6 4 5 4 6 5 128 0 9 0 7 3 9 7 105 0 0 0 4 6 0 4 104 11 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
10 1 8 9 8 133 12 1 6 4 5 4 6 5 128 0 9 0 7 3 9 7 105 0 3 11 1 1 0 3 1 105 0 0 0 4 6 0 4 104 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
8 8 0 0 48 47 45 43 41 40 37 35 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 13 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = Edotaccent;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(499,698,l),
(124,698,l),
(1,0,l),
(376,0,l),
(389,75,l),
(105,75,l),
(147,315,l),
(401,315,l),
(414,390,l),
(160,390,l),
(202,623,l),
(486,623,l)
);
},
{
closed = 1;
nodes = (
(335,761,o),
(370,791,o),
(374,813,qs),
(378,835,o),
(353,866,o),
(331,866,qs),
(309,866,o),
(273,835,o),
(269,813,qs),
(265,791,o),
(291,761,o),
(313,761,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 6 9 1 7 4 6 7 105 0 0 0 1 2 0 1 103 8 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 6 9 1 7 4 6 7 105 0 4 8 1 5 0 4 5 103 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
12 12 0 0 12 23 12 22 18 16 0 11 0 11 17 17 17 17 17 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = edotaccent;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(380,480,o),
(452,441,o),
(485,366,o),
(476,314,q),
(130,314,l),
(150,392,o),
(263,480,o),
(332,480,qs)
);
},
{
closed = 1;
nodes = (
(411,123,o),
(322,68,o),
(263,68,qs),
(191,68,o),
(106,159,o),
(115,240,q),
(553,240,l),
(562,269,o),
(566,295,qs),
(579,370,o),
(535,489,o),
(427,557,o),
(349,557,qs),
(269,557,o),
(134,488,o),
(44,360,o),
(29,275,qs),
(14,190,o),
(61,61,o),
(172,-9,o),
(250,-9,qs),
(348,-9,o),
(497,90,o),
(533,169,q),
(435,169,l)
);
},
{
closed = 1;
nodes = (
(379,617,o),
(414,647,o),
(418,669,qs),
(422,691,o),
(397,722,o),
(375,722,qs),
(353,722,o),
(317,691,o),
(313,669,qs),
(309,647,o),
(335,617,o),
(357,617,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 11 1 8 8 7 97 0 7 7 34 77 9 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 11 1 8 8 7 97 0 7 7 28 77 9 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 11 1 8 8 7 97 0 7 7 34 77 9 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 11 1 8 8 7 97 0 7 7 28 77 9 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
10 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 11 1 8 8 7 97 0 7 7 34 77 9 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
10 1 6 4 5 4 6 5 128 0 3 9 1 1 0 3 1 105 0 0 0 4 6 0 4 103 11 1 8 8 7 97 0 7 7 34 77 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
33 33 8 8 0 0 33 44 33 43 39 37 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = Eogonek;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(532,698,l),
(157,698,l),
(34,0,l),
(288,0,l),
(211,-46,o),
(200,-106,qs),
(191,-157,o),
(253,-206,o),
(304,-206,qs),
(341,-206,o),
(384,-192,q),
(394,-132,l),
(355,-145,o),
(327,-145,qs),
(300,-145,o),
(272,-120,o),
(277,-97,qs),
(284,-56,o),
(349,-27,qs),
(409,0,l),
(422,75,l),
(138,75,l),
(180,315,l),
(434,315,l),
(447,390,l),
(193,390,l),
(234,623,l),
(518,623,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
15 1 3 5 16 1 4 3 2 76 7 1 5 1 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 0 0 1 2 0 1 103 0 3 0 4 3 4 101 8 1 7 7 6 95 0 6 6 28 77 0 2 2 5 95 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 6 8 1 7 0 6 7 103 0 0 0 1 2 0 1 103 0 3 0 4 3 4 101 0 2 2 5 95 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 27 0 27 17 20 35 38 17 17 17 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = eogonek;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(410,480,o),
(483,441,o),
(515,366,o),
(506,314,q),
(160,314,l),
(181,392,o),
(293,480,o),
(362,480,qs)
);
},
{
closed = 1;
nodes = (
(337,-131,o),
(309,-131,qs),
(282,-131,o),
(254,-106,o),
(258,-83,qs),
(265,-42,o),
(331,-13,qs),
(361,1,l),
(431,19,o),
(536,108,o),
(564,169,q),
(466,169,l),
(442,123,o),
(353,68,o),
(294,68,qs),
(222,68,o),
(137,159,o),
(146,240,q),
(584,240,l),
(592,269,o),
(597,295,qs),
(610,370,o),
(566,489,o),
(458,557,o),
(380,557,qs),
(300,557,o),
(165,488,o),
(74,360,o),
(59,275,qs),
(46,197,o),
(82,76,o),
(173,3,o),
(240,-6,q),
(190,-43,o),
(182,-92,qs),
(173,-143,o),
(235,-192,o),
(286,-192,qs),
(323,-192,o),
(365,-178,q),
(376,-118,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
48 15 2 7 5 8 1 2 7 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 6 4 5 4 6 5 128 0 5 7 4 5 7 126 0 0 0 4 6 0 4 103 0 7 0 2 7 2 102 8 1 1 1 3 97 0 3 3 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 6 4 5 4 6 5 128 0 5 7 4 5 7 126 0 3 8 1 1 0 3 1 105 0 0 0 4 6 0 4 103 0 7 2 2 7 89 0 7 7 2 98 0 2 7 2 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 47 45 37 36 34 32 30 29 24 22 11 9 0 7 0 6 18 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = Ecaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(496,698,l),
(121,698,l),
(-2,0,l),
(373,0,l),
(386,75,l),
(102,75,l),
(145,315,l),
(399,315,l),
(412,390,l),
(158,390,l),
(199,623,l),
(483,623,l)
);
},
{
closed = 1;
nodes = (
(307,742,l),
(459,824,l),
(472,896,l),
(319,811,l),
(195,896,l),
(182,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
17 16 15 14 13 12 6 4 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 0 1 2 0 1 103 6 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 4 6 1 5 0 4 5 103 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = ecaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(377,480,o),
(449,441,o),
(482,366,o),
(473,314,q),
(127,314,l),
(148,392,o),
(260,480,o),
(329,480,qs)
);
},
{
closed = 1;
nodes = (
(408,123,o),
(320,68,o),
(261,68,qs),
(189,68,o),
(104,159,o),
(113,240,q),
(551,240,l),
(559,269,o),
(564,295,qs),
(577,370,o),
(533,489,o),
(425,557,o),
(347,557,qs),
(267,557,o),
(132,488,o),
(41,360,o),
(26,275,qs),
(11,190,o),
(58,61,o),
(169,-9,o),
(247,-9,qs),
(345,-9,o),
(494,90,o),
(530,169,q),
(432,169,l)
);
},
{
closed = 1;
nodes = (
(363,666,l),
(239,751,l),
(226,679,l),
(351,597,l),
(503,679,l),
(516,751,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
38 37 36 35 34 33 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
8 1 6 4 5 4 6 5 128 0 0 0 4 6 0 4 103 7 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
8 1 6 4 5 4 6 5 128 0 3 7 1 1 0 3 1 105 0 0 0 4 6 0 4 103 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
8 8 0 0 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = Gbreve;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(342,705,o),
(166,614,o),
(44,451,o),
(26,349,qs),
(8,247,o),
(73,85,o),
(217,-6,o),
(314,-6,qs),
(406,-6,o),
(570,77,o),
(687,220,o),
(711,306,q),
(723,376,l),
(348,376,l),
(335,302,l),
(613,302,l),
(584,198,o),
(430,76,o),
(328,76,qs),
(255,76,o),
(150,143,o),
(105,267,o),
(119,349,qs),
(134,431,o),
(223,556,o),
(351,623,o),
(424,623,qs),
(497,623,o),
(596,556,o),
(614,495,q),
(723,495,l),
(702,595,o),
(550,705,o),
(439,705,qs)
);
},
{
closed = 1;
nodes = (
(560,895,l),
(554,857,o),
(505,818,o),
(459,818,qs),
(412,818,o),
(377,857,o),
(383,895,q),
(329,895,l),
(326,878,ls),
(316,820,o),
(379,747,o),
(446,747,qs),
(513,747,o),
(601,820,o),
(611,877,qs),
(614,895,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 3 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
10 1 8 9 8 133 0 0 1 4 1 0 4 128 0 9 0 7 6 9 7 105 0 4 0 3 2 4 3 104 0 1 1 6 97 11 1 6 6 28 77 0 2 2 5 98 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
10 1 8 9 8 133 0 0 1 4 1 0 4 128 0 9 0 7 6 9 7 105 11 1 6 0 1 0 6 1 105 0 4 0 3 2 4 3 104 0 2 2 5 98 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
0 0 49 48 46 44 42 41 38 36 0 33 0 32 36 17 18 38 34 18 12 8 28 
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = gbreve;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(35,193,o),
(80,63,o),
(186,-9,o),
(259,-9,qs),
(330,-9,o),
(447,55,o),
(483,103,q),
(463,-12,ls),
(448,-97,o),
(336,-191,o),
(261,-191,qs),
(195,-191,o),
(112,-130,o),
(106,-80,q),
(16,-80,l),
(13,-168,o),
(139,-270,o),
(247,-270,qs),
(326,-270,o),
(457,-204,o),
(541,-87,o),
(555,-12,qs),
(653,548,l),
(561,548,l),
(544,448,l),
(526,495,o),
(430,557,o),
(359,557,qs),
(286,557,o),
(155,487,o),
(64,360,o),
(49,276,qs)
);
},
{
closed = 1;
nodes = (
(502,213,o),
(436,120,o),
(342,71,o),
(291,71,qs),
(240,71,o),
(165,120,o),
(131,213,o),
(142,276,qs),
(153,338,o),
(220,430,o),
(312,478,o),
(363,478,qs),
(414,478,o),
(490,429,o),
(524,337,o),
(513,275,qs)
);
},
{
closed = 1;
nodes = (
(517,750,l),
(510,712,o),
(461,673,o),
(415,673,qs),
(368,673,o),
(333,712,o),
(340,750,q),
(286,750,l),
(283,733,ls),
(273,675,o),
(336,602,o),
(403,602,qs),
(470,602,o),
(558,675,o),
(568,732,qs),
(571,750,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
24 6 2 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 3 5 4 5 3 4 128 0 10 0 8 0 10 8 105 11 1 9 9 30 77 0 6 6 0 97 1 1 0 0 31 77 0 7 7 5 98 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
0 1 0 6 0 1 6 128 0 3 5 4 5 3 4 128 0 10 0 8 0 10 8 105 11 1 9 9 30 77 0 6 6 0 97 0 0 0 31 77 0 7 7 5 98 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
11 1 9 10 9 133 0 1 0 6 0 1 6 128 0 3 5 4 5 3 4 128 0 10 0 8 0 10 8 105 0 6 6 0 97 0 0 0 31 77 0 7 7 5 98 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
11 1 9 10 9 133 0 1 0 6 0 1 6 128 0 3 5 4 5 3 4 128 0 10 0 8 0 10 8 105 0 0 0 6 7 0 6 105 0 7 7 5 98 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
63 62 60 58 56 55 38 38 38 37 34 18 36 19 34 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = Gdotaccent;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(344,705,o),
(168,614,o),
(47,451,o),
(29,349,qs),
(11,247,o),
(75,85,o),
(219,-6,o),
(316,-6,qs),
(408,-6,o),
(573,77,o),
(690,220,o),
(713,306,q),
(725,376,l),
(350,376,l),
(337,302,l),
(615,302,l),
(586,198,o),
(433,76,o),
(331,76,qs),
(258,76,o),
(152,143,o),
(107,267,o),
(122,349,qs),
(136,431,o),
(225,556,o),
(354,623,o),
(427,623,qs),
(500,623,o),
(598,556,o),
(616,495,q),
(725,495,l),
(704,595,o),
(552,705,o),
(441,705,qs)
);
},
{
closed = 1;
nodes = (
(472,761,o),
(508,791,o),
(512,813,qs),
(515,835,o),
(491,866,o),
(469,866,qs),
(447,866,o),
(410,835,o),
(407,813,qs),
(403,791,o),
(428,761,o),
(450,761,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
21 1 3 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 0 1 4 1 0 4 128 0 7 10 1 8 6 7 8 105 0 4 0 3 2 4 3 103 0 1 1 6 97 9 1 6 6 28 77 0 2 2 5 97 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 45 values pushed */
0 0 1 4 1 0 4 128 0 7 10 1 8 6 7 8 105 9 1 6 0 1 0 6 1 105 0 4 0 3 2 4 3 103 0 2 2 5 97 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
34 34 0 0 34 45 34 44 40 38 0 33 0 32 36 17 18 38 34 18 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = gdotaccent;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(37,193,o),
(82,63,o),
(189,-9,o),
(262,-9,qs),
(333,-9,o),
(450,55,o),
(485,103,q),
(465,-12,ls),
(450,-97,o),
(338,-191,o),
(263,-191,qs),
(197,-191,o),
(114,-130,o),
(108,-80,q),
(18,-80,l),
(16,-168,o),
(142,-270,o),
(250,-270,qs),
(329,-270,o),
(459,-204,o),
(544,-87,o),
(557,-12,qs),
(656,548,l),
(564,548,l),
(546,448,l),
(528,495,o),
(432,557,o),
(361,557,qs),
(288,557,o),
(157,487,o),
(67,360,o),
(52,276,qs)
);
},
{
closed = 1;
nodes = (
(505,213,o),
(438,120,o),
(345,71,o),
(294,71,qs),
(243,71,o),
(167,120,o),
(134,213,o),
(145,276,qs),
(156,338,o),
(222,430,o),
(314,478,o),
(365,478,qs),
(416,478,o),
(493,429,o),
(527,337,o),
(516,275,qs)
);
},
{
closed = 1;
nodes = (
(430,617,o),
(465,647,o),
(469,669,qs),
(473,691,o),
(448,722,o),
(426,722,qs),
(404,722,o),
(368,691,o),
(364,669,qs),
(360,647,o),
(386,617,o),
(408,617,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
24 6 2 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 3 5 4 5 3 4 128 10 1 9 9 8 97 0 8 8 34 77 0 6 6 0 97 1 1 0 0 31 77 0 7 7 5 97 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 3 5 4 5 3 4 128 10 1 9 9 8 97 0 8 8 28 77 0 6 6 0 97 1 1 0 0 31 77 0 7 7 5 97 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 3 5 4 5 3 4 128 10 1 9 9 8 97 0 8 8 34 77 0 6 6 0 97 1 1 0 0 31 77 0 7 7 5 97 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 3 5 4 5 3 4 128 10 1 9 9 8 97 0 8 8 28 77 0 6 6 0 97 1 1 0 0 31 77 0 7 7 5 97 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 3 5 4 5 3 4 128 10 1 9 9 8 97 0 8 8 34 77 0 6 6 0 97 1 1 0 0 31 77 0 7 7 5 97 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
0 1 0 6 0 1 6 128 0 3 5 4 5 3 4 128 10 1 9 9 8 97 0 8 8 34 77 0 6 6 0 97 0 0 0 31 77 0 7 7 5 97 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 56 values pushed */
0 1 0 6 0 1 6 128 0 3 5 4 5 3 4 128 0 0 0 6 7 0 6 105 10 1 9 9 8 97 0 8 8 34 77 0 7 7 5 97 0 5 5 29 77 0 4 4 2 97 0 2 2 33 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
48 48 48 59 48 58 40 38 38 37 34 18 36 19 34 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = uni0122;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(280,-131,l),
(328,-131,l),
(324,-149,ls),
(314,-205,o),
(266,-205,q),
(259,-247,l),
(360,-247,o),
(380,-132,qs),
(387,-96,o),
(384,-49,q),
(294,-49,l)
);
},
{
closed = 1;
nodes = (
(380,705,o),
(204,614,o),
(82,451,o),
(64,349,qs),
(46,247,o),
(111,85,o),
(255,-6,o),
(352,-6,qs),
(444,-6,o),
(608,77,o),
(725,220,o),
(749,306,q),
(761,376,l),
(386,376,l),
(373,302,l),
(651,302,l),
(622,198,o),
(468,76,o),
(366,76,qs),
(293,76,o),
(188,143,o),
(143,267,o),
(157,349,qs),
(172,431,o),
(261,556,o),
(389,623,o),
(462,623,qs),
(535,623,o),
(634,556,o),
(652,495,q),
(761,495,l),
(740,595,o),
(588,705,o),
(477,705,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
32 1 7 8 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 4 5 8 5 4 8 128 0 8 0 7 6 8 7 103 11 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 5 5 10 97 12 1 10 10 28 77 0 6 6 9 97 0 9 9 29 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 4 5 8 5 4 8 128 12 1 10 0 5 4 10 5 105 0 8 0 7 6 8 7 103 11 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 9 97 0 9 9 29 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
11 11 0 0 11 44 11 43 37 35 31 30 29 28 26 24 18 16 14 13 0 10 0 10 18 17 19 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 778;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = uni0123;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(455,682,l),
(407,682,l),
(411,705,ls),
(421,759,o),
(468,759,q),
(475,801,l),
(374,801,o),
(354,688,qs),
(347,644,o),
(349,596,q),
(440,596,l)
);
},
{
closed = 1;
nodes = (
(30,193,o),
(75,63,o),
(182,-9,o),
(255,-9,qs),
(326,-9,o),
(443,55,o),
(478,103,q),
(458,-12,ls),
(443,-97,o),
(332,-191,o),
(257,-191,qs),
(191,-191,o),
(107,-130,o),
(101,-80,q),
(11,-80,l),
(9,-168,o),
(135,-270,o),
(243,-270,qs),
(322,-270,o),
(452,-204,o),
(537,-87,o),
(550,-12,qs),
(649,548,l),
(557,548,l),
(539,448,l),
(521,495,o),
(425,557,o),
(354,557,qs),
(281,557,o),
(150,487,o),
(60,360,o),
(45,276,qs)
);
},
{
closed = 1;
nodes = (
(498,213,o),
(431,120,o),
(338,71,o),
(287,71,qs),
(236,71,o),
(160,120,o),
(127,213,o),
(138,276,qs),
(149,338,o),
(215,430,o),
(307,478,o),
(358,478,qs),
(409,478,o),
(486,429,o),
(520,337,o),
(509,275,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
35 17 2 11 10 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 7 9 8 9 7 8 128 0 2 12 1 3 4 2 3 103 0 1 1 0 97 0 0 0 36 77 0 10 10 4 97 5 1 4 4 31 77 0 11 11 9 97 0 9 9 29 77 0 8 8 6 97 0 6 6 33 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 66 values pushed */
0 5 4 10 4 5 10 128 0 7 9 8 9 7 8 128 0 2 12 1 3 4 2 3 103 0 1 1 0 97 0 0 0 36 77 0 10 10 4 97 0 4 4 31 77 0 11 11 9 97 0 9 9 29 77 0 8 8 6 97 0 6 6 33 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 64 values pushed */
0 5 4 10 4 5 10 128 0 7 9 8 9 7 8 128 0 0 0 1 2 0 1 105 0 2 12 1 3 4 2 3 103 0 10 10 4 97 0 4 4 31 77 0 11 11 9 97 0 9 9 29 77 0 8 8 6 97 0 6 6 33 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 62 values pushed */
0 5 4 10 4 5 10 128 0 7 9 8 9 7 8 128 0 0 0 1 2 0 1 105 0 2 12 1 3 4 2 3 103 0 4 0 10 11 4 10 105 0 11 11 9 97 0 9 9 29 77 0 8 8 6 97 0 6 6 33 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
0 0 55 53 47 45 39 37 32 30 28 27 25 23 19 18 15 13 0 10 0 10 18 17 19 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 676;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = Itilde;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1,0,l),
(92,0,l),
(215,697,l),
(124,697,l)
);
},
{
closed = 1;
nodes = (
(93,774,o),
(120,796,o),
(137,796,qs),
(150,796,o),
(167,786,o),
(181,776,qs),
(197,763,o),
(224,750,o),
(243,750,qs),
(283,750,o),
(346,804,o),
(361,854,q),
(309,854,l),
(302,833,o),
(274,811,o),
(257,811,qs),
(244,811,o),
(224,822,o),
(212,832,qs),
(195,844,o),
(171,857,o),
(152,857,qs),
(112,857,o),
(49,803,o),
(33,752,q),
(86,752,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
4 1 2 0 6 5 2 6 105 0 3 9 7 2 5 1 3 5 105 8 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
4 1 2 0 6 5 2 6 105 0 3 9 7 2 5 1 3 5 105 8 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
4 4 0 0 4 29 4 29 27 25 21 19 17 16 14 12 8 6 0 3 0 3 17 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = itilde;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(14,0,l),
(105,0,l),
(202,548,l),
(111,548,l)
);
},
{
closed = 1;
nodes = (
(80,629,o),
(107,651,o),
(124,651,qs),
(137,651,o),
(154,641,o),
(168,631,qs),
(184,618,o),
(211,605,o),
(230,605,qs),
(270,605,o),
(333,659,o),
(348,709,q),
(296,709,l),
(290,688,o),
(262,666,o),
(245,666,qs),
(232,666,o),
(212,677,o),
(199,687,qs),
(182,699,o),
(158,712,o),
(139,712,qs),
(99,712,o),
(36,658,o),
(20,607,q),
(73,607,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 3 9 7 2 5 1 3 5 105 0 6 6 2 97 4 1 2 2 28 77 8 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 3 9 7 2 5 1 3 5 105 0 6 6 2 97 4 1 2 2 28 77 8 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
4 4 0 0 4 29 4 29 27 25 21 19 17 16 14 12 8 6 0 3 0 3 17 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = Imacron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(2,0,l),
(93,0,l),
(216,697,l),
(125,697,l)
);
},
{
closed = 1;
nodes = (
(361,786,l),
(373,854,l),
(21,854,l),
(9,786,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 2 0 3 1 2 3 103 4 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 2 0 3 1 2 3 103 4 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = imacron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(14,0,l),
(105,0,l),
(202,548,l),
(111,548,l)
);
},
{
closed = 1;
nodes = (
(349,641,l),
(361,709,l),
(9,709,l),
(-3,641,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 2 95 0 2 2 28 77 4 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
0 3 3 2 95 0 2 2 28 77 4 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = uni012C;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-2,0,l),
(89,0,l),
(212,697,l),
(121,697,l)
);
},
{
closed = 1;
nodes = (
(290,895,l),
(283,857,o),
(234,818,o),
(188,818,qs),
(141,818,o),
(106,857,o),
(113,895,q),
(59,895,l),
(56,878,ls),
(46,820,o),
(109,747,o),
(176,747,qs),
(243,747,o),
(331,820,o),
(341,877,qs),
(344,895,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
5 1 3 4 3 133 0 4 0 2 1 4 2 105 6 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
5 1 3 4 3 133 0 4 0 2 1 4 2 105 6 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 19 18 16 14 12 11 8 6 0 3 0 3 17 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = uni012C;
unicode = 300;
},
{
glyphname = uni012D;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(11,0,l),
(102,0,l),
(199,548,l),
(108,548,l)
);
},
{
closed = 1;
nodes = (
(277,750,l),
(270,712,o),
(222,673,o),
(176,673,qs),
(129,673,o),
(93,712,o),
(100,750,q),
(46,750,l),
(43,733,ls),
(33,675,o),
(96,602,o),
(163,602,qs),
(230,602,o),
(318,675,o),
(328,732,qs),
(331,750,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 0 2 1 4 2 105 5 1 3 3 30 77 6 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 4 0 2 1 4 2 105 5 1 3 3 30 77 6 1 1 1 0 95 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
5 1 3 4 3 133 0 4 0 2 1 4 2 105 6 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 19 18 16 14 12 11 8 6 0 3 0 3 17 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = uni012D;
unicode = 301;
},
{
glyphname = Iogonek;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(71,-144,o),
(43,-144,qs),
(16,-144,o),
(-11,-119,o),
(-7,-96,qs),
(0,-55,o),
(65,-26,qs),
(123,0,l),
(125,0,l),
(248,697,l),
(157,697,l),
(37,18,l),
(-71,-33,o),
(-84,-105,qs),
(-93,-156,o),
(-31,-205,o),
(20,-205,qs),
(57,-205,o),
(100,-191,q),
(111,-131,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
19 10 7 3 2 1 0 1 0 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 2 0 0 2 0 102 0 1 1 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 2 1 133 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
39 21 33 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = iogonek;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(66,-144,o),
(38,-144,qs),
(11,-144,o),
(-17,-119,o),
(-13,-96,qs),
(-6,-55,o),
(59,-26,qs),
(117,0,l),
(119,0,l),
(216,548,l),
(125,548,l),
(31,18,l),
(-77,-33,o),
(-90,-105,qs),
(-99,-156,o),
(-36,-205,o),
(15,-205,qs),
(52,-205,o),
(94,-191,q),
(105,-131,l)
);
},
{
closed = 1;
nodes = (
(212,637,o),
(254,673,o),
(258,699,qs),
(263,725,o),
(234,761,o),
(209,761,qs),
(183,761,o),
(141,725,o),
(136,699,qs),
(132,673,o),
(161,637,o),
(187,637,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
19 10 7 3 2 1 0 1 0 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 0 0 2 0 102 5 1 4 4 3 97 0 3 3 30 77 0 1 1 31 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 4 2 4 1 2 128 0 2 0 0 2 0 102 5 1 4 4 3 97 0 3 3 30 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 4 2 4 1 2 128 0 3 5 1 4 1 3 4 105 0 2 0 0 2 89 0 2 2 0 98 0 0 2 0 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
20 20 20 31 20 30 38 39 21 33 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = Idotaccent;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1,0,l),
(92,0,l),
(215,697,l),
(124,697,l)
);
},
{
closed = 1;
nodes = (
(203,761,o),
(238,791,o),
(242,813,qs),
(246,835,o),
(221,866,o),
(199,866,qs),
(177,866,o),
(141,835,o),
(137,813,qs),
(133,791,o),
(159,761,o),
(181,761,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 5 1 3 1 2 3 105 4 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 2 5 1 3 1 2 3 105 4 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 0 0 4 15 4 14 10 8 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = dotlessi;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(29,0,l),
(120,0,l),
(216,548,l),
(125,548,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 31 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = uni0136;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(188,-131,l),
(236,-131,l),
(233,-149,ls),
(223,-205,o),
(176,-205,q),
(169,-247,l),
(269,-247,o),
(289,-132,qs),
(296,-90,o),
(293,-49,q),
(203,-49,l)
);
},
{
closed = 1;
nodes = (
(415,0,l),
(534,0,l),
(277,348,l),
(654,697,l),
(539,697,l),
(194,374,l),
(251,697,l),
(160,697,l),
(37,0,l),
(128,0,l),
(184,318,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
21 18 15 3 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 6 1 5 5 28 77 7 1 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 6 1 5 5 4 95 7 1 4 4 29 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 20 19 17 16 14 13 12 11 0 10 0 10 18 17 19 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = uni0137;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(145,-131,l),
(192,-131,l),
(189,-149,ls),
(179,-205,o),
(132,-205,q),
(125,-247,l),
(225,-247,o),
(245,-132,qs),
(252,-92,o),
(250,-49,q),
(160,-49,l)
);
},
{
closed = 1;
nodes = (
(34,0,l),
(125,0,l),
(167,242,l),
(340,0,l),
(464,0,l),
(253,275,l),
(559,548,l),
(432,548,l),
(178,305,l),
(255,740,l),
(164,740,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
18 15 12 3 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 9 1 7 7 30 77 0 4 4 31 77 6 1 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 9 1 7 7 5 95 6 1 5 5 29 77 0 4 4 5 95 6 1 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
11 11 0 0 11 21 11 21 20 19 17 16 14 13 0 10 0 10 18 17 19 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 515;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = Lacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,697,l),
(-5,0,l),
(330,0,l),
(343,74,l),
(99,74,l),
(209,697,l)
);
},
{
closed = 1;
nodes = (
(382,848,l),
(396,927,l),
(161,802,l),
(149,734,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
9 8 7 6 4 2 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 2 2 28 77 0 0 0 1 96 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 2 0 2 133 0 0 0 1 96 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
17 17 16 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = lacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-9,0,l),
(82,0,l),
(213,740,l),
(122,740,l)
);
},
{
closed = 1;
nodes = (
(292,895,l),
(306,974,l),
(71,849,l),
(59,781,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
7 6 5 4 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 30 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = uni013B;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(133,-131,l),
(181,-131,l),
(178,-149,ls),
(168,-205,o),
(121,-205,q),
(114,-247,l),
(215,-247,o),
(235,-132,qs),
(242,-90,o),
(239,-49,q),
(148,-49,l)
);
},
{
closed = 1;
nodes = (
(160,697,l),
(37,0,l),
(372,0,l),
(385,74,l),
(141,74,l),
(251,697,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
7 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 28 77 0 4 4 5 96 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 6 4 6 133 7 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 4 4 5 96 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 16 15 14 13 12 11 0 10 0 10 18 17 19 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = uni013C;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(8,-131,l),
(56,-131,l),
(53,-149,ls),
(43,-205,o),
(-5,-205,q),
(-12,-247,l),
(90,-247,o),
(110,-132,qs),
(117,-96,o),
(114,-49,q),
(23,-49,l)
);
},
{
closed = 1;
nodes = (
(34,0,l),
(125,0,l),
(255,740,l),
(164,740,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 5 5 30 77 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
6 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 5 5 4 95 0 4 4 29 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
11 11 0 0 11 14 11 14 13 12 0 10 0 10 18 17 19 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = Lcaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(327,612,l),
(376,612,l),
(372,589,ls),
(367,561,o),
(341,535,o),
(316,535,q),
(308,492,l),
(358,492,o),
(419,548,o),
(429,606,qs),
(437,649,o),
(434,697,q),
(342,697,l)
);
},
{
closed = 1;
nodes = (
(138,697,l),
(16,0,l),
(351,0,l),
(364,74,l),
(120,74,l),
(229,697,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 1 0 0 4 1 0 105 0 2 2 3 95 6 7 2 3 3 28 77 0 4 4 5 96 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
6 7 2 3 0 2 1 3 2 103 0 1 0 0 4 1 0 105 0 4 4 5 96 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 18 17 16 15 14 13 0 12 0 12 19 17 20 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 446;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = lcaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(291,654,l),
(341,654,l),
(337,631,ls),
(332,604,o),
(305,578,o),
(280,578,q),
(272,535,l),
(373,535,o),
(393,648,qs),
(401,692,o),
(398,740,q),
(306,740,l)
);
},
{
closed = 1;
nodes = (
(12,0,l),
(103,0,l),
(233,740,l),
(142,740,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 2 2 3 95 7 5 6 3 3 3 30 77 0 0 0 1 97 0 1 1 37 77 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 2 1 3 2 87 0 0 0 1 97 0 1 1 37 77 7 5 6 3 3 3 4 95 0 4 4 29 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
12 12 0 0 12 15 12 15 14 13 0 11 0 11 19 17 19 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 369;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = Ldot;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,697,l),
(1,0,l),
(336,0,l),
(349,74,l),
(105,74,l),
(215,697,l)
);
},
{
closed = 1;
nodes = (
(297,761,o),
(332,791,o),
(336,813,qs),
(340,835,o),
(315,866,o),
(293,866,qs),
(271,866,o),
(235,835,o),
(231,813,qs),
(227,791,o),
(253,761,o),
(275,761,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 3 5 1 4 2 3 4 105 0 2 2 28 77 0 0 0 1 96 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 2 4 0 4 2 0 128 0 3 5 1 4 2 3 4 105 0 0 0 1 96 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
6 6 6 17 6 16 37 17 17 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 432;
}
);
note = Ldot;
unicode = 319;
},
{
glyphname = ldot;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(204,775,o),
(240,805,o),
(244,827,qs),
(248,849,o),
(223,880,o),
(201,880,qs),
(179,880,o),
(142,849,o),
(138,827,qs),
(134,805,o),
(160,775,o),
(182,775,qs)
);
},
{
closed = 1;
nodes = (
(-1,0,l),
(90,0,l),
(221,740,l),
(130,740,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 4 1 1 3 0 1 105 5 1 3 3 30 77 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 0 4 1 1 3 0 1 105 5 1 3 3 2 95 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
12 12 0 0 12 15 12 15 14 13 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = ldot;
unicode = 320;
},
{
glyphname = Lslash;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,697,l),
(96,378,l),
(9,348,l),
(-3,279,l),
(84,308,l),
(30,0,l),
(364,0,l),
(376,70,l),
(133,70,l),
(181,341,l),
(297,380,l),
(309,450,l),
(193,411,l),
(243,697,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
11 10 9 8 3 2 1 0 8 0 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
0 2 2 28 77 0 0 0 1 96 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 2 0 2 133 0 0 0 1 96 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 6 values pushed */
21 17 20 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 437;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = lslash;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(15,0,l),
(106,0,l),
(171,372,l),
(247,400,l),
(260,471,l),
(184,444,l),
(236,740,l),
(145,740,l),
(87,408,l),
(11,381,l),
(-2,309,l),
(74,337,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
11 8 7 6 5 2 1 0 8 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 30 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
21 19 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 251;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = Nacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(575,698,l),
(478,144,l),
(209,698,l),
(118,698,l),
(-5,0,l),
(86,0,l),
(184,555,l),
(452,0,l),
(543,0,l),
(666,698,l)
);
},
{
closed = 1;
nodes = (
(517,848,l),
(531,927,l),
(296,802,l),
(284,734,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
7 2 2 0 2 1 76 13 12 11 10 4 2 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 1 2 2 28 77 1 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
3 1 2 2 0 95 1 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
18 17 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = nacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,657,l),
(241,589,l),
(474,703,l),
(488,782,l)
);
},
{
closed = 1;
nodes = (
(499,0,l),
(556,323,ls),
(576,437,o),
(473,558,o),
(373,558,qs),
(317,558,o),
(216,512,o),
(182,470,q),
(196,548,l),
(105,548,l),
(8,0,l),
(99,0,l),
(152,303,ls),
(168,389,o),
(269,479,o),
(341,479,qs),
(412,479,o),
(478,392,o),
(464,310,qs),
(409,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
15 1 1 0 1 76 3 2 1 0 4 2 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
15 1 1 0 1 76 3 2 1 0 4 3 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 2 97 3 1 2 2 31 77 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 31 77 0 0 0 3 97 0 3 3 31 77 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 3 97 0 3 3 31 77 0 2 2 1 95 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 3 0 0 1 3 0 105 0 2 2 1 95 4 1 1 1 29 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
19 35 17 19 38 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = uni0145;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(241,-131,l),
(288,-131,l),
(285,-149,ls),
(275,-205,o),
(229,-205,q),
(222,-247,l),
(322,-247,o),
(342,-132,qs),
(349,-90,o),
(346,-49,q),
(256,-49,l)
);
},
{
closed = 1;
nodes = (
(617,698,l),
(520,144,l),
(251,698,l),
(160,698,l),
(37,0,l),
(128,0,l),
(226,555,l),
(494,0,l),
(585,0,l),
(708,698,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
18 13 2 4 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 6 6 28 77 5 1 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 6 6 4 95 5 1 4 4 29 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 20 19 17 16 15 14 12 11 0 10 0 10 18 17 19 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = uni0146;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(223,-131,l),
(271,-131,l),
(268,-149,ls),
(258,-205,o),
(211,-205,q),
(204,-247,l),
(305,-247,o),
(325,-132,qs),
(332,-94,o),
(328,-49,q),
(238,-49,l)
);
},
{
closed = 1;
nodes = (
(541,0,l),
(598,323,ls),
(618,437,o),
(515,558,o),
(415,558,qs),
(359,558,o),
(258,512,o),
(223,470,q),
(237,548,l),
(146,548,l),
(50,0,l),
(141,0,l),
(194,303,ls),
(209,389,o),
(310,479,o),
(382,479,qs),
(453,479,o),
(520,392,o),
(505,310,qs),
(451,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
22 1 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
9 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 4 4 6 97 7 1 6 6 31 77 8 1 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
9 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 31 77 0 4 4 7 97 0 7 7 31 77 8 1 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
9 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 4 4 7 97 0 7 7 31 77 0 6 6 5 95 8 1 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 7 0 4 5 7 4 105 9 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 5 95 8 1 5 5 29 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
0 0 30 29 26 24 21 20 19 18 15 13 0 10 0 10 18 17 19 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = Ncaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(578,698,l),
(480,144,l),
(212,698,l),
(121,698,l),
(-2,0,l),
(89,0,l),
(187,555,l),
(455,0,l),
(546,0,l),
(669,698,l)
);
},
{
closed = 1;
nodes = (
(404,742,l),
(556,824,l),
(569,896,l),
(416,811,l),
(292,896,l),
(279,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
7 2 2 0 2 1 76 15 14 13 12 11 10 6 2 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 1 2 2 28 77 1 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
3 1 2 2 0 95 1 1 0 0 29 0 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
18 17 18 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 703;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = ncaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(502,0,l),
(559,323,ls),
(579,437,o),
(476,558,o),
(376,558,qs),
(320,558,o),
(219,512,o),
(185,470,q),
(198,548,l),
(107,548,l),
(11,0,l),
(102,0,l),
(155,303,ls),
(170,389,o),
(271,479,o),
(343,479,qs),
(414,479,o),
(481,392,o),
(466,310,qs),
(412,0,l)
);
},
{
closed = 1;
nodes = (
(373,666,l),
(249,751,l),
(237,679,l),
(361,597,l),
(514,679,l),
(526,751,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
11 1 1 0 1 76 25 24 23 22 21 20 6 2 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
11 1 1 0 1 76 25 24 23 22 21 20 6 3 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 2 97 3 1 2 2 31 77 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 31 77 0 0 0 3 97 0 3 3 31 77 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 3 97 0 3 3 31 77 0 2 2 1 95 4 1 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 3 0 0 1 3 0 105 0 2 2 1 95 4 1 1 1 29 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
19 35 17 19 34 5 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = Omacron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(748,452,o),
(685,614,o),
(541,705,o),
(443,705,qs),
(346,705,o),
(170,614,o),
(48,451,o),
(30,349,qs),
(12,247,o),
(76,84,o),
(220,-7,o),
(317,-7,qs),
(415,-7,o),
(591,84,o),
(712,246,o),
(730,349,qs)
);
},
{
closed = 1;
nodes = (
(138,433,o),
(227,558,o),
(355,626,o),
(429,626,qs),
(503,626,o),
(607,558,o),
(652,433,o),
(637,349,qs),
(622,266,o),
(533,140,o),
(404,72,o),
(331,72,qs),
(258,72,o),
(153,140,o),
(108,266,o),
(123,349,qs)
);
},
{
closed = 1;
nodes = (
(283,786,l),
(635,786,l),
(647,854,l),
(295,854,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
6 1 5 0 4 1 5 4 103 0 3 3 1 97 0 1 1 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
6 1 5 0 4 1 5 4 103 0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
32 32 32 35 32 35 21 38 38 38 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = omacron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(598,360,o),
(548,488,o),
(434,557,o),
(356,557,qs),
(278,557,o),
(140,488,o),
(44,359,o),
(29,275,qs),
(14,190,o),
(62,61,o),
(175,-9,o),
(252,-9,qs),
(330,-9,o),
(470,61,o),
(568,190,o),
(583,275,qs)
);
},
{
closed = 1;
nodes = (
(134,341,o),
(200,433,o),
(291,478,o),
(341,478,qs),
(390,478,o),
(466,433,o),
(502,341,o),
(490,275,qs),
(479,209,o),
(409,117,o),
(315,71,o),
(266,71,qs),
(217,71,o),
(143,116,o),
(110,208,o),
(122,275,qs)
);
},
{
closed = 1;
nodes = (
(196,648,l),
(548,648,l),
(560,716,l),
(208,716,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 4 4 5 95 6 1 5 5 28 77 0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 1 0 3 2 1 3 105 0 4 4 5 95 6 1 5 5 28 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
32 32 32 35 32 35 21 38 38 38 34 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = uni014E;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(744,452,o),
(681,614,o),
(537,705,o),
(439,705,qs),
(342,705,o),
(166,614,o),
(44,451,o),
(26,349,qs),
(8,247,o),
(73,84,o),
(216,-7,o),
(313,-7,qs),
(411,-7,o),
(588,84,o),
(708,246,o),
(726,349,qs)
);
},
{
closed = 1;
nodes = (
(134,433,o),
(223,558,o),
(351,626,o),
(425,626,qs),
(499,626,o),
(603,558,o),
(648,433,o),
(633,349,qs),
(619,266,o),
(529,140,o),
(400,72,o),
(327,72,qs),
(254,72,o),
(149,140,o),
(105,266,o),
(119,349,qs)
);
},
{
closed = 1;
nodes = (
(564,895,l),
(557,857,o),
(508,818,o),
(462,818,qs),
(415,818,o),
(380,857,o),
(387,895,q),
(333,895,l),
(330,878,ls),
(319,820,o),
(382,747,o),
(449,747,qs),
(516,747,o),
(604,820,o),
(614,877,qs),
(618,895,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 3 3 1 97 0 1 1 28 77 0 2 2 0 98 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 1 0 3 2 1 3 105 0 2 2 0 98 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
18 34 19 38 38 38 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = uni014E;
unicode = 334;
},
{
glyphname = uni014F;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(595,360,o),
(544,488,o),
(430,557,o),
(352,557,qs),
(274,557,o),
(136,488,o),
(40,359,o),
(26,275,qs),
(11,190,o),
(59,61,o),
(171,-9,o),
(248,-9,qs),
(326,-9,o),
(467,61,o),
(565,190,o),
(580,275,qs)
);
},
{
closed = 1;
nodes = (
(130,341,o),
(196,433,o),
(287,478,o),
(337,478,qs),
(386,478,o),
(462,433,o),
(498,341,o),
(487,275,qs),
(475,209,o),
(406,117,o),
(312,71,o),
(263,71,qs),
(214,71,o),
(140,116,o),
(107,208,o),
(119,275,qs)
);
},
{
closed = 1;
nodes = (
(477,757,l),
(470,719,o),
(421,680,o),
(375,680,qs),
(328,680,o),
(293,719,o),
(300,757,q),
(246,757,l),
(243,740,ls),
(232,682,o),
(295,609,o),
(362,609,qs),
(429,609,o),
(517,682,o),
(527,739,qs),
(531,757,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 6 0 4 1 6 4 105 7 1 5 5 30 77 0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 0 1 0 3 2 1 3 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
18 34 19 38 38 38 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = uni014F;
unicode = 335;
},
{
glyphname = Ohungarumlaut;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(744,452,o),
(681,614,o),
(537,705,o),
(439,705,qs),
(342,705,o),
(166,614,o),
(44,451,o),
(26,349,qs),
(8,247,o),
(72,84,o),
(216,-7,o),
(313,-7,qs),
(411,-7,o),
(587,84,o),
(708,246,o),
(726,349,qs)
);
},
{
closed = 1;
nodes = (
(134,433,o),
(223,558,o),
(351,626,o),
(425,626,qs),
(499,626,o),
(603,558,o),
(648,433,o),
(633,349,qs),
(618,266,o),
(529,140,o),
(400,72,o),
(327,72,qs),
(254,72,o),
(149,140,o),
(104,266,o),
(119,349,qs)
);
},
{
closed = 1;
nodes = (
(428,900,l),
(334,746,l),
(395,746,l),
(509,900,l)
);
},
{
closed = 1;
nodes = (
(582,900,l),
(483,746,l),
(543,746,l),
(662,900,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
7 1 5 4 5 133 6 1 4 1 4 133 0 3 3 1 97 0 1 1 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
7 1 5 4 5 133 6 1 4 1 4 133 0 1 0 3 2 1 3 106 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 20 38 38 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = ohungarumlaut;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,360,o),
(544,488,o),
(430,557,o),
(352,557,qs),
(274,557,o),
(136,488,o),
(40,359,o),
(25,275,qs),
(10,190,o),
(58,61,o),
(171,-9,o),
(248,-9,qs),
(326,-9,o),
(466,61,o),
(564,190,o),
(579,275,qs)
);
},
{
closed = 1;
nodes = (
(130,341,o),
(196,433,o),
(287,478,o),
(337,478,qs),
(386,478,o),
(462,433,o),
(498,341,o),
(486,275,qs),
(474,209,o),
(405,117,o),
(311,71,o),
(262,71,qs),
(213,71,o),
(139,116,o),
(106,208,o),
(118,275,qs)
);
},
{
closed = 1;
nodes = (
(341,762,l),
(247,608,l),
(308,608,l),
(422,762,l)
);
},
{
closed = 1;
nodes = (
(495,762,l),
(396,608,l),
(456,608,l),
(575,762,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
6 1 4 5 1 5 4 1 128 7 1 5 5 30 77 0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
7 1 5 4 5 133 6 1 4 1 4 133 0 3 3 1 97 0 1 1 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
7 1 5 4 5 133 6 1 4 1 4 133 0 1 0 3 2 1 3 106 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 17 17 20 38 38 38 34 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = OE;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1073,626,l),
(1085,697,l),
(711,697,l),
(687,558,l),
(660,629,o),
(536,705,o),
(448,705,qs),
(355,705,o),
(182,614,o),
(61,452,o),
(43,349,qs),
(25,247,o),
(88,84,o),
(229,-7,o),
(323,-7,qs),
(411,-7,o),
(562,71,o),
(614,143,q),
(588,0,l),
(962,0,l),
(975,72,l),
(692,72,l),
(735,316,l),
(988,316,l),
(1001,387,l),
(748,387,l),
(790,626,l)
);
},
{
closed = 1;
nodes = (
(514,623,o),
(619,556,o),
(664,431,o),
(650,349,qs),
(636,267,o),
(547,143,o),
(418,75,o),
(345,75,qs),
(272,75,o),
(167,143,o),
(122,267,o),
(136,349,qs),
(150,431,o),
(239,556,o),
(368,623,o),
(441,623,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
22 1 0 7 8 1 2 1 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 0 0 1 2 0 1 103 10 9 2 7 7 5 97 6 1 5 5 28 77 8 1 2 2 3 97 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 6 7 7 6 87 0 0 0 1 2 0 1 103 10 9 2 7 7 5 97 0 5 5 28 77 8 1 2 2 3 97 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 6 7 7 6 87 0 0 0 1 2 0 1 103 10 9 2 7 7 5 97 0 5 5 28 77 8 1 2 2 3 95 0 3 3 29 77 8 1 2 2 4 97 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 5 6 7 5 89 0 6 10 9 2 7 0 6 7 105 0 0 0 1 2 0 1 103 8 1 2 2 3 95 0 3 3 29 77 8 1 2 2 4 97 0 4 4 29 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
27 27 27 42 27 41 39 17 19 38 35 17 17 17 16 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 1086;
}
);
note = OE;
unicode = 338;
},
{
glyphname = oe;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(492,209,o),
(423,115,o),
(329,68,o),
(280,68,qs),
(231,68,o),
(157,115,o),
(124,208,o),
(136,275,qs),
(148,341,o),
(214,434,o),
(305,480,o),
(354,480,qs),
(403,480,o),
(480,434,o),
(515,341,o),
(503,275,qs)
);
},
{
closed = 1;
nodes = (
(854,480,o),
(926,439,o),
(958,360,o),
(949,306,q),
(603,306,l),
(622,388,o),
(735,480,o),
(806,480,qs)
);
},
{
closed = 1;
nodes = (
(28,190,o),
(76,61,o),
(188,-9,o),
(266,-9,qs),
(341,-9,o),
(477,62,o),
(522,126,q),
(542,62,o),
(646,-9,o),
(720,-9,qs),
(819,-9,o),
(969,90,o),
(1004,169,q),
(906,169,l),
(882,123,o),
(794,68,o),
(734,68,qs),
(661,68,o),
(581,161,o),
(592,243,q),
(1028,243,l),
(1036,268,o),
(1041,297,qs),
(1054,371,o),
(1009,489,o),
(902,557,o),
(824,557,qs),
(748,557,o),
(618,487,o),
(574,424,q),
(553,487,o),
(444,557,o),
(370,557,qs),
(292,557,o),
(154,488,o),
(58,359,o),
(43,275,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
30 1 2 0 53 1 1 8 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 8 6 1 6 8 1 128 0 2 0 6 8 2 6 103 11 3 2 0 0 4 97 5 1 4 4 31 77 7 1 1 1 9 97 10 1 9 9 29 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 8 6 1 6 8 1 128 5 1 4 11 3 2 0 2 4 0 105 0 2 0 6 8 2 6 103 7 1 1 1 9 97 10 1 9 9 29 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
16 16 57 55 51 49 47 46 44 42 40 39 34 32 28 26 16 23 16 22 22 38 34 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 1080;
}
);
note = oe;
unicode = 339;
},
{
glyphname = Racute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,431,o),
(357,358,o),
(283,358,qs),
(149,358,l),
(196,622,l),
(330,622,ls),
(405,622,o),
(466,554,o),
(455,492,qs)
);
},
{
closed = 1;
nodes = (
(-5,0,l),
(86,0,l),
(137,285,l),
(247,285,l),
(362,0,l),
(471,0,l),
(348,292,l),
(434,310,o),
(536,420,o),
(549,492,qs),
(559,551,o),
(522,643,o),
(422,697,o),
(343,697,qs),
(118,697,l)
);
},
{
closed = 1;
nodes = (
(255,802,l),
(243,734,l),
(476,848,l),
(490,927,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
16 1 4 1 1 76 27 26 25 24 4 2 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 4 3 1 4 103 0 0 0 2 95 6 1 2 2 28 77 5 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
6 1 2 0 0 1 2 0 103 0 1 0 4 3 1 4 103 5 1 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
10 9 22 21 20 19 18 17 9 23 10 23 33 33 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = racute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(152,298,ls),
(181,464,o),
(334,464,qs),
(358,464,l),
(374,558,l),
(310,558,o),
(212,506,o),
(180,459,q),
(196,548,l),
(105,548,l),
(8,0,l),
(99,0,l)
);
},
{
closed = 1;
nodes = (
(162,657,l),
(150,589,l),
(383,703,l),
(397,782,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 1 3 2 1 76 15 14 13 12 4 0 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
3 1 3 2 1 76 15 14 13 12 4 1 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 2 0 97 1 1 0 0 31 77 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 31 77 0 2 2 1 97 0 1 1 31 77 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 1 97 0 1 1 31 77 0 0 0 3 95 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 1 0 2 3 1 2 105 0 0 0 3 95 4 1 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 11 0 11 33 19 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = racute;
unicode = 341;
},
{
glyphname = uni0156;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,-131,l),
(240,-131,l),
(237,-149,ls),
(227,-205,o),
(180,-205,q),
(173,-247,l),
(273,-247,o),
(293,-132,qs),
(300,-92,o),
(298,-49,q),
(208,-49,l)
);
},
{
closed = 1;
nodes = (
(128,0,l),
(179,285,l),
(289,285,l),
(404,0,l),
(513,0,l),
(390,292,l),
(476,310,o),
(578,420,o),
(591,492,qs),
(601,551,o),
(564,643,o),
(464,697,o),
(385,697,qs),
(160,697,l),
(37,0,l)
);
},
{
closed = 1;
nodes = (
(486,431,o),
(399,358,o),
(325,358,qs),
(191,358,l),
(238,622,l),
(372,622,ls),
(447,622,o),
(508,554,o),
(497,492,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
19 1 6 9 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 9 0 6 5 9 6 103 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 8 8 4 95 0 4 4 28 77 7 1 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 4 0 8 9 4 8 103 0 9 0 6 5 9 6 103 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 7 1 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 32 30 29 27 25 24 23 22 21 20 13 11 0 10 0 10 18 17 19 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = uni0157;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(24,-131,l),
(71,-131,l),
(68,-149,ls),
(58,-205,o),
(11,-205,q),
(4,-247,l),
(105,-247,o),
(125,-132,qs),
(133,-90,o),
(129,-49,q),
(39,-49,l)
);
},
{
closed = 1;
nodes = (
(193,298,ls),
(222,464,o),
(375,464,qs),
(399,464,l),
(416,558,l),
(352,558,o),
(254,506,o),
(222,459,q),
(237,548,l),
(146,548,l),
(50,0,l),
(141,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
14 1 7 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 4 97 5 1 4 4 31 77 9 1 7 7 29 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 4 4 31 77 0 6 6 5 97 0 5 5 31 77 9 1 7 7 29 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 5 97 0 5 5 31 77 0 4 4 7 95 9 1 7 7 29 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 5 0 6 7 5 6 105 8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 4 4 7 95 9 1 7 7 29 7 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
11 11 0 0 11 22 11 22 20 18 17 16 13 12 0 10 0 10 18 17 19 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = Rcaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(447,431,o),
(360,358,o),
(286,358,qs),
(152,358,l),
(199,622,l),
(333,622,ls),
(408,622,o),
(469,554,o),
(458,492,qs)
);
},
{
closed = 1;
nodes = (
(-2,0,l),
(89,0,l),
(139,285,l),
(249,285,l),
(365,0,l),
(474,0,l),
(350,292,l),
(437,310,o),
(539,420,o),
(552,492,qs),
(562,551,o),
(524,643,o),
(425,697,o),
(346,697,qs),
(121,697,l)
);
},
{
closed = 1;
nodes = (
(375,811,l),
(251,896,l),
(238,824,l),
(363,742,l),
(515,824,l),
(528,896,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
16 1 4 1 1 76 29 28 27 26 25 24 6 2 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 1 0 4 3 1 4 103 0 0 0 2 95 6 1 2 2 28 77 5 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
6 1 2 0 0 1 2 0 103 0 1 0 4 3 1 4 103 5 1 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
10 9 22 21 20 19 18 17 9 23 10 23 33 33 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 608;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = rcaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(154,298,ls),
(184,464,o),
(337,464,qs),
(361,464,l),
(377,558,l),
(313,558,o),
(215,506,o),
(183,459,q),
(198,548,l),
(107,548,l),
(11,0,l),
(102,0,l)
);
},
{
closed = 1;
nodes = (
(282,666,l),
(158,751,l),
(146,679,l),
(270,597,l),
(423,679,l),
(435,751,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
3 1 3 2 1 76 17 16 15 14 13 12 6 0 74 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
3 1 3 2 1 76 17 16 15 14 13 12 6 1 74 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
0 2 2 0 97 1 1 0 0 31 77 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 0 0 31 77 0 2 2 1 97 0 1 1 31 77 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 2 2 1 97 0 1 1 31 77 0 0 0 3 95 4 1 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 1 0 2 3 1 2 105 0 0 0 3 95 4 1 3 3 29 3 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 11 0 11 33 19 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 373;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = Sacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(494,256,o),
(447,333,o),
(370,370,o),
(304,389,qs),
(250,405,o),
(191,430,o),
(157,478,o),
(163,516,qs),
(173,570,o),
(259,630,o),
(317,628,qs),
(376,627,o),
(436,567,o),
(434,527,q),
(534,527,l),
(541,608,o),
(433,706,o),
(335,706,qs),
(267,706,o),
(153,658,o),
(80,570,o),
(70,513,qs),
(58,448,o),
(104,371,o),
(180,335,o),
(246,317,qs),
(300,302,o),
(361,276,o),
(396,226,o),
(389,186,qs),
(380,135,o),
(294,70,o),
(229,70,qs),
(161,70,o),
(102,137,o),
(105,186,q),
(8,186,l),
(-1,129,o),
(46,42,o),
(146,-7,o),
(215,-7,qs),
(287,-7,o),
(403,49,o),
(473,139,o),
(482,190,qs)
);
},
{
closed = 1;
nodes = (
(237,808,l),
(225,740,l),
(458,854,l),
(472,933,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
48 47 46 45 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 5 4 3 5 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 45 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = sacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(436,199,o),
(394,261,o),
(326,292,o),
(270,308,qs),
(225,321,o),
(176,342,o),
(147,377,o),
(151,404,qs),
(157,438,o),
(223,480,o),
(272,480,qs),
(325,480,o),
(379,428,o),
(374,385,q),
(465,385,l),
(475,465,o),
(379,557,o),
(288,557,qs),
(229,557,o),
(130,516,o),
(68,446,o),
(60,404,qs),
(51,351,o),
(95,286,o),
(166,253,o),
(224,237,qs),
(288,220,o),
(346,185,o),
(340,149,qs),
(333,114,o),
(265,68,o),
(213,68,qs),
(157,68,o),
(97,120,o),
(101,161,q),
(7,161,l),
(1,111,o),
(45,34,o),
(138,-9,o),
(201,-9,qs),
(260,-9,o),
(358,32,o),
(421,104,o),
(429,149,qs)
);
},
{
closed = 1;
nodes = (
(193,664,l),
(181,596,l),
(414,710,l),
(428,789,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
47 46 45 44 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 5 4 3 5 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 44 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = uni015E;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(536,256,o),
(490,333,o),
(412,370,o),
(347,389,qs),
(293,405,o),
(234,430,o),
(199,478,o),
(206,516,qs),
(216,570,o),
(302,630,o),
(360,628,qs),
(419,627,o),
(479,567,o),
(477,527,q),
(577,527,l),
(583,608,o),
(476,706,o),
(378,706,qs),
(310,706,o),
(196,658,o),
(123,570,o),
(113,513,qs),
(101,448,o),
(147,371,o),
(223,335,o),
(289,317,qs),
(342,302,o),
(404,276,o),
(439,226,o),
(432,186,qs),
(423,135,o),
(336,70,o),
(271,70,qs),
(203,70,o),
(144,137,o),
(148,186,q),
(51,186,l),
(38,106,o),
(135,2,o),
(228,-6,q),
(208,-119,l),
(258,-119,ls),
(291,-119,o),
(319,-139,o),
(315,-162,qs),
(310,-186,o),
(276,-206,o),
(243,-206,qs),
(146,-206,l),
(135,-265,l),
(250,-265,ls),
(304,-265,o),
(382,-209,o),
(391,-162,qs),
(399,-114,o),
(338,-62,o),
(279,-63,q),
(289,-6,l),
(353,0,o),
(454,58,o),
(516,143,o),
(525,190,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
21 3 2 0 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 0 5 112 0 0 0 3 2 0 3 106 0 8 8 6 97 0 6 6 28 77 0 2 2 1 95 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 8 5 0 126 0 0 0 3 2 0 3 106 0 8 8 6 97 0 6 6 28 77 0 2 2 1 95 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 8 5 0 126 0 0 0 3 2 0 3 106 0 2 0 1 2 1 99 0 8 8 6 97 0 6 6 28 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 8 5 0 126 0 6 0 8 7 6 8 105 0 0 0 3 2 0 3 106 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
34 18 45 34 20 36 33 36 20 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = uni015E;
unicode = 350;
},
{
glyphname = uni015F;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(479,199,o),
(437,261,o),
(368,292,o),
(312,308,qs),
(267,321,o),
(218,342,o),
(189,377,o),
(194,404,qs),
(200,438,o),
(265,480,o),
(314,480,qs),
(367,480,o),
(421,428,o),
(417,385,q),
(508,385,l),
(518,465,o),
(422,557,o),
(331,557,qs),
(272,557,o),
(173,516,o),
(110,446,o),
(103,404,qs),
(94,351,o),
(137,286,o),
(208,253,o),
(267,237,qs),
(331,220,o),
(388,185,o),
(382,149,qs),
(376,114,o),
(308,68,o),
(256,68,qs),
(200,68,o),
(140,120,o),
(143,161,q),
(49,161,l),
(41,94,o),
(127,2,o),
(207,-7,q),
(188,-114,l),
(238,-114,ls),
(271,-114,o),
(298,-134,o),
(294,-157,qs),
(290,-181,o),
(255,-201,o),
(222,-201,qs),
(125,-201,l),
(115,-260,l),
(230,-260,ls),
(284,-260,o),
(362,-204,o),
(370,-157,qs),
(379,-109,o),
(318,-57,o),
(259,-58,q),
(267,-8,l),
(348,-2,o),
(460,85,o),
(471,149,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
20 2 2 0 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 0 5 112 0 0 0 3 2 0 3 106 0 8 8 6 97 0 6 6 31 77 0 2 2 1 95 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 8 5 0 126 0 0 0 3 2 0 3 106 0 8 8 6 97 0 6 6 31 77 0 2 2 1 95 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 8 5 0 126 0 0 0 3 2 0 3 106 0 2 0 1 2 1 99 0 8 8 6 97 0 6 6 31 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 7 8 4 8 7 4 128 0 4 5 8 4 5 126 0 5 0 8 5 0 126 0 6 0 8 7 6 8 105 0 0 0 3 2 0 3 106 0 2 1 1 2 87 0 2 2 1 95 0 1 2 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
34 18 44 34 20 36 33 36 19 9 8 31 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = uni015F;
unicode = 351;
},
{
glyphname = Scaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(496,256,o),
(450,333,o),
(372,370,o),
(307,389,qs),
(253,405,o),
(194,430,o),
(159,478,o),
(166,516,qs),
(176,570,o),
(262,630,o),
(320,628,qs),
(379,627,o),
(439,567,o),
(437,527,q),
(537,527,l),
(543,608,o),
(436,706,o),
(338,706,qs),
(270,706,o),
(156,658,o),
(83,570,o),
(73,513,qs),
(61,448,o),
(107,371,o),
(183,335,o),
(249,317,qs),
(302,302,o),
(364,276,o),
(399,226,o),
(392,186,qs),
(383,135,o),
(296,70,o),
(231,70,qs),
(163,70,o),
(104,137,o),
(108,186,q),
(11,186,l),
(2,129,o),
(48,42,o),
(149,-7,o),
(218,-7,qs),
(290,-7,o),
(406,49,o),
(476,139,o),
(485,190,qs)
);
},
{
closed = 1;
nodes = (
(356,817,l),
(232,902,l),
(219,830,l),
(344,748,l),
(496,830,l),
(509,902,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
50 49 48 47 46 45 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 28 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 5 4 3 5 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 45 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = scaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(439,199,o),
(397,261,o),
(328,292,o),
(272,308,qs),
(228,321,o),
(178,342,o),
(149,377,o),
(154,404,qs),
(160,438,o),
(226,480,o),
(275,480,qs),
(328,480,o),
(381,428,o),
(377,385,q),
(468,385,l),
(478,465,o),
(382,557,o),
(291,557,qs),
(232,557,o),
(133,516,o),
(71,446,o),
(63,404,qs),
(54,351,o),
(97,286,o),
(169,253,o),
(227,237,qs),
(291,220,o),
(349,185,o),
(342,149,qs),
(336,114,o),
(268,68,o),
(216,68,qs),
(160,68,o),
(100,120,o),
(103,161,q),
(9,161,l),
(4,111,o),
(48,34,o),
(140,-9,o),
(203,-9,qs),
(262,-9,o),
(361,32,o),
(423,104,o),
(431,149,qs)
);
},
{
closed = 1;
nodes = (
(314,673,l),
(190,758,l),
(177,686,l),
(301,604,l),
(454,686,l),
(467,758,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
49 48 47 46 45 44 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 31 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 5 4 3 5 105 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
34 18 44 34 19 34 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = uni0162;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(105,623,l),
(296,623,l),
(186,0,l),
(202,0,l),
(182,-114,l),
(232,-114,ls),
(265,-114,o),
(293,-134,o),
(289,-157,qs),
(285,-181,o),
(250,-201,o),
(217,-201,qs),
(120,-201,l),
(110,-260,l),
(225,-260,ls),
(279,-260,o),
(357,-204,o),
(365,-157,qs),
(373,-109,o),
(312,-57,o),
(253,-58,q),
(263,0,l),
(277,0,l),
(387,623,l),
(577,623,l),
(590,697,l),
(118,697,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 2 0 5 4 2 5 105 7 1 0 0 8 95 9 1 8 8 28 77 6 1 1 1 29 77 0 4 4 3 95 0 3 3 33 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
9 1 8 7 1 0 1 8 0 103 0 2 0 5 4 2 5 105 0 4 0 3 4 3 99 6 1 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 26 0 26 17 17 36 33 36 17 17 17 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni0163;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(86,150,ls),
(68,46,o),
(130,15,q),
(107,-114,l),
(158,-114,ls),
(191,-114,o),
(219,-134,o),
(215,-157,qs),
(211,-181,o),
(176,-201,o),
(143,-201,qs),
(46,-201,l),
(36,-260,l),
(151,-260,ls),
(205,-260,o),
(282,-204,o),
(291,-157,qs),
(299,-109,o),
(238,-57,o),
(179,-58,q),
(190,1,l),
(196,0,o),
(211,0,qs),
(293,0,l),
(307,77,l),
(240,77,ls),
(198,77,o),
(170,110,o),
(177,150,qs),
(234,473,l),
(377,473,l),
(390,548,l),
(247,548,l),
(271,686,l),
(180,686,l),
(156,548,l),
(85,548,l),
(72,473,l),
(143,473,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
35 1 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 0 1 133 0 6 0 9 8 6 9 106 11 10 2 3 3 0 95 2 1 0 0 31 77 0 4 4 5 95 0 5 5 29 77 0 8 8 7 95 0 7 7 33 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 1 0 1 133 2 1 0 11 10 2 3 4 0 3 103 0 6 0 9 8 6 9 106 0 8 0 7 8 7 99 0 4 4 5 95 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 38 0 38 34 32 33 36 18 33 35 17 17 17 17 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 364;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = Tcaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(65,623,l),
(256,623,l),
(146,0,l),
(237,0,l),
(347,623,l),
(537,623,l),
(550,697,l),
(78,697,l)
);
},
{
closed = 1;
nodes = (
(323,742,l),
(475,824,l),
(488,896,l),
(335,811,l),
(211,896,l),
(198,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
13 12 11 10 9 8 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
2 1 0 0 3 95 4 1 3 3 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
4 1 3 2 1 0 1 3 0 103 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = tcaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(315,687,l),
(364,687,l),
(361,669,ls),
(357,650,o),
(331,633,o),
(306,633,q),
(299,591,l),
(350,591,o),
(409,637,o),
(418,688,qs),
(424,721,o),
(421,773,q),
(330,773,l)
);
},
{
closed = 1;
nodes = (
(55,150,ls),
(41,70,o),
(105,0,o),
(181,0,qs),
(263,0,l),
(276,77,l),
(209,77,ls),
(167,77,o),
(139,110,o),
(146,150,qs),
(203,473,l),
(346,473,l),
(359,548,l),
(216,548,l),
(241,686,l),
(150,686,l),
(125,548,l),
(54,548,l),
(41,473,l),
(112,473,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 5 2 1 2 5 1 128 0 1 0 0 4 1 0 105 0 2 2 3 95 11 1 3 3 30 77 12 10 2 7 7 4 95 6 1 4 4 31 77 0 8 8 9 96 0 9 9 29 9 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 5 2 1 2 5 1 128 0 1 0 0 4 1 0 105 6 1 4 12 10 2 7 8 4 7 103 0 2 2 3 95 11 1 3 3 30 77 0 8 8 9 96 0 9 9 29 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
0 5 2 1 2 5 1 128 11 1 3 0 2 5 3 2 103 0 1 0 0 4 1 0 105 6 1 4 12 10 2 7 8 4 7 103 0 8 8 9 96 0 9 9 29 9 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
13 13 0 0 13 32 13 32 29 27 26 24 21 20 19 18 17 16 15 14 0 12 0 12 19 17 20 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 367;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = Utilde;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(45,257,ls),
(30,170,o),
(78,51,o),
(187,-7,o),
(261,-7,qs),
(335,-7,o),
(464,51,o),
(555,170,o),
(570,257,qs),
(648,697,l),
(557,697,l),
(479,256,ls),
(463,163,o),
(356,73,o),
(276,73,qs),
(195,73,o),
(120,163,o),
(136,256,qs),
(214,697,l),
(123,697,l)
);
},
{
closed = 1;
nodes = (
(308,774,o),
(334,796,o),
(351,796,qs),
(364,796,o),
(382,786,o),
(396,776,qs),
(412,763,o),
(438,750,o),
(457,750,qs),
(497,750,o),
(561,804,o),
(576,854,q),
(524,854,l),
(517,833,o),
(489,811,o),
(472,811,qs),
(459,811,o),
(439,822,o),
(427,832,qs),
(410,844,o),
(385,857,o),
(366,857,qs),
(326,857,o),
(264,803,o),
(248,752,q),
(301,752,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
6 1 4 0 8 7 4 8 105 0 5 11 9 2 7 1 5 7 105 10 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
10 3 2 1 7 0 7 1 0 128 6 1 4 0 8 7 4 8 105 0 5 11 9 2 7 1 5 7 105 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
20 20 0 0 20 45 20 45 43 41 37 35 33 32 30 28 24 22 0 19 0 19 36 19 35 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = utilde;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(501,0,l),
(598,548,l),
(507,548,l),
(453,247,ls),
(438,161,o),
(338,71,o),
(265,71,qs),
(194,71,o),
(128,158,o),
(142,239,qs),
(197,548,l),
(107,548,l),
(50,227,ls),
(37,151,o),
(77,45,o),
(170,-8,o),
(234,-8,qs),
(290,-8,o),
(391,39,o),
(424,81,q),
(410,0,l)
);
},
{
closed = 1;
nodes = (
(279,629,o),
(306,651,o),
(323,651,qs),
(336,651,o),
(353,641,o),
(367,631,qs),
(383,618,o),
(410,605,o),
(429,605,qs),
(469,605,o),
(532,659,o),
(547,709,q),
(495,709,l),
(488,688,o),
(460,666,o),
(443,666,qs),
(430,666,o),
(410,677,o),
(398,687,qs),
(381,699,o),
(356,712,o),
(337,712,qs),
(297,712,o),
(235,658,o),
(219,607,q),
(272,607,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
0 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 6 11 10 2 8 1 6 8 105 0 9 9 5 97 7 1 5 5 28 77 3 1 1 1 31 77 0 2 2 0 97 4 1 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 6 11 10 2 8 1 6 8 105 0 9 9 5 97 7 1 5 5 28 77 3 1 1 1 0 98 4 1 0 0 29 77 0 2 2 0 97 4 1 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 6 11 10 2 8 1 6 8 105 0 9 9 5 97 7 1 5 5 28 77 3 1 1 1 4 96 0 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
21 21 21 46 21 46 44 42 34 18 36 35 17 19 35 20 34 12 8 31 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = Umacron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,257,ls),
(30,170,o),
(78,51,o),
(187,-7,o),
(261,-7,qs),
(335,-7,o),
(464,51,o),
(555,170,o),
(571,257,qs),
(648,697,l),
(557,697,l),
(479,256,ls),
(463,163,o),
(356,73,o),
(276,73,qs),
(195,73,o),
(120,163,o),
(136,256,qs),
(214,697,l),
(123,697,l)
);
},
{
closed = 1;
nodes = (
(225,786,l),
(577,786,l),
(589,854,l),
(237,854,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
7 1 5 0 4 1 5 4 103 6 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
6 3 2 1 4 0 4 1 0 128 7 1 5 0 4 1 5 4 103 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
20 20 0 0 20 23 20 23 22 21 0 19 0 19 36 19 35 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = umacron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(598,548,l),
(507,548,l),
(454,247,ls),
(439,161,o),
(339,71,o),
(266,71,qs),
(195,71,o),
(128,158,o),
(142,239,qs),
(197,548,l),
(107,548,l),
(50,227,ls),
(37,151,o),
(77,45,o),
(170,-8,o),
(234,-8,qs),
(290,-8,o),
(391,39,o),
(424,81,q),
(410,0,l),
(501,0,l)
);
},
{
closed = 1;
nodes = (
(195,641,l),
(547,641,l),
(559,709,l),
(207,709,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 5 5 6 95 8 1 6 6 28 77 3 1 1 1 31 77 0 2 2 0 97 7 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 5 5 6 95 8 1 6 6 28 77 3 1 1 1 0 97 7 4 2 0 0 29 77 0 2 2 0 97 7 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 5 5 6 95 8 1 6 6 28 77 3 1 1 1 4 95 7 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
21 21 0 0 21 24 21 24 23 22 0 20 0 20 19 35 20 35 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = Ubreve;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(42,257,ls),
(27,170,o),
(75,51,o),
(183,-7,o),
(257,-7,qs),
(331,-7,o),
(461,51,o),
(552,170,o),
(567,257,qs),
(645,697,l),
(554,697,l),
(476,256,ls),
(459,163,o),
(353,73,o),
(273,73,qs),
(192,73,o),
(116,163,o),
(133,256,qs),
(211,697,l),
(120,697,l)
);
},
{
closed = 1;
nodes = (
(506,895,l),
(499,857,o),
(450,818,o),
(404,818,qs),
(357,818,o),
(322,857,o),
(329,895,q),
(275,895,l),
(272,878,ls),
(261,820,o),
(324,747,o),
(391,747,qs),
(458,747,o),
(546,820,o),
(556,877,qs),
(560,895,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
7 1 5 6 5 133 0 6 0 4 1 6 4 105 8 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
7 1 5 6 5 133 8 3 2 1 4 0 4 1 0 128 0 6 0 4 1 6 4 105 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 35 34 32 30 28 27 24 22 0 19 0 19 36 19 35 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = ubreve;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,548,l),
(503,548,l),
(450,247,ls),
(435,161,o),
(335,71,o),
(262,71,qs),
(191,71,o),
(124,158,o),
(139,239,qs),
(193,548,l),
(103,548,l),
(47,227,ls),
(33,151,o),
(74,45,o),
(166,-8,o),
(230,-8,qs),
(286,-8,o),
(387,39,o),
(421,81,q),
(407,0,l),
(498,0,l)
);
},
{
closed = 1;
nodes = (
(476,750,l),
(469,712,o),
(420,673,o),
(374,673,qs),
(327,673,o),
(292,712,o),
(299,750,q),
(245,750,l),
(242,733,ls),
(232,675,o),
(295,602,o),
(362,602,qs),
(429,602,o),
(517,675,o),
(527,732,qs),
(530,750,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
0 7 0 5 1 7 5 105 8 1 6 6 30 77 3 1 1 1 31 77 0 2 2 0 97 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 0 5 1 7 5 105 8 1 6 6 30 77 3 1 1 1 0 97 9 4 2 0 0 29 77 0 2 2 0 97 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 7 0 5 1 7 5 105 8 1 6 6 30 77 3 1 1 1 4 95 9 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
8 1 6 7 6 133 0 7 0 5 1 7 5 105 3 1 1 1 4 95 9 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
0 0 36 35 33 31 29 28 25 23 0 20 0 20 19 35 20 35 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = Uring;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(36,257,ls),
(21,170,o),
(69,51,o),
(178,-7,o),
(252,-7,qs),
(326,-7,o),
(455,51,o),
(546,170,o),
(561,257,qs),
(639,697,l),
(548,697,l),
(470,256,ls),
(454,163,o),
(347,73,o),
(267,73,qs),
(186,73,o),
(111,163,o),
(127,256,qs),
(205,697,l),
(114,697,l)
);
},
{
closed = 1;
nodes = (
(378,962,o),
(306,904,o),
(298,857,qs),
(290,810,o),
(341,752,o),
(386,752,qs),
(432,752,o),
(503,809,o),
(512,857,qs),
(520,905,o),
(469,962,o),
(423,962,qs)
);
},
{
closed = 1;
nodes = (
(372,801,o),
(347,833,o),
(351,858,qs),
(356,883,o),
(392,914,o),
(415,914,qs),
(438,914,o),
(464,883,o),
(459,858,qs),
(455,833,o),
(418,801,o),
(395,801,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
9 1 5 0 6 7 5 6 105 0 4 4 7 97 10 1 7 7 36 77 8 3 2 1 1 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
8 3 2 1 4 0 4 1 0 128 9 1 5 0 6 7 5 6 105 0 4 4 7 97 10 1 7 7 36 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
8 3 2 1 4 0 4 1 0 128 9 1 5 0 6 7 5 6 105 10 1 7 0 4 1 7 4 105 0 0 0 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
32 32 20 20 0 0 32 43 32 42 38 36 20 31 20 30 26 24 0 19 0 19 36 19 35 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = uring;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(588,548,l),
(497,548,l),
(444,247,ls),
(429,161,o),
(329,71,o),
(256,71,qs),
(185,71,o),
(119,158,o),
(133,239,qs),
(187,548,l),
(97,548,l),
(41,227,ls),
(27,151,o),
(68,45,o),
(160,-8,o),
(224,-8,qs),
(280,-8,o),
(382,39,o),
(415,81,q),
(401,0,l),
(492,0,l)
);
},
{
closed = 1;
nodes = (
(342,656,o),
(317,688,o),
(321,713,qs),
(326,738,o),
(362,769,o),
(385,769,qs),
(408,769,o),
(434,738,o),
(429,713,qs),
(425,688,o),
(388,656,o),
(365,656,qs)
);
},
{
closed = 1;
nodes = (
(349,817,o),
(277,759,o),
(268,712,qs),
(260,665,o),
(312,607,o),
(357,607,qs),
(403,607,o),
(474,664,o),
(482,712,qs),
(491,760,o),
(440,817,o),
(394,817,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
11 1 8 0 5 6 8 5 105 10 1 6 0 7 1 6 7 105 3 1 1 1 31 77 0 2 2 0 97 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
11 1 8 0 5 6 8 5 105 10 1 6 0 7 1 6 7 105 3 1 1 1 0 97 9 4 2 0 0 29 77 0 2 2 0 97 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
11 1 8 0 5 6 8 5 105 10 1 6 0 7 1 6 7 105 3 1 1 1 4 95 9 1 4 4 29 77 0 2 2 0 97 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
33 33 21 21 0 0 33 44 33 43 39 37 21 32 21 31 27 25 0 20 0 20 19 35 20 35 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = uring;
unicode = 367;
},
{
glyphname = Uhungarumlaut;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(42,257,ls),
(26,170,o),
(74,51,o),
(183,-7,o),
(257,-7,qs),
(331,-7,o),
(460,51,o),
(551,170,o),
(567,257,qs),
(644,697,l),
(553,697,l),
(475,256,ls),
(459,163,o),
(352,73,o),
(272,73,qs),
(191,73,o),
(116,163,o),
(132,256,qs),
(210,697,l),
(119,697,l)
);
},
{
closed = 1;
nodes = (
(370,900,l),
(276,746,l),
(337,746,l),
(451,900,l)
);
},
{
closed = 1;
nodes = (
(524,900,l),
(425,746,l),
(485,746,l),
(604,900,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
7 1 5 4 5 133 6 1 4 1 4 133 8 3 2 1 1 28 77 0 0 0 2 98 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
7 1 5 4 5 133 6 1 4 1 4 133 8 3 2 1 0 1 133 0 0 0 2 98 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
0 0 27 26 25 24 23 22 21 20 0 19 0 19 36 19 35 9 8 25 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = uhungarumlaut;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(594,548,l),
(503,548,l),
(450,247,ls),
(435,161,o),
(335,71,o),
(262,71,qs),
(191,71,o),
(124,158,o),
(138,239,qs),
(193,548,l),
(103,548,l),
(46,227,ls),
(33,151,o),
(73,45,o),
(166,-8,o),
(230,-8,qs),
(286,-8,o),
(387,39,o),
(420,81,q),
(406,0,l),
(497,0,l)
);
},
{
closed = 1;
nodes = (
(340,755,l),
(246,601,l),
(307,601,l),
(421,755,l)
);
},
{
closed = 1;
nodes = (
(494,755,l),
(395,601,l),
(455,601,l),
(574,755,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
1 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
7 1 5 6 1 6 5 1 128 8 1 6 6 30 77 3 1 1 1 31 77 0 2 2 0 98 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
7 1 5 6 1 6 5 1 128 8 1 6 6 30 77 3 1 1 1 0 98 9 4 2 0 0 29 77 0 2 2 0 98 9 4 2 0 0 29 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
7 1 5 6 1 6 5 1 128 8 1 6 6 30 77 3 1 1 1 4 96 9 1 4 4 29 77 0 2 2 0 98 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
8 1 6 5 6 133 7 1 5 1 5 133 3 1 1 1 4 96 9 1 4 4 29 77 0 2 2 0 98 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
0 0 28 27 26 25 24 23 22 21 0 20 0 20 19 35 20 35 10 8 26 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = Uogonek;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(77,257,ls),
(57,144,o),
(148,12,o),
(239,-3,q),
(166,-47,o),
(156,-106,qs),
(147,-157,o),
(209,-206,o),
(260,-206,qs),
(297,-206,o),
(340,-192,q),
(350,-132,l),
(311,-145,o),
(283,-145,qs),
(256,-145,o),
(229,-120,o),
(233,-97,qs),
(240,-56,o),
(305,-27,qs),
(365,0,l),
(455,19,o),
(583,149,o),
(602,257,qs),
(680,697,l),
(589,697,l),
(511,256,ls),
(494,163,o),
(388,73,o),
(308,73,qs),
(227,73,o),
(151,163,o),
(168,256,qs),
(246,697,l),
(155,697,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
29 21 2 2 0 22 1 3 2 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 0 1 2 1 0 2 128 0 2 0 3 2 3 102 5 4 2 1 1 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
5 4 2 1 0 1 133 0 0 2 0 133 0 2 3 3 2 89 0 2 2 3 98 0 3 2 3 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 33 0 33 35 41 19 35 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = uogonek;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(630,548,l),
(539,548,l),
(485,247,ls),
(470,161,o),
(370,71,o),
(297,71,qs),
(226,71,o),
(160,158,o),
(174,239,qs),
(229,548,l),
(139,548,l),
(82,227,ls),
(69,151,o),
(109,45,o),
(202,-8,o),
(266,-8,qs),
(322,-8,o),
(423,39,o),
(456,81,q),
(445,16,l),
(337,-35,o),
(324,-107,qs),
(315,-158,o),
(377,-207,o),
(428,-207,qs),
(465,-207,o),
(508,-193,q),
(518,-133,l),
(479,-146,o),
(451,-146,qs),
(424,-146,o),
(397,-121,o),
(401,-98,qs),
(408,-57,o),
(473,-28,qs),
(533,-1,l),
(532,0,l),
(533,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
18 1 4 3 37 17 2 2 4 9 1 0 2 10 1 1 0 4 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 0 0 1 0 1 102 5 1 3 3 31 77 0 4 4 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
5 1 3 4 3 133 0 0 0 1 0 1 102 0 4 4 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
19 35 20 39 35 38 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = Wcircumflex;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,-1,l),
(239,0,l),
(506,561,l),
(569,0,l),
(671,0,l),
(996,697,l),
(898,697,l),
(641,108,l),
(585,697,l),
(483,697,l),
(211,106,l),
(163,697,l),
(66,697,l)
);
},
{
closed = 1;
nodes = (
(553,835,l),
(676,750,l),
(688,822,l),
(565,905,l),
(411,822,l),
(399,750,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
9 4 1 3 2 0 1 76 18 17 16 15 14 13 6 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 0 28 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 2 0 133 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 976;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = wcircumflex;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(118,0,l),
(212,0,l),
(420,435,l),
(476,0,l),
(570,0,l),
(837,548,l),
(747,548,l),
(542,87,l),
(490,548,l),
(397,548,l),
(180,88,l),
(135,548,l),
(42,548,l)
);
},
{
closed = 1;
nodes = (
(465,682,l),
(588,597,l),
(601,669,l),
(477,752,l),
(324,669,l),
(311,597,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
9 4 1 3 2 0 1 76 18 17 16 15 14 13 6 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 0 31 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 2 0 133 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 820;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = Ycircumflex;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,263,l),
(168,0,l),
(259,0,l),
(305,263,l),
(609,697,l),
(508,697,l),
(274,344,l),
(164,697,l),
(63,697,l)
);
},
{
closed = 1;
nodes = (
(360,827,l),
(483,742,l),
(495,814,l),
(372,897,l),
(218,814,l),
(206,742,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
7 4 1 3 1 0 1 76 14 13 12 11 10 9 6 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 0 0 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 0 1 0 133 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 8 0 8 18 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = ycircumflex;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,104,l),
(166,548,l),
(65,548,l),
(191,6,l),
(36,-258,l),
(130,-258,l),
(602,548,l),
(508,548,l)
);
},
{
closed = 1;
nodes = (
(359,682,l),
(482,597,l),
(494,669,l),
(371,752,l),
(217,669,l),
(205,597,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
6 3 2 0 1 1 76 13 12 11 10 9 8 6 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 1 1 31 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 0 1 0 134 3 2 2 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
3 2 2 1 0 1 133 0 0 0 118 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 7 0 7 18 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = Ydieresis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,263,l),
(170,0,l),
(261,0,l),
(307,263,l),
(611,697,l),
(510,697,l),
(276,344,l),
(166,697,l),
(65,697,l)
);
},
{
closed = 1;
nodes = (
(291,767,o),
(328,797,o),
(332,819,qs),
(335,841,o),
(310,872,o),
(289,872,qs),
(267,872,o),
(230,841,o),
(227,819,qs),
(223,797,o),
(248,767,o),
(270,767,qs)
);
},
{
closed = 1;
nodes = (
(454,767,o),
(491,797,o),
(495,819,qs),
(498,841,o),
(473,872,o),
(451,872,qs),
(429,872,o),
(393,841,o),
(390,819,qs),
(386,797,o),
(410,767,o),
(432,767,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
7 4 1 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
5 1 3 9 6 8 3 4 0 3 4 105 7 2 2 0 0 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
7 2 2 0 4 1 4 0 1 128 5 1 3 9 6 8 3 4 0 3 4 105 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
21 21 9 9 0 0 21 32 21 31 27 25 9 20 9 19 15 13 0 8 0 8 18 18 10 8 24 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Zacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(533,697,l),
(91,697,l),
(77,618,l),
(411,618,l),
(-23,72,l),
(-36,0,l),
(412,0,l),
(426,79,l),
(86,79,l),
(520,625,l)
);
},
{
closed = 1;
nodes = (
(436,848,l),
(450,927,l),
(215,802,l),
(203,734,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
9 1 2 3 4 1 1 0 2 76 13 12 11 10 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 0 3 2 103 0 0 0 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = zacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(440,548,l),
(71,548,l),
(58,474,l),
(322,474,l),
(-15,75,l),
(-28,0,l),
(345,0,l),
(358,75,l),
(89,75,l),
(427,474,l)
);
},
{
closed = 1;
nodes = (
(381,703,l),
(395,782,l),
(160,657,l),
(148,589,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
9 1 2 4 1 0 2 75 13 12 11 10 4 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 0 3 2 103 0 0 0 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 455;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = Zdotaccent;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(539,697,l),
(97,697,l),
(83,618,l),
(417,618,l),
(-18,72,l),
(-30,0,l),
(418,0,l),
(432,79,l),
(92,79,l),
(526,625,l)
);
},
{
closed = 1;
nodes = (
(351,761,o),
(386,791,o),
(390,813,qs),
(394,835,o),
(369,866,o),
(347,866,qs),
(325,866,o),
(289,835,o),
(285,813,qs),
(281,791,o),
(307,761,o),
(329,761,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
9 1 2 3 4 1 1 0 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 6 1 5 3 4 5 105 0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 4 6 1 5 3 4 5 105 0 3 0 2 0 3 2 103 0 0 0 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
10 10 10 21 10 20 38 17 18 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = zdotaccent;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(445,548,l),
(76,548,l),
(63,474,l),
(327,474,l),
(-9,75,l),
(-23,0,l),
(350,0,l),
(364,75,l),
(95,75,l),
(432,474,l)
);
},
{
closed = 1;
nodes = (
(296,617,o),
(331,647,o),
(335,669,qs),
(339,691,o),
(315,722,o),
(293,722,qs),
(271,722,o),
(234,691,o),
(230,669,qs),
(226,647,o),
(252,617,o),
(274,617,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
9 1 2 4 1 0 2 75 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 5 5 4 97 0 4 4 34 77 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 5 5 4 97 0 4 4 28 77 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 5 5 4 97 0 4 4 34 77 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 5 5 4 97 0 4 4 28 77 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
6 1 5 5 4 97 0 4 4 34 77 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 3 0 2 0 3 2 103 6 1 5 5 4 97 0 4 4 34 77 0 0 0 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
10 10 10 21 10 20 38 17 18 17 16 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 455;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = Zcaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(536,697,l),
(94,697,l),
(80,618,l),
(414,618,l),
(-20,72,l),
(-33,0,l),
(415,0,l),
(429,79,l),
(89,79,l),
(523,625,l)
);
},
{
closed = 1;
nodes = (
(323,742,l),
(475,824,l),
(488,896,l),
(335,811,l),
(211,896,l),
(198,824,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
9 1 2 3 4 1 1 0 2 76 15 14 13 12 11 10 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 95 0 3 3 28 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 0 3 2 103 0 0 0 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = zcaron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(442,548,l),
(73,548,l),
(60,474,l),
(324,474,l),
(-12,75,l),
(-25,0,l),
(348,0,l),
(361,75,l),
(92,75,l),
(429,474,l)
);
},
{
closed = 1;
nodes = (
(268,597,l),
(421,679,l),
(433,751,l),
(280,666,l),
(156,751,l),
(144,679,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
9 1 2 4 1 0 2 75 15 14 13 12 11 10 6 3 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 0 3 2 103 0 0 0 1 95 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 455;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = uni018F;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,75,o),
(183,131,o),
(142,232,o),
(154,298,q),
(620,298,l),
(604,229,o),
(523,128,o),
(410,75,o),
(346,75,qs)
);
},
{
closed = 1;
nodes = (
(430,-7,o),
(598,83,o),
(709,244,o),
(728,349,qs),
(746,453,o),
(691,615,o),
(555,705,o),
(458,705,qs),
(340,705,o),
(148,584,o),
(97,480,q),
(202,480,l),
(237,547,o),
(365,623,o),
(443,623,qs),
(508,623,o),
(602,563,o),
(645,454,o),
(635,383,q),
(77,383,l),
(68,350,o),
(63,321,qs),
(45,218,o),
(101,70,o),
(235,-7,o),
(331,-7,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
41 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 2 3 4 2 128 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 28 77 7 1 1 1 6 97 8 1 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 4 3 2 3 4 2 128 0 5 0 3 4 5 3 105 0 2 0 0 1 2 0 103 7 1 1 1 6 97 8 1 6 6 29 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
9 9 0 0 9 34 9 33 27 25 23 22 20 18 15 14 0 8 0 7 19 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
note = uni018F;
unicode = 399;
},
{
glyphname = florin;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(78,548,l),
(58,474,l),
(128,474,l),
(-21,-57,ls),
(-32,-93,o),
(-65,-122,o),
(-94,-122,qs),
(-113,-122,l),
(-133,-197,l),
(-109,-197,ls),
(-38,-197,o),
(50,-131,o),
(70,-57,qs),
(219,474,l),
(335,474,l),
(355,548,l),
(240,548,l),
(254,595,ls),
(268,647,o),
(331,691,o),
(389,691,q),
(409,767,l),
(308,767,o),
(189,685,o),
(163,595,qs),
(149,548,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 5 0 4 5 4 101 0 1 1 0 97 0 0 0 30 77 6 1 3 3 2 95 7 1 2 2 31 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
7 1 2 6 1 3 5 2 3 103 0 5 0 4 5 4 101 0 1 1 0 97 0 0 0 30 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 0 0 1 2 0 1 105 7 1 2 6 1 3 5 2 3 103 0 5 4 4 5 89 0 5 5 4 97 0 4 5 4 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
17 19 33 35 17 19 17 18 8 8 30 
CALL[ ]	/* CallFunction */";
};
width = 332;
}
);
note = florin;
unicode = 402;
},
{
glyphname = uni01FC;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(504,808,l),
(492,740,l),
(725,854,l),
(739,933,l)
);
},
{
closed = 1;
nodes = (
(29,0,l),
(143,155,l),
(410,155,l),
(383,0,l),
(756,0,l),
(768,72,l),
(486,72,l),
(530,317,l),
(782,317,l),
(794,387,l),
(542,387,l),
(584,626,l),
(866,626,l),
(879,698,l),
(448,698,l),
(-70,0,l)
);
},
{
closed = 1;
nodes = (
(494,629,l),
(423,226,l),
(196,226,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
21 1 1 0 1 76 3 2 1 0 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 0 3 8 2 3 103 9 1 8 0 6 4 8 6 103 0 1 1 0 95 0 0 0 28 77 0 4 4 5 95 7 1 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 0 0 1 2 0 1 103 0 2 0 3 8 2 3 103 9 1 8 0 6 4 8 6 103 0 4 4 5 95 7 1 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
20 20 20 22 20 22 17 17 17 17 17 17 17 20 10 8 30 
CALL[ ]	/* CallFunction */";
};
width = 900;
}
);
note = uni01FC;
unicode = 508;
},
{
glyphname = uni01FD;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(849,480,o),
(923,439,o),
(957,362,o),
(947,309,q),
(586,309,l),
(607,388,o),
(728,480,o),
(800,480,qs)
);
},
{
closed = 1;
nodes = (
(885,123,o),
(791,68,o),
(727,68,qs),
(683,68,o),
(610,108,o),
(570,187,o),
(575,243,q),
(1026,243,l),
(1034,268,o),
(1039,297,qs),
(1052,369,o),
(1009,488,o),
(904,557,o),
(828,557,qs),
(690,557,o),
(600,447,q),
(617,548,l),
(541,548,l),
(524,447,l),
(500,500,o),
(405,557,o),
(338,557,qs),
(262,557,o),
(130,487,o),
(38,360,o),
(24,276,qs),
(9,193,o),
(54,63,o),
(160,-9,o),
(233,-9,qs),
(302,-9,o),
(421,54,o),
(460,105,q),
(442,0,l),
(521,0,l),
(540,106,l),
(559,53,o),
(661,-9,o),
(728,-9,qs),
(823,-9,o),
(969,90,o),
(1005,169,q),
(907,169,l)
);
},
{
closed = 1;
nodes = (
(127,338,o),
(194,430,o),
(286,478,o),
(337,478,qs),
(388,478,o),
(464,429,o),
(498,337,o),
(487,275,qs),
(476,213,o),
(410,120,o),
(316,71,o),
(265,71,qs),
(214,71,o),
(139,120,o),
(105,213,o),
(117,276,qs)
);
},
{
closed = 1;
nodes = (
(556,657,l),
(544,589,l),
(777,703,l),
(791,782,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
34 31 2 0 1 17 14 2 9 10 2 76 70 69 68 67 4 5 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
14 1 10 8 9 8 10 9 128 0 0 0 8 10 0 8 103 12 13 2 1 1 5 97 7 6 2 5 5 31 77 11 1 9 9 2 97 4 3 2 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
14 1 10 8 9 8 10 9 128 0 0 0 8 10 0 8 103 12 13 2 1 1 5 97 7 1 5 5 31 77 0 6 6 3 95 0 3 3 29 77 11 1 9 9 2 97 4 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
14 1 10 8 9 8 10 9 128 7 1 5 12 13 2 1 0 5 1 105 0 0 0 8 10 0 8 103 0 6 6 3 95 0 3 3 29 77 11 1 9 9 2 97 4 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
8 8 0 0 63 61 55 53 8 50 8 50 48 46 43 42 37 35 33 32 29 27 21 19 16 15 12 10 0 7 0 6 18 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 1100;
}
);
note = uni01FD;
unicode = 509;
},
{
glyphname = uni0218;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(189,-131,l),
(236,-131,l),
(233,-149,ls),
(223,-205,o),
(176,-205,q),
(169,-247,l),
(270,-247,o),
(290,-132,qs),
(298,-90,o),
(294,-49,q),
(204,-49,l)
);
},
{
closed = 1;
nodes = (
(535,256,o),
(488,333,o),
(411,370,o),
(345,389,qs),
(291,405,o),
(232,430,o),
(198,478,o),
(205,516,qs),
(214,570,o),
(301,630,o),
(358,628,qs),
(417,627,o),
(478,567,o),
(475,527,q),
(575,527,l),
(582,608,o),
(474,706,o),
(376,706,qs),
(308,706,o),
(195,658,o),
(121,570,o),
(111,513,qs),
(100,448,o),
(145,371,o),
(222,335,o),
(287,317,qs),
(341,302,o),
(402,276,o),
(437,226,o),
(430,186,qs),
(421,135,o),
(335,70,o),
(270,70,qs),
(202,70,o),
(143,137,o),
(146,186,q),
(49,186,l),
(40,129,o),
(87,42,o),
(187,-7,o),
(256,-7,qs),
(328,-7,o),
(444,49,o),
(514,139,o),
(523,190,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 8 9 5 9 8 5 128 0 5 6 9 5 6 126 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 9 9 7 97 0 7 7 28 77 0 6 6 4 97 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 8 9 5 9 8 5 128 0 5 6 9 5 6 126 0 7 0 9 8 7 9 105 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 4 97 0 4 4 29 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 45 43 41 40 38 36 23 21 19 18 15 13 0 10 0 10 18 17 19 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni0219;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,-131,l),
(216,-131,l),
(212,-149,ls),
(203,-205,o),
(156,-205,q),
(148,-247,l),
(249,-247,o),
(269,-132,qs),
(276,-96,o),
(273,-49,q),
(183,-49,l)
);
},
{
closed = 1;
nodes = (
(478,199,o),
(436,261,o),
(367,292,o),
(311,308,qs),
(266,321,o),
(217,342,o),
(188,377,o),
(193,404,qs),
(199,438,o),
(264,480,o),
(313,480,qs),
(366,480,o),
(420,428,o),
(416,385,q),
(507,385,l),
(517,465,o),
(421,557,o),
(330,557,qs),
(271,557,o),
(172,516,o),
(109,446,o),
(102,404,qs),
(93,351,o),
(136,286,o),
(207,253,o),
(265,237,qs),
(329,220,o),
(387,185,o),
(381,149,qs),
(375,114,o),
(307,68,o),
(255,68,qs),
(199,68,o),
(139,120,o),
(142,161,q),
(48,161,l),
(42,111,o),
(87,34,o),
(179,-9,o),
(242,-9,qs),
(301,-9,o),
(399,32,o),
(462,104,o),
(470,149,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
0 8 9 5 9 8 5 128 0 5 6 9 5 6 126 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 9 9 7 97 0 7 7 31 77 0 6 6 4 97 0 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 8 9 5 9 8 5 128 0 5 6 9 5 6 126 0 7 0 9 8 7 9 105 10 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 6 6 4 97 0 4 4 29 4 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
0 0 44 42 40 39 37 35 23 21 19 18 15 13 0 10 0 10 18 17 19 11 8 25 
CALL[ ]	/* CallFunction */";
};
width = 522;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = uni021A;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(160,-131,l),
(207,-131,l),
(204,-149,ls),
(194,-205,o),
(147,-205,q),
(140,-247,l),
(240,-247,o),
(260,-132,qs),
(267,-92,o),
(265,-49,q),
(175,-49,l)
);
},
{
closed = 1;
nodes = (
(104,623,l),
(295,623,l),
(185,0,l),
(276,0,l),
(386,623,l),
(576,623,l),
(589,697,l),
(117,697,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 6 1 4 4 7 95 9 1 7 7 28 77 0 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
9 1 7 6 1 4 5 7 4 103 8 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 5 5 29 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
11 11 0 0 11 18 11 18 17 16 15 14 13 12 0 10 0 10 18 17 19 10 8 25 
CALL[ ]	/* CallFunction */";
};
width = 541;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = uni021B;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(81,-131,l),
(129,-131,l),
(126,-149,ls),
(116,-205,o),
(68,-205,q),
(61,-247,l),
(111,-247,o),
(172,-191,o),
(182,-132,qs),
(189,-90,o),
(186,-49,q),
(96,-49,l)
);
},
{
closed = 1;
nodes = (
(85,150,ls),
(71,70,o),
(134,0,o),
(210,0,qs),
(292,0,l),
(306,77,l),
(239,77,ls),
(197,77,o),
(169,110,o),
(176,150,qs),
(233,473,l),
(376,473,l),
(389,548,l),
(246,548,l),
(270,686,l),
(179,686,l),
(155,548,l),
(84,548,l),
(71,473,l),
(142,473,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 5 4 5 133 11 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 12 10 2 7 7 4 95 6 1 4 4 31 77 0 8 8 9 96 0 9 9 29 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 5 4 5 133 6 1 4 12 10 2 7 8 4 7 103 11 1 3 0 2 1 3 2 103 0 1 0 0 1 0 101 0 8 8 9 96 0 9 9 29 9 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
12 12 0 0 12 31 12 31 28 26 25 23 20 19 18 17 16 15 14 13 0 11 0 11 18 17 20 13 8 25 
CALL[ ]	/* CallFunction */";
};
width = 364;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = uni0259;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,68,o),
(154,107,o),
(121,182,o),
(130,234,q),
(476,234,l),
(455,156,o),
(343,68,o),
(274,68,qs)
);
},
{
closed = 1;
nodes = (
(336,-9,o),
(471,60,o),
(562,188,o),
(577,273,qs),
(592,358,o),
(545,487,o),
(434,557,o),
(356,557,qs),
(258,557,o),
(108,458,o),
(73,379,q),
(171,379,l),
(195,425,o),
(283,480,o),
(342,480,qs),
(414,480,o),
(499,389,o),
(490,308,q),
(52,308,l),
(44,280,o),
(39,253,qs),
(26,178,o),
(70,59,o),
(178,-9,o),
(256,-9,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 4 3 2 3 4 2 128 0 2 0 0 1 2 0 103 0 3 3 5 97 0 5 5 31 77 7 1 1 1 6 97 8 1 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 4 3 2 3 4 2 128 0 5 0 3 4 5 3 105 0 2 0 0 1 2 0 103 7 1 1 1 6 97 8 1 6 6 29 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
8 8 0 0 8 32 8 31 25 23 21 20 18 16 14 13 0 7 0 6 18 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = uni0259;
unicode = 601;
},
{
glyphname = uni02BC;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(76,470,l),
(212,697,l),
(111,697,l),
(12,470,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 21 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 219;
}
);
note = uni02BC;
unicode = 700;
},
{
glyphname = circumflex;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(293,669,l),
(170,752,l),
(16,669,l),
(3,597,l),
(157,682,l),
(280,597,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(155,666,l),
(31,751,l),
(18,679,l),
(142,597,l),
(295,679,l),
(308,751,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 1 1 50 
CALL[ ]	/* CallFunction */";
};
width = 311;
}
);
note = caron;
unicode = 711;
},
{
glyphname = uni02C9;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(11,641,l),
(363,641,l),
(375,709,l),
(23,709,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 387;
}
);
note = uni02C9;
unicode = 713;
},
{
glyphname = breve;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,750,l),
(254,712,o),
(205,673,o),
(159,673,qs),
(112,673,o),
(77,712,o),
(84,750,q),
(30,750,l),
(27,733,ls),
(17,675,o),
(80,602,o),
(147,602,qs),
(214,602,o),
(302,675,o),
(312,732,qs),
(315,750,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 2 1 133 0 2 0 0 2 89 0 2 2 0 97 0 0 2 0 81 18 34 19 34 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 320;
}
);
note = breve;
unicode = 728;
},
{
glyphname = dotaccent;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(85,622,o),
(120,652,o),
(124,674,qs),
(128,696,o),
(103,727,o),
(81,727,qs),
(59,727,o),
(23,696,o),
(19,674,qs),
(15,652,o),
(41,622,o),
(63,622,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 143;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = ring;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(96,817,o),
(23,759,o),
(15,712,qs),
(7,665,o),
(58,607,o),
(103,607,qs),
(149,607,o),
(221,664,o),
(229,712,qs),
(237,760,o),
(187,817,o),
(141,817,qs)
);
},
{
closed = 1;
nodes = (
(89,656,o),
(64,688,o),
(68,713,qs),
(73,738,o),
(109,769,o),
(132,769,qs),
(155,769,o),
(181,738,o),
(176,713,qs),
(172,688,o),
(135,656,o),
(112,656,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
4 1 1 0 2 3 1 2 105 5 1 3 0 0 3 89 5 1 3 3 0 97 0 0 3 0 81 12 12 0 0 12 23 12 22 18 16 0 11 0 10 36 6 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 243;
}
);
note = ring;
unicode = 730;
},
{
glyphname = ogonek;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(156,26,ls),
(88,-3,o),
(22,-68,o),
(15,-106,qs),
(6,-157,o),
(69,-206,o),
(120,-206,qs),
(157,-206,o),
(199,-192,q),
(210,-132,l),
(170,-145,o),
(142,-145,qs),
(115,-145,o),
(88,-120,o),
(92,-97,qs),
(99,-56,o),
(164,-27,qs),
(224,0,l),
(208,47,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 32 values pushed */
9 1 1 0 1 76 18 8 2 0 74 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 35 37 2 8 24 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 241;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = tilde;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(68,629,o),
(95,651,o),
(112,651,qs),
(125,651,o),
(142,641,o),
(156,631,qs),
(172,618,o),
(199,605,o),
(218,605,qs),
(258,605,o),
(321,659,o),
(336,709,q),
(284,709,l),
(277,688,o),
(249,666,o),
(232,666,qs),
(219,666,o),
(199,677,o),
(187,687,qs),
(170,699,o),
(145,712,o),
(126,712,qs),
(86,712,o),
(24,658,o),
(8,607,q),
(61,607,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 41 values pushed */
0 1 4 3 1 89 2 1 0 0 4 3 0 4 105 0 1 1 3 97 6 5 2 3 1 3 81 0 0 0 25 0 25 36 34 18 36 34 7 8 27 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 345;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = hungarumlaut;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(98,755,l),
(3,601,l),
(64,601,l),
(179,755,l)
);
},
{
closed = 1;
nodes = (
(212,601,l),
(332,755,l),
(252,755,l),
(152,601,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 18 values pushed */
2 1 1 0 1 133 3 1 0 0 118 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 344;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = Wgrave;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,-1,l),
(237,0,l),
(504,561,l),
(567,0,l),
(669,0,l),
(994,697,l),
(896,697,l),
(639,108,l),
(583,697,l),
(481,697,l),
(209,106,l),
(161,697,l),
(64,697,l)
);
},
{
closed = 1;
nodes = (
(588,739,l),
(600,807,l),
(409,932,l),
(395,853,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 0 28 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 2 0 133 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 976;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = wgrave;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(209,0,l),
(418,435,l),
(473,0,l),
(567,0,l),
(835,548,l),
(745,548,l),
(539,87,l),
(488,548,l),
(395,548,l),
(178,88,l),
(133,548,l),
(40,548,l)
);
},
{
closed = 1;
nodes = (
(490,589,l),
(502,657,l),
(311,782,l),
(297,703,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 0 31 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 2 0 133 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 820;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = Wacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,-1,l),
(237,0,l),
(504,561,l),
(567,0,l),
(669,0,l),
(994,697,l),
(896,697,l),
(639,108,l),
(583,697,l),
(481,697,l),
(208,106,l),
(161,697,l),
(64,697,l)
);
},
{
closed = 1;
nodes = (
(724,856,l),
(738,935,l),
(502,810,l),
(490,742,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 0 28 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 2 0 133 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 976;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = wacute;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,0,l),
(209,0,l),
(418,435,l),
(473,0,l),
(567,0,l),
(835,548,l),
(745,548,l),
(539,87,l),
(488,548,l),
(395,548,l),
(178,88,l),
(133,548,l),
(40,548,l)
);
},
{
closed = 1;
nodes = (
(634,703,l),
(648,782,l),
(413,657,l),
(401,589,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
9 4 1 3 2 0 1 76 16 15 14 13 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 0 31 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
5 4 1 3 0 2 0 133 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 12 0 12 18 17 18 18 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 820;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = Wdieresis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,-1,l),
(242,0,l),
(509,561,l),
(572,0,l),
(674,0,l),
(999,697,l),
(901,697,l),
(644,108,l),
(588,697,l),
(486,697,l),
(213,106,l),
(166,697,l),
(69,697,l)
);
},
{
closed = 1;
nodes = (
(484,773,o),
(520,803,o),
(524,825,qs),
(528,847,o),
(502,878,o),
(481,878,qs),
(459,878,o),
(423,847,o),
(419,825,qs),
(415,803,o),
(441,773,o),
(463,773,qs)
);
},
{
closed = 1;
nodes = (
(647,773,o),
(683,803,o),
(687,825,qs),
(691,847,o),
(665,878,o),
(643,878,qs),
(621,878,o),
(586,847,o),
(582,825,qs),
(578,803,o),
(603,773,o),
(625,773,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
9 4 1 3 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
7 1 5 11 8 10 3 6 0 5 6 105 9 4 1 3 0 0 28 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
9 4 1 3 0 6 2 6 0 2 128 7 1 5 11 8 10 3 6 0 5 6 105 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
25 25 13 13 0 0 25 36 25 35 31 29 13 24 13 23 19 17 0 12 0 12 18 17 18 18 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 976;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = wdieresis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(120,0,l),
(214,0,l),
(423,435,l),
(478,0,l),
(572,0,l),
(840,548,l),
(750,548,l),
(544,87,l),
(493,548,l),
(400,548,l),
(182,88,l),
(138,548,l),
(45,548,l)
);
},
{
closed = 1;
nodes = (
(396,622,o),
(432,652,o),
(436,674,qs),
(440,696,o),
(414,727,o),
(393,727,qs),
(371,727,o),
(335,696,o),
(331,674,qs),
(327,652,o),
(353,622,o),
(375,622,qs)
);
},
{
closed = 1;
nodes = (
(559,622,o),
(595,652,o),
(599,674,qs),
(603,696,o),
(577,727,o),
(555,727,qs),
(533,727,o),
(498,696,o),
(494,674,qs),
(490,652,o),
(515,622,o),
(537,622,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
9 4 1 3 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
11 8 10 3 6 6 5 97 7 1 5 5 34 77 9 4 1 3 0 0 31 77 3 1 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
9 4 1 3 0 6 2 6 0 2 128 11 8 10 3 6 6 5 97 7 1 5 5 34 77 3 1 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
25 25 13 13 0 0 25 36 25 35 31 29 13 24 13 23 19 17 0 12 0 12 18 17 18 18 12 8 26 
CALL[ ]	/* CallFunction */";
};
width = 820;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = uni1EBC;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,698,l),
(125,698,l),
(1,0,l),
(376,0,l),
(390,75,l),
(106,75,l),
(148,315,l),
(402,315,l),
(415,390,l),
(161,390,l),
(202,623,l),
(486,623,l)
);
},
{
closed = 1;
nodes = (
(225,774,o),
(252,796,o),
(269,796,qs),
(282,796,o),
(299,786,o),
(313,776,qs),
(329,763,o),
(356,750,o),
(375,750,qs),
(415,750,o),
(478,804,o),
(493,854,q),
(441,854,l),
(434,833,o),
(406,811,o),
(389,811,qs),
(376,811,o),
(356,822,o),
(344,832,qs),
(327,844,o),
(303,857,o),
(284,857,qs),
(244,857,o),
(181,803,o),
(165,752,q),
(218,752,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
8 1 6 0 10 9 6 10 105 0 7 13 11 2 9 4 7 9 105 0 0 0 1 2 0 1 103 12 1 5 5 4 95 0 4 4 28 77 0 2 2 3 95 0 3 3 29 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
8 1 6 0 10 9 6 10 105 0 7 13 11 2 9 4 7 9 105 0 4 12 1 5 0 4 5 104 0 0 0 1 2 0 1 103 0 2 2 3 95 0 3 3 29 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
12 12 0 0 12 37 12 37 35 33 29 27 25 24 22 20 16 14 0 11 0 11 17 17 17 17 17 14 8 27 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = uni1EBC;
unicode = 7868;
},
{
glyphname = uni1EBD;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(381,480,o),
(453,441,o),
(486,366,o),
(476,314,q),
(130,314,l),
(151,392,o),
(264,480,o),
(333,480,qs)
);
},
{
closed = 1;
nodes = (
(412,123,o),
(323,68,o),
(264,68,qs),
(192,68,o),
(107,159,o),
(116,240,q),
(554,240,l),
(562,269,o),
(567,295,qs),
(580,370,o),
(536,489,o),
(428,557,o),
(350,557,qs),
(270,557,o),
(135,488,o),
(44,360,o),
(30,275,qs),
(15,190,o),
(62,61,o),
(172,-9,o),
(250,-9,qs),
(348,-9,o),
(498,90,o),
(534,169,q),
(436,169,l)
);
},
{
closed = 1;
nodes = (
(268,629,o),
(295,651,o),
(312,651,qs),
(325,651,o),
(342,641,o),
(356,631,qs),
(372,618,o),
(399,605,o),
(418,605,qs),
(458,605,o),
(521,659,o),
(536,709,q),
(484,709,l),
(477,688,o),
(449,666,o),
(432,666,qs),
(419,666,o),
(399,677,o),
(387,687,qs),
(370,699,o),
(346,712,o),
(327,712,qs),
(287,712,o),
(224,658,o),
(208,607,q),
(261,607,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
14 1 6 4 5 4 6 5 128 0 8 15 12 2 10 3 8 10 105 0 0 0 4 6 0 4 104 0 11 11 7 97 9 1 7 7 28 77 13 1 1 1 3 97 0 3 3 31 77 0 5 5 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
14 1 6 4 5 4 6 5 128 0 8 15 12 2 10 3 8 10 105 0 3 13 1 1 0 3 1 105 0 0 0 4 6 0 4 104 0 11 11 7 97 9 1 7 7 28 77 0 5 5 2 97 0 2 2 29 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 40 values pushed */
33 33 8 8 0 0 33 58 33 58 56 54 50 48 46 45 43 41 37 35 8 32 8 32 30 28 26 25 20 18 12 10 0 7 0 6 18 16 8 23 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = uni1EBD;
unicode = 7869;
},
{
glyphname = Ygrave;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,263,l),
(165,0,l),
(256,0,l),
(303,263,l),
(606,697,l),
(505,697,l),
(271,344,l),
(161,697,l),
(60,697,l)
);
},
{
closed = 1;
nodes = (
(438,734,l),
(450,802,l),
(259,927,l),
(245,848,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
7 4 1 3 1 0 1 76 12 11 10 9 4 0 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 0 0 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 0 1 0 133 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 8 0 8 18 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = ygrave;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(257,104,l),
(163,548,l),
(62,548,l),
(188,6,l),
(33,-258,l),
(127,-258,l),
(599,548,l),
(505,548,l)
);
},
{
closed = 1;
nodes = (
(437,589,l),
(449,657,l),
(258,782,l),
(244,703,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
6 3 2 0 1 1 76 11 10 9 8 4 1 74 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 2 2 1 1 31 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
0 0 1 0 134 3 2 2 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
3 2 2 1 0 1 133 0 0 0 118 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 7 0 7 18 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = uni1EF8;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(218,263,l),
(171,0,l),
(262,0,l),
(309,263,l),
(612,697,l),
(511,697,l),
(277,344,l),
(167,697,l),
(66,697,l)
);
},
{
closed = 1;
nodes = (
(263,774,o),
(290,796,o),
(307,796,qs),
(320,796,o),
(337,786,o),
(351,776,qs),
(367,763,o),
(394,750,o),
(413,750,qs),
(453,750,o),
(516,804,o),
(531,854,q),
(479,854,l),
(472,833,o),
(444,811,o),
(427,811,qs),
(414,811,o),
(394,822,o),
(382,832,qs),
(365,844,o),
(341,857,o),
(322,857,qs),
(282,857,o),
(219,803,o),
(203,752,q),
(256,752,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
7 4 1 3 1 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
5 1 3 0 7 6 3 7 105 0 4 10 8 2 6 0 4 6 105 9 2 2 0 0 28 77 0 1 1 29 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
9 2 2 0 6 1 6 0 1 128 5 1 3 0 7 6 3 7 105 0 4 10 8 2 6 0 4 6 105 0 1 1 29 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
9 9 0 0 9 34 9 34 32 30 26 24 22 21 19 17 13 11 0 8 0 8 18 18 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 584;
}
);
note = uni1EF8;
unicode = 7928;
},
{
glyphname = uni1EF9;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(263,104,l),
(170,548,l),
(69,548,l),
(194,6,l),
(39,-258,l),
(133,-258,l),
(606,548,l),
(512,548,l)
);
},
{
closed = 1;
nodes = (
(262,629,o),
(289,651,o),
(306,651,qs),
(319,651,o),
(336,641,o),
(350,631,qs),
(366,618,o),
(393,605,o),
(412,605,qs),
(452,605,o),
(515,659,o),
(530,709,q),
(478,709,l),
(471,688,o),
(443,666,o),
(426,666,qs),
(413,666,o),
(393,677,o),
(381,687,qs),
(364,699,o),
(340,712,o),
(321,712,qs),
(281,712,o),
(218,658,o),
(202,607,q),
(255,607,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
6 3 2 0 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 10 8 2 6 1 4 6 105 0 7 7 3 97 5 1 3 3 28 77 9 2 2 1 1 31 77 0 0 0 33 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 0 1 0 134 0 4 10 8 2 6 1 4 6 105 0 7 7 3 97 5 1 3 3 28 77 9 2 2 1 1 31 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
9 2 2 1 6 0 6 1 0 128 0 0 0 132 0 4 10 8 2 6 1 4 6 105 0 7 7 3 97 5 1 3 3 28 7 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
8 8 0 0 8 33 8 33 31 29 25 23 21 20 18 16 12 10 0 7 0 7 18 17 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 563;
}
);
note = uni1EF9;
unicode = 7929;
},
{
glyphname = endash;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(69,328,l),
(595,328,l),
(609,405,l),
(83,405,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 677;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(69,328,l),
(802,328,l),
(816,405,l),
(83,405,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 885;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = quoteleft;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,698,l),
(7,471,l),
(108,471,l),
(207,698,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 0 0 1 95 0 1 1 28 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(76,470,l),
(212,697,l),
(111,697,l),
(12,470,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
0 1 1 0 95 0 0 0 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 5 values pushed */
17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = quotesinglbase;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-26,-143,l),
(35,-143,l),
(195,126,l),
(95,126,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 186;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblleft;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(143,698,l),
(7,471,l),
(108,471,l),
(207,698,l)
);
},
{
closed = 1;
nodes = (
(271,471,l),
(370,698,l),
(306,698,l),
(170,471,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 1 0 0 1 95 2 1 1 1 28 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 3 1 0 1 0 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 386;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(248,470,l),
(384,697,l),
(283,697,l),
(184,470,l)
);
},
{
closed = 1;
nodes = (
(85,470,l),
(221,697,l),
(120,697,l),
(21,470,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 13 values pushed */
3 1 1 1 0 95 2 1 0 0 28 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 3 1 1 0 1 79 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 391;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quotedblbase;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-26,-143,l),
(35,-143,l),
(195,126,l),
(95,126,l)
);
},
{
closed = 1;
nodes = (
(233,-143,l),
(393,126,l),
(293,126,l),
(172,-143,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
2 4 2 1 0 1 133 3 1 0 0 118 0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 395;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = dagger;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,540,l),
(410,781,l),
(320,781,l),
(286,540,l),
(95,548,l),
(82,476,l),
(276,484,l),
(136,-260,l),
(226,-260,l),
(348,484,l),
(540,476,l),
(553,548,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 30 77 2 1 0 0 3 95 5 1 3 3 31 77 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
5 1 3 2 1 0 1 3 0 104 0 4 4 30 77 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 30 77 2 1 0 0 3 95 5 1 3 3 31 77 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
5 1 3 2 1 0 1 3 0 104 0 4 4 30 77 0 1 1 33 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 4 3 4 133 5 1 3 2 1 0 1 3 0 104 0 1 1 33 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 4 3 4 133 0 1 0 1 134 5 1 3 0 0 3 87 5 1 3 3 0 96 2 1 0 3 0 80 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 9 values pushed */
17 17 17 17 17 16 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = daggerdbl;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(553,548,l),
(358,540,l),
(410,781,l),
(320,781,l),
(286,540,l),
(96,548,l),
(83,476,l),
(276,484,l),
(198,37,l),
(7,46,l),
(-6,-27,l),
(188,-19,l),
(136,-260,l),
(226,-260,l),
(260,-19,l),
(451,-27,l),
(464,46,l),
(270,37,l),
(348,484,l),
(540,476,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 7 7 30 77 10 9 2 5 5 6 95 8 1 6 6 31 77 4 1 0 0 1 95 3 1 1 1 29 77 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
8 1 6 10 9 2 5 0 6 5 104 0 7 7 30 77 4 1 0 0 1 95 3 1 1 1 29 77 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 7 7 30 77 10 9 2 5 5 6 95 8 1 6 6 31 77 4 1 0 0 1 95 3 1 1 1 29 77 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
22 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
8 1 6 10 9 2 5 0 6 5 104 0 7 7 30 77 4 1 0 0 1 95 3 1 1 1 29 77 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
8 1 6 10 9 2 5 0 6 5 104 4 1 0 3 1 1 2 0 1 103 0 7 7 30 77 0 2 2 33 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 7 6 7 133 8 1 6 10 9 2 5 0 6 5 104 4 1 0 3 1 1 2 0 1 103 0 2 2 33 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 7 6 7 133 0 2 1 2 134 8 1 6 10 9 2 5 0 6 5 104 4 1 0 1 1 0 87 4 1 0 0 1 95 3 1 1 0 1 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 19 0 19 17 17 17 17 17 17 17 17 17 11 8 31 
CALL[ ]	/* CallFunction */";
};
width = 547;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = bullet;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,211,o),
(320,282,o),
(329,333,qs),
(338,385,o),
(279,456,o),
(227,456,qs),
(176,456,o),
(92,385,o),
(83,333,qs),
(74,282,o),
(132,211,o),
(183,211,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 89 0 0 0 1 97 2 1 1 0 1 81 0 0 0 11 0 10 36 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 412;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = ellipsis;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(358,82,o),
(329,118,o),
(304,118,qs),
(278,118,o),
(236,82,o),
(231,56,qs),
(226,30,o),
(256,-6,o),
(282,-6,qs),
(307,-6,o),
(348,30,o),
(353,56,qs)
);
},
{
closed = 1;
nodes = (
(546,82,o),
(517,118,o),
(492,118,qs),
(466,118,o),
(424,82,o),
(419,56,qs),
(414,30,o),
(444,-6,o),
(470,-6,qs),
(495,-6,o),
(536,30,o),
(541,56,qs)
);
},
{
closed = 1;
nodes = (
(171,82,o),
(142,118,o),
(117,118,qs),
(91,118,o),
(49,82,o),
(44,56,qs),
(39,30,o),
(69,-6,o),
(95,-6,qs),
(120,-6,o),
(161,30,o),
(166,56,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
5 3 2 1 1 0 97 4 2 2 0 0 29 0 78 36 36 36 36 36 33 6 8 28 
CALL[ ]	/* CallFunction */";
};
width = 581;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = perthousand;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(66,493,o),
(134,412,o),
(198,412,qs),
(261,412,o),
(358,493,o),
(370,560,qs),
(382,627,o),
(314,707,o),
(250,707,qs),
(186,707,o),
(90,627,o),
(78,560,qs)
);
},
{
closed = 1;
nodes = (
(274,651,o),
(305,604,o),
(297,560,qs),
(290,516,o),
(242,469,o),
(208,469,qs),
(174,469,o),
(143,516,o),
(150,560,qs),
(158,604,o),
(206,651,o),
(240,651,qs)
);
},
{
closed = 1;
nodes = (
(29,0,l),
(119,0,l),
(646,698,l),
(556,698,l)
);
},
{
closed = 1;
nodes = (
(294,71,o),
(362,-10,o),
(426,-10,qs),
(489,-10,o),
(585,71,o),
(597,138,qs),
(609,206,o),
(542,286,o),
(478,286,qs),
(414,286,o),
(318,206,o),
(306,138,qs)
);
},
{
closed = 1;
nodes = (
(501,229,o),
(533,183,o),
(525,138,qs),
(517,94,o),
(469,48,o),
(435,48,qs),
(401,48,o),
(369,94,o),
(377,138,qs),
(385,183,o),
(433,229,o),
(467,229,qs)
);
},
{
closed = 1;
nodes = (
(623,71,o),
(692,-10,o),
(755,-10,qs),
(819,-10,o),
(915,71,o),
(927,138,qs),
(939,206,o),
(871,286,o),
(807,286,qs),
(744,286,o),
(647,205,o),
(635,138,qs)
);
},
{
closed = 1;
nodes = (
(831,229,o),
(863,183,o),
(855,138,qs),
(847,94,o),
(799,48,o),
(765,48,qs),
(731,48,o),
(700,94,o),
(708,138,qs),
(716,183,o),
(763,229,o),
(797,229,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
24 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 2 0 1 6 2 1 105 10 1 6 17 13 16 3 9 8 6 9 106 14 1 3 3 0 97 15 5 2 0 0 28 77 12 1 8 8 4 97 11 7 2 4 4 29 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
0 2 0 1 6 2 1 105 10 1 6 17 13 16 3 9 8 6 9 106 14 1 3 3 0 97 15 5 2 0 0 28 77 0 4 4 29 77 12 1 8 8 7 97 11 1 7 7 29 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 58 values pushed */
15 1 5 0 3 0 5 3 128 0 2 0 1 6 2 1 105 10 1 6 17 13 16 3 9 8 6 9 106 14 1 3 3 0 97 0 0 0 28 77 0 4 4 29 77 12 1 8 8 7 97 11 1 7 7 29 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
15 1 5 0 3 0 5 3 128 0 0 14 1 3 2 0 3 105 0 2 0 1 6 2 1 105 10 1 6 17 13 16 3 9 8 6 9 106 12 1 8 11 1 7 8 7 101 0 4 4 29 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 44 values pushed */
64 64 40 40 24 24 12 12 64 75 64 74 70 68 61 59 55 53 40 51 40 50 46 44 37 35 31 29 24 27 24 27 26 25 12 23 12 22 39 36 33 18 8 25 
CALL[ ]	/* CallFunction */";
};
width = 1005;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = guilsinglleft;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(131,295,l),
(261,470,l),
(172,470,l),
(45,295,l),
(110,120,l),
(199,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 5 0 5 18 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(108,120,l),
(235,295,l),
(170,470,l),
(81,470,l),
(149,295,l),
(19,120,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 18 17 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 280;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = fraction;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-53,0,l),
(38,0,l),
(567,698,l),
(476,698,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 28 77 0 0 0 29 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 0 1 133 0 0 0 29 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 494;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = Euro;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,323,o),
(99,297,q),
(16,297,l),
(4,233,l),
(101,233,l),
(116,124,o),
(273,-6,o),
(391,-6,qs),
(504,-6,o),
(693,103,o),
(749,203,q),
(641,203,l),
(601,142,o),
(481,76,o),
(406,76,qs),
(325,76,o),
(214,159,o),
(198,233,q),
(433,233,l),
(445,297,l),
(194,297,l),
(194,320,o),
(199,349,qs),
(203,374,o),
(210,398,q),
(462,398,l),
(474,461,l),
(238,461,l),
(278,537,o),
(418,623,o),
(502,623,qs),
(578,623,o),
(674,557,o),
(693,495,q),
(801,495,l),
(780,596,o),
(630,706,o),
(517,706,qs),
(438,706,o),
(292,645,o),
(175,534,o),
(141,461,q),
(45,461,l),
(33,398,l),
(116,398,l),
(109,374,o),
(105,349,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
44 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 57 values pushed */
0 3 4 1 4 3 1 128 0 10 8 9 8 10 9 128 5 1 1 6 1 0 7 1 0 103 13 1 7 12 1 8 10 7 8 103 0 4 4 2 97 0 2 2 28 77 0 9 9 11 97 0 11 11 29 11 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 3 4 1 4 3 1 128 0 10 8 9 8 10 9 128 0 2 0 4 3 2 4 105 5 1 1 6 1 0 7 1 0 103 13 1 7 12 1 8 10 7 8 103 0 9 9 11 97 0 11 11 29 11 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
44 43 42 41 39 37 35 34 32 30 17 20 17 18 34 18 35 17 17 14 8 31 
CALL[ ]	/* CallFunction */";
};
width = 811;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = uni20BA;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(344,702,l),
(250,702,l),
(210,475,l),
(40,434,l),
(29,371,l),
(199,410,l),
(181,310,l),
(14,271,l),
(3,205,l),
(170,244,l),
(127,4,l),
(221,-18,o),
(295,-18,qs),
(485,-18,o),
(696,197,o),
(735,417,q),
(642,417,l),
(612,244,o),
(452,68,o),
(310,68,qs),
(265,68,o),
(234,75,q),
(268,267,l),
(448,309,l),
(460,375,l),
(279,333,l),
(297,433,l),
(482,476,l),
(493,542,l),
(309,498,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
29 26 25 2 1 0 6 1 3 24 23 22 21 20 19 7 6 5 4 3 11 0 1 18 1 2 0 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 1 3 0 3 1 0 128 0 3 3 28 77 0 0 0 2 97 0 2 2 29 2 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 1 3 0 3 1 0 128 0 0 0 2 0 2 101 0 3 3 28 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 3 1 3 133 0 1 0 1 133 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
26 34 18 40 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 830;
}
);
note = uni20BA;
unicode = 8378;
},
{
glyphname = uni20BD;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(262,625,l),
(396,625,ls),
(472,625,o),
(532,556,o),
(520,493,qs),
(510,432,o),
(425,363,o),
(350,363,qs),
(216,363,l)
);
},
{
closed = 1;
nodes = (
(26,291,l),
(112,291,l),
(95,195,l),
(9,195,l),
(-4,122,l),
(82,122,l),
(61,0,l),
(152,0,l),
(173,122,l),
(391,122,l),
(404,195,l),
(186,195,l),
(203,291,l),
(337,291,ls),
(459,291,o),
(598,406,o),
(613,493,qs),
(629,583,o),
(526,697,o),
(408,697,qs),
(183,697,l),
(125,363,l),
(39,363,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
12 10 11 3 0 9 1 3 4 0 3 103 8 1 4 7 1 5 6 4 5 103 0 1 1 2 95 0 2 2 28 77 0 6 6 29 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 2 0 1 0 2 1 103 12 10 11 3 0 9 1 3 4 0 3 103 8 1 4 7 1 5 6 4 5 103 0 6 6 29 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
9 9 1 0 9 31 9 31 30 29 28 27 26 25 24 23 22 21 20 19 18 16 12 10 7 5 0 8 1 8 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 624;
}
);
note = uni20BD;
unicode = 8381;
},
{
glyphname = uni2113;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(12,0,l),
(103,0,l),
(233,740,l),
(142,740,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 246;
}
);
note = uni2113;
unicode = 8467;
},
{
glyphname = trademark;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(46,648,l),
(132,648,l),
(79,352,l),
(151,352,l),
(203,648,l),
(288,648,l),
(298,704,l),
(56,704,l)
);
},
{
closed = 1;
nodes = (
(358,352,l),
(404,611,l),
(466,352,l),
(517,352,l),
(671,607,l),
(627,352,l),
(694,352,l),
(756,704,l),
(668,704,l),
(509,437,l),
(447,704,l),
(354,704,l),
(292,352,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */
18 15 10 3 1 0 1 76 8 7 6 3 1 0 1 134 5 4 9 3 3 0 0 3 87 5 4 9 3 3 3 0 95 2 1 0 3 0 79 0 0 20 19 17 16 14 13 12 11 9 8 0 7 0 7 17 17 17 10 6 25 
CALL[ ]	/* CallFunction */";
};
width = 781;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = uni2126;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(25,261,o),
(74,114,o),
(136,72,q),
(3,72,l),
(-9,0,l),
(266,0,l),
(279,75,l),
(196,97,o),
(113,240,o),
(131,344,qs),
(146,427,o),
(235,554,o),
(366,623,o),
(441,623,qs),
(515,623,o),
(621,554,o),
(667,428,o),
(652,344,qs),
(634,240,o),
(501,97,o),
(410,75,q),
(397,0,l),
(671,0,l),
(683,72,l),
(550,72,l),
(629,114,o),
(730,261,o),
(745,350,qs),
(763,452,o),
(698,615,o),
(553,706,o),
(455,706,qs),
(358,706,o),
(181,615,o),
(58,452,o),
(40,350,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
28 14 2 1 3 1 76 0 0 0 3 1 0 3 105 5 1 1 2 2 1 87 5 1 1 1 2 95 4 1 2 1 2 79 17 23 39 17 22 34 6 6 28 
CALL[ ]	/* CallFunction */";
};
width = 787;
}
);
note = uni2126;
unicode = 8486;
},
{
glyphname = estimated;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(541,117,o),
(410,54,o),
(337,54,qs),
(268,54,o),
(178,100,o),
(147,147,q),
(176,315,l),
(708,315,l),
(719,376,ls),
(734,461,o),
(681,610,o),
(545,700,o),
(442,700,qs),
(338,700,o),
(170,603,o),
(63,435,o),
(44,331,qs),
(26,225,o),
(87,72,o),
(229,-7,o),
(327,-7,qs),
(490,-7,o),
(648,137,q),
(616,181,l)
);
},
{
closed = 1;
nodes = (
(188,379,l),
(217,544,l),
(259,592,o),
(369,640,o),
(432,640,qs),
(493,640,o),
(582,596,o),
(607,555,q),
(576,379,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
30 24 2 5 4 23 17 2 3 2 2 76 0 1 0 4 5 1 4 105 0 5 0 2 3 5 2 103 0 3 0 0 3 89 0 3 3 0 97 0 0 3 0 81 19 37 35 20 38 33 6 6 28 
CALL[ ]	/* CallFunction */";
};
width = 761;
}
);
note = estimated;
unicode = 8494;
},
{
glyphname = partialdiff;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(410,256,o),
(341,138,o),
(245,68,o),
(193,68,qs),
(142,68,o),
(93,146,o),
(107,223,qs),
(120,295,o),
(186,413,o),
(280,481,o),
(332,481,qs),
(387,481,o),
(435,401,o),
(422,324,qs)
);
},
{
closed = 1;
nodes = (
(-6,109,o),
(83,-10,o),
(169,-10,qs),
(252,-10,o),
(405,94,o),
(518,285,o),
(540,412,qs),
(568,567,o),
(475,740,o),
(364,740,qs),
(317,740,o),
(269,726,q),
(259,673,l),
(305,685,o),
(341,685,qs),
(417,685,o),
(471,568,o),
(456,468,q),
(448,516,o),
(390,558,o),
(343,558,qs),
(267,558,o),
(127,465,o),
(29,311,o),
(14,223,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
26 1 3 4 25 1 2 3 20 1 1 0 3 76 0 4 0 3 2 4 3 105 0 2 0 0 1 2 0 105 0 1 5 5 1 89 0 1 1 5 97 0 5 1 5 81 37 35 36 38 37 33 6 6 28 
CALL[ ]	/* CallFunction */";
};
width = 572;
}
);
note = partialdiff;
unicode = 8706;
},
{
glyphname = uni2206;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-29,71,l),
(-41,0,l),
(599,0,l),
(611,71,l),
(439,693,l),
(363,693,l)
);
},
{
closed = 1;
nodes = (
(383,589,l),
(518,71,l),
(64,71,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
7 1 2 1 1 76 4 1 2 2 1 75 3 1 1 2 1 133 4 1 2 0 0 2 87 4 1 2 2 0 95 0 0 2 0 79 6 6 0 0 6 8 6 8 0 5 0 5 18 5 6 23 
CALL[ ]	/* CallFunction */";
};
width = 680;
}
);
note = uni2206;
unicode = 8710;
},
{
glyphname = product;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,626,l),
(167,626,l),
(56,0,l),
(147,0,l),
(258,626,l),
(579,626,l),
(468,0,l),
(558,0,l),
(669,626,l),
(748,626,l),
(761,698,l),
(101,698,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
3 1 1 0 1 134 6 1 5 0 0 5 87 6 1 5 5 0 95 4 2 2 0 5 0 79 0 0 0 11 0 11 17 17 17 17 17 7 6 27 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
note = product;
unicode = 8719;
},
{
glyphname = summation;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(88,588,l),
(300,315,l),
(-8,43,l),
(-27,-63,l),
(362,-63,l),
(375,8,l),
(62,8,l),
(377,282,l),
(390,353,l),
(171,622,l),
(483,622,l),
(496,693,l),
(107,693,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
11 10 9 4 3 5 1 0 1 76 4 1 3 0 0 1 3 0 103 0 1 2 2 1 87 0 1 1 2 95 0 2 1 2 79 0 0 0 12 0 12 17 19 17 5 6 25 
CALL[ ]	/* CallFunction */";
};
width = 457;
}
);
note = summation;
unicode = 8721;
},
{
glyphname = minus;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(69,328,l),
(468,328,l),
(482,405,l),
(83,405,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 551;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = uni2215;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-45,-170,l),
(45,-170,l),
(515,942,l),
(424,942,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 476;
}
);
note = uni2215;
unicode = 8725;
},
{
glyphname = uni2219;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(174,367,o),
(145,403,o),
(120,403,qs),
(94,403,o),
(52,367,o),
(47,341,qs),
(42,315,o),
(72,279,o),
(98,279,qs),
(123,279,o),
(164,315,o),
(169,341,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 36 33 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 212;
}
);
note = uni2219;
unicode = 8729;
},
{
glyphname = radical;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(202,-44,l),
(854,869,l),
(787,869,l),
(215,67,l),
(137,269,l),
(-21,185,l),
(-1,138,l),
(70,176,l),
(157,-44,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
4 3 2 1 4 1 0 1 76 0 0 1 0 133 0 1 1 118 17 21 2 6 24 
CALL[ ]	/* CallFunction */";
};
width = 788;
}
);
note = radical;
unicode = 8730;
},
{
glyphname = infinity;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,265,o),
(412,307,o),
(387,348,q),
(415,385,o),
(485,429,o),
(520,429,qs),
(557,429,o),
(594,386,o),
(587,348,qs),
(580,309,o),
(527,265,o),
(490,265,qs)
);
},
{
closed = 1;
nodes = (
(139,266,o),
(102,309,o),
(109,347,qs),
(116,386,o),
(169,430,o),
(206,430,qs),
(237,430,o),
(280,387,o),
(306,344,q),
(279,308,o),
(210,266,o),
(176,266,qs)
);
},
{
closed = 1;
nodes = (
(21,278,o),
(91,200,o),
(157,199,qs),
(209,198,o),
(302,252,o),
(336,296,q),
(366,250,o),
(433,199,o),
(483,199,qs),
(549,199,o),
(652,280,o),
(664,348,qs),
(676,416,o),
(604,495,o),
(539,496,qs),
(486,497,o),
(392,441,o),
(359,396,q),
(330,443,o),
(263,496,o),
(213,496,qs),
(147,496,o),
(45,415,o),
(33,347,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
41 29 14 8 4 1 0 1 76 5 1 4 2 1 0 1 4 0 105 9 3 8 3 1 6 6 1 89 9 3 8 3 1 1 6 97 7 1 6 1 6 81 12 12 0 0 45 43 39 37 33 31 27 25 12 23 12 22 18 16 0 11 0 10 36 10 6 23 
CALL[ ]	/* CallFunction */";
};
width = 696;
}
);
note = infinity;
unicode = 8734;
},
{
glyphname = integral;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-41,-93,o),
(-71,-122,o),
(-97,-122,qs),
(-117,-122,l),
(-137,-197,l),
(-114,-197,ls),
(-45,-197,o),
(40,-131,o),
(60,-57,qs),
(300,779,ls),
(310,813,o),
(342,842,o),
(368,842,qs),
(385,842,l),
(406,918,l),
(384,918,ls),
(316,918,o),
(230,852,o),
(209,779,qs),
(-31,-57,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 3 0 1 105 0 3 2 2 3 89 0 3 3 2 97 0 2 3 2 81 33 37 33 34 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 261;
}
);
note = integral;
unicode = 8747;
},
{
glyphname = approxequal;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(82,231,o),
(126,266,o),
(152,266,qs),
(171,266,o),
(198,251,o),
(220,236,qs),
(246,218,o),
(282,200,o),
(308,200,qs),
(425,200,o),
(476,346,q),
(408,346,l),
(399,316,o),
(356,281,o),
(330,281,qs),
(313,281,o),
(284,295,o),
(263,310,qs),
(239,328,o),
(199,347,o),
(172,347,qs),
(57,347,o),
(6,201,q),
(73,201,l)
);
},
{
closed = 1;
nodes = (
(119,442,o),
(163,477,o),
(189,477,qs),
(208,477,o),
(236,462,o),
(257,447,qs),
(283,429,o),
(320,411,o),
(346,411,qs),
(463,411,o),
(513,557,q),
(445,557,l),
(436,527,o),
(393,492,o),
(367,492,qs),
(350,492,o),
(321,506,o),
(300,521,qs),
(276,539,o),
(237,558,o),
(210,558,qs),
(95,558,o),
(43,412,q),
(110,412,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
8 1 6 0 10 9 6 10 105 0 7 13 11 2 9 0 7 9 106 0 1 4 3 1 89 2 1 0 0 4 3 0 4 105 0 1 1 3 98 12 5 2 3 1 3 82 24 24 0 0 24 47 24 47 45 43 39 37 36 35 33 31 27 25 0 23 0 23 36 33 18 36 33 14 6 27 
CALL[ ]	/* CallFunction */";
};
width = 519;
}
);
note = approxequal;
unicode = 8776;
},
{
glyphname = notequal;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(75,122,l),
(144,122,l),
(245,220,l),
(595,220,l),
(609,297,l),
(325,297,l),
(467,435,l),
(633,435,l),
(647,512,l),
(547,512,l),
(648,610,l),
(578,610,l),
(477,512,l),
(127,512,l),
(113,435,l),
(397,435,l),
(256,297,l),
(89,297,l),
(75,220,l),
(176,220,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 2 2 3 112 0 8 7 7 8 113 4 1 2 5 1 1 0 2 1 104 6 1 0 7 7 0 87 6 1 0 0 7 95 10 9 2 7 0 7 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 3 2 3 133 0 8 7 8 134 4 1 2 5 1 1 0 2 1 104 6 1 0 7 7 0 87 6 1 0 0 7 95 10 9 2 7 0 7 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 19 0 19 17 17 17 17 17 17 17 17 17 11 6 31 
CALL[ ]	/* CallFunction */";
};
width = 706;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = lessequal;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(34,86,l),
(389,86,l),
(401,155,l),
(46,155,l)
);
},
{
closed = 1;
nodes = (
(293,212,l),
(413,212,l),
(207,404,l),
(481,595,l),
(361,595,l),
(85,403,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
9 6 2 3 2 1 76 0 2 3 2 133 0 3 1 3 133 4 1 1 0 0 1 87 4 1 1 1 0 95 0 0 1 0 79 0 0 8 7 5 4 0 3 0 3 17 5 6 23 
CALL[ ]	/* CallFunction */";
};
width = 511;
}
);
note = lessequal;
unicode = 8804;
},
{
glyphname = greaterequal;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,212,l),
(448,403,l),
(240,595,l),
(120,595,l),
(325,404,l),
(52,212,l)
);
},
{
closed = 1;
nodes = (
(387,86,l),
(399,155,l),
(44,155,l),
(32,86,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
3 1 1 0 1 76 0 0 1 0 133 0 1 2 1 133 0 2 3 3 2 87 0 2 2 3 95 0 3 2 3 79 17 17 18 17 4 6 26 
CALL[ ]	/* CallFunction */";
};
width = 511;
}
);
note = greaterequal;
unicode = 8805;
},
{
glyphname = lozenge;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(36,350,l),
(234,108,l),
(518,350,l),
(321,591,l)
);
},
{
closed = 1;
nodes = (
(303,493,l),
(420,350,l),
(252,206,l),
(135,350,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
6 4 3 1 2 50 
CALL[ ]	/* CallFunction */";
};
width = 554;
}
);
note = lozenge;
unicode = 9674;
},
{
glyphname = fi;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(27,0,l),
(118,0,l),
(201,473,l),
(421,473,l),
(338,0,l),
(429,0,l),
(525,548,l),
(214,548,l),
(221,587,ls),
(231,641,o),
(288,688,o),
(348,688,q),
(361,764,l),
(256,764,o),
(146,679,o),
(130,587,qs),
(123,548,l),
(53,548,l),
(40,473,l),
(110,473,l)
);
},
{
closed = 1;
nodes = (
(522,637,o),
(563,673,o),
(568,699,qs),
(572,725,o),
(544,761,o),
(518,761,qs),
(492,761,o),
(450,725,o),
(446,699,qs),
(441,673,o),
(470,637,o),
(496,637,qs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 2 2 1 97 8 1 1 1 30 77 11 1 9 9 1 97 8 1 1 1 30 77 10 7 2 5 5 0 95 3 1 0 0 31 77 6 1 4 4 29 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
3 1 0 10 7 2 5 4 0 5 103 0 2 2 1 97 8 1 1 1 30 77 11 1 9 9 1 97 8 1 1 1 30 77 6 1 4 4 29 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 2 9 1 2 89 8 1 1 11 1 9 0 1 9 105 3 1 0 10 7 2 5 4 0 5 103 6 1 4 4 29 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
20 20 0 0 20 31 20 30 26 24 0 19 0 19 17 17 17 19 17 19 17 12 8 29 
CALL[ ]	/* CallFunction */";
};
width = 571;
}
);
note = fi;
unicode = 64257;
},
{
glyphname = fl;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(27,0,l),
(118,0,l),
(201,473,l),
(316,473,l),
(329,548,l),
(214,548,l),
(221,587,ls),
(231,641,o),
(288,688,o),
(348,688,q),
(361,764,l),
(256,764,o),
(146,679,o),
(130,587,qs),
(123,548,l),
(52,548,l),
(39,473,l),
(110,473,l)
);
},
{
closed = 1;
nodes = (
(339,0,l),
(430,0,l),
(560,740,l),
(469,740,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
10 1 8 8 30 77 0 2 2 1 97 0 1 1 30 77 9 6 2 4 4 0 95 3 1 0 0 31 77 7 1 5 5 29 5 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
31 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
3 1 0 9 6 2 4 5 0 4 103 0 2 2 1 97 0 1 1 30 77 10 1 8 8 5 95 7 1 5 5 29 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 1 0 2 0 1 2 105 3 1 0 9 6 2 4 5 0 4 103 10 1 8 8 5 95 7 1 5 5 29 5 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
18 18 0 0 18 21 18 21 20 19 0 17 0 17 17 17 19 17 19 17 11 8 28 
CALL[ ]	/* CallFunction */";
};
width = 574;
}
);
note = fl;
unicode = 64258;
},
{
glyphname = exclam.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(72,197,l),
(147,197,l),
(247,699,l),
(150,699,l)
);
},
{
closed = 1;
nodes = (
(129,0,l),
(149,112,l),
(40,112,l),
(20,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 2 1 2 0 1 131 4 1 1 1 132 0 2 2 3 95 0 3 3 21 2 78 0 0 7 6 5 4 0 3 0 3 17 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 273;
}
);
note = exclam.ss01;
},
{
glyphname = comma.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(36,2,l),
(90,2,l),
(87,-17,ls),
(76,-79,o),
(25,-79,q),
(17,-125,l),
(128,-125,o),
(150,1,qs),
(156,37,o),
(153,94,q),
(52,94,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 0 0 1 2 0 1 109 4 1 3 3 2 95 0 2 2 21 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 0 0 1 2 0 1 109 0 2 3 3 2 91 0 2 2 3 95 4 1 3 2 3 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 12 values pushed */
0 0 0 10 0 10 18 17 19 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 187;
}
);
note = comma.ss01;
},
{
glyphname = period.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(38,0,l),
(147,0,l),
(167,112,l),
(58,112,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 0 95 0 0 0 21 1 78 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 205;
}
);
note = period.ss01;
},
{
glyphname = colon.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(12,0,l),
(122,0,l),
(142,112,l),
(32,112,l)
);
},
{
closed = 1;
nodes = (
(198,428,l),
(218,539,l),
(108,539,l),
(88,428,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
4 1 1 1 0 95 0 0 0 21 77 0 3 3 2 95 0 2 2 20 2 78 0 0 7 6 5 4 0 3 0 3 17 5 7 23 
CALL[ ]	/* CallFunction */";
};
width = 238;
}
);
note = colon.ss01;
},
{
glyphname = semicolon.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-1,2,l),
(53,2,l),
(50,-17,ls),
(39,-79,o),
(-12,-79,q),
(-21,-125,l),
(90,-125,o),
(113,1,qs),
(119,37,o),
(116,94,q),
(15,94,l)
);
},
{
closed = 1;
nodes = (
(72,427,l),
(181,427,l),
(201,539,l),
(92,539,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 2 0 1 109 6 1 3 3 2 95 0 2 2 21 77 0 4 4 5 95 7 1 5 5 20 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
0 0 0 1 2 0 1 109 0 2 6 1 3 4 2 3 107 0 4 4 5 95 7 1 5 5 20 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
11 11 0 0 11 14 11 14 13 12 0 10 0 10 18 17 19 8 7 25 
CALL[ ]	/* CallFunction */";
};
width = 189;
}
);
note = semicolon.ss01;
},
{
glyphname = question.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(81,0,l),
(190,0,l),
(210,112,l),
(101,112,l)
);
},
{
closed = 1;
nodes = (
(160,563,o),
(243,630,o),
(305,630,qs),
(366,630,o),
(425,560,o),
(415,500,qs),
(400,417,o),
(278,357,o),
(179,357,qs),
(150,357,l),
(122,199,l),
(208,199,l),
(225,294,l),
(336,294,o),
(483,395,o),
(502,500,qs),
(518,594,o),
(416,706,o),
(317,706,qs),
(252,706,o),
(144,656,o),
(74,565,o),
(64,505,q),
(150,505,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 4 1 3 3 4 117 9 1 7 5 6 5 7 6 131 0 3 0 5 7 3 5 110 0 6 0 2 6 2 101 8 1 1 1 0 95 0 0 0 21 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 4 1 3 1 4 3 131 9 1 7 5 6 5 7 6 131 0 3 0 5 7 3 5 110 0 6 0 2 6 2 101 8 1 1 1 0 95 0 0 0 21 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
4 4 0 0 4 27 4 27 25 23 19 17 16 15 14 13 9 7 0 3 0 3 17 10 7 23 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = question.ss01;
},
{
glyphname = exclamdown.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(126,357,l),
(201,357,l),
(123,-145,l),
(26,-145,l)
);
},
{
closed = 1;
nodes = (
(144,554,l),
(253,554,l),
(233,442,l),
(124,442,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 1 0 1 136 0 0 3 0 136 5 1 3 3 2 95 0 2 2 20 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 29 values pushed */
4 1 1 0 1 136 0 0 3 0 136 5 1 3 2 2 3 91 5 1 3 3 2 95 0 2 3 2 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23 
CALL[ ]	/* CallFunction */";
};
width = 273;
}
);
note = exclamdown.ss01;
},
{
glyphname = periodcentered.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(38,287,l),
(147,287,l),
(167,399,l),
(58,399,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 91 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23 
CALL[ ]	/* CallFunction */";
};
width = 205;
}
);
note = periodcentered.ss01;
},
{
glyphname = questiondown.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(443,551,l),
(334,551,l),
(314,439,l),
(423,439,l)
);
},
{
closed = 1;
nodes = (
(364,-12,o),
(281,-79,o),
(219,-79,qs),
(158,-79,o),
(99,-9,o),
(109,51,qs),
(124,134,o),
(246,194,o),
(345,194,qs),
(374,194,l),
(402,352,l),
(316,352,l),
(299,257,l),
(188,257,o),
(41,156,o),
(22,51,qs),
(6,-43,o),
(108,-155,o),
(207,-155,qs),
(272,-155,o),
(380,-105,o),
(450,-14,o),
(460,46,q),
(374,46,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
9 1 7 6 5 6 7 5 131 0 4 3 1 3 4 117 0 2 0 6 7 2 6 109 0 5 0 3 4 5 3 109 8 1 1 1 0 95 0 0 0 20 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
9 1 7 6 5 6 7 5 131 0 4 3 1 3 4 1 131 0 2 0 6 7 2 6 109 0 5 0 3 4 5 3 109 8 1 1 1 0 95 0 0 0 20 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
9 1 7 6 5 6 7 5 131 0 4 3 1 3 4 1 131 0 2 0 6 7 2 6 109 0 5 0 3 4 5 3 109 8 1 1 0 0 1 91 8 1 1 1 0 95 0 0 1 0 79 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
4 4 0 0 4 27 4 27 25 23 19 17 16 15 14 13 9 7 0 3 0 3 17 10 7 23 
CALL[ ]	/* CallFunction */";
};
width = 524;
}
);
note = questiondown.ss01;
},
{
glyphname = divide.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(71,326,l),
(581,326,l),
(595,406,l),
(85,406,l)
);
},
{
closed = 1;
nodes = (
(341,97,l),
(360,210,l),
(250,210,l),
(231,97,l)
);
},
{
closed = 1;
nodes = (
(416,523,l),
(435,635,l),
(325,635,l),
(306,523,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
0 3 0 2 0 3 2 107 0 0 6 1 1 5 0 1 107 0 5 4 4 5 91 0 5 5 4 95 0 4 5 4 79 0 0 11 10 9 8 7 6 5 4 0 3 0 3 17 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 657;
}
);
note = divide.ss01;
},
{
glyphname = uni02BC.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(33,699,l),
(82,699,l),
(78,676,ls),
(73,649,o),
(45,622,o),
(21,622,q),
(14,580,l),
(115,580,o),
(135,693,qs),
(143,738,o),
(139,785,q),
(48,785,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 0 2 1 3 2 103 0 1 0 0 1 89 0 1 1 0 97 0 0 1 0 81 0 0 0 11 0 11 19 17 19 5 6 25 
CALL[ ]	/* CallFunction */";
};
width = 162;
}
);
note = uni02BC.ss01;
},
{
glyphname = quoteleft.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(129,666,l),
(80,666,l),
(84,689,ls),
(94,743,o),
(141,743,q),
(148,785,l),
(47,785,o),
(27,672,qs),
(20,633,o),
(23,580,q),
(114,580,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 1 3 0 2 1 3 2 107 0 1 0 0 1 93 0 1 1 0 97 0 0 1 0 81 0 0 0 10 0 10 18 17 19 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 162;
}
);
note = quoteleft.ss01;
},
{
glyphname = quoteright.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(33,699,l),
(82,699,l),
(78,676,ls),
(73,649,o),
(45,622,o),
(21,622,q),
(14,580,l),
(115,580,o),
(135,693,qs),
(143,738,o),
(139,785,q),
(48,785,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 0 0 1 2 0 1 109 0 2 3 3 2 91 0 2 2 3 95 4 1 3 2 3 79 0 0 0 11 0 11 19 17 19 5 7 25 
CALL[ ]	/* CallFunction */";
};
width = 162;
}
);
note = quoteright.ss01;
},
{
glyphname = quotedblleft.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(264,666,l),
(215,666,l),
(219,689,ls),
(229,743,o),
(277,743,q),
(284,785,l),
(182,785,o),
(162,672,qs),
(155,633,o),
(158,580,q),
(249,580,l)
);
},
{
closed = 1;
nodes = (
(129,666,l),
(80,666,l),
(84,689,ls),
(94,743,o),
(141,743,q),
(148,785,l),
(47,785,o),
(27,672,qs),
(20,633,o),
(23,580,q),
(114,580,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
9 7 8 3 3 6 1 2 1 3 2 107 5 1 1 0 0 1 93 5 1 1 1 0 97 4 1 0 1 0 81 11 11 0 0 11 21 11 21 20 19 17 16 15 14 0 10 0 10 18 17 19 10 7 25 
CALL[ ]	/* CallFunction */";
};
width = 297;
}
);
note = quotedblleft.ss01;
},
{
glyphname = quotedblright.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(169,699,l),
(218,699,l),
(214,676,ls),
(204,622,o),
(156,622,q),
(149,580,l),
(251,580,o),
(271,693,qs),
(278,733,o),
(275,785,q),
(184,785,l)
);
},
{
closed = 1;
nodes = (
(33,699,l),
(82,699,l),
(78,676,ls),
(73,649,o),
(45,622,o),
(21,622,q),
(14,580,l),
(115,580,o),
(135,693,qs),
(143,738,o),
(139,785,q),
(48,785,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
4 1 0 5 1 1 2 0 1 109 6 1 2 3 3 2 91 6 1 2 2 3 95 9 7 8 3 3 2 3 79 11 11 0 0 11 22 11 22 21 20 17 16 15 14 0 10 0 10 18 17 19 10 7 25 
CALL[ ]	/* CallFunction */";
};
width = 297;
}
);
note = quotedblright.ss01;
},
{
glyphname = ellipsis.ss01;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(38,0,l),
(147,0,l),
(167,112,l),
(58,112,l)
);
},
{
closed = 1;
nodes = (
(335,0,l),
(355,112,l),
(246,112,l),
(226,0,l)
);
},
{
closed = 1;
nodes = (
(524,0,l),
(544,112,l),
(435,112,l),
(415,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 2 6 3 1 1 0 95 5 3 2 0 0 21 1 78 0 0 11 10 9 8 7 6 5 4 0 3 0 3 17 7 7 23 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = ellipsis.ss01;
},
{
glyphname = a.ss02;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(472,0,l),
(528,321,ls),
(541,395,o),
(501,501,o),
(408,557,o),
(343,557,qs),
(244,557,o),
(100,447,o),
(72,357,q),
(161,357,l),
(181,414,o),
(267,478,o),
(325,478,qs),
(389,478,o),
(448,396,o),
(437,325,q),
(268,325,ls),
(162,325,o),
(35,228,o),
(22,153,qs),
(13,106,o),
(47,32,o),
(124,-10,o),
(177,-10,qs),
(243,-10,o),
(364,52,o),
(397,99,q),
(380,0,l)
);
},
{
closed = 1;
nodes = (
(122,201,o),
(193,251,o),
(255,251,qs),
(424,251,l),
(422,242,ls),
(413,188,o),
(346,110,o),
(255,70,o),
(209,70,qs),
(158,70,o),
(108,119,o),
(115,159,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
0 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 5 5 21 77 0 6 6 0 97 0 0 0 21 77 0 2 2 4 97 0 4 4 20 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 101 0 5 5 21 77 0 6 6 0 97 0 0 0 21 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 34 20 34 18 34 37 34 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = a.ss02;
},
{
glyphname = aacute.ss02;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(271,657,l),
(259,589,l),
(492,703,l),
(506,782,l)
);
},
{
closed = 1;
nodes = (
(452,0,l),
(509,321,ls),
(522,395,o),
(481,501,o),
(388,557,o),
(323,557,qs),
(224,557,o),
(80,447,o),
(52,357,q),
(141,357,l),
(161,414,o),
(247,478,o),
(305,478,qs),
(369,478,o),
(428,396,o),
(417,325,q),
(248,325,ls),
(142,325,o),
(15,228,o),
(2,153,qs),
(-6,106,o),
(28,32,o),
(104,-10,o),
(157,-10,qs),
(223,-10,o),
(344,52,o),
(377,99,q),
(360,0,l)
);
},
{
closed = 1;
nodes = (
(102,201,o),
(173,251,o),
(235,251,qs),
(404,251,l),
(403,242,ls),
(393,188,o),
(326,110,o),
(235,70,o),
(189,70,qs),
(138,70,o),
(88,119,o),
(95,159,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 2 1 0 4 0 74 4 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 5 5 21 77 0 6 6 0 97 0 0 0 21 77 0 2 2 4 97 0 4 4 20 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 101 0 5 5 21 77 0 6 6 0 97 0 0 0 21 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 34 20 34 18 34 37 38 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = aacute.ss02;
},
{
glyphname = abreve.ss02;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(494,750,l),
(487,712,o),
(438,673,o),
(392,673,qs),
(345,673,o),
(310,712,o),
(317,750,q),
(263,750,l),
(260,733,ls),
(250,675,o),
(313,602,o),
(380,602,qs),
(447,602,o),
(535,675,o),
(545,732,qs),
(548,750,l)
);
},
{
closed = 1;
nodes = (
(455,0,l),
(511,321,ls),
(524,395,o),
(484,501,o),
(391,557,o),
(326,557,qs),
(227,557,o),
(83,447,o),
(55,357,q),
(144,357,l),
(164,414,o),
(250,478,o),
(308,478,qs),
(372,478,o),
(431,396,o),
(420,325,q),
(251,325,ls),
(145,325,o),
(18,228,o),
(5,153,qs),
(-4,106,o),
(30,32,o),
(107,-10,o),
(160,-10,qs),
(226,-10,o),
(347,52,o),
(380,99,q),
(363,0,l)
);
},
{
closed = 1;
nodes = (
(105,201,o),
(176,251,o),
(238,251,qs),
(407,251,l),
(405,242,ls),
(396,188,o),
(329,110,o),
(238,70,o),
(192,70,qs),
(141,70,o),
(91,119,o),
(98,159,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
16 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 56 values pushed */
0 7 5 6 5 7 6 131 3 1 1 2 1 137 0 11 0 5 7 11 5 107 0 0 0 2 1 0 2 109 0 9 9 21 77 0 10 10 4 97 0 4 4 21 77 0 6 6 8 97 0 8 8 20 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 7 5 6 5 7 6 131 3 1 1 2 1 137 0 11 0 5 7 11 5 107 0 6 0 8 0 6 8 109 0 0 0 2 1 0 2 109 0 9 9 21 77 0 10 10 4 97 0 4 4 21 10 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
53 51 47 45 43 42 34 18 34 37 35 18 34 19 34 12 7 31 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = abreve.ss02;
},
{
glyphname = acircumflex.ss02;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(530,669,l),
(406,752,l),
(253,669,l),
(240,597,l),
(394,682,l),
(517,597,l)
);
},
{
closed = 1;
nodes = (
(455,0,l),
(511,321,ls),
(524,395,o),
(484,501,o),
(391,557,o),
(326,557,qs),
(227,557,o),
(82,447,o),
(55,357,q),
(144,357,l),
(164,414,o),
(250,478,o),
(308,478,qs),
(372,478,o),
(430,396,o),
(420,325,q),
(251,325,ls),
(145,325,o),
(18,228,o),
(5,153,qs),
(-4,106,o),
(30,32,o),
(107,-10,o),
(160,-10,qs),
(226,-10,o),
(347,52,o),
(380,99,q),
(363,0,l)
);
},
{
closed = 1;
nodes = (
(105,201,o),
(176,251,o),
(238,251,qs),
(407,251,l),
(405,242,ls),
(396,188,o),
(329,110,o),
(238,70,o),
(192,70,qs),
(141,70,o),
(91,119,o),
(98,159,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
5 4 3 2 1 5 0 74 6 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 5 5 21 77 0 6 6 0 97 0 0 0 21 77 0 2 2 4 97 0 4 4 20 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 101 0 5 5 21 77 0 6 6 0 97 0 0 0 21 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 34 20 34 18 34 37 40 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = acircumflex.ss02;
},
{
glyphname = adieresis.ss02;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(325,622,o),
(362,652,o),
(366,674,qs),
(370,696,o),
(344,727,o),
(323,727,qs),
(301,727,o),
(265,696,o),
(261,674,qs),
(257,652,o),
(282,622,o),
(304,622,qs)
);
},
{
closed = 1;
nodes = (
(488,622,o),
(525,652,o),
(529,674,qs),
(533,696,o),
(507,727,o),
(485,727,qs),
(463,727,o),
(428,696,o),
(424,674,qs),
(420,652,o),
(444,622,o),
(466,622,qs)
);
},
{
closed = 1;
nodes = (
(457,0,l),
(513,321,ls),
(526,395,o),
(486,501,o),
(393,557,o),
(328,557,qs),
(229,557,o),
(85,447,o),
(57,357,q),
(146,357,l),
(166,414,o),
(252,478,o),
(310,478,qs),
(374,478,o),
(433,396,o),
(422,325,q),
(253,325,ls),
(147,325,o),
(20,228,o),
(7,153,qs),
(-2,106,o),
(32,32,o),
(109,-10,o),
(162,-10,qs),
(228,-10,o),
(349,52,o),
(382,99,q),
(365,0,l)
);
},
{
closed = 1;
nodes = (
(107,201,o),
(178,251,o),
(240,251,qs),
(409,251,l),
(407,242,ls),
(398,188,o),
(331,110,o),
(240,70,o),
(194,70,qs),
(143,70,o),
(93,119,o),
(100,159,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
24 1 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 53 values pushed */
0 7 5 6 5 7 6 131 0 11 0 5 7 11 5 107 13 3 12 3 1 2 1 0 1 0 101 0 9 9 21 77 0 10 10 4 97 0 4 4 21 77 0 6 6 8 97 0 8 8 20 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 7 5 6 5 7 6 131 0 11 0 5 7 11 5 107 0 6 0 8 1 6 8 109 13 3 12 3 1 2 1 0 1 0 101 0 9 9 21 77 0 10 10 4 97 0 4 4 21 10 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
12 12 0 0 61 59 55 53 51 50 46 44 42 41 39 37 35 33 28 26 12 23 12 22 18 16 0 11 0 10 36 14 7 23 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = adieresis.ss02;
},
{
glyphname = agrave.ss02;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,703,l),
(472,589,l),
(484,657,l),
(293,782,l)
);
},
{
closed = 1;
nodes = (
(452,0,l),
(509,321,ls),
(522,395,o),
(481,501,o),
(388,557,o),
(323,557,qs),
(224,557,o),
(80,447,o),
(52,357,q),
(141,357,l),
(161,414,o),
(247,478,o),
(305,478,qs),
(369,478,o),
(428,396,o),
(417,325,q),
(248,325,ls),
(142,325,o),
(15,228,o),
(2,153,qs),
(-6,106,o),
(28,32,o),
(104,-10,o),
(157,-10,qs),
(223,-10,o),
(344,52,o),
(377,99,q),
(360,0,l)
);
},
{
closed = 1;
nodes = (
(102,201,o),
(173,251,o),
(235,251,qs),
(404,251,l),
(403,242,ls),
(393,188,o),
(326,110,o),
(235,70,o),
(189,70,qs),
(138,70,o),
(88,119,o),
(95,159,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 2 1 0 4 0 74 4 1 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 5 5 21 77 0 6 6 0 97 0 0 0 21 77 0 2 2 4 97 0 4 4 20 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 3 1 2 1 3 2 131 0 7 0 1 3 7 1 107 0 2 0 4 2 4 101 0 5 5 21 77 0 6 6 0 97 0 0 0 21 6 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
36 34 20 34 18 34 37 38 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = agrave.ss02;
},
{
glyphname = amacron.ss02;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(214,641,l),
(566,641,l),
(578,709,l),
(226,709,l)
);
},
{
closed = 1;
nodes = (
(458,0,l),
(515,321,ls),
(528,395,o),
(488,501,o),
(395,557,o),
(330,557,qs),
(231,557,o),
(86,447,o),
(58,357,q),
(147,357,l),
(167,414,o),
(254,478,o),
(312,478,qs),
(376,478,o),
(434,396,o),
(424,325,q),
(255,325,ls),
(149,325,o),
(22,228,o),
(8,153,qs),
(0,106,o),
(34,32,o),
(111,-10,o),
(164,-10,qs),
(230,-10,o),
(351,52,o),
(384,99,q),
(366,0,l)
);
},
{
closed = 1;
nodes = (
(109,201,o),
(180,251,o),
(242,251,qs),
(411,251,l),
(409,242,ls),
(400,188,o),
(333,110,o),
(242,70,o),
(196,70,qs),
(145,70,o),
(94,119,o),
(101,159,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 5 3 4 3 5 4 131 0 9 0 3 5 9 3 107 0 0 10 1 1 0 1 99 0 7 7 21 77 0 8 8 2 97 0 2 2 21 77 0 4 4 6 97 0 6 6 20 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
0 5 3 4 3 5 4 131 0 9 0 3 5 9 3 107 0 4 0 6 0 4 6 109 0 0 10 1 1 0 1 99 0 7 7 21 77 0 8 8 2 97 0 2 2 21 8 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
0 0 41 39 35 33 31 30 26 24 22 21 19 17 15 13 8 6 0 3 0 3 17 11 7 23 
CALL[ ]	/* CallFunction */";
};
width = 599;
}
);
note = amacron.ss02;
},
{
glyphname = aogonek.ss02;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(423,-206,o),
(465,-192,q),
(476,-132,l),
(436,-145,o),
(408,-145,qs),
(381,-145,o),
(354,-120,o),
(358,-97,qs),
(365,-56,o),
(430,-27,qs),
(490,0,l),
(489,2,l),
(546,321,ls),
(559,395,o),
(518,501,o),
(425,557,o),
(360,557,qs),
(261,557,o),
(117,447,o),
(89,357,q),
(178,357,l),
(198,414,o),
(284,478,o),
(342,478,qs),
(406,478,o),
(465,396,o),
(454,325,q),
(285,325,ls),
(179,325,o),
(52,228,o),
(39,153,qs),
(31,106,o),
(65,32,o),
(141,-10,o),
(194,-10,qs),
(260,-10,o),
(381,52,o),
(415,99,q),
(400,16,l),
(294,-35,o),
(281,-106,qs),
(272,-157,o),
(335,-206,o),
(386,-206,qs)
);
},
{
closed = 1;
nodes = (
(139,201,o),
(210,251,o),
(272,251,qs),
(441,251,l),
(440,242,ls),
(430,188,o),
(363,110,o),
(272,70,o),
(226,70,qs),
(175,70,o),
(125,119,o),
(132,159,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
41 40 31 5 4 5 4 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 3 1 2 1 3 2 131 9 1 6 0 5 0 6 5 109 0 8 0 1 3 8 1 107 0 7 7 0 97 0 0 0 21 77 0 2 2 4 97 0 4 4 20 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 1 2 1 3 2 131 9 1 6 0 5 0 6 5 109 0 8 0 1 3 8 1 107 0 2 0 4 2 4 101 0 7 7 0 97 0 0 0 21 7 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
0 0 53 51 47 45 0 43 0 42 42 34 18 34 37 39 10 7 28 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = aogonek.ss02;
},
{
glyphname = aring.ss02;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(367,817,o),
(295,759,o),
(286,712,qs),
(278,665,o),
(330,607,o),
(375,607,qs),
(421,607,o),
(492,664,o),
(500,712,qs),
(509,760,o),
(458,817,o),
(412,817,qs)
);
},
{
closed = 1;
nodes = (
(361,656,o),
(335,688,o),
(340,713,qs),
(344,738,o),
(380,769,o),
(403,769,qs),
(426,769,o),
(452,738,o),
(448,713,qs),
(443,688,o),
(407,656,o),
(384,656,qs)
);
},
{
closed = 1;
nodes = (
(449,0,l),
(505,321,ls),
(519,395,o),
(478,501,o),
(385,557,o),
(320,557,qs),
(221,557,o),
(77,447,o),
(49,357,q),
(138,357,l),
(158,414,o),
(244,478,o),
(302,478,qs),
(366,478,o),
(425,396,o),
(414,325,q),
(245,325,ls),
(139,325,o),
(12,228,o),
(-1,153,qs),
(-9,106,o),
(24,32,o),
(101,-10,o),
(154,-10,qs),
(220,-10,o),
(341,52,o),
(374,99,q),
(357,0,l)
);
},
{
closed = 1;
nodes = (
(99,201,o),
(170,251,o),
(232,251,qs),
(401,251,l),
(400,242,ls),
(390,188,o),
(323,110,o),
(232,70,o),
(186,70,qs),
(135,70,o),
(85,119,o),
(92,159,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
24 1 1 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 59 values pushed */
0 7 5 6 5 7 6 131 0 11 0 5 7 11 5 107 0 0 13 1 3 2 0 3 109 0 2 12 1 1 2 1 101 0 9 9 21 77 0 10 10 4 97 0 4 4 21 77 0 6 6 8 97 0 8 8 20 8 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 57 values pushed */
0 7 5 6 5 7 6 131 0 11 0 5 7 11 5 107 0 6 0 8 0 6 8 109 0 0 13 1 3 2 0 3 109 0 2 12 1 1 2 1 101 0 9 9 21 77 0 10 10 4 97 0 4 4 21 10 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
12 12 0 0 61 59 55 53 51 50 46 44 42 41 39 37 35 33 28 26 12 23 12 22 18 16 0 11 0 10 36 14 7 23 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = aring.ss02;
},
{
glyphname = atilde.ss02;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(297,629,o),
(324,651,o),
(341,651,qs),
(354,651,o),
(371,641,o),
(385,631,qs),
(401,618,o),
(428,605,o),
(447,605,qs),
(487,605,o),
(550,659,o),
(565,709,q),
(513,709,l),
(506,688,o),
(479,666,o),
(462,666,qs),
(449,666,o),
(428,677,o),
(416,687,qs),
(399,699,o),
(375,712,o),
(356,712,qs),
(316,712,o),
(253,658,o),
(237,607,q),
(290,607,l)
);
},
{
closed = 1;
nodes = (
(458,0,l),
(515,321,ls),
(528,395,o),
(487,501,o),
(394,557,o),
(329,557,qs),
(230,557,o),
(86,447,o),
(58,357,q),
(147,357,l),
(167,414,o),
(253,478,o),
(311,478,qs),
(375,478,o),
(434,396,o),
(423,325,q),
(254,325,ls),
(148,325,o),
(21,228,o),
(8,153,qs),
(0,106,o),
(34,32,o),
(110,-10,o),
(163,-10,qs),
(229,-10,o),
(350,52,o),
(384,99,q),
(366,0,l)
);
},
{
closed = 1;
nodes = (
(109,201,o),
(179,251,o),
(241,251,qs),
(410,251,l),
(409,242,ls),
(399,188,o),
(333,110,o),
(241,70,o),
(195,70,qs),
(144,70,o),
(94,119,o),
(101,159,qs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
26 1 0 73 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 9 7 8 7 9 8 131 0 13 0 7 9 13 7 107 14 5 2 3 0 1 0 3 1 109 0 4 2 1 0 4 0 101 0 11 11 21 77 0 12 12 6 97 0 6 6 21 77 0 8 8 10 97 0 10 10 20 10 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
0 9 7 8 7 9 8 131 0 2 1 0 1 2 0 131 0 13 0 7 9 13 7 107 14 5 2 3 0 1 2 3 1 109 0 4 0 0 4 0 101 0 11 11 21 77 0 12 12 6 97 0 6 6 21 77 0 8 8 10 97 0 10 10 20 10 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 60 values pushed */
0 9 7 8 7 9 8 131 0 13 0 7 9 13 7 107 14 5 2 3 0 1 0 3 1 109 0 4 2 1 0 4 0 101 0 11 11 21 77 0 12 12 6 97 0 6 6 21 77 0 8 8 10 97 0 10 10 20 10 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 58 values pushed */
0 9 7 8 7 9 8 131 0 13 0 7 9 13 7 107 0 8 0 10 3 8 10 109 14 5 2 3 0 1 0 3 1 109 0 4 2 1 0 4 0 101 0 11 11 21 77 0 12 12 6 97 0 6 6 21 12 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
0 0 63 61 57 55 53 52 48 46 44 43 41 39 37 35 30 28 0 25 0 25 36 34 18 36 34 15 7 27 
CALL[ ]	/* CallFunction */";
};
width = 598;
}
);
note = atilde.ss02;
},
{
glyphname = ampersand.ss03;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(187,531,o),
(208,460,o),
(236,415,qs),
(244,404,l),
(236,404,ls),
(184,404,o),
(87,353,o),
(19,261,o),
(9,201,qs),
(-2,140,o),
(37,45,o),
(123,-8,o),
(179,-8,qs),
(251,-8,o),
(375,78,o),
(401,144,q),
(492,0,l),
(601,0,l),
(311,469,ls),
(292,499,o),
(280,544,o),
(285,570,qs),
(291,606,o),
(348,656,o),
(388,656,qs),
(430,656,o),
(471,605,o),
(464,564,qs),
(460,543,o),
(451,528,q),
(541,528,l),
(552,551,o),
(556,573,qs),
(563,614,o),
(534,688,o),
(459,733,o),
(401,733,qs),
(345,733,o),
(256,687,o),
(201,613,o),
(194,571,qs)
);
},
{
closed = 1;
nodes = (
(100,260,o),
(183,332,o),
(235,332,qs),
(269,332,o),
(321,297,o),
(347,235,o),
(340,198,qs),
(330,143,o),
(245,68,o),
(193,68,qs),
(140,68,o),
(79,144,o),
(90,202,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
24 1 0 73 0 1 5 2 5 1 2 131 0 7 0 5 1 7 5 109 0 2 0 0 2 0 101 0 3 3 21 77 0 6 6 4 97 0 4 4 21 6 78 37 39 22 35 22 36 21 34 8 7 30 
CALL[ ]	/* CallFunction */";
};
width = 674;
}
);
note = ampersand.ss03;
},
{
glyphname = two.ss04;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(-7,0,l),
(474,0,l),
(487,76,l),
(139,76,l),
(309,216,ls),
(429,315,o),
(535,451,o),
(547,519,qs),
(563,612,o),
(462,725,o),
(357,725,qs),
(291,725,o),
(177,671,o),
(96,563,o),
(82,486,q),
(170,486,l),
(185,560,o),
(274,647,o),
(342,647,qs),
(409,647,o),
(465,578,o),
(455,519,qs),
(445,464,o),
(355,354,o),
(249,267,qs),
(5,65,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
25 1 2 73 0 1 3 0 3 1 0 131 0 0 0 2 0 2 101 0 3 3 4 95 0 4 4 21 3 78 17 22 35 18 37 5 7 27 
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = two.ss04;
},
{
glyphname = three.ss04;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(348,-5,o),
(500,117,o),
(519,221,qs),
(537,326,o),
(435,442,o),
(325,444,q),
(562,654,l),
(574,724,l),
(158,724,l),
(145,648,l),
(452,648,l),
(215,437,l),
(203,372,l),
(305,372,ls),
(374,372,o),
(440,292,o),
(428,221,qs),
(415,151,o),
(319,71,o),
(249,71,qs),
(180,71,o),
(113,147,o),
(117,208,q),
(26,208,l),
(16,106,o),
(131,-5,o),
(234,-5,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
19 14 2 4 73 0 0 1 2 1 0 2 131 0 2 0 5 3 2 5 109 0 3 0 4 3 4 99 0 1 1 6 97 7 1 6 6 21 1 78 0 0 0 26 0 25 18 17 18 36 34 18 8 7 28 
CALL[ ]	/* CallFunction */";
};
width = 601;
}
);
note = three.ss04;
},
{
glyphname = six.ss04;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(541,303,o),
(501,410,o),
(406,469,o),
(337,469,qs),
(290,469,o),
(248,454,q),
(483,723,l),
(384,723,l),
(152,454,ls),
(55,342,o),
(37,236,qs),
(24,167,o),
(67,55,o),
(168,-9,o),
(241,-9,qs),
(312,-9,o),
(436,54,o),
(517,164,o),
(529,234,qs)
);
},
{
closed = 1;
nodes = (
(389,401,o),
(460,310,o),
(446,234,qs),
(433,158,o),
(330,67,o),
(255,67,qs),
(180,67,o),
(106,159,o),
(119,235,qs),
(133,310,o),
(239,401,o),
(314,401,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
12 1 1 73 0 1 2 1 137 5 1 4 0 2 1 4 2 109 0 3 3 0 97 0 0 0 21 3 78 19 19 19 30 19 29 40 34 22 34 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = six.ss04;
},
{
glyphname = nine.ss04;
lastChange = "2022-10-20 15:44:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(51,413,o),
(91,306,o),
(188,246,o),
(259,246,qs),
(303,246,o),
(344,260,q),
(109,-4,l),
(210,-4,l),
(441,262,ls),
(491,319,o),
(547,426,o),
(557,483,qs),
(570,552,o),
(527,664,o),
(427,728,o),
(354,728,qs),
(282,728,o),
(158,665,o),
(76,554,o),
(63,483,qs)
);
},
{
closed = 1;
nodes = (
(415,652,o),
(487,560,o),
(473,482,qs),
(460,405,o),
(355,313,o),
(280,313,qs),
(205,313,o),
(133,405,o),
(146,483,qs),
(160,560,o),
(265,652,o),
(340,652,qs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
13 1 0 73 0 2 0 3 4 2 3 109 5 1 4 0 0 4 0 101 0 1 1 21 1 78 20 20 20 31 20 30 40 34 23 34 6 7 26 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = nine.ss04;
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
isItalic = 1;
linkStyle = "Amoeba Sans - SemiBold";
name = "SemiBold Italic";
properties = (
{
key = postscriptFullName;
value = "Amoeba Sans-SemiBold Italic";
},
{
key = postscriptFontName;
value = "AmoebaSans-SemiBoldItalic";
}
);
weightClass = 600;
}
);
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2020 The Poppins Project Authors (https://github.com/itfoundry/Poppins)";
}
);
},
{
key = manufacturers;
values = (
{
language = ENG;
value = "Indian Type Foundry & Digital Amoeba";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Ninad Kale (Devanagari), Jonny Pinhorn (Latin), M Vidiantara Saputra";
}
);
},
{
key = licenseURL;
value = "http://scripts.sil.org/OFL";
},
{
key = sampleTexts;
values = (
{
language = ENG;
value = ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789;
}
);
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: http://scripts.sil.org/OFL";
}
);
},
{
key = manufacturerURL;
value = "https://indiantypefoundry.com";
},
{
key = postscriptFontName;
value = "Amoeba Sans-SemiBold Italic";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 3;
versionMinor = 200;
}
